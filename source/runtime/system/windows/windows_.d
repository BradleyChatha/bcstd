module runtime.system.windows.windows_;

import runtime.system.windows._bitfields;

version(Windows):
extern (Windows) @nogc nothrow:

enum
{
    PAGE_EXECUTE = 0x10,
    PAGE_EXECUTE_READ = 0x20,
    PAGE_EXECUTE_READWRITE = 0x40,
    PAGE_EXECUTE_WRITECOPY = 0x80,
    PAGE_NOACCESS = 0x1,
    PAGE_READONLY = 0x2,
    PAGE_READWRITE = 0x4,
    PAGE_WRITECOPY = 0x8,
    PAGE_TARGETS_INVALID = 0x40000000,
    PAGE_TARGETS_NO_UPDATE = 0x40000000,
    PAGE_GUARD = 0x100,
    PAGE_NOCACHE = 0x200,
    PAGE_WRITECOMBINE = 0x400,
    MEM_COMMIT = 0x00001000,
    MEM_RESERVE = 0x00002000,
    MEM_RESET = 0x00080000,
    MEM_RESET_UNDO = 0x1000000,
    MEM_LARGE_PAGES = 0x20000000,
    MEM_PHYSICAL = 0x00400000,
    MEM_TOP_DOWN = 0x00100000,
    MEM_WRITE_WATCH = 0x00200000,
    MEM_DECOMMIT = 0x00004000,
    MEM_RELEASE = 0x00008000,
    MEM_COALESCE_PLACEHOLDERS = 0x00000001,
    MEM_PRESERVE_PLACEHOLDER = 0x00000002,
}

alias va_list = char*;

const(char)* __mingw_get_crt_info ();

alias size_t = ulong;

alias ssize_t = long;

alias rsize_t = ulong;

alias intptr_t = long;

alias uintptr_t = ulong;

alias ptrdiff_t = long;

alias wchar_t = ushort;

alias wint_t = ushort;
alias wctype_t = ushort;

alias errno_t = int;

alias __time32_t = c_long;

alias __time64_t = long;

alias time_t = long;

struct threadmbcinfostruct;
alias pthreadlocinfo = threadlocaleinfostruct*;
alias pthreadmbcinfo = threadmbcinfostruct*;
struct __lc_time_data;

struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
}

alias _locale_tstruct = localeinfo_struct;
alias _locale_t = localeinfo_struct*;

struct tagLC_ID
{
    ushort wLanguage;
    ushort wCountry;
    ushort wCodePage;
}

alias LC_ID = tagLC_ID;
alias LPLC_ID = tagLC_ID*;

struct threadlocaleinfostruct
{
    int refcount;
    uint lc_codepage;
    uint lc_collate_cp;
    c_ulong[6] lc_handle;
    LC_ID[6] lc_id;

    struct _Anonymous_0
    {
        char* locale;
        wchar* wlocale;
        int* refcount;
        int* wrefcount;
    }

    _Anonymous_0[6] lc_category;
    int lc_clike;
    int mb_cur_max;
    int* lconv_intl_refcount;
    int* lconv_num_refcount;
    int* lconv_mon_refcount;
    
    void* lconv;
    int* ctype1_refcount;
    ushort* ctype1;
    const(ushort)* pctype;
    const(ubyte)* pclmap;
    const(ubyte)* pcumap;
    __lc_time_data* lc_time_curr;
}

alias threadlocinfo = threadlocaleinfostruct;

c_ulong _exception_code ();
void* _exception_info ();
int _abnormal_termination ();

alias _PHNDLR = void function (int);

struct _XCPT_ACTION
{
    c_ulong XcptNum;
    int SigNum;
    _PHNDLR XcptAction;
}

extern __gshared _XCPT_ACTION[] _XcptActTab;
extern __gshared int _XcptActTabCount;
extern __gshared int _XcptActTabSize;
extern __gshared int _First_FPE_Indx;
extern __gshared int _Num_FPE;

int __CppXcptFilter (c_ulong _ExceptionNum, _EXCEPTION_POINTERS* _ExceptionPtr);
int _XcptFilter (c_ulong _ExceptionNum, _EXCEPTION_POINTERS* _ExceptionPtr);

alias PEXCEPTION_HANDLER = int function (_EXCEPTION_RECORD*, void*, _CONTEXT*, void*);

alias ULONG = c_ulong;
alias PULONG = c_ulong*;
alias USHORT = ushort;
alias PUSHORT = ushort*;
alias UCHAR = ubyte;
alias PUCHAR = ubyte*;
alias PSZ = char*;

alias WINBOOL = int;

alias BOOL = int;

alias PBOOL = int*;
alias LPBOOL = int*;

alias BYTE = ubyte;
alias WORD = ushort;
alias DWORD = c_ulong;
alias FLOAT = float;
alias PFLOAT = float*;
alias PBYTE = ubyte*;
alias LPBYTE = ubyte*;
alias PINT = int*;
alias LPINT = int*;
alias PWORD = ushort*;
alias LPWORD = ushort*;
alias LPLONG = c_long*;
alias PDWORD = c_ulong*;
alias LPDWORD = c_ulong*;
alias LPVOID = void*;

alias LPCVOID = const(void)*;

alias INT = int;
alias UINT = uint;
alias PUINT = uint*;

extern __gshared ushort** __imp__pctype;

extern __gshared ushort** __imp__wctype;

extern __gshared ushort** __imp__pwctype;

extern __gshared const(ubyte)[] __newclmap;
extern __gshared const(ubyte)[] __newcumap;
extern __gshared pthreadlocinfo __ptlocinfo;
extern __gshared pthreadmbcinfo __ptmbcinfo;
extern __gshared int __globallocalestatus;
extern __gshared int __locale_changed;
extern __gshared threadlocaleinfostruct __initiallocinfo;
extern __gshared _locale_tstruct __initiallocalestructinfo;
pthreadlocinfo __updatetlocinfo ();
pthreadmbcinfo __updatetmbcinfo ();

int _isctype (int _C, int _Type);
int _isctype_l (int _C, int _Type, _locale_t _Locale);
int isalpha (int _C);
int _isalpha_l (int _C, _locale_t _Locale);
int isupper (int _C);
int _isupper_l (int _C, _locale_t _Locale);
int islower (int _C);
int _islower_l (int _C, _locale_t _Locale);
int isdigit (int _C);
int _isdigit_l (int _C, _locale_t _Locale);
int isxdigit (int _C);
int _isxdigit_l (int _C, _locale_t _Locale);
int isspace (int _C);
int _isspace_l (int _C, _locale_t _Locale);
int ispunct (int _C);
int _ispunct_l (int _C, _locale_t _Locale);
int isalnum (int _C);
int _isalnum_l (int _C, _locale_t _Locale);
int isprint (int _C);
int _isprint_l (int _C, _locale_t _Locale);
int isgraph (int _C);
int _isgraph_l (int _C, _locale_t _Locale);
int iscntrl (int _C);
int _iscntrl_l (int _C, _locale_t _Locale);
int toupper (int _C);
int tolower (int _C);
int _tolower (int _C);
int _tolower_l (int _C, _locale_t _Locale);
int _toupper (int _C);
int _toupper_l (int _C, _locale_t _Locale);
int __isascii (int _C);
int __toascii (int _C);
int __iscsymf (int _C);
int __iscsym (int _C);

int isblank (int _C);

int iswalpha (wint_t _C);
int _iswalpha_l (wint_t _C, _locale_t _Locale);
int iswupper (wint_t _C);
int _iswupper_l (wint_t _C, _locale_t _Locale);
int iswlower (wint_t _C);
int _iswlower_l (wint_t _C, _locale_t _Locale);
int iswdigit (wint_t _C);
int _iswdigit_l (wint_t _C, _locale_t _Locale);
int iswxdigit (wint_t _C);
int _iswxdigit_l (wint_t _C, _locale_t _Locale);
int iswspace (wint_t _C);
int _iswspace_l (wint_t _C, _locale_t _Locale);
int iswpunct (wint_t _C);
int _iswpunct_l (wint_t _C, _locale_t _Locale);
int iswalnum (wint_t _C);
int _iswalnum_l (wint_t _C, _locale_t _Locale);
int iswprint (wint_t _C);
int _iswprint_l (wint_t _C, _locale_t _Locale);
int iswgraph (wint_t _C);
int _iswgraph_l (wint_t _C, _locale_t _Locale);
int iswcntrl (wint_t _C);
int _iswcntrl_l (wint_t _C, _locale_t _Locale);
int iswascii (wint_t _C);
int isleadbyte (int _C);
int _isleadbyte_l (int _C, _locale_t _Locale);
wint_t towupper (wint_t _C);
wint_t _towupper_l (wint_t _C, _locale_t _Locale);
wint_t towlower (wint_t _C);
wint_t _towlower_l (wint_t _C, _locale_t _Locale);
int iswctype (wint_t _C, wctype_t _Type);
int _iswctype_l (wint_t _C, wctype_t _Type, _locale_t _Locale);
int __iswcsymf (wint_t _C);
int _iswcsymf_l (wint_t _C, _locale_t _Locale);
int __iswcsym (wint_t _C);
int _iswcsym_l (wint_t _C, _locale_t _Locale);
int is_wctype (wint_t _C, wctype_t _Type);

int iswblank (wint_t _C);

extern __gshared int* __imp___mb_cur_max;

int ___mb_cur_max_func ();

alias POINTER_64_INT = ulong;

alias INT8 = byte;
alias PINT8 = byte*;
alias INT16 = short;
alias PINT16 = short*;
alias INT32 = int;
alias PINT32 = int*;
alias INT64 = long;
alias PINT64 = long*;
alias UINT8 = ubyte;
alias PUINT8 = ubyte*;
alias UINT16 = ushort;
alias PUINT16 = ushort*;
alias UINT32 = uint;
alias PUINT32 = uint*;
alias UINT64 = ulong;
alias PUINT64 = ulong*;
alias LONG32 = int;
alias PLONG32 = int*;
alias ULONG32 = uint;
alias PULONG32 = uint*;
alias DWORD32 = uint;
alias PDWORD32 = uint*;

alias INT_PTR = long;
alias PINT_PTR = long*;
alias UINT_PTR = ulong;
alias PUINT_PTR = ulong*;
alias LONG_PTR = long;
alias PLONG_PTR = long*;
alias ULONG_PTR = ulong;
alias PULONG_PTR = ulong*;

alias SHANDLE_PTR = long;
alias HANDLE_PTR = ulong;
alias UHALF_PTR = uint;
alias PUHALF_PTR = uint*;
alias HALF_PTR = int;
alias PHALF_PTR = int*;

c_ulong HandleToULong (const(void)* h);
c_long HandleToLong (const(void)* h);
void* ULongToHandle (const c_ulong h);
void* LongToHandle (const c_long h);
c_ulong PtrToUlong (const(void)* p);
uint PtrToUint (const(void)* p);
ushort PtrToUshort (const(void)* p);
c_long PtrToLong (const(void)* p);
int PtrToInt (const(void)* p);
short PtrToShort (const(void)* p);
void* IntToPtr (const int i);
void* UIntToPtr (const uint ui);
void* LongToPtr (const c_long l);
void* ULongToPtr (const c_ulong ul);

void* Ptr32ToPtr (const(void)* p);
void* Handle32ToHandle (const(void)* h);
void* PtrToPtr32 (const(void)* p);

alias SIZE_T = ulong;
alias PSIZE_T = ulong*;
alias SSIZE_T = long;
alias PSSIZE_T = long*;

alias DWORD_PTR = ulong;
alias PDWORD_PTR = ulong*;
alias LONG64 = long;
alias PLONG64 = long*;
alias ULONG64 = ulong;
alias PULONG64 = ulong*;
alias DWORD64 = ulong;
alias PDWORD64 = ulong*;
alias KAFFINITY = ulong;
alias PKAFFINITY = ulong*;

alias PVOID = void*;
alias PVOID64 = void*;

alias CHAR = char;
alias SHORT = short;
alias LONG = c_long;

alias WCHAR = ushort;

alias PWCHAR = ushort*;
alias LPWCH = ushort*;
alias PWCH = ushort*;
alias LPCWCH = const(ushort)*;
alias PCWCH = const(ushort)*;
alias NWPSTR = ushort*;
alias LPWSTR = ushort*;
alias PWSTR = ushort*;
alias PZPWSTR = ushort**;
alias PCZPWSTR = ushort**;
alias LPUWSTR = ushort*;
alias PUWSTR = ushort*;
alias LPCWSTR = const(ushort)*;
alias PCWSTR = const(ushort)*;
alias PZPCWSTR = const(ushort*)*;
alias LPCUWSTR = const(ushort)*;
alias PCUWSTR = const(ushort)*;
alias PZZWSTR = ushort*;
alias PCZZWSTR = const(ushort)*;
alias PUZZWSTR = ushort*;
alias PCUZZWSTR = const(ushort)*;
alias PNZWCH = ushort*;
alias PCNZWCH = const(ushort)*;
alias PUNZWCH = ushort*;
alias PCUNZWCH = const(ushort)*;

alias PCHAR = char*;
alias LPCH = char*;
alias PCH = char*;
alias LPCCH = const(char)*;
alias PCCH = const(char)*;
alias NPSTR = char*;
alias LPSTR = char*;
alias PSTR = char*;
alias PZPSTR = char**;
alias PCZPSTR = char**;
alias LPCSTR = const(char)*;
alias PCSTR = const(char)*;
alias PZPCSTR = const(char*)*;
alias PZZSTR = char*;
alias PCZZSTR = const(char)*;
alias PNZCH = char*;
alias PCNZCH = const(char)*;

alias TCHAR = char;
alias PTCHAR = char*;
alias TBYTE = ubyte;
alias PTBYTE = ubyte*;

alias LPTCH = char*;
alias PTCH = char*;
alias LPCTCH = const(char)*;
alias PCTCH = const(char)*;
alias PTSTR = char*;
alias LPTSTR = char*;
alias PUTSTR = char*;
alias LPUTSTR = char*;
alias PCTSTR = const(char)*;
alias LPCTSTR = const(char)*;
alias PCUTSTR = const(char)*;
alias LPCUTSTR = const(char)*;
alias PZZTSTR = char*;
alias PUZZTSTR = char*;
alias PCZZTSTR = const(char)*;
alias PCUZZTSTR = const(char)*;
alias PZPTSTR = char**;
alias PNZTCH = char*;
alias PUNZTCH = char*;
alias PCNZTCH = const(char)*;
alias PCUNZTCH = const(char)*;

alias PSHORT = short*;
alias PLONG = c_long*;

struct _GROUP_AFFINITY
{
    KAFFINITY Mask;
    WORD Group;
    WORD[3] Reserved;
}

alias GROUP_AFFINITY = _GROUP_AFFINITY;
alias PGROUP_AFFINITY = _GROUP_AFFINITY*;

alias HANDLE = void*;

alias PHANDLE = void**;
alias FCHAR = ubyte;
alias FSHORT = ushort;
alias FLONG = c_ulong;

alias HRESULT = c_long;

alias CCHAR = char;

alias LCID = c_ulong;

alias PLCID = c_ulong*;

alias LANGID = ushort;

enum COMPARTMENT_ID
{
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1
}

alias PCOMPARTMENT_ID = COMPARTMENT_ID*;

struct _FLOAT128
{
    long LowPart;
    long HighPart;
}

alias FLOAT128 = _FLOAT128;

alias PFLOAT128 = _FLOAT128*;

alias LONGLONG = long;
alias ULONGLONG = ulong;

alias PLONGLONG = long*;
alias PULONGLONG = ulong*;
alias USN = long;

union _LARGE_INTEGER
{
    struct
    {
        DWORD LowPart;
        LONG HighPart;
    }

    struct _Anonymous_1
    {
        DWORD LowPart;
        LONG HighPart;
    }

    _Anonymous_1 u;

    LONGLONG QuadPart;
}

alias LARGE_INTEGER = _LARGE_INTEGER;

alias PLARGE_INTEGER = _LARGE_INTEGER*;

union _ULARGE_INTEGER
{
    struct
    {
        DWORD LowPart;
        DWORD HighPart;
    }

    struct _Anonymous_2
    {
        DWORD LowPart;
        DWORD HighPart;
    }

    _Anonymous_2 u;

    ULONGLONG QuadPart;
}

alias ULARGE_INTEGER = _ULARGE_INTEGER;

alias PULARGE_INTEGER = _ULARGE_INTEGER*;

struct _LUID
{
    DWORD LowPart;
    LONG HighPart;
}

alias LUID = _LUID;
alias PLUID = _LUID*;

alias DWORDLONG = ulong;
alias PDWORDLONG = ulong*;

ubyte _rotl8 (ubyte Value, ubyte Shift);
ushort _rotl16 (ushort Value, ubyte Shift);
ubyte _rotr8 (ubyte Value, ubyte Shift);
ushort _rotr16 (ushort Value, ubyte Shift);

uint _rotl (uint Value, int Shift);
uint _rotr (uint Value, int Shift);

ulong _rotl64 (ulong Value, int Shift);
ulong _rotr64 (ulong Value, int Shift);

alias BOOLEAN = ubyte;

alias PBOOLEAN = ubyte*;

struct _LIST_ENTRY
{
    _LIST_ENTRY* Flink;
    _LIST_ENTRY* Blink;
}

alias LIST_ENTRY = _LIST_ENTRY;
alias PLIST_ENTRY = _LIST_ENTRY*;
alias PRLIST_ENTRY = _LIST_ENTRY*;

struct _SINGLE_LIST_ENTRY
{
    _SINGLE_LIST_ENTRY* Next;
}

alias SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY;
alias PSINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY*;

struct LIST_ENTRY32
{
    DWORD Flink;
    DWORD Blink;
}

alias PLIST_ENTRY32 = LIST_ENTRY32*;

struct LIST_ENTRY64
{
    ULONGLONG Flink;
    ULONGLONG Blink;
}

alias PLIST_ENTRY64 = LIST_ENTRY64*;

struct _GUID
{
    c_ulong Data1;
    ushort Data2;
    ushort Data3;
    ubyte[8] Data4;
}

alias GUID = _GUID;

alias LPGUID = _GUID*;

alias LPCGUID = const(_GUID)*;

alias IID = _GUID;
alias LPIID = _GUID*;

alias CLSID = _GUID;

alias LPCLSID = _GUID*;

alias FMTID = _GUID;
alias LPFMTID = _GUID*;

void* _memccpy (void* _Dst, const(void)* _Src, int _Val, size_t _MaxCount);
void* memchr (const(void)* _Buf, int _Val, size_t _MaxCount);
int _memicmp (const(void)* _Buf1, const(void)* _Buf2, size_t _Size);
int _memicmp_l (const(void)* _Buf1, const(void)* _Buf2, size_t _Size, _locale_t _Locale);
int memcmp (const(void)* _Buf1, const(void)* _Buf2, size_t _Size);
void* memcpy (void* _Dst, const(void)* _Src, size_t _Size);
errno_t memcpy_s (void* _dest, size_t _numberOfElements, const(void)* _src, size_t _count);
void* mempcpy (void* _Dst, const(void)* _Src, size_t _Size);
void* memset (void* _Dst, int _Val, size_t _Size);

void* memccpy (void* _Dst, const(void)* _Src, int _Val, size_t _Size);
int memicmp (const(void)* _Buf1, const(void)* _Buf2, size_t _Size);

char* _strset (char* _Str, int _Val);
char* _strset_l (char* _Str, int _Val, _locale_t _Locale);
char* strcpy (char* _Dest, const(char)* _Source);
char* strcat (char* _Dest, const(char)* _Source);
int strcmp (const(char)* _Str1, const(char)* _Str2);
ulong strlen (const(char)* _Str);
size_t strnlen (const(char)* _Str, size_t _MaxCount);
void* memmove (void* _Dst, const(void)* _Src, size_t _Size);
char* _strdup (const(char)* _Src);
char* strchr (const(char)* _Str, int _Val);
int _stricmp (const(char)* _Str1, const(char)* _Str2);
int _strcmpi (const(char)* _Str1, const(char)* _Str2);
int _stricmp_l (const(char)* _Str1, const(char)* _Str2, _locale_t _Locale);
int strcoll (const(char)* _Str1, const(char)* _Str2);
int _strcoll_l (const(char)* _Str1, const(char)* _Str2, _locale_t _Locale);
int _stricoll (const(char)* _Str1, const(char)* _Str2);
int _stricoll_l (const(char)* _Str1, const(char)* _Str2, _locale_t _Locale);
int _strncoll (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strncoll_l (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount, _locale_t _Locale);
int _strnicoll (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strnicoll_l (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount, _locale_t _Locale);
ulong strcspn (const(char)* _Str, const(char)* _Control);
char* _strerror (const(char)* _ErrMsg);
char* strerror (int);
char* _strlwr (char* _String);
char* strlwr_l (char* _String, _locale_t _Locale);
char* strncat (char* _Dest, const(char)* _Source, size_t _Count);
int strncmp (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strnicmp (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strnicmp_l (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount, _locale_t _Locale);
char* strncpy (char* _Dest, const(char)* _Source, size_t _Count);
char* _strnset (char* _Str, int _Val, size_t _MaxCount);
char* _strnset_l (char* str, int c, size_t count, _locale_t _Locale);
char* strpbrk (const(char)* _Str, const(char)* _Control);
char* strrchr (const(char)* _Str, int _Ch);
char* _strrev (char* _Str);
ulong strspn (const(char)* _Str, const(char)* _Control);
char* strstr (const(char)* _Str, const(char)* _SubStr);
char* strtok (char* _Str, const(char)* _Delim);

char* strtok_r (char* _Str, const(char)* _Delim, char** __last);

char* _strupr (char* _String);
char* _strupr_l (char* _String, _locale_t _Locale);
ulong strxfrm (char* _Dst, const(char)* _Src, size_t _MaxCount);
size_t _strxfrm_l (char* _Dst, const(char)* _Src, size_t _MaxCount, _locale_t _Locale);

char* strdup (const(char)* _Src);
int strcmpi (const(char)* _Str1, const(char)* _Str2);
int stricmp (const(char)* _Str1, const(char)* _Str2);
char* strlwr (char* _Str);
int strnicmp (const(char)* _Str1, const(char)* _Str, size_t _MaxCount);
int strncasecmp (const(char)*, const(char)*, size_t);
int strcasecmp (const(char)*, const(char)*);

char* strnset (char* _Str, int _Val, size_t _MaxCount);
char* strrev (char* _Str);
char* strset (char* _Str, int _Val);
char* strupr (char* _Str);

wchar* _wcsdup (const(wchar)* _Str);
wchar* wcscat (wchar* _Dest, const(wchar)* _Source);
ushort* wcschr (const(wchar)* _Str, wchar _Ch);
int wcscmp (const(wchar)* _Str1, const(wchar)* _Str2);
wchar* wcscpy (wchar* _Dest, const(wchar)* _Source);
size_t wcscspn (const(wchar)* _Str, const(wchar)* _Control);
ulong wcslen (const(wchar)* _Str);
size_t wcsnlen (const(wchar)* _Src, size_t _MaxCount);
wchar* wcsncat (wchar* _Dest, const(wchar)* _Source, size_t _Count);
int wcsncmp (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
wchar* wcsncpy (wchar* _Dest, const(wchar)* _Source, size_t _Count);
wchar* _wcsncpy_l (wchar* _Dest, const(wchar)* _Source, size_t _Count, _locale_t _Locale);
wchar* wcspbrk (const(wchar)* _Str, const(wchar)* _Control);
wchar* wcsrchr (const(wchar)* _Str, wchar _Ch);
size_t wcsspn (const(wchar)* _Str, const(wchar)* _Control);
wchar* wcsstr (const(wchar)* _Str, const(wchar)* _SubStr);
wchar* wcstok (wchar* _Str, const(wchar)* _Delim);
wchar* _wcserror (int _ErrNum);
wchar* __wcserror (const(wchar)* _Str);
int _wcsicmp (const(wchar)* _Str1, const(wchar)* _Str2);
int _wcsicmp_l (const(wchar)* _Str1, const(wchar)* _Str2, _locale_t _Locale);
int _wcsnicmp (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
int _wcsnicmp_l (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount, _locale_t _Locale);
wchar* _wcsnset (wchar* _Str, wchar _Val, size_t _MaxCount);
wchar* _wcsrev (wchar* _Str);
wchar* _wcsset (wchar* _Str, wchar _Val);
wchar* _wcslwr (wchar* _String);
wchar* _wcslwr_l (wchar* _String, _locale_t _Locale);
wchar* _wcsupr (wchar* _String);
wchar* _wcsupr_l (wchar* _String, _locale_t _Locale);
size_t wcsxfrm (wchar* _Dst, const(wchar)* _Src, size_t _MaxCount);
size_t _wcsxfrm_l (wchar* _Dst, const(wchar)* _Src, size_t _MaxCount, _locale_t _Locale);
int wcscoll (const(wchar)* _Str1, const(wchar)* _Str2);
int _wcscoll_l (const(wchar)* _Str1, const(wchar)* _Str2, _locale_t _Locale);
int _wcsicoll (const(wchar)* _Str1, const(wchar)* _Str2);
int _wcsicoll_l (const(wchar)* _Str1, const(wchar)* _Str2, _locale_t _Locale);
int _wcsncoll (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
int _wcsncoll_l (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount, _locale_t _Locale);
int _wcsnicoll (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
int _wcsnicoll_l (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount, _locale_t _Locale);

wchar* wcsdup (const(wchar)* _Str);

int wcsicmp (const(wchar)* _Str1, const(wchar)* _Str2);
int wcsnicmp (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
wchar* wcsnset (wchar* _Str, wchar _Val, size_t _MaxCount);
wchar* wcsrev (wchar* _Str);
wchar* wcsset (wchar* _Str, wchar _Val);
wchar* wcslwr (wchar* _Str);
wchar* wcsupr (wchar* _Str);
int wcsicoll (const(wchar)* _Str1, const(wchar)* _Str2);

errno_t _strset_s (char* _Dst, size_t _DstSize, int _Value);
errno_t _strerror_s (char* _Buf, size_t _SizeInBytes, const(char)* _ErrMsg);
errno_t strerror_s (char* _Buf, size_t _SizeInBytes, int _ErrNum);
errno_t _strlwr_s (char* _Str, size_t _Size);
errno_t _strlwr_s_l (char* _Str, size_t _Size, _locale_t _Locale);
errno_t _strnset_s (char* _Str, size_t _Size, int _Val, size_t _MaxCount);
errno_t _strupr_s (char* _Str, size_t _Size);
errno_t _strupr_s_l (char* _Str, size_t _Size, _locale_t _Locale);

errno_t strncat_s (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount);
errno_t _strncat_s_l (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount, _locale_t _Locale);
errno_t strcpy_s (char* _Dst, rsize_t _SizeInBytes, const(char)* _Src);

errno_t strncpy_s (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount);

errno_t _strncpy_s_l (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount, _locale_t _Locale);

char* strtok_s (char* _Str, const(char)* _Delim, char** _Context);
char* _strtok_s_l (char* _Str, const(char)* _Delim, char** _Context, _locale_t _Locale);
errno_t strcat_s (char* _Dst, rsize_t _SizeInBytes, const(char)* _Src);

errno_t memmove_s (void* _dest, size_t _numberOfElements, const(void)* _src, size_t _count);

wchar* wcstok_s (wchar* _Str, const(wchar)* _Delim, wchar** _Context);
errno_t _wcserror_s (wchar* _Buf, size_t _SizeInWords, int _ErrNum);
errno_t __wcserror_s (wchar* _Buffer, size_t _SizeInWords, const(wchar)* _ErrMsg);
errno_t _wcsnset_s (wchar* _Dst, size_t _DstSizeInWords, wchar _Val, size_t _MaxCount);
errno_t _wcsset_s (wchar* _Str, size_t _SizeInWords, wchar _Val);
errno_t _wcslwr_s (wchar* _Str, size_t _SizeInWords);
errno_t _wcslwr_s_l (wchar* _Str, size_t _SizeInWords, _locale_t _Locale);
errno_t _wcsupr_s (wchar* _Str, size_t _Size);
errno_t _wcsupr_s_l (wchar* _Str, size_t _Size, _locale_t _Locale);

errno_t wcscpy_s (wchar* _Dst, rsize_t _SizeInWords, const(wchar)* _Src);

errno_t wcscat_s (wchar* _Dst, rsize_t _SizeInWords, const(wchar)* _Src);

errno_t wcsncat_s (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount);
errno_t _wcsncat_s_l (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount, _locale_t _Locale);
errno_t wcsncpy_s (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount);

errno_t _wcsncpy_s_l (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount, _locale_t _Locale);

wchar* _wcstok_s_l (wchar* _Str, const(wchar)* _Delim, wchar** _Context, _locale_t _Locale);
errno_t _wcsset_s_l (wchar* _Str, size_t _SizeInChars, uint _Val, _locale_t _Locale);
errno_t _wcsnset_s_l (wchar* _Str, size_t _SizeInChars, uint _Val, size_t _Count, _locale_t _Locale);

size_t wcsnlen_s (const(wchar)* _src, size_t _count);

struct _OBJECTID
{
    GUID Lineage;
    DWORD Uniquifier;
}

alias OBJECTID = _OBJECTID;

alias EXCEPTION_ROUTINE = int function (_EXCEPTION_RECORD* ExceptionRecord, PVOID EstablisherFrame, _CONTEXT* ContextRecord, PVOID DispatcherContext);

alias PEXCEPTION_ROUTINE = int function ();

alias KSPIN_LOCK = ulong;
alias PKSPIN_LOCK = ulong*;

struct _M128A
{
    ULONGLONG Low;
    LONGLONG High;
}

alias M128A = _M128A;
alias PM128A = _M128A*;

struct _XSAVE_FORMAT
{
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A[8] FloatRegisters;

    M128A[16] XmmRegisters;
    BYTE[96] Reserved4;
}

alias XSAVE_FORMAT = _XSAVE_FORMAT;
alias PXSAVE_FORMAT = _XSAVE_FORMAT*;

struct _XSAVE_AREA_HEADER
{
    DWORD64 Mask;
    DWORD64[7] Reserved;
}

alias XSAVE_AREA_HEADER = _XSAVE_AREA_HEADER;
alias PXSAVE_AREA_HEADER = _XSAVE_AREA_HEADER*;

struct _XSAVE_AREA
{
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
}

alias XSAVE_AREA = _XSAVE_AREA;
alias PXSAVE_AREA = _XSAVE_AREA*;

struct _XSTATE_CONTEXT
{
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
    PXSAVE_AREA Area;

    PVOID Buffer;
}

alias XSTATE_CONTEXT = _XSTATE_CONTEXT;
alias PXSTATE_CONTEXT = _XSTATE_CONTEXT*;

struct _SCOPE_TABLE_AMD64
{
    DWORD Count;

    struct _Anonymous_3
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    }

    _Anonymous_3[1] ScopeRecord;
}

alias SCOPE_TABLE_AMD64 = _SCOPE_TABLE_AMD64;
alias PSCOPE_TABLE_AMD64 = _SCOPE_TABLE_AMD64*;

int __bsfd (int __A);

int __bsrd (int __A);

int __bswapd (int __A);

int _bswap (int __A);

int __bsfq (long __A);

int __bsrq (long __A);

long __bswapq (long __A);

int __popcntd (uint __A);

long __popcntq (ulong __A);

ulong __readeflags ();

void __writeeflags (ulong __f);

uint _castf32_u32 (float __A);

ulong _castf64_u64 (double __A);

float _castu32_f32 (uint __A);

double _castu64_f64 (ulong __A);

uint __crc32b (uint __C, ubyte __D);

uint __crc32w (uint __C, ushort __D);

uint __crc32d (uint __C, uint __D);

ulong __crc32q (ulong __C, ulong __D);

ulong __rdpmc (int __A);

ulong __rdtscp (uint* __A);

void _wbinvd ();

ubyte __rolb (ubyte __X, int __C);

ubyte __rorb (ubyte __X, int __C);

ushort __rolw (ushort __X, int __C);

ushort __rorw (ushort __X, int __C);

uint __rold (uint __X, int __C);

uint __rord (uint __X, int __C);

ulong __rolq (ulong __X, int __C);

ulong __rorq (ulong __X, int __C);

alias __m64 = long;

alias __v1di = long;
alias __v2si = int;
alias __v4hi = short;
alias __v8qi = char;

alias __v4si = int;
alias __v4sf = float;
alias __m128 = float;

alias __m128_u = float;

alias __v4su = uint;

alias _onexit_t = int function ();

struct _div_t
{
    int quot;
    int rem;
}

alias div_t = _div_t;

struct _ldiv_t
{
    c_long quot;
    c_long rem;
}

alias ldiv_t = _ldiv_t;

struct _LDOUBLE
{
    ubyte[10] ld;
}

struct _CRT_DOUBLE
{
    double x;
}

struct _CRT_FLOAT
{
    float f;
}

struct _LONGDOUBLE
{
    real x;
}

struct _LDBL12
{
    ubyte[12] ld12;
}

alias _purecall_handler = void function ();

_purecall_handler _set_purecall_handler (_purecall_handler _Handler);
_purecall_handler _get_purecall_handler ();

alias _invalid_parameter_handler = void function (const(wchar)*, const(wchar)*, const(wchar)*, uint, uintptr_t);
_invalid_parameter_handler _set_invalid_parameter_handler (_invalid_parameter_handler _Handler);
_invalid_parameter_handler _get_invalid_parameter_handler ();

int* _errno ();

errno_t _set_errno (int _Value);
errno_t _get_errno (int* _Value);

c_ulong* __doserrno ();

errno_t _set_doserrno (c_ulong _Value);
errno_t _get_doserrno (c_ulong* _Value);

extern __gshared char*[1] _sys_errlist;
extern __gshared int _sys_nerr;

char*** __p___argv ();
int* __p__fmode ();

errno_t _get_pgmptr (char** _Value);
errno_t _get_wpgmptr (wchar** _Value);
errno_t _set_fmode (int _Mode);
errno_t _get_fmode (int* _PMode);

extern __gshared int* __imp___argc;

extern __gshared char*** __imp___argv;

extern __gshared wchar*** __imp___wargv;

extern __gshared char*** __imp__environ;

extern __gshared wchar*** __imp__wenviron;

extern __gshared char** __imp__pgmptr;

extern __gshared wchar** __imp__wpgmptr;

extern __gshared uint* __imp__osplatform;

extern __gshared uint* __imp__osver;

extern __gshared uint* __imp__winver;

extern __gshared uint* __imp__winmajor;

extern __gshared uint* __imp__winminor;

errno_t _get_osplatform (uint* _Value);
errno_t _get_osver (uint* _Value);
errno_t _get_winver (uint* _Value);
errno_t _get_winmajor (uint* _Value);
errno_t _get_winminor (uint* _Value);

void exit (int _Code);
void _exit (int _Code);

void _Exit (int);

void abort ();

uint _set_abort_behavior (uint _Flags, uint _Mask);

int abs (int _X);
c_long labs (c_long _X);

long _abs64 (long);

int atexit (void function ());

double atof (const(char)* _String);
double _atof_l (const(char)* _String, _locale_t _Locale);

int atoi (const(char)* _Str);
int _atoi_l (const(char)* _Str, _locale_t _Locale);
c_long atol (const(char)* _Str);
c_long _atol_l (const(char)* _Str, _locale_t _Locale);

void* bsearch (const(void)* _Key, const(void)* _Base, size_t _NumOfElements, size_t _SizeOfElements, int function (const(void)*, const(void)*) _PtFuncCompare);
void qsort (void* _Base, size_t _NumOfElements, size_t _SizeOfElements, int function (const(void)*, const(void)*) _PtFuncCompare);

ushort _byteswap_ushort (ushort _Short);
c_ulong _byteswap_ulong (c_ulong _Long);
ulong _byteswap_uint64 (ulong _Int64);
div_t div (int _Numerator, int _Denominator);
char* getenv (const(char)* _VarName);
char* _itoa (int _Value, char* _Dest, int _Radix);
char* _i64toa (long _Val, char* _DstBuf, int _Radix);
char* _ui64toa (ulong _Val, char* _DstBuf, int _Radix);
long _atoi64 (const(char)* _String);
long _atoi64_l (const(char)* _String, _locale_t _Locale);
long _strtoi64 (const(char)* _String, char** _EndPtr, int _Radix);
long _strtoi64_l (const(char)* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
ulong _strtoui64 (const(char)* _String, char** _EndPtr, int _Radix);
ulong _strtoui64_l (const(char)* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
ldiv_t ldiv (c_long _Numerator, c_long _Denominator);
char* _ltoa (c_long _Value, char* _Dest, int _Radix);
int mblen (const(char)* _Ch, size_t _MaxCount);
int _mblen_l (const(char)* _Ch, size_t _MaxCount, _locale_t _Locale);
size_t _mbstrlen (const(char)* _Str);
size_t _mbstrlen_l (const(char)* _Str, _locale_t _Locale);
size_t _mbstrnlen (const(char)* _Str, size_t _MaxCount);
size_t _mbstrnlen_l (const(char)* _Str, size_t _MaxCount, _locale_t _Locale);
int mbtowc (wchar* _DstCh, const(char)* _SrcCh, size_t _SrcSizeInBytes);
int _mbtowc_l (wchar* _DstCh, const(char)* _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
size_t mbstowcs (wchar* _Dest, const(char)* _Source, size_t _MaxCount);
size_t _mbstowcs_l (wchar* _Dest, const(char)* _Source, size_t _MaxCount, _locale_t _Locale);
int mkstemp (char* template_name);
int rand ();
int _set_error_mode (int _Mode);
void srand (uint _Seed);

double strtod (const(char)* _Str, char** _EndPtr);
float strtof (const(char)* nptr, char** endptr);

real strtold (const(char)*, char**);

double __strtod (const(char)*, char**);

float __mingw_strtof (const(char)*, char**);
double __mingw_strtod (const(char)*, char**);
real __mingw_strtold (const(char)*, char**);

double _strtod_l (const(char)* _Str, char** _EndPtr, _locale_t _Locale);
c_long strtol (const(char)* _Str, char** _EndPtr, int _Radix);
c_long _strtol_l (const(char)* _Str, char** _EndPtr, int _Radix, _locale_t _Locale);
c_ulong strtoul (const(char)* _Str, char** _EndPtr, int _Radix);
c_ulong _strtoul_l (const(char)* _Str, char** _EndPtr, int _Radix, _locale_t _Locale);

int system (const(char)* _Command);

char* _ultoa (c_ulong _Value, char* _Dest, int _Radix);
int wctomb (char* _MbCh, wchar _WCh);
int _wctomb_l (char* _MbCh, wchar _WCh, _locale_t _Locale);
size_t wcstombs (char* _Dest, const(wchar)* _Source, size_t _MaxCount);
size_t _wcstombs_l (char* _Dest, const(wchar)* _Source, size_t _MaxCount, _locale_t _Locale);

void* calloc (size_t _NumOfElements, size_t _SizeOfElements);
void free (void* _Memory);
void* malloc (size_t _Size);
void* realloc (void* _Memory, size_t _NewSize);
void* _recalloc (void* _Memory, size_t _Count, size_t _Size);

void _aligned_free (void* _Memory);
void* _aligned_malloc (size_t _Size, size_t _Alignment);

void* _aligned_offset_malloc (size_t _Size, size_t _Alignment, size_t _Offset);
void* _aligned_realloc (void* _Memory, size_t _Size, size_t _Alignment);
void* _aligned_recalloc (void* _Memory, size_t _Count, size_t _Size, size_t _Alignment);
void* _aligned_offset_realloc (void* _Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void* _aligned_offset_recalloc (void* _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);

wchar* _itow (int _Value, wchar* _Dest, int _Radix);
wchar* _ltow (c_long _Value, wchar* _Dest, int _Radix);
wchar* _ultow (c_ulong _Value, wchar* _Dest, int _Radix);

double __mingw_wcstod (const(wchar)* _Str, wchar** _EndPtr);
float __mingw_wcstof (const(wchar)* nptr, wchar** endptr);
real __mingw_wcstold (const(wchar)*, wchar**);

double wcstod (const(wchar)* _Str, wchar** _EndPtr);
float wcstof (const(wchar)* nptr, wchar** endptr);

real wcstold (const(wchar)*, wchar**);

double _wcstod_l (const(wchar)* _Str, wchar** _EndPtr, _locale_t _Locale);
c_long wcstol (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
c_long _wcstol_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);
c_ulong wcstoul (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
c_ulong _wcstoul_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);
wchar* _wgetenv (const(wchar)* _VarName);

int _wsystem (const(wchar)* _Command);

double _wtof (const(wchar)* _Str);
double _wtof_l (const(wchar)* _Str, _locale_t _Locale);
int _wtoi (const(wchar)* _Str);
int _wtoi_l (const(wchar)* _Str, _locale_t _Locale);
c_long _wtol (const(wchar)* _Str);
c_long _wtol_l (const(wchar)* _Str, _locale_t _Locale);

wchar* _i64tow (long _Val, wchar* _DstBuf, int _Radix);
wchar* _ui64tow (ulong _Val, wchar* _DstBuf, int _Radix);
long _wtoi64 (const(wchar)* _Str);
long _wtoi64_l (const(wchar)* _Str, _locale_t _Locale);
long _wcstoi64 (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
long _wcstoi64_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);
ulong _wcstoui64 (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
ulong _wcstoui64_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);

int _putenv (const(char)* _EnvString);
int _wputenv (const(wchar)* _EnvString);

char* _fullpath (char* _FullPath, const(char)* _Path, size_t _SizeInBytes);
char* _ecvt (double _Val, int _NumOfDigits, int* _PtDec, int* _PtSign);
char* _fcvt (double _Val, int _NumOfDec, int* _PtDec, int* _PtSign);
char* _gcvt (double _Val, int _NumOfDigits, char* _DstBuf);
int _atodbl (_CRT_DOUBLE* _Result, char* _Str);
int _atoldbl (_LDOUBLE* _Result, char* _Str);
int _atoflt (_CRT_FLOAT* _Result, char* _Str);
int _atodbl_l (_CRT_DOUBLE* _Result, char* _Str, _locale_t _Locale);
int _atoldbl_l (_LDOUBLE* _Result, char* _Str, _locale_t _Locale);
int _atoflt_l (_CRT_FLOAT* _Result, char* _Str, _locale_t _Locale);

c_ulong _lrotl (c_ulong, int);
c_ulong _lrotr (c_ulong, int);

void _makepath (char* _Path, const(char)* _Drive, const(char)* _Dir, const(char)* _Filename, const(char)* _Ext);
_onexit_t _onexit (_onexit_t _Func);

void perror (const(char)* _ErrMsg);

ulong _rotl64 (ulong _Val, int _Shift);
ulong _rotr64 (ulong Value, int Shift);

uint _rotr (uint _Val, int _Shift);
uint _rotl (uint _Val, int _Shift);

ulong _rotr64 (ulong _Val, int _Shift);
void _searchenv (const(char)* _Filename, const(char)* _EnvVar, char* _ResultPath);
void _splitpath (const(char)* _FullPath, char* _Drive, char* _Dir, char* _Filename, char* _Ext);
void _swab (char* _Buf1, char* _Buf2, int _SizeInBytes);

wchar* _wfullpath (wchar* _FullPath, const(wchar)* _Path, size_t _SizeInWords);
void _wmakepath (wchar* _ResultPath, const(wchar)* _Drive, const(wchar)* _Dir, const(wchar)* _Filename, const(wchar)* _Ext);

void _wperror (const(wchar)* _ErrMsg);

void _wsearchenv (const(wchar)* _Filename, const(wchar)* _EnvVar, wchar* _ResultPath);
void _wsplitpath (const(wchar)* _FullPath, wchar* _Drive, wchar* _Dir, wchar* _Filename, wchar* _Ext);

void _beep (uint _Frequency, uint _Duration);

void _seterrormode (int _Mode);
void _sleep (c_ulong _Duration);

char* ecvt (double _Val, int _NumOfDigits, int* _PtDec, int* _PtSign);
char* fcvt (double _Val, int _NumOfDec, int* _PtDec, int* _PtSign);
char* gcvt (double _Val, int _NumOfDigits, char* _DstBuf);
char* itoa (int _Val, char* _DstBuf, int _Radix);
char* ltoa (c_long _Val, char* _DstBuf, int _Radix);
int putenv (const(char)* _EnvString);

void swab (char* _Buf1, char* _Buf2, int _SizeInBytes);

char* ultoa (c_ulong _Val, char* _Dstbuf, int _Radix);
_onexit_t onexit (_onexit_t _Func);

struct lldiv_t
{
    long quot;
    long rem;
}

lldiv_t lldiv (long, long);

long llabs (long);

long strtoll (const(char)*, char**, int);
ulong strtoull (const(char)*, char**, int);

long atoll (const(char)*);

long wtoll (const(wchar)*);
char* lltoa (long, char*, int);
char* ulltoa (ulong, char*, int);
wchar* lltow (long, wchar*, int);
wchar* ulltow (ulong, wchar*, int);

errno_t _dupenv_s (char** _PBuffer, size_t* _PBufferSizeInBytes, const(char)* _VarName);
errno_t _itoa_s (int _Value, char* _DstBuf, size_t _Size, int _Radix);

errno_t _i64toa_s (long _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t _ui64toa_s (ulong _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t _ltoa_s (c_long _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t mbstowcs_s (size_t* _PtNumOfCharConverted, wchar* _DstBuf, size_t _SizeInWords, const(char)* _SrcBuf, size_t _MaxCount);
errno_t _mbstowcs_s_l (size_t* _PtNumOfCharConverted, wchar* _DstBuf, size_t _SizeInWords, const(char)* _SrcBuf, size_t _MaxCount, _locale_t _Locale);
errno_t _ultoa_s (c_ulong _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t _wctomb_s_l (int* _SizeConverted, char* _MbCh, size_t _SizeInBytes, wchar _WCh, _locale_t _Locale);
errno_t wcstombs_s (size_t* _PtNumOfCharConverted, char* _Dst, size_t _DstSizeInBytes, const(wchar)* _Src, size_t _MaxCountInBytes);
errno_t _wcstombs_s_l (size_t* _PtNumOfCharConverted, char* _Dst, size_t _DstSizeInBytes, const(wchar)* _Src, size_t _MaxCountInBytes, _locale_t _Locale);

errno_t _itow_s (int _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _ltow_s (c_long _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _ultow_s (c_ulong _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _wgetenv_s (size_t* _ReturnSize, wchar* _DstBuf, size_t _DstSizeInWords, const(wchar)* _VarName);
errno_t _wdupenv_s (wchar** _Buffer, size_t* _BufferSizeInWords, const(wchar)* _VarName);
errno_t _i64tow_s (long _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _ui64tow_s (ulong _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);

errno_t _ecvt_s (char* _DstBuf, size_t _Size, double _Val, int _NumOfDights, int* _PtDec, int* _PtSign);
errno_t _fcvt_s (char* _DstBuf, size_t _Size, double _Val, int _NumOfDec, int* _PtDec, int* _PtSign);
errno_t _gcvt_s (char* _DstBuf, size_t _Size, double _Val, int _NumOfDigits);
errno_t _makepath_s (char* _PathResult, size_t _Size, const(char)* _Drive, const(char)* _Dir, const(char)* _Filename, const(char)* _Ext);
errno_t _putenv_s (const(char)* _Name, const(char)* _Value);
errno_t _searchenv_s (const(char)* _Filename, const(char)* _EnvVar, char* _ResultPath, size_t _SizeInBytes);

errno_t _splitpath_s (const(char)* _FullPath, char* _Drive, size_t _DriveSize, char* _Dir, size_t _DirSize, char* _Filename, size_t _FilenameSize, char* _Ext, size_t _ExtSize);

errno_t _wmakepath_s (wchar* _PathResult, size_t _SizeInWords, const(wchar)* _Drive, const(wchar)* _Dir, const(wchar)* _Filename, const(wchar)* _Ext);
errno_t _wputenv_s (const(wchar)* _Name, const(wchar)* _Value);
errno_t _wsearchenv_s (const(wchar)* _Filename, const(wchar)* _EnvVar, wchar* _ResultPath, size_t _SizeInWords);

errno_t _wsplitpath_s (const(wchar)* _FullPath, wchar* _Drive, size_t _DriveSizeInWords, wchar* _Dir, size_t _DirSizeInWords, wchar* _Filename, size_t _FilenameSizeInWords, wchar* _Ext, size_t _ExtSizeInWords);

void qsort_s (void* _Base, size_t _NumOfElements, size_t _SizeOfElements, int function (void*, const(void)*, const(void)*) _PtFuncCompare, void* _Context);

struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
}

alias _HEAPINFO = _heapinfo;

extern __gshared uint _amblksiz;

void* __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void* _Memory);
void* __mingw_aligned_offset_realloc (void* _Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void* __mingw_aligned_realloc (void* _Memory, size_t _Size, size_t _Offset);

int _resetstkoflw ();
c_ulong _set_malloc_crt_max_wait (c_ulong _NewValue);

void* _expand (void* _Memory, size_t _NewSize);
size_t _msize (void* _Memory);

void* _alloca (size_t _Size);

size_t _get_sbh_threshold ();
int _set_sbh_threshold (size_t _NewValue);
errno_t _set_amblksiz (size_t _Value);
errno_t _get_amblksiz (size_t* _Value);
int _heapadd (void* _Memory, size_t _Size);
int _heapchk ();
int _heapmin ();
int _heapset (uint _Fill);
int _heapwalk (_HEAPINFO* _EntryInfo);
size_t _heapused (size_t* _Used, size_t* _Commit);
intptr_t _get_heap_handle ();

void* _MarkAllocaS (void* _Ptr, uint _Marker);

void _freea (void* _Memory);

alias __m128d = double;
alias __m128i = long;

alias __m128d_u = double;
alias __m128i_u = long;

alias __v2df = double;
alias __v2di = long;
alias __v8hi = short;
alias __v16qi = char;

alias __v2du = ulong;
alias __v8hu = ushort;
alias __v16qu = ubyte;

alias __v16qs = byte;

uint __getcallerseflags ();

DWORD __segmentlimit (DWORD Selector);

long __mulh (LONGLONG Multiplier, LONGLONG Multiplicand);
ulong __umulh (ULONGLONG Multiplier, ULONGLONG Multiplicand);

ulong __shiftleft128 (DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);
ulong __shiftright128 (DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);

long _mul128 (LONG64 Multiplier, LONG64 Multiplicand, LONG64* HighProduct);

ulong _umul128 (DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64* HighProduct);

LONG64 MultiplyExtract128 (LONG64 Multiplier, LONG64 Multiplicand, BYTE Shift);
DWORD64 UnsignedMultiplyExtract128 (DWORD64 Multiplier, DWORD64 Multiplicand, BYTE Shift);

struct _XMM_SAVE_AREA32
{
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A[8] FloatRegisters;
    M128A[16] XmmRegisters;
    BYTE[96] Reserved4;
}

alias XMM_SAVE_AREA32 = _XMM_SAVE_AREA32;
alias PXMM_SAVE_AREA32 = _XMM_SAVE_AREA32*;

struct _CONTEXT
{
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;
    DWORD ContextFlags;
    DWORD MxCsr;
    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;
    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;
    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;
    DWORD64 Rip;

    union
    {
        XMM_SAVE_AREA32 FltSave;
        XMM_SAVE_AREA32 FloatSave;

        struct
        {
            M128A[2] Header;
            M128A[8] Legacy;
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        }
    }

    M128A[26] VectorRegister;
    DWORD64 VectorControl;
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
}

alias CONTEXT = _CONTEXT;
alias PCONTEXT = _CONTEXT*;

struct _RUNTIME_FUNCTION
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindData;
}

alias RUNTIME_FUNCTION = _RUNTIME_FUNCTION;
alias PRUNTIME_FUNCTION = _RUNTIME_FUNCTION*;

alias PGET_RUNTIME_FUNCTION_CALLBACK = _RUNTIME_FUNCTION* function (DWORD64 ControlPc, PVOID Context);
alias POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = c_ulong function (HANDLE Process, PVOID TableAddress, PDWORD Entries, PRUNTIME_FUNCTION* Functions);

struct _LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;

    union _Anonymous_4
    {
        struct _Anonymous_5
        {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        }

        _Anonymous_5 Bytes;

        struct _Anonymous_6
        {
            

            mixin(bitfields!(
                DWORD, "BaseMid", 8,
                DWORD, "Type", 5,
                DWORD, "Dpl", 2,
                DWORD, "Pres", 1,
                DWORD, "LimitHi", 4,
                DWORD, "Sys", 1,
                DWORD, "Reserved_0", 1,
                DWORD, "Default_Big", 1,
                DWORD, "Granularity", 1,
                DWORD, "BaseHi", 8));
        }

        _Anonymous_6 Bits;
    }

    _Anonymous_4 HighWord;
}

alias LDT_ENTRY = _LDT_ENTRY;
alias PLDT_ENTRY = _LDT_ENTRY*;

struct _EXCEPTION_RECORD
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    _EXCEPTION_RECORD* ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR[15] ExceptionInformation;
}

alias EXCEPTION_RECORD = _EXCEPTION_RECORD;

alias PEXCEPTION_RECORD = _EXCEPTION_RECORD*;

struct _EXCEPTION_RECORD32
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD[15] ExceptionInformation;
}

alias EXCEPTION_RECORD32 = _EXCEPTION_RECORD32;
alias PEXCEPTION_RECORD32 = _EXCEPTION_RECORD32*;

struct _EXCEPTION_RECORD64
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64[15] ExceptionInformation;
}

alias EXCEPTION_RECORD64 = _EXCEPTION_RECORD64;
alias PEXCEPTION_RECORD64 = _EXCEPTION_RECORD64*;

struct _EXCEPTION_POINTERS
{
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
}

alias EXCEPTION_POINTERS = _EXCEPTION_POINTERS;
alias PEXCEPTION_POINTERS = _EXCEPTION_POINTERS*;

struct _UNWIND_HISTORY_TABLE_ENTRY
{
    ULONG64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
}

alias UNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY;
alias PUNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY*;

struct _UNWIND_HISTORY_TABLE
{
    ULONG Count;
    UCHAR Search;
    ULONG64 LowAddress;
    ULONG64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY[12] Entry;
}

alias UNWIND_HISTORY_TABLE = _UNWIND_HISTORY_TABLE;
alias PUNWIND_HISTORY_TABLE = _UNWIND_HISTORY_TABLE*;

alias DISPATCHER_CONTEXT = _DISPATCHER_CONTEXT;
alias PDISPATCHER_CONTEXT = _DISPATCHER_CONTEXT*;

struct _DISPATCHER_CONTEXT
{
    ULONG64 ControlPc;
    ULONG64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    ULONG64 EstablisherFrame;
    ULONG64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;

    PUNWIND_HISTORY_TABLE HistoryTable;
    ULONG ScopeIndex;
    ULONG Fill0;
}

struct _KNONVOLATILE_CONTEXT_POINTERS
{
    PM128A[16] FloatingContext;
    PULONG64[16] IntegerContext;
}

alias KNONVOLATILE_CONTEXT_POINTERS = _KNONVOLATILE_CONTEXT_POINTERS;
alias PKNONVOLATILE_CONTEXT_POINTERS = _KNONVOLATILE_CONTEXT_POINTERS*;

alias PACCESS_TOKEN = void*;
alias PSECURITY_DESCRIPTOR = void*;
alias PSID = void*;
alias PCLAIMS_BLOB = void*;
alias ACCESS_MASK = c_ulong;
alias PACCESS_MASK = c_ulong*;

struct _GENERIC_MAPPING
{
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
}

alias GENERIC_MAPPING = _GENERIC_MAPPING;
alias PGENERIC_MAPPING = _GENERIC_MAPPING*;

struct _LUID_AND_ATTRIBUTES
{
    LUID Luid;
    DWORD Attributes;
}

alias LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES;
alias PLUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES*;
alias LUID_AND_ATTRIBUTES_ARRAY = _LUID_AND_ATTRIBUTES[1];
alias PLUID_AND_ATTRIBUTES_ARRAY = _LUID_AND_ATTRIBUTES[1]*;

struct _SID_IDENTIFIER_AUTHORITY
{
    BYTE[6] Value;
}

alias SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;
alias PSID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY*;

struct _SID
{
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD[1] SubAuthority;
}

alias SID = _SID;
alias PISID = _SID*;

enum _SID_NAME_USE
{
    SidTypeUser = 1,
    SidTypeGroup = 2,
    SidTypeDomain = 3,
    SidTypeAlias = 4,
    SidTypeWellKnownGroup = 5,
    SidTypeDeletedAccount = 6,
    SidTypeInvalid = 7,
    SidTypeUnknown = 8,
    SidTypeComputer = 9,
    SidTypeLabel = 10
}

alias SID_NAME_USE = _SID_NAME_USE;
alias PSID_NAME_USE = _SID_NAME_USE*;

struct _SID_AND_ATTRIBUTES
{
    PSID Sid;

    DWORD Attributes;
}

alias SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES;
alias PSID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES*;

alias SID_AND_ATTRIBUTES_ARRAY = _SID_AND_ATTRIBUTES[1];
alias PSID_AND_ATTRIBUTES_ARRAY = _SID_AND_ATTRIBUTES[1]*;

alias SID_HASH_ENTRY = ulong;
alias PSID_HASH_ENTRY = ulong*;

struct _SID_AND_ATTRIBUTES_HASH
{
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY[32] Hash;
}

alias SID_AND_ATTRIBUTES_HASH = _SID_AND_ATTRIBUTES_HASH;
alias PSID_AND_ATTRIBUTES_HASH = _SID_AND_ATTRIBUTES_HASH*;

enum WELL_KNOWN_SID_TYPE
{
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117
}

struct _ACL
{
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
}

alias ACL = _ACL;
alias PACL = _ACL*;

struct _ACE_HEADER
{
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
}

alias ACE_HEADER = _ACE_HEADER;
alias PACE_HEADER = _ACE_HEADER*;

struct _ACCESS_ALLOWED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias ACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE;

alias PACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE*;

struct _ACCESS_DENIED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias ACCESS_DENIED_ACE = _ACCESS_DENIED_ACE;
alias PACCESS_DENIED_ACE = _ACCESS_DENIED_ACE*;

struct _SYSTEM_AUDIT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE;
alias PSYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE*;

struct _SYSTEM_ALARM_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE;
alias PSYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE*;

struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_RESOURCE_ATTRIBUTE_ACE = _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
alias PSYSTEM_RESOURCE_ATTRIBUTE_ACE = _SYSTEM_RESOURCE_ATTRIBUTE_ACE*;

struct _SYSTEM_SCOPED_POLICY_ID_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_SCOPED_POLICY_ID_ACE = _SYSTEM_SCOPED_POLICY_ID_ACE;
alias PSYSTEM_SCOPED_POLICY_ID_ACE = _SYSTEM_SCOPED_POLICY_ID_ACE*;

struct _SYSTEM_MANDATORY_LABEL_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_MANDATORY_LABEL_ACE = _SYSTEM_MANDATORY_LABEL_ACE;
alias PSYSTEM_MANDATORY_LABEL_ACE = _SYSTEM_MANDATORY_LABEL_ACE*;

struct _ACCESS_ALLOWED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias ACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE;
alias PACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE*;

struct _ACCESS_DENIED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias ACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE;
alias PACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE*;

struct _SYSTEM_AUDIT_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias SYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE;
alias PSYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE*;

struct _SYSTEM_ALARM_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias SYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE;
alias PSYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE*;

struct _ACCESS_ALLOWED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias ACCESS_ALLOWED_CALLBACK_ACE = _ACCESS_ALLOWED_CALLBACK_ACE;
alias PACCESS_ALLOWED_CALLBACK_ACE = _ACCESS_ALLOWED_CALLBACK_ACE*;

struct _ACCESS_DENIED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias ACCESS_DENIED_CALLBACK_ACE = _ACCESS_DENIED_CALLBACK_ACE;
alias PACCESS_DENIED_CALLBACK_ACE = _ACCESS_DENIED_CALLBACK_ACE*;

struct _SYSTEM_AUDIT_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_AUDIT_CALLBACK_ACE = _SYSTEM_AUDIT_CALLBACK_ACE;
alias PSYSTEM_AUDIT_CALLBACK_ACE = _SYSTEM_AUDIT_CALLBACK_ACE*;

struct _SYSTEM_ALARM_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}

alias SYSTEM_ALARM_CALLBACK_ACE = _SYSTEM_ALARM_CALLBACK_ACE;
alias PSYSTEM_ALARM_CALLBACK_ACE = _SYSTEM_ALARM_CALLBACK_ACE*;

struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
alias PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE*;

struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias ACCESS_DENIED_CALLBACK_OBJECT_ACE = _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
alias PACCESS_DENIED_CALLBACK_OBJECT_ACE = _ACCESS_DENIED_CALLBACK_OBJECT_ACE*;

struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
alias PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE*;

struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}

alias SYSTEM_ALARM_CALLBACK_OBJECT_ACE = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
alias PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE*;

enum _ACL_INFORMATION_CLASS
{
    AclRevisionInformation = 1,
    AclSizeInformation = 2
}

alias ACL_INFORMATION_CLASS = _ACL_INFORMATION_CLASS;

struct _ACL_REVISION_INFORMATION
{
    DWORD AclRevision;
}

alias ACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION;
alias PACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION*;

struct _ACL_SIZE_INFORMATION
{
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
}

alias ACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION;
alias PACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION*;

alias SECURITY_DESCRIPTOR_CONTROL = ushort;
alias PSECURITY_DESCRIPTOR_CONTROL = ushort*;

struct _SECURITY_DESCRIPTOR_RELATIVE
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
}

alias SECURITY_DESCRIPTOR_RELATIVE = _SECURITY_DESCRIPTOR_RELATIVE;
alias PISECURITY_DESCRIPTOR_RELATIVE = _SECURITY_DESCRIPTOR_RELATIVE*;

struct _SECURITY_DESCRIPTOR
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
}

alias SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR;
alias PISECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR*;

struct _OBJECT_TYPE_LIST
{
    WORD Level;
    WORD Sbz;
    GUID* ObjectType;
}

alias OBJECT_TYPE_LIST = _OBJECT_TYPE_LIST;
alias POBJECT_TYPE_LIST = _OBJECT_TYPE_LIST*;

enum _AUDIT_EVENT_TYPE
{
    AuditEventObjectAccess = 0,
    AuditEventDirectoryServiceAccess = 1
}

alias AUDIT_EVENT_TYPE = _AUDIT_EVENT_TYPE;
alias PAUDIT_EVENT_TYPE = _AUDIT_EVENT_TYPE*;

struct _PRIVILEGE_SET
{
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES[1] Privilege;
}

alias PRIVILEGE_SET = _PRIVILEGE_SET;
alias PPRIVILEGE_SET = _PRIVILEGE_SET*;

enum _ACCESS_REASON_TYPE
{
    AccessReasonNone = 0x00000000,
    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,
    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,
    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,
    AccessReasonNotGrantedToAppContainer = 0x00070000,
    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,
    AccessReasonIntegrityLevel = 0x00300000,
    AccessReasonOwnership = 0x00400000,
    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,
    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000
}

alias ACCESS_REASON_TYPE = _ACCESS_REASON_TYPE;
alias ACCESS_REASON = c_ulong;

struct _ACCESS_REASONS
{
    ACCESS_REASON[32] Data;
}

alias ACCESS_REASONS = _ACCESS_REASONS;
alias PACCESS_REASONS = _ACCESS_REASONS*;

struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
}

alias SE_SECURITY_DESCRIPTOR = _SE_SECURITY_DESCRIPTOR;
alias PSE_SECURITY_DESCRIPTOR = _SE_SECURITY_DESCRIPTOR*;

struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
}

alias SE_ACCESS_REQUEST = _SE_ACCESS_REQUEST;
alias PSE_ACCESS_REQUEST = _SE_ACCESS_REQUEST*;

struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
}

alias SE_ACCESS_REPLY = _SE_ACCESS_REPLY;
alias PSE_ACCESS_REPLY = _SE_ACCESS_REPLY*;

enum _SECURITY_IMPERSONATION_LEVEL
{
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
}

alias SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL;
alias PSECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL*;

enum _TOKEN_TYPE
{
    TokenPrimary = 1,
    TokenImpersonation = 2
}

alias TOKEN_TYPE = _TOKEN_TYPE;
alias PTOKEN_TYPE = _TOKEN_TYPE*;

enum _TOKEN_ELEVATION_TYPE
{
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull = 2,
    TokenElevationTypeLimited = 3
}

alias TOKEN_ELEVATION_TYPE = _TOKEN_ELEVATION_TYPE;
alias PTOKEN_ELEVATION_TYPE = _TOKEN_ELEVATION_TYPE*;

enum _TOKEN_INFORMATION_CLASS
{
    TokenUser = 1,
    TokenGroups = 2,
    TokenPrivileges = 3,
    TokenOwner = 4,
    TokenPrimaryGroup = 5,
    TokenDefaultDacl = 6,
    TokenSource = 7,
    TokenType = 8,
    TokenImpersonationLevel = 9,
    TokenStatistics = 10,
    TokenRestrictedSids = 11,
    TokenSessionId = 12,
    TokenGroupsAndPrivileges = 13,
    TokenSessionReference = 14,
    TokenSandBoxInert = 15,
    TokenAuditPolicy = 16,
    TokenOrigin = 17,
    TokenElevationType = 18,
    TokenLinkedToken = 19,
    TokenElevation = 20,
    TokenHasRestrictions = 21,
    TokenAccessInformation = 22,
    TokenVirtualizationAllowed = 23,
    TokenVirtualizationEnabled = 24,
    TokenIntegrityLevel = 25,
    TokenUIAccess = 26,
    TokenMandatoryPolicy = 27,
    TokenLogonSid = 28,
    TokenIsAppContainer = 29,
    TokenCapabilities = 30,
    TokenAppContainerSid = 31,
    TokenAppContainerNumber = 32,
    TokenUserClaimAttributes = 33,
    TokenDeviceClaimAttributes = 34,
    TokenRestrictedUserClaimAttributes = 35,
    TokenRestrictedDeviceClaimAttributes = 36,
    TokenDeviceGroups = 37,
    TokenRestrictedDeviceGroups = 38,
    TokenSecurityAttributes = 39,
    TokenIsRestricted = 40,
    MaxTokenInfoClass = 41
}

alias TOKEN_INFORMATION_CLASS = _TOKEN_INFORMATION_CLASS;
alias PTOKEN_INFORMATION_CLASS = _TOKEN_INFORMATION_CLASS*;

struct _TOKEN_USER
{
    SID_AND_ATTRIBUTES User;
}

alias TOKEN_USER = _TOKEN_USER;
alias PTOKEN_USER = _TOKEN_USER*;

struct _TOKEN_GROUPS
{
    DWORD GroupCount;

    SID_AND_ATTRIBUTES[1] Groups;
}

alias TOKEN_GROUPS = _TOKEN_GROUPS;
alias PTOKEN_GROUPS = _TOKEN_GROUPS*;

struct _TOKEN_PRIVILEGES
{
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES[1] Privileges;
}

alias TOKEN_PRIVILEGES = _TOKEN_PRIVILEGES;
alias PTOKEN_PRIVILEGES = _TOKEN_PRIVILEGES*;

struct _TOKEN_OWNER
{
    PSID Owner;
}

alias TOKEN_OWNER = _TOKEN_OWNER;
alias PTOKEN_OWNER = _TOKEN_OWNER*;

struct _TOKEN_PRIMARY_GROUP
{
    PSID PrimaryGroup;
}

alias TOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP;
alias PTOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP*;

struct _TOKEN_DEFAULT_DACL
{
    PACL DefaultDacl;
}

alias TOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL;
alias PTOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL*;

struct _TOKEN_USER_CLAIMS
{
    PCLAIMS_BLOB UserClaims;
}

alias TOKEN_USER_CLAIMS = _TOKEN_USER_CLAIMS;
alias PTOKEN_USER_CLAIMS = _TOKEN_USER_CLAIMS*;

struct _TOKEN_DEVICE_CLAIMS
{
    PCLAIMS_BLOB DeviceClaims;
}

alias TOKEN_DEVICE_CLAIMS = _TOKEN_DEVICE_CLAIMS;
alias PTOKEN_DEVICE_CLAIMS = _TOKEN_DEVICE_CLAIMS*;

struct _TOKEN_GROUPS_AND_PRIVILEGES
{
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
}

alias TOKEN_GROUPS_AND_PRIVILEGES = _TOKEN_GROUPS_AND_PRIVILEGES;
alias PTOKEN_GROUPS_AND_PRIVILEGES = _TOKEN_GROUPS_AND_PRIVILEGES*;

struct _TOKEN_LINKED_TOKEN
{
    HANDLE LinkedToken;
}

alias TOKEN_LINKED_TOKEN = _TOKEN_LINKED_TOKEN;
alias PTOKEN_LINKED_TOKEN = _TOKEN_LINKED_TOKEN*;

struct _TOKEN_ELEVATION
{
    DWORD TokenIsElevated;
}

alias TOKEN_ELEVATION = _TOKEN_ELEVATION;
alias PTOKEN_ELEVATION = _TOKEN_ELEVATION*;

struct _TOKEN_MANDATORY_LABEL
{
    SID_AND_ATTRIBUTES Label;
}

alias TOKEN_MANDATORY_LABEL = _TOKEN_MANDATORY_LABEL;
alias PTOKEN_MANDATORY_LABEL = _TOKEN_MANDATORY_LABEL*;

struct _TOKEN_MANDATORY_POLICY
{
    DWORD Policy;
}

alias TOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY;
alias PTOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY*;

struct _TOKEN_ACCESS_INFORMATION
{
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
}

alias TOKEN_ACCESS_INFORMATION = _TOKEN_ACCESS_INFORMATION;
alias PTOKEN_ACCESS_INFORMATION = _TOKEN_ACCESS_INFORMATION*;

struct _TOKEN_AUDIT_POLICY
{
    UCHAR[29] PerUserPolicy;
}

alias TOKEN_AUDIT_POLICY = _TOKEN_AUDIT_POLICY;
alias PTOKEN_AUDIT_POLICY = _TOKEN_AUDIT_POLICY*;

struct _TOKEN_SOURCE
{
    CHAR[8] SourceName;
    LUID SourceIdentifier;
}

alias TOKEN_SOURCE = _TOKEN_SOURCE;
alias PTOKEN_SOURCE = _TOKEN_SOURCE*;

struct _TOKEN_STATISTICS
{
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
}

alias TOKEN_STATISTICS = _TOKEN_STATISTICS;
alias PTOKEN_STATISTICS = _TOKEN_STATISTICS*;

struct _TOKEN_CONTROL
{
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
}

alias TOKEN_CONTROL = _TOKEN_CONTROL;
alias PTOKEN_CONTROL = _TOKEN_CONTROL*;

struct _TOKEN_ORIGIN
{
    LUID OriginatingLogonSession;
}

alias TOKEN_ORIGIN = _TOKEN_ORIGIN;
alias PTOKEN_ORIGIN = _TOKEN_ORIGIN*;

enum _MANDATORY_LEVEL
{
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow = 1,
    MandatoryLevelMedium = 2,
    MandatoryLevelHigh = 3,
    MandatoryLevelSystem = 4,
    MandatoryLevelSecureProcess = 5,
    MandatoryLevelCount = 6
}

alias MANDATORY_LEVEL = _MANDATORY_LEVEL;
alias PMANDATORY_LEVEL = _MANDATORY_LEVEL*;

struct _TOKEN_APPCONTAINER_INFORMATION
{
    PSID TokenAppContainer;
}

alias TOKEN_APPCONTAINER_INFORMATION = _TOKEN_APPCONTAINER_INFORMATION;
alias PTOKEN_APPCONTAINER_INFORMATION = _TOKEN_APPCONTAINER_INFORMATION*;

struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
{
    DWORD64 Version;
    PWSTR Name;
}

alias CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
alias PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE*;

struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
    PVOID pValue;
    DWORD ValueLength;
}

alias CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
alias PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE*;

struct _CLAIM_SECURITY_ATTRIBUTE_V1
{
    PWSTR Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;

    union _Anonymous_7
    {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR* ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    }

    _Anonymous_7 Values;
}

alias CLAIM_SECURITY_ATTRIBUTE_V1 = _CLAIM_SECURITY_ATTRIBUTE_V1;
alias PCLAIM_SECURITY_ATTRIBUTE_V1 = _CLAIM_SECURITY_ATTRIBUTE_V1*;

struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
{
    DWORD Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;

    union _Anonymous_8
    {
        DWORD[1] pInt64;
        DWORD[1] pUint64;
        DWORD[1] ppString;
        DWORD[1] pFqbn;
        DWORD[1] pOctetString;
    }

    _Anonymous_8 Values;
}

alias CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
alias PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1*;

struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
{
    WORD Version;
    WORD Reserved;
    DWORD AttributeCount;

    union _Anonymous_9
    {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    }

    _Anonymous_9 Attribute;
}

alias CLAIM_SECURITY_ATTRIBUTES_INFORMATION = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
alias PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION*;

alias SECURITY_CONTEXT_TRACKING_MODE = ubyte;
alias PSECURITY_CONTEXT_TRACKING_MODE = ubyte*;

struct _SECURITY_QUALITY_OF_SERVICE
{
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
}

alias SECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE;
alias PSECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE*;

struct _SE_IMPERSONATION_STATE
{
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
}

alias SE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE;
alias PSE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE*;

alias SECURITY_INFORMATION = c_ulong;
alias PSECURITY_INFORMATION = c_ulong*;

enum _SE_LEARNING_MODE_DATA_TYPE
{
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings = 1,
    SeLearningModeMax = 2
}

alias SE_LEARNING_MODE_DATA_TYPE = _SE_LEARNING_MODE_DATA_TYPE;

struct _SECURITY_CAPABILITIES
{
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
}

alias SECURITY_CAPABILITIES = _SECURITY_CAPABILITIES;
alias PSECURITY_CAPABILITIES = _SECURITY_CAPABILITIES*;
alias LPSECURITY_CAPABILITIES = _SECURITY_CAPABILITIES*;

struct _JOB_SET_ARRAY
{
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
}

alias JOB_SET_ARRAY = _JOB_SET_ARRAY;
alias PJOB_SET_ARRAY = _JOB_SET_ARRAY*;

struct _EXCEPTION_REGISTRATION_RECORD
{
    union
    {
        _EXCEPTION_REGISTRATION_RECORD* Next;
        _EXCEPTION_REGISTRATION_RECORD* prev;
    }

    union
    {
        PEXCEPTION_ROUTINE Handler;
        PEXCEPTION_ROUTINE handler;
    }
}

alias EXCEPTION_REGISTRATION_RECORD = _EXCEPTION_REGISTRATION_RECORD;

alias PEXCEPTION_REGISTRATION_RECORD = _EXCEPTION_REGISTRATION_RECORD*;

alias EXCEPTION_REGISTRATION = _EXCEPTION_REGISTRATION_RECORD;
alias PEXCEPTION_REGISTRATION = _EXCEPTION_REGISTRATION_RECORD*;

struct _NT_TIB
{
    _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union
    {
        PVOID FiberData;
        DWORD Version;
    }

    PVOID ArbitraryUserPointer;
    _NT_TIB* Self;
}

alias NT_TIB = _NT_TIB;
alias PNT_TIB = _NT_TIB*;

struct _NT_TIB32
{
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;

    union
    {
        DWORD FiberData;
        DWORD Version;
    }

    DWORD ArbitraryUserPointer;
    DWORD Self;
}

alias NT_TIB32 = _NT_TIB32;
alias PNT_TIB32 = _NT_TIB32*;

struct _NT_TIB64
{
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;

    union
    {
        DWORD64 FiberData;
        DWORD Version;
    }

    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
}

alias NT_TIB64 = _NT_TIB64;
alias PNT_TIB64 = _NT_TIB64*;

struct _UMS_CREATE_THREAD_ATTRIBUTES
{
    DWORD UmsVersion;
    PVOID UmsContext;
    PVOID UmsCompletionList;
}

alias UMS_CREATE_THREAD_ATTRIBUTES = _UMS_CREATE_THREAD_ATTRIBUTES;
alias PUMS_CREATE_THREAD_ATTRIBUTES = _UMS_CREATE_THREAD_ATTRIBUTES*;

struct _QUOTA_LIMITS
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
}

alias QUOTA_LIMITS = _QUOTA_LIMITS;
alias PQUOTA_LIMITS = _QUOTA_LIMITS*;

union _RATE_QUOTA_LIMIT
{
    DWORD RateData;

    struct
    {
        

        mixin(bitfields!(
            DWORD, "RatePercent", 7,
            DWORD, "Reserved0", 25));
    }
}

alias RATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT;
alias PRATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT*;

struct _QUOTA_LIMITS_EX
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
}

alias QUOTA_LIMITS_EX = _QUOTA_LIMITS_EX;
alias PQUOTA_LIMITS_EX = _QUOTA_LIMITS_EX*;

struct _IO_COUNTERS
{
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
}

alias IO_COUNTERS = _IO_COUNTERS;
alias PIO_COUNTERS = _IO_COUNTERS*;

enum _HARDWARE_COUNTER_TYPE
{
    PMCCounter = 0,
    MaxHardwareCounterType = 1
}

alias HARDWARE_COUNTER_TYPE = _HARDWARE_COUNTER_TYPE;
alias PHARDWARE_COUNTER_TYPE = _HARDWARE_COUNTER_TYPE*;

enum _PROCESS_MITIGATION_POLICY
{
    ProcessDEPPolicy = 0,
    ProcessASLRPolicy = 1,
    ProcessDynamicCodePolicy = 2,
    ProcessStrictHandleCheckPolicy = 3,
    ProcessSystemCallDisablePolicy = 4,
    ProcessMitigationOptionsMask = 5,
    ProcessExtensionPointDisablePolicy = 6,
    ProcessControlFlowGuardPolicy = 7,
    ProcessSignaturePolicy = 8,
    ProcessFontDisablePolicy = 9,
    ProcessImageLoadPolicy = 10,
    MaxProcessMitigationPolicy = 11
}

alias PROCESS_MITIGATION_POLICY = _PROCESS_MITIGATION_POLICY;
alias PPROCESS_MITIGATION_POLICY = _PROCESS_MITIGATION_POLICY*;

struct _PROCESS_MITIGATION_ASLR_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "EnableBottomUpRandomization", 1,
                DWORD, "EnableForceRelocateImages", 1,
                DWORD, "EnableHighEntropy", 1,
                DWORD, "DisallowStrippedImages", 1,
                DWORD, "ReservedFlags", 28));
        }
    }
}

alias PROCESS_MITIGATION_ASLR_POLICY = _PROCESS_MITIGATION_ASLR_POLICY;
alias PPROCESS_MITIGATION_ASLR_POLICY = _PROCESS_MITIGATION_ASLR_POLICY*;

struct _PROCESS_MITIGATION_DEP_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "Enable", 1,
                DWORD, "DisableAtlThunkEmulation", 1,
                DWORD, "ReservedFlags", 30));
        }
    }

    BOOLEAN Permanent;
}

alias PROCESS_MITIGATION_DEP_POLICY = _PROCESS_MITIGATION_DEP_POLICY;
alias PPROCESS_MITIGATION_DEP_POLICY = _PROCESS_MITIGATION_DEP_POLICY*;

struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "RaiseExceptionOnInvalidHandleReference", 1,
                DWORD, "HandleExceptionsPermanentlyEnabled", 1,
                DWORD, "ReservedFlags", 30));
        }
    }
}

alias PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
alias PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY*;

struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "DisallowWin32kSystemCalls", 1,
                DWORD, "ReservedFlags", 31));
        }
    }
}

alias PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
alias PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY*;

struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "DisableExtensionPoints", 1,
                DWORD, "ReservedFlags", 31));
        }
    }
}

alias PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
alias PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY*;

struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "EnableControlFlowGuard", 1,
                DWORD, "EnableExportSuppression", 1,
                DWORD, "StrictMode", 1,
                DWORD, "ReservedFlags", 29));
        }
    }
}

alias PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
alias PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY*;

struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "MicrosoftSignedOnly", 1,
                DWORD, "StoreSignedOnly", 1,
                DWORD, "MitigationOptIn", 1,
                DWORD, "ReservedFlags", 29));
        }
    }
}

alias PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
alias PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY*;

struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "ProhibitDynamicCode", 1,
                DWORD, "AllowThreadOptOut", 1,
                DWORD, "AllowRemoteDowngrade", 1,
                DWORD, "ReservedFlags", 30,
                uint, "", 31));
        }
    }
}

alias PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
alias PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY*;

struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "DisableNonSystemFonts", 1,
                DWORD, "AuditNonSystemFontLoading", 1,
                DWORD, "ReservedFlags", 30));
        }
    }
}

alias PROCESS_MITIGATION_FONT_DISABLE_POLICY = _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
alias PPROCESS_MITIGATION_FONT_DISABLE_POLICY = _PROCESS_MITIGATION_FONT_DISABLE_POLICY*;

struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY
{
    union
    {
        DWORD Flags;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "NoRemoteImages", 1,
                DWORD, "NoLowMandatoryLabelImages", 1,
                DWORD, "PreferSystem32Images", 1,
                DWORD, "ReservedFlags", 29));
        }
    }
}

alias PROCESS_MITIGATION_IMAGE_LOAD_POLICY = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
alias PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY*;

struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
}

alias JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
alias PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION*;

struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
}

alias JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION;
alias PJOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION*;

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
}

alias JOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
alias PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION*;

struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR[1] ProcessIdList;
}

alias JOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST;
alias PJOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST*;

struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
    DWORD UIRestrictionsClass;
}

alias JOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS;
alias PJOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS*;

struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
    DWORD SecurityLimitFlags;
    HANDLE JobToken;
    PTOKEN_GROUPS SidsToDisable;
    PTOKEN_PRIVILEGES PrivilegesToDelete;
    PTOKEN_GROUPS RestrictedSids;
}

alias JOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
alias PJOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION*;

struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
    DWORD EndOfJobTimeAction;
}

alias JOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
alias PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION*;

struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
    PVOID CompletionKey;
    HANDLE CompletionPort;
}

alias JOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
alias PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT*;

struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
}

alias JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
alias PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION*;

struct _JOBOBJECT_JOBSET_INFORMATION
{
    DWORD MemberLevel;
}

alias JOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION;
alias PJOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION*;

enum _JOBOBJECT_RATE_CONTROL_TOLERANCE
{
    ToleranceLow = 1,
    ToleranceMedium = 2,
    ToleranceHigh = 3
}

alias JOBOBJECT_RATE_CONTROL_TOLERANCE = _JOBOBJECT_RATE_CONTROL_TOLERANCE;

enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
{
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium = 2,
    ToleranceIntervalLong = 3
}

alias JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
{
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
}

alias JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
alias PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION*;

struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
{
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
}

alias JOBOBJECT_LIMIT_VIOLATION_INFORMATION = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
alias PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION*;

struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
{
    DWORD ControlFlags;

    union
    {
        DWORD CpuRate;
        DWORD Weight;
    }
}

alias JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
alias PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION*;

enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    MaxJobObjectInfoClass = 26
}

alias JOBOBJECTINFOCLASS = _JOBOBJECTINFOCLASS;

enum _FIRMWARE_TYPE
{
    FirmwareTypeUnknown = 0,
    FirmwareTypeBios = 1,
    FirmwareTypeUefi = 2,
    FirmwareTypeMax = 3
}

alias FIRMWARE_TYPE = _FIRMWARE_TYPE;
alias PFIRMWARE_TYPE = _FIRMWARE_TYPE*;

enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
    RelationProcessorCore = 0,
    RelationNumaNode = 1,
    RelationCache = 2,
    RelationProcessorPackage = 3,
    RelationGroup = 4,
    RelationAll = 0xffff
}

alias LOGICAL_PROCESSOR_RELATIONSHIP = _LOGICAL_PROCESSOR_RELATIONSHIP;

enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3
}

alias PROCESSOR_CACHE_TYPE = _PROCESSOR_CACHE_TYPE;

struct _CACHE_DESCRIPTOR
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
}

alias CACHE_DESCRIPTOR = _CACHE_DESCRIPTOR;
alias PCACHE_DESCRIPTOR = _CACHE_DESCRIPTOR*;

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;

    union
    {
        struct _Anonymous_10
        {
            BYTE Flags;
        }

        _Anonymous_10 ProcessorCore;

        struct _Anonymous_11
        {
            DWORD NodeNumber;
        }

        _Anonymous_11 NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG[2] Reserved;
    }
}

alias SYSTEM_LOGICAL_PROCESSOR_INFORMATION = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
alias PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION*;

struct _PROCESSOR_RELATIONSHIP
{
    BYTE Flags;
    BYTE[21] Reserved;
    WORD GroupCount;
    GROUP_AFFINITY[1] GroupMask;
}

alias PROCESSOR_RELATIONSHIP = _PROCESSOR_RELATIONSHIP;
alias PPROCESSOR_RELATIONSHIP = _PROCESSOR_RELATIONSHIP*;

struct _NUMA_NODE_RELATIONSHIP
{
    DWORD NodeNumber;
    BYTE[20] Reserved;
    GROUP_AFFINITY GroupMask;
}

alias NUMA_NODE_RELATIONSHIP = _NUMA_NODE_RELATIONSHIP;
alias PNUMA_NODE_RELATIONSHIP = _NUMA_NODE_RELATIONSHIP*;

struct _CACHE_RELATIONSHIP
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE[20] Reserved;
    GROUP_AFFINITY GroupMask;
}

alias CACHE_RELATIONSHIP = _CACHE_RELATIONSHIP;
alias PCACHE_RELATIONSHIP = _CACHE_RELATIONSHIP*;

struct _PROCESSOR_GROUP_INFO
{
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE[38] Reserved;
    KAFFINITY ActiveProcessorMask;
}

alias PROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO;
alias PPROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO*;

struct _GROUP_RELATIONSHIP
{
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE[20] Reserved;
    PROCESSOR_GROUP_INFO[1] GroupInfo;
}

alias GROUP_RELATIONSHIP = _GROUP_RELATIONSHIP;
alias PGROUP_RELATIONSHIP = _GROUP_RELATIONSHIP*;

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;

    union
    {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    }
}

alias SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
alias PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX*;

struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
    DWORD64 CycleTime;
}

alias SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
alias PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION*;

struct _XSTATE_FEATURE
{
    DWORD Offset;
    DWORD Size;
}

alias XSTATE_FEATURE = _XSTATE_FEATURE;
alias PXSTATE_FEATURE = _XSTATE_FEATURE*;

struct _XSTATE_CONFIGURATION
{
    

    DWORD64 EnabledFeatures;
    DWORD64 EnabledVolatileFeatures;
    DWORD Size;

    mixin(bitfields!(
        DWORD, "OptimizedSave", 1,
        uint, "", 7));

    XSTATE_FEATURE[64] Features;
}

alias XSTATE_CONFIGURATION = _XSTATE_CONFIGURATION;
alias PXSTATE_CONFIGURATION = _XSTATE_CONFIGURATION*;

struct _MEMORY_BASIC_INFORMATION
{
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
}

alias MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION;
alias PMEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION*;

struct _MEMORY_BASIC_INFORMATION32
{
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
}

alias MEMORY_BASIC_INFORMATION32 = _MEMORY_BASIC_INFORMATION32;
alias PMEMORY_BASIC_INFORMATION32 = _MEMORY_BASIC_INFORMATION32*;

struct _MEMORY_BASIC_INFORMATION64
{
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
}

alias MEMORY_BASIC_INFORMATION64 = _MEMORY_BASIC_INFORMATION64;
alias PMEMORY_BASIC_INFORMATION64 = _MEMORY_BASIC_INFORMATION64*;

struct FILE_ID_128
{
    ULONGLONG LowPart;
    ULONGLONG HighPart;
}

alias PFILE_ID_128 = FILE_ID_128*;

struct _FILE_NOTIFY_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR[1] FileName;
}

alias FILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION;
alias PFILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION*;

union _FILE_SEGMENT_ELEMENT
{
    PVOID64 Buffer;
    ULONGLONG Alignment;
}

alias FILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT;
alias PFILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT*;

struct _REPARSE_GUID_DATA_BUFFER
{
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;

    struct _Anonymous_12
    {
        BYTE[1] DataBuffer;
    }

    _Anonymous_12 GenericReparseBuffer;
}

alias REPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER;
alias PREPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER*;

extern __gshared const GUID GUID_MAX_POWER_SAVINGS;
extern __gshared const GUID GUID_MIN_POWER_SAVINGS;
extern __gshared const GUID GUID_TYPICAL_POWER_SAVINGS;
extern __gshared const GUID NO_SUBGROUP_GUID;
extern __gshared const GUID ALL_POWERSCHEMES_GUID;
extern __gshared const GUID GUID_POWERSCHEME_PERSONALITY;
extern __gshared const GUID GUID_ACTIVE_POWERSCHEME;
extern __gshared const GUID GUID_IDLE_RESILIENCY_SUBGROUP;
extern __gshared const GUID GUID_IDLE_RESILIENCY_PERIOD;
extern __gshared const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
extern __gshared const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
extern __gshared const GUID GUID_VIDEO_SUBGROUP;
extern __gshared const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
extern __gshared const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
extern __gshared const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
extern __gshared const GUID GUID_VIDEO_DIM_TIMEOUT;
extern __gshared const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
extern __gshared const GUID GUID_MONITOR_POWER_ON;
extern __gshared const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
extern __gshared const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
extern __gshared const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
extern __gshared const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
extern __gshared const GUID GUID_CONSOLE_DISPLAY_STATE;
extern __gshared const GUID GUID_ALLOW_DISPLAY_REQUIRED;
extern __gshared const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
extern __gshared const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
extern __gshared const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
extern __gshared const GUID GUID_DISK_SUBGROUP;
extern __gshared const GUID GUID_DISK_POWERDOWN_TIMEOUT;
extern __gshared const GUID GUID_DISK_IDLE_TIMEOUT;
extern __gshared const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
extern __gshared const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
extern __gshared const GUID GUID_SLEEP_SUBGROUP;
extern __gshared const GUID GUID_SLEEP_IDLE_THRESHOLD;
extern __gshared const GUID GUID_STANDBY_TIMEOUT;
extern __gshared const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
extern __gshared const GUID GUID_HIBERNATE_TIMEOUT;
extern __gshared const GUID GUID_HIBERNATE_FASTS4_POLICY;
extern __gshared const GUID GUID_CRITICAL_POWER_TRANSITION;
extern __gshared const GUID GUID_SYSTEM_AWAYMODE;
extern __gshared const GUID GUID_ALLOW_AWAYMODE;
extern __gshared const GUID GUID_ALLOW_STANDBY_STATES;
extern __gshared const GUID GUID_ALLOW_RTC_WAKE;
extern __gshared const GUID GUID_ALLOW_SYSTEM_REQUIRED;
extern __gshared const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
extern __gshared const GUID GUID_POWERBUTTON_ACTION;
extern __gshared const GUID GUID_SLEEPBUTTON_ACTION;
extern __gshared const GUID GUID_USERINTERFACEBUTTON_ACTION;
extern __gshared const GUID GUID_LIDCLOSE_ACTION;
extern __gshared const GUID GUID_LIDOPEN_POWERSTATE;
extern __gshared const GUID GUID_BATTERY_SUBGROUP;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern __gshared const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
extern __gshared const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
extern __gshared const GUID GUID_PROCESSOR_THROTTLE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
extern __gshared const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
extern __gshared const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
extern __gshared const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
extern __gshared const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
extern __gshared const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
extern __gshared const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
extern __gshared const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
extern __gshared const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
extern __gshared const GUID GUID_PROCESSOR_IDLE_DISABLE;
extern __gshared const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
extern __gshared const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
extern __gshared const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
extern __gshared const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
extern __gshared const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
extern __gshared const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
extern __gshared const GUID GUID_PROCESSOR_PERF_HISTORY;
extern __gshared const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;
extern __gshared const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;
extern __gshared const GUID GUID_SYSTEM_COOLING_POLICY;
extern __gshared const GUID GUID_LOCK_CONSOLE_ON_WAKE;
extern __gshared const GUID GUID_DEVICE_IDLE_POLICY;
extern __gshared const GUID GUID_ACDC_POWER_SOURCE;
extern __gshared const GUID GUID_LIDSWITCH_STATE_CHANGE;
extern __gshared const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
extern __gshared const GUID GUID_GLOBAL_USER_PRESENCE;
extern __gshared const GUID GUID_SESSION_DISPLAY_STATUS;
extern __gshared const GUID GUID_SESSION_USER_PRESENCE;
extern __gshared const GUID GUID_IDLE_BACKGROUND_TASK;
extern __gshared const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
extern __gshared const GUID GUID_APPLAUNCH_BUTTON;
extern __gshared const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
extern __gshared const GUID GUID_PCIEXPRESS_ASPM_POLICY;
extern __gshared const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;

enum _SYSTEM_POWER_STATE
{
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
}

alias SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE;
alias PSYSTEM_POWER_STATE = _SYSTEM_POWER_STATE*;

enum POWER_ACTION
{
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7
}

alias PPOWER_ACTION = POWER_ACTION*;

enum _DEVICE_POWER_STATE
{
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
}

alias DEVICE_POWER_STATE = _DEVICE_POWER_STATE;
alias PDEVICE_POWER_STATE = _DEVICE_POWER_STATE*;

enum _MONITOR_DISPLAY_STATE
{
    PowerMonitorOff = 0,
    PowerMonitorOn = 1,
    PowerMonitorDim = 2
}

alias MONITOR_DISPLAY_STATE = _MONITOR_DISPLAY_STATE;
alias PMONITOR_DISPLAY_STATE = _MONITOR_DISPLAY_STATE*;

enum _USER_ACTIVITY_PRESENCE
{
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = PowerUserMaximum
}

alias USER_ACTIVITY_PRESENCE = _USER_ACTIVITY_PRESENCE;
alias PUSER_ACTIVITY_PRESENCE = _USER_ACTIVITY_PRESENCE*;

alias EXECUTION_STATE = c_ulong;
alias PEXECUTION_STATE = c_ulong*;

enum LATENCY_TIME
{
    LT_DONT_CARE = 0,
    LT_LOWEST_LATENCY = 1
}

enum _POWER_REQUEST_TYPE
{
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
}

alias POWER_REQUEST_TYPE = _POWER_REQUEST_TYPE;
alias PPOWER_REQUEST_TYPE = _POWER_REQUEST_TYPE*;

struct CM_Power_Data_s
{
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE[7] PD_PowerStateMapping;
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
}

alias CM_POWER_DATA = CM_Power_Data_s;
alias PCM_POWER_DATA = CM_Power_Data_s*;

enum POWER_INFORMATION_LEVEL
{
    SystemPowerPolicyAc = 0,
    SystemPowerPolicyDc = 1,
    VerifySystemPolicyAc = 2,
    VerifySystemPolicyDc = 3,
    SystemPowerCapabilities = 4,
    SystemBatteryState = 5,
    SystemPowerStateHandler = 6,
    ProcessorStateHandler = 7,
    SystemPowerPolicyCurrent = 8,
    AdministratorPowerPolicy = 9,
    SystemReserveHiberFile = 10,
    ProcessorInformation = 11,
    SystemPowerInformation = 12,
    ProcessorStateHandler2 = 13,
    LastWakeTime = 14,
    LastSleepTime = 15,
    SystemExecutionState = 16,
    SystemPowerStateNotifyHandler = 17,
    ProcessorPowerPolicyAc = 18,
    ProcessorPowerPolicyDc = 19,
    VerifyProcessorPowerPolicyAc = 20,
    VerifyProcessorPowerPolicyDc = 21,
    ProcessorPowerPolicyCurrent = 22,
    SystemPowerStateLogging = 23,
    SystemPowerLoggingEntry = 24,
    SetPowerSettingValue = 25,
    NotifyUserPowerSetting = 26,
    PowerInformationLevelUnused0 = 27,
    SystemMonitorHiberBootPowerOff = 28,
    SystemVideoState = 29,
    TraceApplicationPowerMessage = 30,
    TraceApplicationPowerMessageEnd = 31,
    ProcessorPerfStates = 32,
    ProcessorIdleStates = 33,
    ProcessorCap = 34,
    SystemWakeSource = 35,
    SystemHiberFileInformation = 36,
    TraceServicePowerMessage = 37,
    ProcessorLoad = 38,
    PowerShutdownNotification = 39,
    MonitorCapabilities = 40,
    SessionPowerInit = 41,
    SessionDisplayState = 42,
    PowerRequestCreate = 43,
    PowerRequestAction = 44,
    GetPowerRequestList = 45,
    ProcessorInformationEx = 46,
    NotifyUserModeLegacyPowerEvent = 47,
    GroupPark = 48,
    ProcessorIdleDomains = 49,
    WakeTimerList = 50,
    SystemHiberFileSize = 51,
    ProcessorIdleStatesHv = 52,
    ProcessorPerfStatesHv = 53,
    ProcessorPerfCapHv = 54,
    ProcessorSetIdle = 55,
    LogicalProcessorIdling = 56,
    UserPresence = 57,
    PowerSettingNotificationName = 58,
    GetPowerSettingValue = 59,
    IdleResiliency = 60,
    SessionRITState = 61,
    SessionConnectNotification = 62,
    SessionPowerCleanup = 63,
    SessionLockState = 64,
    SystemHiberbootState = 65,
    PlatformInformation = 66,
    PdcInvocation = 67,
    MonitorInvocation = 68,
    FirmwareTableInformationRegistered = 69,
    SetShutdownSelectedTime = 70,
    SuspendResumeInvocation = 71,
    PlmPowerRequestCreate = 72,
    ScreenOff = 73,
    CsDeviceNotification = 74,
    PlatformRole = 75,
    LastResumePerformance = 76,
    DisplayBurst = 77,
    ExitLatencySamplingPercentage = 78,
    ApplyLowPowerScenarioSettings = 79,
    PowerInformationLevelMaximum = 80
}

enum POWER_USER_PRESENCE_TYPE
{
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
}

alias PPOWER_USER_PRESENCE_TYPE = POWER_USER_PRESENCE_TYPE*;

struct _POWER_USER_PRESENCE
{
    POWER_USER_PRESENCE_TYPE UserPresence;
}

alias POWER_USER_PRESENCE = _POWER_USER_PRESENCE;
alias PPOWER_USER_PRESENCE = _POWER_USER_PRESENCE*;

struct _POWER_SESSION_CONNECT
{
    BOOLEAN Connected;
    BOOLEAN Console;
}

alias POWER_SESSION_CONNECT = _POWER_SESSION_CONNECT;
alias PPOWER_SESSION_CONNECT = _POWER_SESSION_CONNECT*;

struct _POWER_SESSION_TIMEOUTS
{
    DWORD InputTimeout;
    DWORD DisplayTimeout;
}

alias POWER_SESSION_TIMEOUTS = _POWER_SESSION_TIMEOUTS;
alias PPOWER_SESSION_TIMEOUTS = _POWER_SESSION_TIMEOUTS*;

struct _POWER_SESSION_RIT_STATE
{
    BOOLEAN Active;
    DWORD LastInputTime;
}

alias POWER_SESSION_RIT_STATE = _POWER_SESSION_RIT_STATE;
alias PPOWER_SESSION_RIT_STATE = _POWER_SESSION_RIT_STATE*;

struct _POWER_SESSION_WINLOGON
{
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
}

alias POWER_SESSION_WINLOGON = _POWER_SESSION_WINLOGON;
alias PPOWER_SESSION_WINLOGON = _POWER_SESSION_WINLOGON*;

struct _POWER_IDLE_RESILIENCY
{
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
}

alias POWER_IDLE_RESILIENCY = _POWER_IDLE_RESILIENCY;
alias PPOWER_IDLE_RESILIENCY = _POWER_IDLE_RESILIENCY*;

enum POWER_MONITOR_REQUEST_REASON
{
    MonitorRequestReasonUnknown = 0,
    MonitorRequestReasonPowerButton = 1,
    MonitorRequestReasonRemoteConnection = 2,
    MonitorRequestReasonScMonitorpower = 3,
    MonitorRequestReasonUserInput = 4,
    MonitorRequestReasonAcDcDisplayBurst = 5,
    MonitorRequestReasonUserDisplayBurst = 6,
    MonitorRequestReasonPoSetSystemState = 7,
    MonitorRequestReasonSetThreadExecutionState = 8,
    MonitorRequestReasonFullWake = 9,
    MonitorRequestReasonSessionUnlock = 10,
    MonitorRequestReasonScreenOffRequest = 11,
    MonitorRequestReasonIdleTimeout = 12,
    MonitorRequestReasonPolicyChange = 13,
    MonitorRequestReasonMax = 14
}

struct _POWER_MONITOR_INVOCATION
{
    BOOLEAN On;
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
}

alias POWER_MONITOR_INVOCATION = _POWER_MONITOR_INVOCATION;
alias PPOWER_MONITOR_INVOCATION = _POWER_MONITOR_INVOCATION*;

struct _RESUME_PERFORMANCE
{
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
}

alias RESUME_PERFORMANCE = _RESUME_PERFORMANCE;
alias PRESUME_PERFORMANCE = _RESUME_PERFORMANCE*;

enum SYSTEM_POWER_CONDITION
{
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3
}

struct SET_POWER_SETTING_VALUE
{
    DWORD Version;
    GUID Guid;
    SYSTEM_POWER_CONDITION PowerCondition;
    DWORD DataLength;
    BYTE[1] Data;
}

alias PSET_POWER_SETTING_VALUE = SET_POWER_SETTING_VALUE*;

struct NOTIFY_USER_POWER_SETTING
{
    GUID Guid;
}

alias PNOTIFY_USER_POWER_SETTING = NOTIFY_USER_POWER_SETTING*;

struct _APPLICATIONLAUNCH_SETTING_VALUE
{
    LARGE_INTEGER ActivationTime;
    DWORD Flags;
    DWORD ButtonInstanceID;
}

alias APPLICATIONLAUNCH_SETTING_VALUE = _APPLICATIONLAUNCH_SETTING_VALUE;
alias PAPPLICATIONLAUNCH_SETTING_VALUE = _APPLICATIONLAUNCH_SETTING_VALUE*;

enum _POWER_PLATFORM_ROLE
{
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop = 1,
    PlatformRoleMobile = 2,
    PlatformRoleWorkstation = 3,
    PlatformRoleEnterpriseServer = 4,
    PlatformRoleSOHOServer = 5,
    PlatformRoleAppliancePC = 6,
    PlatformRolePerformanceServer = 7,
    PlatformRoleSlate = 8,
    PlatformRoleMaximum = 9
}

alias POWER_PLATFORM_ROLE = _POWER_PLATFORM_ROLE;
alias PPOWER_PLATFORM_ROLE = _POWER_PLATFORM_ROLE*;

struct _POWER_PLATFORM_INFORMATION
{
    BOOLEAN AoAc;
}

alias POWER_PLATFORM_INFORMATION = _POWER_PLATFORM_INFORMATION;
alias PPOWER_PLATFORM_INFORMATION = _POWER_PLATFORM_INFORMATION*;

struct BATTERY_REPORTING_SCALE
{
    DWORD Granularity;
    DWORD Capacity;
}

alias PBATTERY_REPORTING_SCALE = BATTERY_REPORTING_SCALE*;

struct PPM_WMI_LEGACY_PERFSTATE
{
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
}

alias PPPM_WMI_LEGACY_PERFSTATE = PPM_WMI_LEGACY_PERFSTATE*;

struct PPM_WMI_IDLE_STATE
{
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
}

alias PPPM_WMI_IDLE_STATE = PPM_WMI_IDLE_STATE*;

struct PPM_WMI_IDLE_STATES
{
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE[1] State;
}

alias PPPM_WMI_IDLE_STATES = PPM_WMI_IDLE_STATES*;

struct PPM_WMI_IDLE_STATES_EX
{
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE[1] State;
}

alias PPPM_WMI_IDLE_STATES_EX = PPM_WMI_IDLE_STATES_EX*;

struct PPM_WMI_PERF_STATE
{
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
}

alias PPPM_WMI_PERF_STATE = PPM_WMI_PERF_STATE*;

struct PPM_WMI_PERF_STATES
{
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE[1] State;
}

alias PPPM_WMI_PERF_STATES = PPM_WMI_PERF_STATES*;

struct PPM_WMI_PERF_STATES_EX
{
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE[1] State;
}

alias PPPM_WMI_PERF_STATES_EX = PPM_WMI_PERF_STATES_EX*;

struct PPM_IDLE_STATE_ACCOUNTING
{
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD[6] IdleTimeBuckets;
}

alias PPPM_IDLE_STATE_ACCOUNTING = PPM_IDLE_STATE_ACCOUNTING*;

struct PPM_IDLE_ACCOUNTING
{
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING[1] State;
}

alias PPPM_IDLE_ACCOUNTING = PPM_IDLE_ACCOUNTING*;

struct PPM_IDLE_STATE_BUCKET_EX
{
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
}

alias PPPM_IDLE_STATE_BUCKET_EX = PPM_IDLE_STATE_BUCKET_EX*;

struct PPM_IDLE_STATE_ACCOUNTING_EX
{
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX[16] IdleTimeBuckets;
}

alias PPPM_IDLE_STATE_ACCOUNTING_EX = PPM_IDLE_STATE_ACCOUNTING_EX*;

struct PPM_IDLE_ACCOUNTING_EX
{
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING_EX[1] State;
}

alias PPPM_IDLE_ACCOUNTING_EX = PPM_IDLE_ACCOUNTING_EX*;

struct PPM_PERFSTATE_EVENT
{
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
}

alias PPPM_PERFSTATE_EVENT = PPM_PERFSTATE_EVENT*;

struct PPM_PERFSTATE_DOMAIN_EVENT
{
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
}

alias PPPM_PERFSTATE_DOMAIN_EVENT = PPM_PERFSTATE_DOMAIN_EVENT*;

struct PPM_IDLESTATE_EVENT
{
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
}

alias PPPM_IDLESTATE_EVENT = PPM_IDLESTATE_EVENT*;

struct PPM_THERMALCHANGE_EVENT
{
    DWORD ThermalConstraint;
    DWORD64 Processors;
}

alias PPPM_THERMALCHANGE_EVENT = PPM_THERMALCHANGE_EVENT*;

struct PPM_THERMAL_POLICY_EVENT
{
    BYTE Mode;
    DWORD64 Processors;
}

alias PPPM_THERMAL_POLICY_EVENT = PPM_THERMAL_POLICY_EVENT*;

extern __gshared const GUID PPM_PERFSTATE_CHANGE_GUID;
extern __gshared const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
extern __gshared const GUID PPM_IDLESTATE_CHANGE_GUID;
extern __gshared const GUID PPM_PERFSTATES_DATA_GUID;
extern __gshared const GUID PPM_IDLESTATES_DATA_GUID;
extern __gshared const GUID PPM_IDLE_ACCOUNTING_GUID;
extern __gshared const GUID PPM_IDLE_ACCOUNTING_EX_GUID;
extern __gshared const GUID PPM_THERMALCONSTRAINT_GUID;
extern __gshared const GUID PPM_PERFMON_PERFSTATE_GUID;
extern __gshared const GUID PPM_THERMAL_POLICY_CHANGE_GUID;

struct POWER_ACTION_POLICY
{
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
}

alias PPOWER_ACTION_POLICY = POWER_ACTION_POLICY*;

struct PROCESSOR_IDLESTATE_INFO
{
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE[2] Spare;
}

alias PPROCESSOR_IDLESTATE_INFO = PROCESSOR_IDLESTATE_INFO*;

struct SYSTEM_POWER_LEVEL
{
    BOOLEAN Enable;
    BYTE[3] Spare;
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
}

alias PSYSTEM_POWER_LEVEL = SYSTEM_POWER_LEVEL*;

struct _SYSTEM_POWER_POLICY
{
    DWORD Revision;
    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;
    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;
    BYTE DynamicThrottle;
    BYTE[2] Spare2;
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;
    DWORD Spare3;
    DWORD DozeS4Timeout;
    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL[4] DischargePolicy;
    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD[3] VideoReserved;
    DWORD SpindownTimeout;
    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;
}

alias SYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY;
alias PSYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY*;

struct PROCESSOR_IDLESTATE_POLICY
{
    WORD Revision;

    union _Anonymous_13
    {
        WORD AsWORD;

        struct
        {
            

            mixin(bitfields!(
                WORD, "AllowScaling", 1,
                WORD, "Disabled", 1,
                WORD, "Reserved", 14));
        }
    }

    _Anonymous_13 Flags;
    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO[0x3] Policy;
}

alias PPROCESSOR_IDLESTATE_POLICY = PROCESSOR_IDLESTATE_POLICY*;

struct _PROCESSOR_POWER_POLICY_INFO
{
    

    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE[2] Spare;

    mixin(bitfields!(
        DWORD, "AllowDemotion", 1,
        DWORD, "AllowPromotion", 1,
        DWORD, "Reserved", 30));
}

alias PROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO;
alias PPROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO*;

struct _PROCESSOR_POWER_POLICY
{
    

    DWORD Revision;
    BYTE DynamicThrottle;
    BYTE[3] Spare;

    mixin(bitfields!(
        DWORD, "DisableCStates", 1,
        DWORD, "Reserved", 31));

    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO[3] Policy;
}

alias PROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY;
alias PPROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY*;

struct PROCESSOR_PERFSTATE_POLICY
{
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;

    union
    {
        BYTE Spare;

        union _Anonymous_14
        {
            BYTE AsBYTE;

            struct
            {
                

                mixin(bitfields!(
                    BYTE, "NoDomainAccounting", 1,
                    BYTE, "IncreasePolicy", 2,
                    BYTE, "DecreasePolicy", 2,
                    BYTE, "Reserved", 3));
            }
        }

        _Anonymous_14 Flags;
    }

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
}

alias PPROCESSOR_PERFSTATE_POLICY = PROCESSOR_PERFSTATE_POLICY*;

struct _ADMINISTRATOR_POWER_POLICY
{
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;
    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
}

alias ADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY;
alias PADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY*;

struct SYSTEM_POWER_CAPABILITIES
{
    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;
    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;
    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BYTE[3] spare2;
    BOOLEAN DiskSpinDown;
    BYTE[8] spare3;
    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE[3] BatteryScale;
    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
}

alias PSYSTEM_POWER_CAPABILITIES = SYSTEM_POWER_CAPABILITIES*;

struct SYSTEM_BATTERY_STATE
{
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN[4] Spare1;
    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;
    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
}

alias PSYSTEM_BATTERY_STATE = SYSTEM_BATTERY_STATE*;

struct _IMAGE_DOS_HEADER
{
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD[4] e_res;
    WORD e_oemid;
    WORD e_oeminfo;
    WORD[10] e_res2;
    LONG e_lfanew;
}

alias IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER;
alias PIMAGE_DOS_HEADER = _IMAGE_DOS_HEADER*;

struct _IMAGE_OS2_HEADER
{
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
}

alias IMAGE_OS2_HEADER = _IMAGE_OS2_HEADER;
alias PIMAGE_OS2_HEADER = _IMAGE_OS2_HEADER*;

struct _IMAGE_VXD_HEADER
{
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE[12] e32_res3;
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
}

alias IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER;
alias PIMAGE_VXD_HEADER = _IMAGE_VXD_HEADER*;

struct _IMAGE_FILE_HEADER
{
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
}

alias IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER;
alias PIMAGE_FILE_HEADER = _IMAGE_FILE_HEADER*;

struct _IMAGE_DATA_DIRECTORY
{
    DWORD VirtualAddress;
    DWORD Size;
}

alias IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY;
alias PIMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY*;

struct _IMAGE_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY[16] DataDirectory;
}

alias IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER;
alias PIMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER*;

struct _IMAGE_ROM_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD[4] CprMask;
    DWORD GpValue;
}

alias IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER;
alias PIMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER*;

struct _IMAGE_OPTIONAL_HEADER64
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY[16] DataDirectory;
}

alias IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64;
alias PIMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64*;

alias IMAGE_OPTIONAL_HEADER = _IMAGE_OPTIONAL_HEADER64;
alias PIMAGE_OPTIONAL_HEADER = _IMAGE_OPTIONAL_HEADER64*;

struct _IMAGE_NT_HEADERS64
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
}

alias IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64;
alias PIMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64*;

struct _IMAGE_NT_HEADERS
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
}

alias IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS;
alias PIMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS*;

struct _IMAGE_ROM_HEADERS
{
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
}

alias IMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS;
alias PIMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS*;

alias IMAGE_NT_HEADERS = _IMAGE_NT_HEADERS64;
alias PIMAGE_NT_HEADERS = _IMAGE_NT_HEADERS64*;

struct ANON_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
}

struct ANON_OBJECT_HEADER_V2
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
}

struct ANON_OBJECT_HEADER_BIGOBJ
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
}

struct _IMAGE_SECTION_HEADER
{
    BYTE[8] Name;

    union _Anonymous_15
    {
        DWORD PhysicalAddress;
        DWORD VirtualSize;
    }

    _Anonymous_15 Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
}

alias IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER;
alias PIMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER*;

struct _IMAGE_SYMBOL
{
    union _Anonymous_16
    {
        BYTE[8] ShortName;

        struct _Anonymous_17
        {
            DWORD Short;
            DWORD Long;
        }

        _Anonymous_17 Name;
        DWORD[2] LongName;
    }

    _Anonymous_16 N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
}

alias IMAGE_SYMBOL = _IMAGE_SYMBOL;
alias PIMAGE_SYMBOL = _IMAGE_SYMBOL*;

struct _IMAGE_SYMBOL_EX
{
    union _Anonymous_18
    {
        BYTE[8] ShortName;

        struct _Anonymous_19
        {
            DWORD Short;
            DWORD Long;
        }

        _Anonymous_19 Name;
        DWORD[2] LongName;
    }

    _Anonymous_18 N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
}

alias IMAGE_SYMBOL_EX = _IMAGE_SYMBOL_EX;
alias PIMAGE_SYMBOL_EX = _IMAGE_SYMBOL_EX*;

struct IMAGE_AUX_SYMBOL_TOKEN_DEF
{
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE[12] rgbReserved;
}

alias PIMAGE_AUX_SYMBOL_TOKEN_DEF = IMAGE_AUX_SYMBOL_TOKEN_DEF*;

union _IMAGE_AUX_SYMBOL
{
    struct _Anonymous_20
    {
        DWORD TagIndex;

        union _Anonymous_21
        {
            struct _Anonymous_22
            {
                WORD Linenumber;
                WORD Size;
            }

            _Anonymous_22 LnSz;
            DWORD TotalSize;
        }

        _Anonymous_21 Misc;

        union _Anonymous_23
        {
            struct _Anonymous_24
            {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            }

            _Anonymous_24 Function;

            struct _Anonymous_25
            {
                WORD[4] Dimension;
            }

            _Anonymous_25 Array;
        }

        _Anonymous_23 FcnAry;
        WORD TvIndex;
    }

    _Anonymous_20 Sym;

    struct _Anonymous_26
    {
        BYTE[18] Name;
    }

    _Anonymous_26 File;

    struct _Anonymous_27
    {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
    }

    _Anonymous_27 Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;

    struct _Anonymous_28
    {
        DWORD crc;
        BYTE[14] rgbReserved;
    }

    _Anonymous_28 CRC;
}

alias IMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL;
alias PIMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL*;

union _IMAGE_AUX_SYMBOL_EX
{
    struct _Anonymous_29
    {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE[12] rgbReserved;
    }

    _Anonymous_29 Sym;

    struct _Anonymous_30
    {
        BYTE[20] Name;
    }

    _Anonymous_30 File;

    struct _Anonymous_31
    {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE[2] rgbReserved;
    }

    _Anonymous_31 Section;

    struct
    {
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE[2] rgbReserved;
    }

    struct _Anonymous_32
    {
        DWORD crc;
        BYTE[16] rgbReserved;
    }

    _Anonymous_32 CRC;
}

alias IMAGE_AUX_SYMBOL_EX = _IMAGE_AUX_SYMBOL_EX;
alias PIMAGE_AUX_SYMBOL_EX = _IMAGE_AUX_SYMBOL_EX*;

enum IMAGE_AUX_SYMBOL_TYPE
{
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
}

struct _IMAGE_RELOCATION
{
    union
    {
        DWORD VirtualAddress;
        DWORD RelocCount;
    }

    DWORD SymbolTableIndex;
    WORD Type;
}

alias IMAGE_RELOCATION = _IMAGE_RELOCATION;
alias PIMAGE_RELOCATION = _IMAGE_RELOCATION*;

struct _IMAGE_LINENUMBER
{
    union _Anonymous_33
    {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    }

    _Anonymous_33 Type;
    WORD Linenumber;
}

alias IMAGE_LINENUMBER = _IMAGE_LINENUMBER;
alias PIMAGE_LINENUMBER = _IMAGE_LINENUMBER*;

struct _IMAGE_BASE_RELOCATION
{
    DWORD VirtualAddress;
    DWORD SizeOfBlock;
}

alias IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION;
alias PIMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION*;

struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
    BYTE[16] Name;
    BYTE[12] Date;
    BYTE[6] UserID;
    BYTE[6] GroupID;
    BYTE[8] Mode;
    BYTE[10] Size;
    BYTE[2] EndHeader;
}

alias IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER;
alias PIMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER*;

struct _IMAGE_EXPORT_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
}

alias IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY;
alias PIMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY*;

struct _IMAGE_IMPORT_BY_NAME
{
    WORD Hint;
    BYTE[1] Name;
}

alias IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME;
alias PIMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME*;

struct _IMAGE_THUNK_DATA64
{
    union _Anonymous_34
    {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    }

    _Anonymous_34 u1;
}

alias IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64;
alias PIMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64*;

struct _IMAGE_THUNK_DATA32
{
    union _Anonymous_35
    {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    }

    _Anonymous_35 u1;
}

alias IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32;
alias PIMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32*;

alias PIMAGE_TLS_CALLBACK = void function (PVOID DllHandle, DWORD Reason, PVOID Reserved);

struct _IMAGE_TLS_DIRECTORY64
{
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
}

alias IMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64;
alias PIMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64*;

struct _IMAGE_TLS_DIRECTORY32
{
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
}

alias IMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32;
alias PIMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32*;

alias IMAGE_THUNK_DATA = _IMAGE_THUNK_DATA64;
alias PIMAGE_THUNK_DATA = _IMAGE_THUNK_DATA64*;

alias IMAGE_TLS_DIRECTORY = _IMAGE_TLS_DIRECTORY64;
alias PIMAGE_TLS_DIRECTORY = _IMAGE_TLS_DIRECTORY64*;

struct _IMAGE_IMPORT_DESCRIPTOR
{
    union
    {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    }

    DWORD TimeDateStamp;

    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
}

alias IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR;
alias PIMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR*;

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;
}

alias IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR;
alias PIMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR*;

struct _IMAGE_BOUND_FORWARDER_REF
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
}

alias IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF;
alias PIMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF*;

struct _IMAGE_DELAYLOAD_DESCRIPTOR
{
    union _Anonymous_36
    {
        DWORD AllAttributes;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "RvaBased", 1,
                DWORD, "ReservedAttributes", 31));
        }
    }

    _Anonymous_36 Attributes;
    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;
}

alias IMAGE_DELAYLOAD_DESCRIPTOR = _IMAGE_DELAYLOAD_DESCRIPTOR;
alias PIMAGE_DELAYLOAD_DESCRIPTOR = _IMAGE_DELAYLOAD_DESCRIPTOR*;
alias PCIMAGE_DELAYLOAD_DESCRIPTOR = const(_IMAGE_DELAYLOAD_DESCRIPTOR)*;

struct _IMAGE_RESOURCE_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;
}

alias IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY;
alias PIMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY*;

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
    union
    {
        struct
        {
            

            mixin(bitfields!(
                DWORD, "NameOffset", 31,
                DWORD, "NameIsString", 1));
        }

        DWORD Name;
        WORD Id;
    }

    union
    {
        DWORD OffsetToData;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "OffsetToDirectory", 31,
                DWORD, "DataIsDirectory", 1));
        }
    }
}

alias IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY;
alias PIMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY*;

struct _IMAGE_RESOURCE_DIRECTORY_STRING
{
    WORD Length;
    CHAR[1] NameString;
}

alias IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING;
alias PIMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING*;

struct _IMAGE_RESOURCE_DIR_STRING_U
{
    WORD Length;
    WCHAR[1] NameString;
}

alias IMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U;
alias PIMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U*;

struct _IMAGE_RESOURCE_DATA_ENTRY
{
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
}

alias IMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY;
alias PIMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY*;

struct IMAGE_LOAD_CONFIG_DIRECTORY32
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
}

alias PIMAGE_LOAD_CONFIG_DIRECTORY32 = IMAGE_LOAD_CONFIG_DIRECTORY32*;

struct IMAGE_LOAD_CONFIG_DIRECTORY64
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
}

alias PIMAGE_LOAD_CONFIG_DIRECTORY64 = IMAGE_LOAD_CONFIG_DIRECTORY64*;

alias IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64;
alias PIMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64*;

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
    

    DWORD FuncStart;

    mixin(bitfields!(
        DWORD, "PrologLen", 8,
        DWORD, "FuncLen", 22,
        DWORD, "ThirtyTwoBit", 1,
        DWORD, "ExceptionFlag", 1));
}

alias IMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY*;

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
}

alias IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY*;

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
}

alias IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY*;

struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;

    union
    {
        DWORD UnwindData;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "Flag", 2,
                DWORD, "FunctionLength", 11,
                DWORD, "Ret", 2,
                DWORD, "H", 1,
                DWORD, "Reg", 3,
                DWORD, "R", 1,
                DWORD, "L", 1,
                DWORD, "C", 1,
                DWORD, "StackAdjust", 10));
        }
    }
}

alias IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY*;

struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;

    union
    {
        DWORD UnwindData;

        struct
        {
            

            mixin(bitfields!(
                DWORD, "Flag", 2,
                DWORD, "FunctionLength", 11,
                DWORD, "RegF", 3,
                DWORD, "RegI", 4,
                DWORD, "H", 1,
                DWORD, "CR", 2,
                DWORD, "FrameSize", 9));
        }
    }
}

alias IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*;

struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;

    union
    {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    }
}

alias _PIMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY*;

alias IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY*;

alias IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
alias PIMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY*;

struct _IMAGE_DEBUG_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
}

alias IMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY;
alias PIMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY*;

struct _IMAGE_COFF_SYMBOLS_HEADER
{
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
}

alias IMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER;
alias PIMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER*;

struct _FPO_DATA
{
    

    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;

    mixin(bitfields!(
        WORD, "cbProlog", 8,
        WORD, "cbRegs", 3,
        WORD, "fHasSEH", 1,
        WORD, "fUseBP", 1,
        WORD, "reserved", 1,
        WORD, "cbFrame", 2));
}

alias FPO_DATA = _FPO_DATA;
alias PFPO_DATA = _FPO_DATA*;

struct _IMAGE_DEBUG_MISC
{
    DWORD DataType;
    DWORD Length;
    BOOLEAN Unicode;
    BYTE[3] Reserved;
    BYTE[1] Data;
}

alias IMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC;
alias PIMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC*;

struct _IMAGE_FUNCTION_ENTRY
{
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
}

alias IMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY;
alias PIMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY*;

struct _IMAGE_FUNCTION_ENTRY64
{
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;

    union
    {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    }
}

alias IMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64;
alias PIMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64*;

struct _IMAGE_SEPARATE_DEBUG_HEADER
{
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD[2] Reserved;
}

alias IMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER;
alias PIMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER*;

struct _NON_PAGED_DEBUG_INFO
{
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;
}

alias NON_PAGED_DEBUG_INFO = _NON_PAGED_DEBUG_INFO;
alias PNON_PAGED_DEBUG_INFO = _NON_PAGED_DEBUG_INFO*;

struct _ImageArchitectureHeader
{
    

    mixin(bitfields!(
        uint, "AmaskValue", 1,
        int, "Adummy1", 7,
        uint, "AmaskShift", 8,
        int, "Adummy2", 16));

    DWORD FirstEntryRVA;
}

alias IMAGE_ARCHITECTURE_HEADER = _ImageArchitectureHeader;
alias PIMAGE_ARCHITECTURE_HEADER = _ImageArchitectureHeader*;

struct _ImageArchitectureEntry
{
    DWORD FixupInstRVA;
    DWORD NewInst;
}

alias IMAGE_ARCHITECTURE_ENTRY = _ImageArchitectureEntry;
alias PIMAGE_ARCHITECTURE_ENTRY = _ImageArchitectureEntry*;

struct IMPORT_OBJECT_HEADER
{
    

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union
    {
        WORD Ordinal;
        WORD Hint;
    }

    mixin(bitfields!(
        WORD, "Type", 2,
        WORD, "NameType", 3,
        WORD, "Reserved", 11));
}

enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2
}

enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3
}

enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY = 0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR = 0,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,
    IMAGE_COR_MIH_METHODRVA = 0x01,
    IMAGE_COR_MIH_EHRVA = 0x02,
    IMAGE_COR_MIH_BASICBLOCK = 0x08,
    COR_VTABLE_32BIT = 0x01,
    COR_VTABLE_64BIT = 0x02,
    COR_VTABLE_FROM_UNMANAGED = 0x04,
    COR_VTABLE_CALL_MOST_DERIVED = 0x10,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
}

struct IMAGE_COR20_HEADER
{
    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;
    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;

    union
    {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    }

    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;
}

alias PIMAGE_COR20_HEADER = IMAGE_COR20_HEADER*;

WORD RtlCaptureStackBackTrace (DWORD FramesToSkip, DWORD FramesToCapture, PVOID* BackTrace, PDWORD BackTraceHash);
void RtlCaptureContext (PCONTEXT ContextRecord);
SIZE_T RtlCompareMemory (const(void)* Source1, const(void)* Source2, SIZE_T Length);

BOOLEAN RtlAddFunctionTable (PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress);
BOOLEAN RtlDeleteFunctionTable (PRUNTIME_FUNCTION FunctionTable);
BOOLEAN RtlInstallFunctionTableCallback (DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll);
void RtlRestoreContext (PCONTEXT ContextRecord, _EXCEPTION_RECORD* ExceptionRecord);
PEXCEPTION_ROUTINE RtlVirtualUnwind (DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID* HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers);

void RtlUnwind (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
PVOID RtlPcToFileHeader (PVOID PcValue, PVOID* BaseOfImage);

PRUNTIME_FUNCTION RtlLookupFunctionEntry (DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable);
void RtlUnwindEx (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable);

struct _SLIST_ENTRY
{
    _SLIST_ENTRY* Next;
}

alias SLIST_ENTRY = _SLIST_ENTRY;
alias PSLIST_ENTRY = _SLIST_ENTRY*;

union _SLIST_HEADER
{
    struct
    {
        ULONGLONG Alignment;
        ULONGLONG Region;
    }

    struct _Anonymous_37
    {
        

        mixin(bitfields!(
            ULONGLONG, "Depth", 16,
            ULONGLONG, "Sequence", 9,
            ULONGLONG, "NextEntry", 39,
            ULONGLONG, "HeaderType", 1,
            ULONGLONG, "Init", 1,
            ULONGLONG, "Reserved", 59,
            ULONGLONG, "Region", 3));
    }

    _Anonymous_37 Header8;

    struct _Anonymous_38
    {
        

        mixin(bitfields!(
            ULONGLONG, "Depth", 16,
            ULONGLONG, "Sequence", 48,
            ULONGLONG, "HeaderType", 1,
            ULONGLONG, "Reserved", 3,
            ULONGLONG, "NextEntry", 60));
    }

    _Anonymous_38 HeaderX64;
}

alias SLIST_HEADER = _SLIST_HEADER;
alias PSLIST_HEADER = _SLIST_HEADER*;

void RtlInitializeSListHead (PSLIST_HEADER ListHead);
PSLIST_ENTRY RtlFirstEntrySList (const(SLIST_HEADER)* ListHead);
PSLIST_ENTRY RtlInterlockedPopEntrySList (PSLIST_HEADER ListHead);
PSLIST_ENTRY RtlInterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
PSLIST_ENTRY RtlInterlockedPushListSListEx (PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count);
PSLIST_ENTRY RtlInterlockedFlushSList (PSLIST_HEADER ListHead);
WORD RtlQueryDepthSList (PSLIST_HEADER ListHead);

struct _RTL_RUN_ONCE
{
    PVOID Ptr;
}

alias RTL_RUN_ONCE = _RTL_RUN_ONCE;
alias PRTL_RUN_ONCE = _RTL_RUN_ONCE*;
alias PRTL_RUN_ONCE_INIT_FN = c_ulong function (PRTL_RUN_ONCE, PVOID, PVOID*);

struct _RTL_BARRIER
{
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR[2] Reserved3;
    DWORD Reserved4;
    DWORD Reserved5;
}

alias RTL_BARRIER = _RTL_BARRIER;
alias PRTL_BARRIER = _RTL_BARRIER*;

PVOID RtlSecureZeroMemory (PVOID ptr, SIZE_T cnt);

struct _MESSAGE_RESOURCE_ENTRY
{
    WORD Length;
    WORD Flags;
    BYTE[1] Text;
}

alias MESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY;
alias PMESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY*;

struct _MESSAGE_RESOURCE_BLOCK
{
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
}

alias MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK;
alias PMESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK*;

struct _MESSAGE_RESOURCE_DATA
{
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK[1] Blocks;
}

alias MESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA;
alias PMESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA*;

struct _OSVERSIONINFOA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR[128] szCSDVersion;
}

alias OSVERSIONINFOA = _OSVERSIONINFOA;
alias POSVERSIONINFOA = _OSVERSIONINFOA*;
alias LPOSVERSIONINFOA = _OSVERSIONINFOA*;

struct _OSVERSIONINFOW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR[128] szCSDVersion;
}

alias OSVERSIONINFOW = _OSVERSIONINFOW;
alias POSVERSIONINFOW = _OSVERSIONINFOW*;
alias LPOSVERSIONINFOW = _OSVERSIONINFOW*;
alias RTL_OSVERSIONINFOW = _OSVERSIONINFOW;
alias PRTL_OSVERSIONINFOW = _OSVERSIONINFOW*;

alias OSVERSIONINFO = _OSVERSIONINFOA;
alias POSVERSIONINFO = _OSVERSIONINFOA*;
alias LPOSVERSIONINFO = _OSVERSIONINFOA*;

struct _OSVERSIONINFOEXA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR[128] szCSDVersion;
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
}

alias OSVERSIONINFOEXA = _OSVERSIONINFOEXA;
alias POSVERSIONINFOEXA = _OSVERSIONINFOEXA*;
alias LPOSVERSIONINFOEXA = _OSVERSIONINFOEXA*;

struct _OSVERSIONINFOEXW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR[128] szCSDVersion;
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
}

alias OSVERSIONINFOEXW = _OSVERSIONINFOEXW;
alias POSVERSIONINFOEXW = _OSVERSIONINFOEXW*;
alias LPOSVERSIONINFOEXW = _OSVERSIONINFOEXW*;
alias RTL_OSVERSIONINFOEXW = _OSVERSIONINFOEXW;
alias PRTL_OSVERSIONINFOEXW = _OSVERSIONINFOEXW*;

alias OSVERSIONINFOEX = _OSVERSIONINFOEXA;
alias POSVERSIONINFOEX = _OSVERSIONINFOEXA*;
alias LPOSVERSIONINFOEX = _OSVERSIONINFOEXA*;

ULONGLONG VerSetConditionMask (ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);

enum _RTL_UMS_THREAD_INFO_CLASS
{
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext = 1,
    UmsThreadPriority = 2,
    UmsThreadAffinity = 3,
    UmsThreadTeb = 4,
    UmsThreadIsSuspended = 5,
    UmsThreadIsTerminated = 6,
    UmsThreadMaxInfoClass = 7
}

alias RTL_UMS_THREAD_INFO_CLASS = _RTL_UMS_THREAD_INFO_CLASS;
alias PRTL_UMS_THREAD_INFO_CLASS = _RTL_UMS_THREAD_INFO_CLASS*;

enum _RTL_UMS_SCHEDULER_REASON
{
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked = 1,
    UmsSchedulerThreadYield = 2
}

alias RTL_UMS_SCHEDULER_REASON = _RTL_UMS_SCHEDULER_REASON;
alias PRTL_UMS_SCHEDULER_REASON = _RTL_UMS_SCHEDULER_REASON*;

alias RTL_UMS_SCHEDULER_ENTRY_POINT = void function (RTL_UMS_SCHEDULER_REASON Reason, ULONG_PTR ActivationPayload, PVOID SchedulerParam);
alias PRTL_UMS_SCHEDULER_ENTRY_POINT = void function ();

struct _RTL_CRITICAL_SECTION_DEBUG
{
    WORD Type;
    WORD CreatorBackTraceIndex;
    _RTL_CRITICAL_SECTION* CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
}

alias RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
alias PRTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG*;
alias RTL_RESOURCE_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
alias PRTL_RESOURCE_DEBUG = _RTL_CRITICAL_SECTION_DEBUG*;

struct _RTL_CRITICAL_SECTION
{
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
}

alias RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION;
alias PRTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION*;

struct _RTL_SRWLOCK
{
    PVOID Ptr;
}

alias RTL_SRWLOCK = _RTL_SRWLOCK;
alias PRTL_SRWLOCK = _RTL_SRWLOCK*;

struct _RTL_CONDITION_VARIABLE
{
    PVOID Ptr;
}

alias RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE;
alias PRTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE*;

alias PAPCFUNC = void function (ULONG_PTR Parameter);
alias PVECTORED_EXCEPTION_HANDLER = c_long function (_EXCEPTION_POINTERS* ExceptionInfo);

enum _HEAP_INFORMATION_CLASS
{
    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1
}

alias HEAP_INFORMATION_CLASS = _HEAP_INFORMATION_CLASS;

alias WORKERCALLBACKFUNC = void function (PVOID);
alias APC_CALLBACK_FUNCTION = void function (DWORD, PVOID, PVOID);
alias WAITORTIMERCALLBACKFUNC = void function (PVOID, BOOLEAN);
alias WAITORTIMERCALLBACK = void function ();
alias PFLS_CALLBACK_FUNCTION = void function (PVOID lpFlsData);
alias PSECURE_MEMORY_CACHE_CALLBACK = ubyte function (PVOID Addr, SIZE_T Range);

enum _ACTIVATION_CONTEXT_INFO_CLASS
{
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass = 8,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
}

alias ACTIVATION_CONTEXT_INFO_CLASS = _ACTIVATION_CONTEXT_INFO_CLASS;

enum ACTCTX_REQUESTED_RUN_LEVEL
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER = 1,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3,
    ACTCTX_RUN_LEVEL_NUMBERS = 4
}

enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2
}

struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
}

alias ACTIVATION_CONTEXT_QUERY_INDEX = _ACTIVATION_CONTEXT_QUERY_INDEX;
alias PACTIVATION_CONTEXT_QUERY_INDEX = _ACTIVATION_CONTEXT_QUERY_INDEX*;

struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
}

alias ASSEMBLY_FILE_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION;
alias PASSEMBLY_FILE_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION*;

struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD ulFileCount;
}

alias ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
alias PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION*;

struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
}

alias ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
alias PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION*;

struct _COMPATIBILITY_CONTEXT_ELEMENT
{
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
}

alias COMPATIBILITY_CONTEXT_ELEMENT = _COMPATIBILITY_CONTEXT_ELEMENT;
alias PCOMPATIBILITY_CONTEXT_ELEMENT = _COMPATIBILITY_CONTEXT_ELEMENT*;

struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
{
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT[] Elements;
}

alias ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
alias PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION*;

struct _SUPPORTED_OS_INFO
{
    WORD OsCount;
    WORD MitigationExist;
    WORD[4] OsList;
}

alias SUPPORTED_OS_INFO = _SUPPORTED_OS_INFO;
alias PSUPPORTED_OS_INFO = _SUPPORTED_OS_INFO*;

struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
}

alias ACTIVATION_CONTEXT_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
alias PACTIVATION_CONTEXT_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_DETAILED_INFORMATION*;

alias PCACTIVATION_CONTEXT_QUERY_INDEX = const(_ACTIVATION_CONTEXT_QUERY_INDEX)*;
alias PCASSEMBLY_FILE_DETAILED_INFORMATION = const(_ASSEMBLY_FILE_DETAILED_INFORMATION)*;
alias PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = const(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION)*;
alias PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = const(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION)*;
alias PCCOMPATIBILITY_CONTEXT_ELEMENT = const(_COMPATIBILITY_CONTEXT_ELEMENT)*;
alias PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = const(_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION)*;
alias PCACTIVATION_CONTEXT_DETAILED_INFORMATION = const(_ACTIVATION_CONTEXT_DETAILED_INFORMATION)*;

alias RTL_VERIFIER_DLL_LOAD_CALLBACK = void function (PWSTR DllName, PVOID DllBase, SIZE_T DllSize, PVOID Reserved);
alias RTL_VERIFIER_DLL_UNLOAD_CALLBACK = void function (PWSTR DllName, PVOID DllBase, SIZE_T DllSize, PVOID Reserved);
alias RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK = void function (PVOID AllocationBase, SIZE_T AllocationSize);

struct _RTL_VERIFIER_THUNK_DESCRIPTOR
{
    PCHAR ThunkName;
    PVOID ThunkOldAddress;
    PVOID ThunkNewAddress;
}

alias RTL_VERIFIER_THUNK_DESCRIPTOR = _RTL_VERIFIER_THUNK_DESCRIPTOR;
alias PRTL_VERIFIER_THUNK_DESCRIPTOR = _RTL_VERIFIER_THUNK_DESCRIPTOR*;

struct _RTL_VERIFIER_DLL_DESCRIPTOR
{
    PWCHAR DllName;
    DWORD DllFlags;
    PVOID DllAddress;
    PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;
}

alias RTL_VERIFIER_DLL_DESCRIPTOR = _RTL_VERIFIER_DLL_DESCRIPTOR;
alias PRTL_VERIFIER_DLL_DESCRIPTOR = _RTL_VERIFIER_DLL_DESCRIPTOR*;

struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR
{
    DWORD Length;
    PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
    RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
    RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
    PWSTR VerifierImage;
    DWORD VerifierFlags;
    DWORD VerifierDebug;
    PVOID RtlpGetStackTraceAddress;
    PVOID RtlpDebugPageHeapCreate;
    PVOID RtlpDebugPageHeapDestroy;
    RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;
}

alias RTL_VERIFIER_PROVIDER_DESCRIPTOR = _RTL_VERIFIER_PROVIDER_DESCRIPTOR;
alias PRTL_VERIFIER_PROVIDER_DESCRIPTOR = _RTL_VERIFIER_PROVIDER_DESCRIPTOR*;

void RtlApplicationVerifierStop (ULONG_PTR Code, PSTR Message, ULONG_PTR Param1, PSTR Description1, ULONG_PTR Param2, PSTR Description2, ULONG_PTR Param3, PSTR Description3, ULONG_PTR Param4, PSTR Description4);
DWORD RtlSetHeapInformation (PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
DWORD RtlQueryHeapInformation (PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
DWORD RtlMultipleAllocateHeap (PVOID HeapHandle, DWORD Flags, SIZE_T Size, DWORD Count, PVOID* Array);
DWORD RtlMultipleFreeHeap (PVOID HeapHandle, DWORD Flags, DWORD Count, PVOID* Array);

struct _HARDWARE_COUNTER_DATA
{
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
}

alias HARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA;
alias PHARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA*;

struct _PERFORMANCE_DATA
{
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA[16] HwCounters;
}

alias PERFORMANCE_DATA = _PERFORMANCE_DATA;
alias PPERFORMANCE_DATA = _PERFORMANCE_DATA*;

struct _EVENTLOGRECORD
{
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
}

alias EVENTLOGRECORD = _EVENTLOGRECORD;
alias PEVENTLOGRECORD = _EVENTLOGRECORD*;

struct _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR[256] szLogicalLogFile;
    DWORD ulNumRecords;
    EVENTLOGRECORD[] pEventLogRecords;
}

alias EVENTSFORLOGFILE = _EVENTSFORLOGFILE;
alias PEVENTSFORLOGFILE = _EVENTSFORLOGFILE*;

struct _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD[] ulOffsets;
}

alias PACKEDEVENTINFO = _PACKEDEVENTINFO;
alias PPACKEDEVENTINFO = _PACKEDEVENTINFO*;

enum _CM_SERVICE_NODE_TYPE
{
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
}

alias SERVICE_NODE_TYPE = _CM_SERVICE_NODE_TYPE;

enum _CM_SERVICE_LOAD_TYPE
{
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
}

alias SERVICE_LOAD_TYPE = _CM_SERVICE_LOAD_TYPE;

enum _CM_ERROR_CONTROL_TYPE
{
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
}

alias SERVICE_ERROR_TYPE = _CM_ERROR_CONTROL_TYPE;

struct _TAPE_ERASE
{
    DWORD Type;
    BOOLEAN Immediate;
}

alias TAPE_ERASE = _TAPE_ERASE;
alias PTAPE_ERASE = _TAPE_ERASE*;

struct _TAPE_PREPARE
{
    DWORD Operation;
    BOOLEAN Immediate;
}

alias TAPE_PREPARE = _TAPE_PREPARE;
alias PTAPE_PREPARE = _TAPE_PREPARE*;

struct _TAPE_WRITE_MARKS
{
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
}

alias TAPE_WRITE_MARKS = _TAPE_WRITE_MARKS;
alias PTAPE_WRITE_MARKS = _TAPE_WRITE_MARKS*;

struct _TAPE_GET_POSITION
{
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
}

alias TAPE_GET_POSITION = _TAPE_GET_POSITION;
alias PTAPE_GET_POSITION = _TAPE_GET_POSITION*;

struct _TAPE_SET_POSITION
{
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
}

alias TAPE_SET_POSITION = _TAPE_SET_POSITION;
alias PTAPE_SET_POSITION = _TAPE_SET_POSITION*;

struct _TAPE_GET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
}

alias TAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS;
alias PTAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS*;

struct _TAPE_SET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
}

alias TAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS;
alias PTAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS*;

struct _TAPE_GET_MEDIA_PARAMETERS
{
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
}

alias TAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS;
alias PTAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS*;

struct _TAPE_SET_MEDIA_PARAMETERS
{
    DWORD BlockSize;
}

alias TAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS;
alias PTAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS*;

struct _TAPE_CREATE_PARTITION
{
    DWORD Method;
    DWORD Count;
    DWORD Size;
}

alias TAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION;
alias PTAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION*;

struct _TAPE_WMI_OPERATIONS
{
    DWORD Method;
    DWORD DataBufferSize;
    PVOID DataBuffer;
}

alias TAPE_WMI_OPERATIONS = _TAPE_WMI_OPERATIONS;
alias PTAPE_WMI_OPERATIONS = _TAPE_WMI_OPERATIONS*;

enum _TAPE_DRIVE_PROBLEM_TYPE
{
    TapeDriveProblemNone = 0,
    TapeDriveReadWriteWarning = 1,
    TapeDriveReadWriteError = 2,
    TapeDriveReadWarning = 3,
    TapeDriveWriteWarning = 4,
    TapeDriveReadError = 5,
    TapeDriveWriteError = 6,
    TapeDriveHardwareError = 7,
    TapeDriveUnsupportedMedia = 8,
    TapeDriveScsiConnectionError = 9,
    TapeDriveTimetoClean = 10,
    TapeDriveCleanDriveNow = 11,
    TapeDriveMediaLifeExpired = 12,
    TapeDriveSnappedTape = 13
}

alias TAPE_DRIVE_PROBLEM_TYPE = _TAPE_DRIVE_PROBLEM_TYPE;

alias TP_VERSION = c_ulong;
alias PTP_VERSION = c_ulong*;
struct _TP_CALLBACK_INSTANCE;
alias TP_CALLBACK_INSTANCE = _TP_CALLBACK_INSTANCE;
alias PTP_CALLBACK_INSTANCE = _TP_CALLBACK_INSTANCE*;
alias PTP_SIMPLE_CALLBACK = void function (PTP_CALLBACK_INSTANCE Instance, PVOID Context);
struct _TP_POOL;
alias TP_POOL = _TP_POOL;
alias PTP_POOL = _TP_POOL*;

enum _TP_CALLBACK_PRIORITY
{
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
}

alias TP_CALLBACK_PRIORITY = _TP_CALLBACK_PRIORITY;

struct _TP_POOL_STACK_INFORMATION
{
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}

alias TP_POOL_STACK_INFORMATION = _TP_POOL_STACK_INFORMATION;
alias PTP_POOL_STACK_INFORMATION = _TP_POOL_STACK_INFORMATION*;

struct _TP_CLEANUP_GROUP;
alias TP_CLEANUP_GROUP = _TP_CLEANUP_GROUP;
alias PTP_CLEANUP_GROUP = _TP_CLEANUP_GROUP*;
alias PTP_CLEANUP_GROUP_CANCEL_CALLBACK = void function (PVOID ObjectContext, PVOID CleanupContext);

struct _TP_CALLBACK_ENVIRON_V1
{
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT;
    _ACTIVATION_CONTEXT* ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;

    union _Anonymous_39
    {
        DWORD Flags;

        struct _Anonymous_40
        {
            

            mixin(bitfields!(
                DWORD, "LongFunction", 1,
                DWORD, "Persistent", 1,
                DWORD, "Private", 30));
        }

        _Anonymous_40 s;
    }

    _Anonymous_39 u;
}

alias TP_CALLBACK_ENVIRON_V1 = _TP_CALLBACK_ENVIRON_V1;
alias TP_CALLBACK_ENVIRON = _TP_CALLBACK_ENVIRON_V1;
alias PTP_CALLBACK_ENVIRON = _TP_CALLBACK_ENVIRON_V1*;

struct _TP_WORK;
alias TP_WORK = _TP_WORK;
alias PTP_WORK = _TP_WORK*;
alias PTP_WORK_CALLBACK = void function (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
struct _TP_TIMER;
alias TP_TIMER = _TP_TIMER;
alias PTP_TIMER = _TP_TIMER*;
alias PTP_TIMER_CALLBACK = void function (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
alias TP_WAIT_RESULT = c_ulong;
struct _TP_WAIT;
alias TP_WAIT = _TP_WAIT;
alias PTP_WAIT = _TP_WAIT*;
alias PTP_WAIT_CALLBACK = void function (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WAIT Wait, TP_WAIT_RESULT WaitResult);
struct _TP_IO;
alias TP_IO = _TP_IO;
alias PTP_IO = _TP_IO*;

void TpInitializeCallbackEnviron (PTP_CALLBACK_ENVIRON cbe);
void TpSetCallbackThreadpool (PTP_CALLBACK_ENVIRON cbe, PTP_POOL pool);
void TpSetCallbackCleanupGroup (PTP_CALLBACK_ENVIRON cbe, PTP_CLEANUP_GROUP cleanup_group, PTP_CLEANUP_GROUP_CANCEL_CALLBACK cleanup_group_cb);
// void TpSetCallbackActivationContext (PTP_CALLBACK_ENVIRON cbe, _ACTIVATION_CONTEXT* actx);
void TpSetCallbackNoActivationContext (PTP_CALLBACK_ENVIRON cbe);
void TpSetCallbackLongFunction (PTP_CALLBACK_ENVIRON cbe);
void TpSetCallbackRaceWithDll (PTP_CALLBACK_ENVIRON cbe, PVOID h);
void TpSetCallbackFinalizationCallback (PTP_CALLBACK_ENVIRON cbe, PTP_SIMPLE_CALLBACK fini_cb);

void TpSetCallbackPersistent (PTP_CALLBACK_ENVIRON cbe);
void TpDestroyCallbackEnviron (PTP_CALLBACK_ENVIRON cbe);

struct _TEB;
_TEB* NtCurrentTeb ();
PVOID GetCurrentFiber ();
PVOID GetFiberData ();
_TEB* NtCurrentTeb ();
PVOID GetCurrentFiber ();
PVOID GetFiberData ();

alias CRM_PROTOCOL_ID = _GUID;
alias PCRM_PROTOCOL_ID = _GUID*;

alias NOTIFICATION_MASK = c_ulong;

struct _TRANSACTION_NOTIFICATION
{
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
}

alias TRANSACTION_NOTIFICATION = _TRANSACTION_NOTIFICATION;
alias PTRANSACTION_NOTIFICATION = _TRANSACTION_NOTIFICATION*;

struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
    GUID EnlistmentId;
    GUID UOW;
}

alias TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
alias PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT*;

struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
    GUID TmIdentity;
    ULONG Flags;
}

alias TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
alias PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT*;

alias SAVEPOINT_ID = c_ulong;
alias PSAVEPOINT_ID = c_ulong*;

struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
    SAVEPOINT_ID SavepointId;
}

alias TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
alias PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT*;

struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
}

alias TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
alias PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT*;

struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
    ULONG MarshalCookie;
    GUID UOW;
}

alias TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
alias PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT*;

alias TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
alias PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT*;

struct _KCRM_MARSHAL_HEADER
{
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
}

alias KCRM_MARSHAL_HEADER = _KCRM_MARSHAL_HEADER;
alias PKCRM_MARSHAL_HEADER = _KCRM_MARSHAL_HEADER*;
alias PRKCRM_MARSHAL_HEADER = _KCRM_MARSHAL_HEADER*;

struct _KCRM_TRANSACTION_BLOB
{
    GUID UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR[64] Description;
}

alias KCRM_TRANSACTION_BLOB = _KCRM_TRANSACTION_BLOB;
alias PKCRM_TRANSACTION_BLOB = _KCRM_TRANSACTION_BLOB*;
alias PRKCRM_TRANSACTION_BLOB = _KCRM_TRANSACTION_BLOB*;

struct _KCRM_PROTOCOL_BLOB
{
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
}

alias KCRM_PROTOCOL_BLOB = _KCRM_PROTOCOL_BLOB;
alias PKCRM_PROTOCOL_BLOB = _KCRM_PROTOCOL_BLOB*;
alias PRKCRM_PROTOCOL_BLOB = _KCRM_PROTOCOL_BLOB*;

enum _TRANSACTION_OUTCOME
{
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted = 2,
    TransactionOutcomeAborted = 3
}

alias TRANSACTION_OUTCOME = _TRANSACTION_OUTCOME;

enum _TRANSACTION_STATE
{
    TransactionStateNormal = 1,
    TransactionStateIndoubt = 2,
    TransactionStateCommittedNotify = 3
}

alias TRANSACTION_STATE = _TRANSACTION_STATE;

struct _TRANSACTION_BASIC_INFORMATION
{
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
}

alias TRANSACTION_BASIC_INFORMATION = _TRANSACTION_BASIC_INFORMATION;
alias PTRANSACTION_BASIC_INFORMATION = _TRANSACTION_BASIC_INFORMATION*;

struct _TRANSACTIONMANAGER_BASIC_INFORMATION
{
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
}

alias TRANSACTIONMANAGER_BASIC_INFORMATION = _TRANSACTIONMANAGER_BASIC_INFORMATION;
alias PTRANSACTIONMANAGER_BASIC_INFORMATION = _TRANSACTIONMANAGER_BASIC_INFORMATION*;

struct _TRANSACTIONMANAGER_LOG_INFORMATION
{
    GUID LogIdentity;
}

alias TRANSACTIONMANAGER_LOG_INFORMATION = _TRANSACTIONMANAGER_LOG_INFORMATION;
alias PTRANSACTIONMANAGER_LOG_INFORMATION = _TRANSACTIONMANAGER_LOG_INFORMATION*;

struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
    DWORD LogPathLength;
    WCHAR[1] LogPath;
}

alias TRANSACTIONMANAGER_LOGPATH_INFORMATION = _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
alias PTRANSACTIONMANAGER_LOGPATH_INFORMATION = _TRANSACTIONMANAGER_LOGPATH_INFORMATION*;

struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
    ULONGLONG LastRecoveredLsn;
}

alias TRANSACTIONMANAGER_RECOVERY_INFORMATION = _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
alias PTRANSACTIONMANAGER_RECOVERY_INFORMATION = _TRANSACTIONMANAGER_RECOVERY_INFORMATION*;

struct _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
    GUID OldestTransactionGuid;
}

alias TRANSACTIONMANAGER_OLDEST_INFORMATION = _TRANSACTIONMANAGER_OLDEST_INFORMATION;
alias PTRANSACTIONMANAGER_OLDEST_INFORMATION = _TRANSACTIONMANAGER_OLDEST_INFORMATION*;

struct _TRANSACTION_PROPERTIES_INFORMATION
{
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR[1] Description;
}

alias TRANSACTION_PROPERTIES_INFORMATION = _TRANSACTION_PROPERTIES_INFORMATION;
alias PTRANSACTION_PROPERTIES_INFORMATION = _TRANSACTION_PROPERTIES_INFORMATION*;

struct _TRANSACTION_BIND_INFORMATION
{
    HANDLE TmHandle;
}

alias TRANSACTION_BIND_INFORMATION = _TRANSACTION_BIND_INFORMATION;
alias PTRANSACTION_BIND_INFORMATION = _TRANSACTION_BIND_INFORMATION*;

struct _TRANSACTION_ENLISTMENT_PAIR
{
    GUID EnlistmentId;
    GUID ResourceManagerId;
}

alias TRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR;
alias PTRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR*;

struct _TRANSACTION_ENLISTMENTS_INFORMATION
{
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR[1] EnlistmentPair;
}

alias TRANSACTION_ENLISTMENTS_INFORMATION = _TRANSACTION_ENLISTMENTS_INFORMATION;
alias PTRANSACTION_ENLISTMENTS_INFORMATION = _TRANSACTION_ENLISTMENTS_INFORMATION*;

struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
}

alias TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
alias PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION*;

struct _RESOURCEMANAGER_BASIC_INFORMATION
{
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR[1] Description;
}

alias RESOURCEMANAGER_BASIC_INFORMATION = _RESOURCEMANAGER_BASIC_INFORMATION;
alias PRESOURCEMANAGER_BASIC_INFORMATION = _RESOURCEMANAGER_BASIC_INFORMATION*;

struct _RESOURCEMANAGER_COMPLETION_INFORMATION
{
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
}

alias RESOURCEMANAGER_COMPLETION_INFORMATION = _RESOURCEMANAGER_COMPLETION_INFORMATION;
alias PRESOURCEMANAGER_COMPLETION_INFORMATION = _RESOURCEMANAGER_COMPLETION_INFORMATION*;

enum _TRANSACTION_INFORMATION_CLASS
{
    TransactionBasicInformation = 0,
    TransactionPropertiesInformation = 1,
    TransactionEnlistmentInformation = 2,
    TransactionSuperiorEnlistmentInformation = 3,
    TransactionBindInformation = 4,
    TransactionDTCPrivateInformation = 5
}

alias TRANSACTION_INFORMATION_CLASS = _TRANSACTION_INFORMATION_CLASS;

enum _TRANSACTIONMANAGER_INFORMATION_CLASS
{
    TransactionManagerBasicInformation = 0,
    TransactionManagerLogInformation = 1,
    TransactionManagerLogPathInformation = 2,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerRecoveryInformation = 4,
    TransactionManagerOldestTransactionInformation = 5
}

alias TRANSACTIONMANAGER_INFORMATION_CLASS = _TRANSACTIONMANAGER_INFORMATION_CLASS;

enum _RESOURCEMANAGER_INFORMATION_CLASS
{
    ResourceManagerBasicInformation = 0,
    ResourceManagerCompletionInformation = 1
}

alias RESOURCEMANAGER_INFORMATION_CLASS = _RESOURCEMANAGER_INFORMATION_CLASS;

struct _ENLISTMENT_BASIC_INFORMATION
{
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
}

alias ENLISTMENT_BASIC_INFORMATION = _ENLISTMENT_BASIC_INFORMATION;
alias PENLISTMENT_BASIC_INFORMATION = _ENLISTMENT_BASIC_INFORMATION*;

struct _ENLISTMENT_CRM_INFORMATION
{
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
}

alias ENLISTMENT_CRM_INFORMATION = _ENLISTMENT_CRM_INFORMATION;
alias PENLISTMENT_CRM_INFORMATION = _ENLISTMENT_CRM_INFORMATION*;

enum _ENLISTMENT_INFORMATION_CLASS
{
    EnlistmentBasicInformation = 0,
    EnlistmentRecoveryInformation = 1,
    EnlistmentCrmInformation = 2
}

alias ENLISTMENT_INFORMATION_CLASS = _ENLISTMENT_INFORMATION_CLASS;

struct _TRANSACTION_LIST_ENTRY
{
    GUID UOW;
}

alias TRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY;
alias PTRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY*;

struct _TRANSACTION_LIST_INFORMATION
{
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY[1] TransactionInformation;
}

alias TRANSACTION_LIST_INFORMATION = _TRANSACTION_LIST_INFORMATION;
alias PTRANSACTION_LIST_INFORMATION = _TRANSACTION_LIST_INFORMATION*;

enum _KTMOBJECT_TYPE
{
    KTMOBJECT_TRANSACTION = 0,
    KTMOBJECT_TRANSACTION_MANAGER = 1,
    KTMOBJECT_RESOURCE_MANAGER = 2,
    KTMOBJECT_ENLISTMENT = 3,
    KTMOBJECT_INVALID = 4
}

alias KTMOBJECT_TYPE = _KTMOBJECT_TYPE;
alias PKTMOBJECT_TYPE = _KTMOBJECT_TYPE*;

struct _KTMOBJECT_CURSOR
{
    GUID LastQuery;
    DWORD ObjectIdCount;
    GUID[1] ObjectIds;
}

alias KTMOBJECT_CURSOR = _KTMOBJECT_CURSOR;
alias PKTMOBJECT_CURSOR = _KTMOBJECT_CURSOR*;

struct _WOW64_FLOATING_SAVE_AREA
{
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE[80] RegisterArea;
    DWORD Cr0NpxState;
}

alias WOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA;
alias PWOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA*;

struct _WOW64_CONTEXT
{
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    WOW64_FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE[512] ExtendedRegisters;
}

alias WOW64_CONTEXT = _WOW64_CONTEXT;
alias PWOW64_CONTEXT = _WOW64_CONTEXT*;

struct _WOW64_LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;

    union _Anonymous_41
    {
        struct _Anonymous_42
        {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        }

        _Anonymous_42 Bytes;

        struct _Anonymous_43
        {
            

            mixin(bitfields!(
                DWORD, "BaseMid", 8,
                DWORD, "Type", 5,
                DWORD, "Dpl", 2,
                DWORD, "Pres", 1,
                DWORD, "LimitHi", 4,
                DWORD, "Sys", 1,
                DWORD, "Reserved_0", 1,
                DWORD, "Default_Big", 1,
                DWORD, "Granularity", 1,
                DWORD, "BaseHi", 8));
        }

        _Anonymous_43 Bits;
    }

    _Anonymous_41 HighWord;
}

alias WOW64_LDT_ENTRY = _WOW64_LDT_ENTRY;
alias PWOW64_LDT_ENTRY = _WOW64_LDT_ENTRY*;

struct _WOW64_DESCRIPTOR_TABLE_ENTRY
{
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
}

alias WOW64_DESCRIPTOR_TABLE_ENTRY = _WOW64_DESCRIPTOR_TABLE_ENTRY;
alias PWOW64_DESCRIPTOR_TABLE_ENTRY = _WOW64_DESCRIPTOR_TABLE_ENTRY*;

alias WPARAM = ulong;
alias LPARAM = long;
alias LRESULT = long;

alias SPHANDLE = void**;
alias LPHANDLE = void**;
alias HGLOBAL = void*;
alias HLOCAL = void*;
alias GLOBALHANDLE = void*;
alias LOCALHANDLE = void*;

alias FARPROC = void*;
alias NEARPROC = void*;
alias PROC = void*;

alias ATOM = ushort;

alias HFILE = int;

struct HINSTANCE__
{
    int unused;
}

alias HINSTANCE = HINSTANCE__*;

struct HKEY__
{
    int unused;
}

alias HKEY = HKEY__*;
alias PHKEY = HKEY__**;

struct HKL__
{
    int unused;
}

alias HKL = HKL__*;

struct HLSURF__
{
    int unused;
}

alias HLSURF = HLSURF__*;

struct HMETAFILE__
{
    int unused;
}

alias HMETAFILE = HMETAFILE__*;
alias HMODULE = HINSTANCE__*;

struct HRGN__
{
    int unused;
}

alias HRGN = HRGN__*;

struct HRSRC__
{
    int unused;
}

alias HRSRC = HRSRC__*;

struct HSPRITE__
{
    int unused;
}

alias HSPRITE = HSPRITE__*;

struct HSTR__
{
    int unused;
}

alias HSTR = HSTR__*;

struct HTASK__
{
    int unused;
}

alias HTASK = HTASK__*;

struct HWINSTA__
{
    int unused;
}

alias HWINSTA = HWINSTA__*;

struct _FILETIME
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
}

alias FILETIME = _FILETIME;
alias PFILETIME = _FILETIME*;
alias LPFILETIME = _FILETIME*;

struct HWND__
{
    int unused;
}

alias HWND = HWND__*;

struct HHOOK__
{
    int unused;
}

alias HHOOK = HHOOK__*;

alias HGDIOBJ = void*;

struct HACCEL__
{
    int unused;
}

alias HACCEL = HACCEL__*;

struct HBITMAP__
{
    int unused;
}

alias HBITMAP = HBITMAP__*;

struct HBRUSH__
{
    int unused;
}

alias HBRUSH = HBRUSH__*;

struct HCOLORSPACE__
{
    int unused;
}

alias HCOLORSPACE = HCOLORSPACE__*;

struct HDC__
{
    int unused;
}

alias HDC = HDC__*;

struct HGLRC__
{
    int unused;
}

alias HGLRC = HGLRC__*;

struct HDESK__
{
    int unused;
}

alias HDESK = HDESK__*;

struct HENHMETAFILE__
{
    int unused;
}

alias HENHMETAFILE = HENHMETAFILE__*;

struct HFONT__
{
    int unused;
}

alias HFONT = HFONT__*;

struct HICON__
{
    int unused;
}

alias HICON = HICON__*;

struct HMENU__
{
    int unused;
}

alias HMENU = HMENU__*;

struct HPALETTE__
{
    int unused;
}

alias HPALETTE = HPALETTE__*;

struct HPEN__
{
    int unused;
}

alias HPEN = HPEN__*;

struct HMONITOR__
{
    int unused;
}

alias HMONITOR = HMONITOR__*;

struct HWINEVENTHOOK__
{
    int unused;
}

alias HWINEVENTHOOK = HWINEVENTHOOK__*;

alias HCURSOR = HICON__*;
alias COLORREF = c_ulong;

struct HUMPD__
{
    int unused;
}

alias HUMPD = HUMPD__*;

alias LPCOLORREF = c_ulong*;

struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
}

alias RECT = tagRECT;
alias PRECT = tagRECT*;
alias NPRECT = tagRECT*;
alias LPRECT = tagRECT*;

alias LPCRECT = const(tagRECT)*;

struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
}

alias RECTL = _RECTL;
alias PRECTL = _RECTL*;
alias LPRECTL = _RECTL*;

alias LPCRECTL = const(_RECTL)*;

struct tagPOINT
{
    LONG x;
    LONG y;
}

alias POINT = tagPOINT;
alias PPOINT = tagPOINT*;
alias NPPOINT = tagPOINT*;
alias LPPOINT = tagPOINT*;

struct _POINTL
{
    LONG x;
    LONG y;
}

alias POINTL = _POINTL;
alias PPOINTL = _POINTL*;

struct tagSIZE
{
    LONG cx;
    LONG cy;
}

alias SIZE = tagSIZE;
alias PSIZE = tagSIZE*;
alias LPSIZE = tagSIZE*;

alias SIZEL = tagSIZE;
alias PSIZEL = tagSIZE*;
alias LPSIZEL = tagSIZE*;

struct tagPOINTS
{
    SHORT x;
    SHORT y;
}

alias POINTS = tagPOINTS;
alias PPOINTS = tagPOINTS*;
alias LPPOINTS = tagPOINTS*;

struct _SECURITY_ATTRIBUTES
{
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    WINBOOL bInheritHandle;
}

alias SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES;
alias PSECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES*;
alias LPSECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES*;

struct _OVERLAPPED
{
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;

    union
    {
        struct
        {
            DWORD Offset;
            DWORD OffsetHigh;
        }

        PVOID Pointer;
    }

    HANDLE hEvent;
}

alias OVERLAPPED = _OVERLAPPED;
alias LPOVERLAPPED = _OVERLAPPED*;

struct _OVERLAPPED_ENTRY
{
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
}

alias OVERLAPPED_ENTRY = _OVERLAPPED_ENTRY;
alias LPOVERLAPPED_ENTRY = _OVERLAPPED_ENTRY*;

struct _SYSTEMTIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
}

alias SYSTEMTIME = _SYSTEMTIME;
alias PSYSTEMTIME = _SYSTEMTIME*;
alias LPSYSTEMTIME = _SYSTEMTIME*;

struct _WIN32_FIND_DATAA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR[260] cFileName;
    CHAR[14] cAlternateFileName;
}

alias WIN32_FIND_DATAA = _WIN32_FIND_DATAA;
alias PWIN32_FIND_DATAA = _WIN32_FIND_DATAA*;
alias LPWIN32_FIND_DATAA = _WIN32_FIND_DATAA*;

struct _WIN32_FIND_DATAW
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR[260] cFileName;
    WCHAR[14] cAlternateFileName;
}

alias WIN32_FIND_DATAW = _WIN32_FIND_DATAW;
alias PWIN32_FIND_DATAW = _WIN32_FIND_DATAW*;
alias LPWIN32_FIND_DATAW = _WIN32_FIND_DATAW*;

alias WIN32_FIND_DATA = _WIN32_FIND_DATAA;
alias PWIN32_FIND_DATA = _WIN32_FIND_DATAA*;
alias LPWIN32_FIND_DATA = _WIN32_FIND_DATAA*;

enum _FINDEX_INFO_LEVELS
{
    FindExInfoStandard = 0,
    FindExInfoBasic = 1,
    FindExInfoMaxInfoLevel = 2
}

alias FINDEX_INFO_LEVELS = _FINDEX_INFO_LEVELS;

enum _FINDEX_SEARCH_OPS
{
    FindExSearchNameMatch = 0,
    FindExSearchLimitToDirectories = 1,
    FindExSearchLimitToDevices = 2,
    FindExSearchMaxSearchOp = 3
}

alias FINDEX_SEARCH_OPS = _FINDEX_SEARCH_OPS;

enum _GET_FILEEX_INFO_LEVELS
{
    GetFileExInfoStandard = 0,
    GetFileExMaxInfoLevel = 1
}

alias GET_FILEEX_INFO_LEVELS = _GET_FILEEX_INFO_LEVELS;

alias CRITICAL_SECTION = _RTL_CRITICAL_SECTION;
alias PCRITICAL_SECTION = _RTL_CRITICAL_SECTION*;
alias LPCRITICAL_SECTION = _RTL_CRITICAL_SECTION*;
alias CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
alias PCRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG*;
alias LPCRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG*;

alias LPOVERLAPPED_COMPLETION_ROUTINE = void function (DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);

struct _PROCESS_HEAP_ENTRY
{
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;

    union
    {
        struct _Anonymous_44
        {
            HANDLE hMem;
            DWORD[3] dwReserved;
        }

        _Anonymous_44 Block;

        struct _Anonymous_45
        {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        }

        _Anonymous_45 Region;
    }
}

alias PROCESS_HEAP_ENTRY = _PROCESS_HEAP_ENTRY;
alias LPPROCESS_HEAP_ENTRY = _PROCESS_HEAP_ENTRY*;
alias PPROCESS_HEAP_ENTRY = _PROCESS_HEAP_ENTRY*;

struct _REASON_CONTEXT
{
    ULONG Version;
    DWORD Flags;

    union _Anonymous_46
    {
        struct _Anonymous_47
        {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR* ReasonStrings;
        }

        _Anonymous_47 Detailed;
        LPWSTR SimpleReasonString;
    }

    _Anonymous_46 Reason;
}

alias REASON_CONTEXT = _REASON_CONTEXT;
alias PREASON_CONTEXT = _REASON_CONTEXT*;

alias PTHREAD_START_ROUTINE = c_ulong function (LPVOID lpThreadParameter);
alias LPTHREAD_START_ROUTINE = c_ulong function ();

struct _EXCEPTION_DEBUG_INFO
{
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
}

alias EXCEPTION_DEBUG_INFO = _EXCEPTION_DEBUG_INFO;
alias LPEXCEPTION_DEBUG_INFO = _EXCEPTION_DEBUG_INFO*;

struct _CREATE_THREAD_DEBUG_INFO
{
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
}

alias CREATE_THREAD_DEBUG_INFO = _CREATE_THREAD_DEBUG_INFO;
alias LPCREATE_THREAD_DEBUG_INFO = _CREATE_THREAD_DEBUG_INFO*;

struct _CREATE_PROCESS_DEBUG_INFO
{
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
}

alias CREATE_PROCESS_DEBUG_INFO = _CREATE_PROCESS_DEBUG_INFO;
alias LPCREATE_PROCESS_DEBUG_INFO = _CREATE_PROCESS_DEBUG_INFO*;

struct _EXIT_THREAD_DEBUG_INFO
{
    DWORD dwExitCode;
}

alias EXIT_THREAD_DEBUG_INFO = _EXIT_THREAD_DEBUG_INFO;
alias LPEXIT_THREAD_DEBUG_INFO = _EXIT_THREAD_DEBUG_INFO*;

struct _EXIT_PROCESS_DEBUG_INFO
{
    DWORD dwExitCode;
}

alias EXIT_PROCESS_DEBUG_INFO = _EXIT_PROCESS_DEBUG_INFO;
alias LPEXIT_PROCESS_DEBUG_INFO = _EXIT_PROCESS_DEBUG_INFO*;

struct _LOAD_DLL_DEBUG_INFO
{
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
}

alias LOAD_DLL_DEBUG_INFO = _LOAD_DLL_DEBUG_INFO;
alias LPLOAD_DLL_DEBUG_INFO = _LOAD_DLL_DEBUG_INFO*;

struct _UNLOAD_DLL_DEBUG_INFO
{
    LPVOID lpBaseOfDll;
}

alias UNLOAD_DLL_DEBUG_INFO = _UNLOAD_DLL_DEBUG_INFO;
alias LPUNLOAD_DLL_DEBUG_INFO = _UNLOAD_DLL_DEBUG_INFO*;

struct _OUTPUT_DEBUG_STRING_INFO
{
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
}

alias OUTPUT_DEBUG_STRING_INFO = _OUTPUT_DEBUG_STRING_INFO;
alias LPOUTPUT_DEBUG_STRING_INFO = _OUTPUT_DEBUG_STRING_INFO*;

struct _RIP_INFO
{
    DWORD dwError;
    DWORD dwType;
}

alias RIP_INFO = _RIP_INFO;
alias LPRIP_INFO = _RIP_INFO*;

struct _DEBUG_EVENT
{
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;

    union _Anonymous_48
    {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    }

    _Anonymous_48 u;
}

alias DEBUG_EVENT = _DEBUG_EVENT;
alias LPDEBUG_EVENT = _DEBUG_EVENT*;

alias LPCONTEXT = _CONTEXT*;

struct _CONTRACT_DESCRIPTION;
alias CONTRACT_DESCRIPTION = _CONTRACT_DESCRIPTION;
struct _BEM_REFERENCE;
alias BEM_REFERENCE = _BEM_REFERENCE;
alias BEM_FREE_INTERFACE_CALLBACK = void function (void* interfaceInstance);

HRESULT BemCreateReference (const GUID* iid, void* interfaceInstance, BEM_FREE_INTERFACE_CALLBACK freeCallback, BEM_REFERENCE** reference);
HRESULT BemCreateContractFrom (LPCWSTR dllPath, const GUID* extensionId, const(CONTRACT_DESCRIPTION)* contractDescription, void* hostContract, void** contract);
HRESULT BemCopyReference (BEM_REFERENCE* reference, BEM_REFERENCE** copiedReference);
void BemFreeReference (BEM_REFERENCE* reference);
void BemFreeContract (void* contract);

WINBOOL IsDebuggerPresent ();
void OutputDebugStringA (LPCSTR lpOutputString);
void OutputDebugStringW (LPCWSTR lpOutputString);

void DebugBreak ();
WINBOOL ContinueDebugEvent (DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
WINBOOL WaitForDebugEvent (LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
WINBOOL DebugActiveProcess (DWORD dwProcessId);
WINBOOL DebugActiveProcessStop (DWORD dwProcessId);
WINBOOL CheckRemoteDebuggerPresent (HANDLE hProcess, PBOOL pbDebuggerPresent);

alias PTOP_LEVEL_EXCEPTION_FILTER = c_long function (_EXCEPTION_POINTERS* ExceptionInfo);
alias LPTOP_LEVEL_EXCEPTION_FILTER = c_long function ();
UINT SetErrorMode (UINT uMode);
LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter (LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
LONG UnhandledExceptionFilter (_EXCEPTION_POINTERS* ExceptionInfo);

PVOID AddVectoredExceptionHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
ULONG RemoveVectoredExceptionHandler (PVOID Handle);
PVOID AddVectoredContinueHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
ULONG RemoveVectoredContinueHandler (PVOID Handle);

void RaiseException (DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const(ULONG_PTR)* lpArguments);
DWORD GetLastError ();
void SetLastError (DWORD dwErrCode);

HANDLE CreateFileW (LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);

DWORD GetFileAttributesW (LPCWSTR lpFileName);

DWORD GetFileSize (HANDLE hFile, LPDWORD lpFileSizeHigh);
DWORD SetFilePointer (HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);

struct _BY_HANDLE_FILE_INFORMATION
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
}

alias BY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION;
alias PBY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION*;
alias LPBY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION*;

LONG CompareFileTime (const(FILETIME)* lpFileTime1, const(FILETIME)* lpFileTime2);
HANDLE CreateFileA (LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
WINBOOL DefineDosDeviceW (DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
WINBOOL DeleteVolumeMountPointW (LPCWSTR lpszVolumeMountPoint);
WINBOOL FileTimeToLocalFileTime (const(FILETIME)* lpFileTime, LPFILETIME lpLocalFileTime);
WINBOOL FindCloseChangeNotification (HANDLE hChangeHandle);
HANDLE FindFirstChangeNotificationA (LPCSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
HANDLE FindFirstChangeNotificationW (LPCWSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
HANDLE FindFirstFileA (LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
HANDLE FindFirstFileW (LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
HANDLE FindFirstVolumeW (LPWSTR lpszVolumeName, DWORD cchBufferLength);
WINBOOL FindNextChangeNotification (HANDLE hChangeHandle);
WINBOOL FindNextVolumeW (HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
WINBOOL FindVolumeClose (HANDLE hFindVolume);
WINBOOL GetDiskFreeSpaceA (LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
WINBOOL GetDiskFreeSpaceW (LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
UINT GetDriveTypeA (LPCSTR lpRootPathName);
UINT GetDriveTypeW (LPCWSTR lpRootPathName);
DWORD GetFileAttributesA (LPCSTR lpFileName);
WINBOOL GetFileInformationByHandle (HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
WINBOOL GetFileSizeEx (HANDLE hFile, PLARGE_INTEGER lpFileSize);
WINBOOL GetFileTime (HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
DWORD GetFileType (HANDLE hFile);
DWORD GetFullPathNameA (LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR* lpFilePart);
DWORD GetFullPathNameW (LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart);
DWORD GetLogicalDrives ();
DWORD GetLogicalDriveStringsW (DWORD nBufferLength, LPWSTR lpBuffer);
DWORD GetLongPathNameA (LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
DWORD GetLongPathNameW (LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
DWORD GetShortPathNameW (LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
UINT GetTempFileNameW (LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
WINBOOL GetVolumeInformationW (LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
WINBOOL GetVolumePathNameW (LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
WINBOOL LocalFileTimeToFileTime (const(FILETIME)* lpLocalFileTime, LPFILETIME lpFileTime);
WINBOOL LockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
DWORD QueryDosDeviceW (LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
WINBOOL ReadFileEx (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
WINBOOL ReadFileScatter (HANDLE hFile, FILE_SEGMENT_ELEMENT* aSegmentArray, DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
WINBOOL SetFileTime (HANDLE hFile, const(FILETIME)* lpCreationTime, const(FILETIME)* lpLastAccessTime, const(FILETIME)* lpLastWriteTime);
WINBOOL SetFileValidData (HANDLE hFile, LONGLONG ValidDataLength);
WINBOOL UnlockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
WINBOOL WriteFileEx (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
WINBOOL WriteFileGather (HANDLE hFile, FILE_SEGMENT_ELEMENT* aSegmentArray, DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
WINBOOL GetVolumeNameForVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
WINBOOL GetVolumePathNamesForVolumeNameW (LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);

struct _WIN32_FILE_ATTRIBUTE_DATA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
}

alias WIN32_FILE_ATTRIBUTE_DATA = _WIN32_FILE_ATTRIBUTE_DATA;
alias LPWIN32_FILE_ATTRIBUTE_DATA = _WIN32_FILE_ATTRIBUTE_DATA*;

WINBOOL CreateDirectoryA (LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL CreateDirectoryW (LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL DeleteFileA (LPCSTR lpFileName);
WINBOOL DeleteFileW (LPCWSTR lpFileName);
WINBOOL FindClose (HANDLE hFindFile);
HANDLE FindFirstFileExA (LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
HANDLE FindFirstFileExW (LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
WINBOOL FindNextFileA (HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
WINBOOL FindNextFileW (HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
WINBOOL FlushFileBuffers (HANDLE hFile);
WINBOOL GetDiskFreeSpaceExA (LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
WINBOOL GetDiskFreeSpaceExW (LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
DWORD GetFileType (HANDLE hFile);
WINBOOL GetFileAttributesExA (LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
WINBOOL GetFileAttributesExW (LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
DWORD GetTempPathW (DWORD nBufferLength, LPWSTR lpBuffer);
WINBOOL LockFileEx (HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
WINBOOL ReadFile (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
WINBOOL RemoveDirectoryA (LPCSTR lpPathName);
WINBOOL RemoveDirectoryW (LPCWSTR lpPathName);
WINBOOL SetEndOfFile (HANDLE hFile);
WINBOOL SetFileAttributesA (LPCSTR lpFileName, DWORD dwFileAttributes);
WINBOOL SetFileAttributesW (LPCWSTR lpFileName, DWORD dwFileAttributes);
WINBOOL SetFilePointerEx (HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
WINBOOL UnlockFileEx (HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
WINBOOL WriteFile (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);

WINBOOL CloseHandle (HANDLE hObject);
WINBOOL DuplicateHandle (HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwOptions);

WINBOOL GetHandleInformation (HANDLE hObject, LPDWORD lpdwFlags);
WINBOOL SetHandleInformation (HANDLE hObject, DWORD dwMask, DWORD dwFlags);

struct _HEAP_SUMMARY
{
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
}

alias HEAP_SUMMARY = _HEAP_SUMMARY;
alias PHEAP_SUMMARY = _HEAP_SUMMARY*;

alias LPHEAP_SUMMARY = _HEAP_SUMMARY*;

HANDLE HeapCreate (DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
WINBOOL HeapDestroy (HANDLE hHeap);
WINBOOL HeapValidate (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
SIZE_T HeapCompact (HANDLE hHeap, DWORD dwFlags);
WINBOOL HeapSummary (HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary);
DWORD GetProcessHeaps (DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
WINBOOL HeapLock (HANDLE hHeap);
WINBOOL HeapUnlock (HANDLE hHeap);
WINBOOL HeapWalk (HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
WINBOOL HeapSetInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
WINBOOL HeapQueryInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);

LPVOID HeapAlloc (HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
LPVOID HeapReAlloc (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
WINBOOL HeapFree (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
SIZE_T HeapSize (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
HANDLE GetProcessHeap ();

WINBOOL GetOverlappedResult (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, WINBOOL bWait);
HANDLE CreateIoCompletionPort (HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
WINBOOL GetQueuedCompletionStatus (HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED* lpOverlapped, DWORD dwMilliseconds);
WINBOOL PostQueuedCompletionStatus (HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
WINBOOL DeviceIoControl (HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
WINBOOL CancelIo (HANDLE hFile);

WINBOOL GetOverlappedResultEx (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, WINBOOL bAlertable);

void InitializeSListHead (PSLIST_HEADER ListHead);
PSLIST_ENTRY InterlockedPopEntrySList (PSLIST_HEADER ListHead);
PSLIST_ENTRY InterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
PSLIST_ENTRY InterlockedFlushSList (PSLIST_HEADER ListHead);
USHORT QueryDepthSList (PSLIST_HEADER ListHead);

WINBOOL IsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);

struct tagENUMUILANG
{
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID* pEnumUIBuffer;
}

alias ENUMUILANG = tagENUMUILANG;
alias PENUMUILANG = tagENUMUILANG*;

alias ENUMRESLANGPROCA = int function (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
alias ENUMRESLANGPROCW = int function (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
alias ENUMRESNAMEPROCA = int function (HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
alias ENUMRESNAMEPROCW = int function (HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
alias ENUMRESTYPEPROCA = int function (HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
alias ENUMRESTYPEPROCW = int function (HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);

alias PGET_MODULE_HANDLE_EXA = int function (DWORD dwFlags, LPCSTR lpModuleName, HMODULE* phModule);
alias PGET_MODULE_HANDLE_EXW = int function (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule);

alias DLL_DIRECTORY_COOKIE = void*;
alias PDLL_DIRECTORY_COOKIE = void**;

HRSRC FindResourceExW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
void FreeLibraryAndExitThread (HMODULE hLibModule, DWORD dwExitCode);
WINBOOL FreeResource (HGLOBAL hResData);
HMODULE GetModuleHandleA (LPCSTR lpModuleName);
HMODULE GetModuleHandleW (LPCWSTR lpModuleName);
HMODULE LoadLibraryExA (LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
HMODULE LoadLibraryExW (LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
HGLOBAL LoadResource (HMODULE hModule, HRSRC hResInfo);
int LoadStringA (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
int LoadStringW (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
LPVOID LockResource (HGLOBAL hResData);
DWORD SizeofResource (HMODULE hModule, HRSRC hResInfo);
DLL_DIRECTORY_COOKIE AddDllDirectory (PCWSTR NewDirectory);
WINBOOL RemoveDllDirectory (DLL_DIRECTORY_COOKIE Cookie);
WINBOOL SetDefaultDllDirectories (DWORD DirectoryFlags);
WINBOOL GetModuleHandleExA (DWORD dwFlags, LPCSTR lpModuleName, HMODULE* phModule);
WINBOOL GetModuleHandleExW (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule);

WINBOOL EnumResourceLanguagesA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
WINBOOL EnumResourceLanguagesW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);

WINBOOL DisableThreadLibraryCalls (HMODULE hLibModule);
WINBOOL FreeLibrary (HMODULE hLibModule);
FARPROC GetProcAddress (HMODULE hModule, LPCSTR lpProcName);
DWORD GetModuleFileNameA (HMODULE hModule, LPSTR lpFilename, DWORD nSize);
DWORD GetModuleFileNameW (HMODULE hModule, LPWSTR lpFilename, DWORD nSize);

enum _MEMORY_RESOURCE_NOTIFICATION_TYPE
{
    LowMemoryResourceNotification = 0,
    HighMemoryResourceNotification = 1
}

alias MEMORY_RESOURCE_NOTIFICATION_TYPE = _MEMORY_RESOURCE_NOTIFICATION_TYPE;

WINBOOL VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);

SIZE_T VirtualQuery (LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
WINBOOL FlushViewOfFile (LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
WINBOOL UnmapViewOfFile (LPCVOID lpBaseAddress);
HANDLE CreateFileMappingFromApp (HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name);
PVOID MapViewOfFileFromApp (HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap);

WINBOOL VirtualProtect (LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);

LPVOID VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
LPVOID VirtualAllocEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
WINBOOL VirtualFreeEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
WINBOOL VirtualProtectEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
SIZE_T VirtualQueryEx (HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
WINBOOL ReadProcessMemory (HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesRead);
WINBOOL WriteProcessMemory (HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesWritten);
HANDLE CreateFileMappingW (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
HANDLE OpenFileMappingW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
LPVOID MapViewOfFile (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
LPVOID MapViewOfFileEx (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
SIZE_T GetLargePageMinimum ();
WINBOOL GetProcessWorkingSetSizeEx (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
WINBOOL SetProcessWorkingSetSizeEx (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
WINBOOL VirtualLock (LPVOID lpAddress, SIZE_T dwSize);
WINBOOL VirtualUnlock (LPVOID lpAddress, SIZE_T dwSize);
UINT GetWriteWatch (DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID* lpAddresses, ULONG_PTR* lpdwCount, LPDWORD lpdwGranularity);
UINT ResetWriteWatch (LPVOID lpBaseAddress, SIZE_T dwRegionSize);
HANDLE CreateMemoryResourceNotification (MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
WINBOOL QueryMemoryResourceNotification (HANDLE ResourceNotificationHandle, PBOOL ResourceState);
WINBOOL GetSystemFileCacheSize (PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
WINBOOL SetSystemFileCacheSize (SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);

WINBOOL ImpersonateNamedPipeClient (HANDLE hNamedPipe);
WINBOOL CreatePipe (PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
WINBOOL ConnectNamedPipe (HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
WINBOOL DisconnectNamedPipe (HANDLE hNamedPipe);
WINBOOL SetNamedPipeHandleState (HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
WINBOOL PeekNamedPipe (HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
WINBOOL TransactNamedPipe (HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
HANDLE CreateNamedPipeW (LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL WaitNamedPipeW (LPCWSTR lpNamedPipeName, DWORD nTimeOut);

HANDLE CreatePrivateNamespaceW (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
HANDLE OpenPrivateNamespaceW (LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);

BOOLEAN ClosePrivateNamespace (HANDLE Handle, ULONG Flags);
HANDLE CreateBoundaryDescriptorW (LPCWSTR Name, ULONG Flags);

WINBOOL AddSIDToBoundaryDescriptor (HANDLE* BoundaryDescriptor, PSID RequiredSid);
void DeleteBoundaryDescriptor (HANDLE BoundaryDescriptor);

LPCH GetEnvironmentStrings ();
LPWCH GetEnvironmentStringsW ();
WINBOOL SetEnvironmentStringsW (LPWCH NewEnvironment);

WINBOOL FreeEnvironmentStringsA (LPCH penv);
WINBOOL FreeEnvironmentStringsW (LPWCH penv);
HANDLE GetStdHandle (DWORD nStdHandle);
WINBOOL SetStdHandle (DWORD nStdHandle, HANDLE hHandle);

LPSTR GetCommandLineA ();
LPWSTR GetCommandLineW ();
DWORD GetEnvironmentVariableA (LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
DWORD GetEnvironmentVariableW (LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
WINBOOL SetEnvironmentVariableA (LPCSTR lpName, LPCSTR lpValue);
WINBOOL SetEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpValue);
DWORD ExpandEnvironmentStringsA (LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
DWORD ExpandEnvironmentStringsW (LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
WINBOOL SetCurrentDirectoryA (LPCSTR lpPathName);
WINBOOL SetCurrentDirectoryW (LPCWSTR lpPathName);
DWORD GetCurrentDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
DWORD GetCurrentDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
DWORD SearchPathW (LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR* lpFilePart);
DWORD SearchPathA (LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR* lpFilePart);
WINBOOL NeedCurrentDirectoryForExePathA (LPCSTR ExeName);
WINBOOL NeedCurrentDirectoryForExePathW (LPCWSTR ExeName);

WINBOOL TerminateProcess (HANDLE hProcess, UINT uExitCode);

struct _PROCESS_INFORMATION
{
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
}

alias PROCESS_INFORMATION = _PROCESS_INFORMATION;
alias PPROCESS_INFORMATION = _PROCESS_INFORMATION*;
alias LPPROCESS_INFORMATION = _PROCESS_INFORMATION*;

struct _STARTUPINFOA
{
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
}

alias STARTUPINFOA = _STARTUPINFOA;
alias LPSTARTUPINFOA = _STARTUPINFOA*;

struct _STARTUPINFOW
{
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
}

alias STARTUPINFOW = _STARTUPINFOW;
alias LPSTARTUPINFOW = _STARTUPINFOW*;

alias STARTUPINFO = _STARTUPINFOA;
alias LPSTARTUPINFO = _STARTUPINFOA*;

struct _PROC_THREAD_ATTRIBUTE_LIST;
alias PPROC_THREAD_ATTRIBUTE_LIST = _PROC_THREAD_ATTRIBUTE_LIST*;
alias LPPROC_THREAD_ATTRIBUTE_LIST = _PROC_THREAD_ATTRIBUTE_LIST*;

DWORD QueueUserAPC (PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
WINBOOL GetProcessTimes (HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
void ExitProcess (UINT uExitCode);
WINBOOL GetExitCodeProcess (HANDLE hProcess, LPDWORD lpExitCode);
WINBOOL SwitchToThread ();
HANDLE CreateRemoteThread (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
HANDLE OpenThread (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwThreadId);
WINBOOL SetThreadPriorityBoost (HANDLE hThread, WINBOOL bDisablePriorityBoost);
WINBOOL GetThreadPriorityBoost (HANDLE hThread, PBOOL pDisablePriorityBoost);
WINBOOL TerminateThread (HANDLE hThread, DWORD dwExitCode);
WINBOOL SetProcessShutdownParameters (DWORD dwLevel, DWORD dwFlags);
DWORD GetProcessVersion (DWORD ProcessId);
void GetStartupInfoW (LPSTARTUPINFOW lpStartupInfo);
WINBOOL SetThreadToken (PHANDLE Thread, HANDLE Token);
WINBOOL OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
WINBOOL OpenThreadToken (HANDLE ThreadHandle, DWORD DesiredAccess, WINBOOL OpenAsSelf, PHANDLE TokenHandle);
WINBOOL SetPriorityClass (HANDLE hProcess, DWORD dwPriorityClass);
WINBOOL SetThreadStackGuarantee (PULONG StackSizeInBytes);
DWORD GetPriorityClass (HANDLE hProcess);
WINBOOL ProcessIdToSessionId (DWORD dwProcessId, DWORD* pSessionId);
DWORD GetProcessId (HANDLE Process);
DWORD GetThreadId (HANDLE Thread);
HANDLE CreateRemoteThreadEx (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
WINBOOL GetThreadContext (HANDLE hThread, LPCONTEXT lpContext);
WINBOOL SetThreadContext (HANDLE hThread, const(CONTEXT)* lpContext);
WINBOOL FlushInstructionCache (HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
WINBOOL GetThreadTimes (HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
HANDLE OpenProcess (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
WINBOOL GetProcessHandleCount (HANDLE hProcess, PDWORD pdwHandleCount);
DWORD GetCurrentProcessorNumber ();

WINBOOL CreateProcessA (LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL CreateProcessW (LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);

WINBOOL CreateProcessAsUserW (HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);

HANDLE GetCurrentProcess ();
DWORD GetCurrentProcessId ();
HANDLE GetCurrentThread ();
DWORD GetCurrentThreadId ();
WINBOOL IsProcessorFeaturePresent (DWORD ProcessorFeature);

HANDLE CreateThread (LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
WINBOOL SetThreadPriority (HANDLE hThread, int nPriority);
int GetThreadPriority (HANDLE hThread);
void ExitThread (DWORD dwExitCode);
WINBOOL GetExitCodeThread (HANDLE hThread, LPDWORD lpExitCode);

DWORD SuspendThread (HANDLE hThread);
DWORD ResumeThread (HANDLE hThread);
DWORD TlsAlloc ();
LPVOID TlsGetValue (DWORD dwTlsIndex);
WINBOOL TlsSetValue (DWORD dwTlsIndex, LPVOID lpTlsValue);
WINBOOL TlsFree (DWORD dwTlsIndex);

WINBOOL QueryPerformanceCounter (LARGE_INTEGER* lpPerformanceCount);
WINBOOL QueryPerformanceFrequency (LARGE_INTEGER* lpFrequency);

WINBOOL AccessCheck (PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
WINBOOL AccessCheckAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);

WINBOOL AccessCheckByType (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
WINBOOL AccessCheckByTypeResultList (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
WINBOOL AccessCheckByTypeAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);

WINBOOL AccessCheckByTypeResultListAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);

WINBOOL AccessCheckByTypeResultListAndAuditAlarmByHandleW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);

WINBOOL AddAccessAllowedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
WINBOOL AddAccessAllowedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
WINBOOL AddAccessAllowedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID* ObjectTypeGuid, GUID* InheritedObjectTypeGuid, PSID pSid);
WINBOOL AddAccessDeniedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
WINBOOL AddAccessDeniedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
WINBOOL AddAccessDeniedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID* ObjectTypeGuid, GUID* InheritedObjectTypeGuid, PSID pSid);
WINBOOL AddAce (PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
WINBOOL AddAuditAccessAce (PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
WINBOOL AddAuditAccessAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
WINBOOL AddAuditAccessObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID* ObjectTypeGuid, GUID* InheritedObjectTypeGuid, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);

WINBOOL AdjustTokenGroups (HANDLE TokenHandle, WINBOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
WINBOOL AdjustTokenPrivileges (HANDLE TokenHandle, WINBOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
WINBOOL AllocateAndInitializeSid (PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID* pSid);
WINBOOL AllocateLocallyUniqueId (PLUID Luid);
WINBOOL AreAllAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
WINBOOL AreAnyAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
WINBOOL CheckTokenMembership (HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);

WINBOOL ConvertToAutoInheritPrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR* NewSecurityDescriptor, GUID* ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
WINBOOL CopySid (DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
WINBOOL CreatePrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR* NewDescriptor, WINBOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
WINBOOL CreatePrivateObjectSecurityEx (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR* NewDescriptor, GUID* ObjectType, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
WINBOOL CreatePrivateObjectSecurityWithMultipleInheritance (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR* NewDescriptor, GUID** ObjectTypes, ULONG GuidCount, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
WINBOOL CreateRestrictedToken (HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
WINBOOL CreateWellKnownSid (WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD* cbSid);
WINBOOL EqualDomainSid (PSID pSid1, PSID pSid2, WINBOOL* pfEqual);

WINBOOL DeleteAce (PACL pAcl, DWORD dwAceIndex);
WINBOOL DestroyPrivateObjectSecurity (PSECURITY_DESCRIPTOR* ObjectDescriptor);
WINBOOL DuplicateToken (HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
WINBOOL DuplicateTokenEx (HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
WINBOOL EqualPrefixSid (PSID pSid1, PSID pSid2);
WINBOOL EqualSid (PSID pSid1, PSID pSid2);
WINBOOL FindFirstFreeAce (PACL pAcl, LPVOID* pAce);
PVOID FreeSid (PSID pSid);
WINBOOL GetAce (PACL pAcl, DWORD dwAceIndex, LPVOID* pAce);
WINBOOL GetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
WINBOOL GetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);

WINBOOL GetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
DWORD GetLengthSid (PSID pSid);
WINBOOL GetPrivateObjectSecurity (PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
WINBOOL GetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
WINBOOL GetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL* pDacl, LPBOOL lpbDaclDefaulted);
WINBOOL GetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID* pGroup, LPBOOL lpbGroupDefaulted);
DWORD GetSecurityDescriptorLength (PSECURITY_DESCRIPTOR pSecurityDescriptor);
WINBOOL GetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID* pOwner, LPBOOL lpbOwnerDefaulted);
DWORD GetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
WINBOOL GetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL* pSacl, LPBOOL lpbSaclDefaulted);
PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority (PSID pSid);
DWORD GetSidLengthRequired (UCHAR nSubAuthorityCount);
PDWORD GetSidSubAuthority (PSID pSid, DWORD nSubAuthority);
PUCHAR GetSidSubAuthorityCount (PSID pSid);
WINBOOL GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
WINBOOL GetWindowsAccountDomainSid (PSID pSid, PSID pDomainSid, DWORD* cbDomainSid);
WINBOOL ImpersonateAnonymousToken (HANDLE ThreadHandle);
WINBOOL ImpersonateLoggedOnUser (HANDLE hToken);
WINBOOL ImpersonateSelf (SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
WINBOOL InitializeAcl (PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
WINBOOL InitializeSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
WINBOOL InitializeSid (PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
WINBOOL IsTokenRestricted (HANDLE TokenHandle);
WINBOOL IsValidAcl (PACL pAcl);
WINBOOL IsValidSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor);
WINBOOL IsValidSid (PSID pSid);
WINBOOL IsWellKnownSid (PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
WINBOOL MakeAbsoluteSD (PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
WINBOOL MakeSelfRelativeSD (PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
void MapGenericMask (PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
WINBOOL ObjectCloseAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);

WINBOOL ObjectDeleteAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);

WINBOOL ObjectOpenAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);

WINBOOL ObjectPrivilegeAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);

WINBOOL PrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
WINBOOL PrivilegedServiceAuditAlarmW (LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);

WINBOOL RevertToSelf ();
WINBOOL SetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
WINBOOL SetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);

WINBOOL SetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
WINBOOL SetPrivateObjectSecurity (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
WINBOOL SetPrivateObjectSecurityEx (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);

WINBOOL SetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
WINBOOL SetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
WINBOOL SetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, WINBOOL bGroupDefaulted);
WINBOOL SetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, WINBOOL bOwnerDefaulted);
DWORD SetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
WINBOOL SetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bSaclPresent, PACL pSacl, WINBOOL bSaclDefaulted);
WINBOOL SetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);

alias SRWLOCK = _RTL_SRWLOCK;
alias PSRWLOCK = _RTL_SRWLOCK*;

alias INIT_ONCE = _RTL_RUN_ONCE;
alias PINIT_ONCE = _RTL_RUN_ONCE*;
alias LPINIT_ONCE = _RTL_RUN_ONCE*;

alias PINIT_ONCE_FN = int function (PINIT_ONCE InitOnce, PVOID Parameter, PVOID* Context);
alias CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE;
alias PCONDITION_VARIABLE = _RTL_CONDITION_VARIABLE*;

void EnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
void LeaveCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
WINBOOL TryEnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
void DeleteCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
WINBOOL SetEvent (HANDLE hEvent);
WINBOOL ResetEvent (HANDLE hEvent);
WINBOOL ReleaseSemaphore (HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
WINBOOL ReleaseMutex (HANDLE hMutex);
DWORD WaitForSingleObjectEx (HANDLE hHandle, DWORD dwMilliseconds, WINBOOL bAlertable);
DWORD WaitForMultipleObjectsEx (DWORD nCount, const(HANDLE)* lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds, WINBOOL bAlertable);
HANDLE OpenMutexW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
HANDLE OpenEventA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenEventW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
HANDLE OpenSemaphoreW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
WINBOOL WaitOnAddress (void* Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds);
void WakeByAddressSingle (PVOID Address);
void WakeByAddressAll (PVOID Address);

alias PTIMERAPCROUTINE = void function (LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);

alias SYNCHRONIZATION_BARRIER = _RTL_BARRIER;
alias PSYNCHRONIZATION_BARRIER = _RTL_BARRIER*;
alias LPSYNCHRONIZATION_BARRIER = _RTL_BARRIER*;

void InitializeCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
WINBOOL InitializeCriticalSectionAndSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
DWORD SetCriticalSectionSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
DWORD WaitForSingleObject (HANDLE hHandle, DWORD dwMilliseconds);
DWORD SleepEx (DWORD dwMilliseconds, WINBOOL bAlertable);
HANDLE CreateMutexA (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCSTR lpName);
HANDLE CreateMutexW (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCWSTR lpName);
HANDLE CreateEventA (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCSTR lpName);
HANDLE CreateEventW (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCWSTR lpName);
WINBOOL SetWaitableTimer (HANDLE hTimer, const(LARGE_INTEGER)* lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, WINBOOL fResume);
WINBOOL CancelWaitableTimer (HANDLE hTimer);
HANDLE OpenWaitableTimerW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpTimerName);
WINBOOL EnterSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags);
WINBOOL InitializeSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount);
WINBOOL DeleteSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier);
void Sleep (DWORD dwMilliseconds);
DWORD SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);

struct _SYSTEM_INFO
{
    union
    {
        DWORD dwOemId;

        struct
        {
            WORD wProcessorArchitecture;
            WORD wReserved;
        }
    }

    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
}

alias SYSTEM_INFO = _SYSTEM_INFO;
alias LPSYSTEM_INFO = _SYSTEM_INFO*;

void GetSystemTime (LPSYSTEMTIME lpSystemTime);
void GetSystemTimeAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
void GetLocalTime (LPSYSTEMTIME lpSystemTime);
void GetNativeSystemInfo (LPSYSTEM_INFO lpSystemInfo);

DWORD GetVersion ();

struct _MEMORYSTATUSEX
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
}

alias MEMORYSTATUSEX = _MEMORYSTATUSEX;
alias LPMEMORYSTATUSEX = _MEMORYSTATUSEX*;

enum _COMPUTER_NAME_FORMAT
{
    ComputerNameNetBIOS = 0,
    ComputerNameDnsHostname = 1,
    ComputerNameDnsDomain = 2,
    ComputerNameDnsFullyQualified = 3,
    ComputerNamePhysicalNetBIOS = 4,
    ComputerNamePhysicalDnsHostname = 5,
    ComputerNamePhysicalDnsDomain = 6,
    ComputerNamePhysicalDnsFullyQualified = 7,
    ComputerNameMax = 8
}

alias COMPUTER_NAME_FORMAT = _COMPUTER_NAME_FORMAT;

WINBOOL GlobalMemoryStatusEx (LPMEMORYSTATUSEX lpBuffer);
WINBOOL SetLocalTime (const(SYSTEMTIME)* lpSystemTime);
void GetSystemInfo (LPSYSTEM_INFO lpSystemInfo);
DWORD GetTickCount ();
WINBOOL GetSystemTimeAdjustment (PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
UINT GetSystemDirectoryA (LPSTR lpBuffer, UINT uSize);
UINT GetSystemDirectoryW (LPWSTR lpBuffer, UINT uSize);
UINT GetWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
UINT GetWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
UINT GetSystemWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
UINT GetSystemWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
WINBOOL GetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
WINBOOL GetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
WINBOOL SetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
WINBOOL SetSystemTime (const(SYSTEMTIME)* lpSystemTime);
WINBOOL GetVersionExA (LPOSVERSIONINFOA lpVersionInformation);
WINBOOL GetVersionExW (LPOSVERSIONINFOW lpVersionInformation);
WINBOOL GetLogicalProcessorInformation (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
ULONGLONG VerSetConditionMask (ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition);
void GetSystemTimePreciseAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
UINT EnumSystemFirmwareTables (DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
UINT GetSystemFirmwareTable (DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);

WINBOOL GetNumaHighestNodeNumber (PULONG HighestNodeNumber);

alias PTP_WIN32_IO_CALLBACK = void function (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io);

WINBOOL CreateTimerQueueTimer (PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
WINBOOL DeleteTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);

WINBOOL QueueUserWorkItem (LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
WINBOOL UnregisterWaitEx (HANDLE WaitHandle, HANDLE CompletionEvent);
HANDLE CreateTimerQueue ();
WINBOOL ChangeTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
WINBOOL DeleteTimerQueueEx (HANDLE TimerQueue, HANDLE CompletionEvent);

PVOID EncodePointer (PVOID Ptr);
PVOID DecodePointer (PVOID Ptr);

PVOID EncodeSystemPointer (PVOID Ptr);
PVOID DecodeSystemPointer (PVOID Ptr);
WINBOOL Beep (DWORD dwFreq, DWORD dwDuration);

WINBOOL Wow64DisableWow64FsRedirection (PVOID* OldValue);
WINBOOL Wow64RevertWow64FsRedirection (PVOID OlValue);
WINBOOL IsWow64Process (HANDLE hProcess, PBOOL Wow64Process);

alias PFIBER_START_ROUTINE = void function (LPVOID lpFiberParameter);
alias LPFIBER_START_ROUTINE = void function ();

alias LPLDT_ENTRY = void*;

struct _COMMPROP
{
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR[1] wcProvChar;
}

alias COMMPROP = _COMMPROP;
alias LPCOMMPROP = _COMMPROP*;

struct _COMSTAT
{
    

    mixin(bitfields!(
        DWORD, "fCtsHold", 1,
        DWORD, "fDsrHold", 1,
        DWORD, "fRlsdHold", 1,
        DWORD, "fXoffHold", 1,
        DWORD, "fXoffSent", 1,
        DWORD, "fEof", 1,
        DWORD, "fTxim", 1,
        DWORD, "fReserved", 25));

    DWORD cbInQue;
    DWORD cbOutQue;
}

alias COMSTAT = _COMSTAT;
alias LPCOMSTAT = _COMSTAT*;

struct _DCB
{
    

    DWORD DCBlength;
    DWORD BaudRate;

    mixin(bitfields!(
        DWORD, "fBinary", 1,
        DWORD, "fParity", 1,
        DWORD, "fOutxCtsFlow", 1,
        DWORD, "fOutxDsrFlow", 1,
        DWORD, "fDtrControl", 2,
        DWORD, "fDsrSensitivity", 1,
        DWORD, "fTXContinueOnXoff", 1,
        DWORD, "fOutX", 1,
        DWORD, "fInX", 1,
        DWORD, "fErrorChar", 1,
        DWORD, "fNull", 1,
        DWORD, "fRtsControl", 2,
        DWORD, "fAbortOnError", 1,
        DWORD, "fDummy2", 17));

    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
}

alias DCB = _DCB;
alias LPDCB = _DCB*;

struct _COMMTIMEOUTS
{
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
}

alias COMMTIMEOUTS = _COMMTIMEOUTS;
alias LPCOMMTIMEOUTS = _COMMTIMEOUTS*;

struct _COMMCONFIG
{
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR[1] wcProviderData;
}

alias COMMCONFIG = _COMMCONFIG;
alias LPCOMMCONFIG = _COMMCONFIG*;

struct _MEMORYSTATUS
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
}

alias MEMORYSTATUS = _MEMORYSTATUS;
alias LPMEMORYSTATUS = _MEMORYSTATUS*;

struct _JIT_DEBUG_INFO
{
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
}

alias JIT_DEBUG_INFO = _JIT_DEBUG_INFO;
alias LPJIT_DEBUG_INFO = _JIT_DEBUG_INFO*;

alias JIT_DEBUG_INFO32 = _JIT_DEBUG_INFO;
alias LPJIT_DEBUG_INFO32 = _JIT_DEBUG_INFO*;
alias JIT_DEBUG_INFO64 = _JIT_DEBUG_INFO;
alias LPJIT_DEBUG_INFO64 = _JIT_DEBUG_INFO*;

alias LPEXCEPTION_RECORD = _EXCEPTION_RECORD*;
alias LPEXCEPTION_POINTERS = _EXCEPTION_POINTERS*;

struct _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR[128] szPathName;
}

alias OFSTRUCT = _OFSTRUCT;
alias LPOFSTRUCT = _OFSTRUCT*;
alias POFSTRUCT = _OFSTRUCT*;

c_long _InterlockedAnd (LONG* Destination, LONG Value);
c_long _InterlockedOr (LONG* Destination, LONG Value);
c_long _InterlockedXor (LONG* Destination, LONG Value);

char _InterlockedAnd8 (char* Destination, char Value);
char _InterlockedOr8 (char* Destination, char Value);
char _InterlockedXor8 (char* Destination, char Value);
short _InterlockedAnd16 (SHORT* Destination, SHORT Value);
short _InterlockedOr16 (SHORT* Destination, SHORT Value);
short _InterlockedXor16 (SHORT* Destination, SHORT Value);

HLOCAL LocalAlloc (UINT uFlags, SIZE_T uBytes);
HLOCAL LocalFree (HLOCAL hMem);

int WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
int wWinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
HGLOBAL GlobalAlloc (UINT uFlags, SIZE_T dwBytes);
HGLOBAL GlobalReAlloc (HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
SIZE_T GlobalSize (HGLOBAL hMem);
UINT GlobalFlags (HGLOBAL hMem);
LPVOID GlobalLock (HGLOBAL hMem);
HGLOBAL GlobalHandle (LPCVOID pMem);
WINBOOL GlobalUnlock (HGLOBAL hMem);
HGLOBAL GlobalFree (HGLOBAL hMem);
SIZE_T GlobalCompact (DWORD dwMinFree);
void GlobalFix (HGLOBAL hMem);
void GlobalUnfix (HGLOBAL hMem);
LPVOID GlobalWire (HGLOBAL hMem);
WINBOOL GlobalUnWire (HGLOBAL hMem);
void GlobalMemoryStatus (LPMEMORYSTATUS lpBuffer);
HLOCAL LocalReAlloc (HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
LPVOID LocalLock (HLOCAL hMem);
HLOCAL LocalHandle (LPCVOID pMem);
WINBOOL LocalUnlock (HLOCAL hMem);
SIZE_T LocalSize (HLOCAL hMem);
UINT LocalFlags (HLOCAL hMem);
SIZE_T LocalShrink (HLOCAL hMem, UINT cbNewSize);
SIZE_T LocalCompact (UINT uMinFree);

WINBOOL GetBinaryTypeA (LPCSTR lpApplicationName, LPDWORD lpBinaryType);
WINBOOL GetBinaryTypeW (LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
DWORD GetShortPathNameA (LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);

WINBOOL GetProcessAffinityMask (HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
WINBOOL SetProcessAffinityMask (HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
WINBOOL GetProcessIoCounters (HANDLE hProcess, PIO_COUNTERS lpIoCounters);
WINBOOL GetProcessWorkingSetSize (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
WINBOOL SetProcessWorkingSetSize (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
void FatalExit (int ExitCode);
WINBOOL SetEnvironmentStringsA (LPCH NewEnvironment);

void RaiseFailFastException (PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags);
DWORD SetThreadIdealProcessor (HANDLE hThread, DWORD dwIdealProcessor);

LPVOID CreateFiber (SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
LPVOID CreateFiberEx (SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
void DeleteFiber (LPVOID lpFiber);
LPVOID ConvertThreadToFiber (LPVOID lpParameter);
LPVOID ConvertThreadToFiberEx (LPVOID lpParameter, DWORD dwFlags);
WINBOOL ConvertFiberToThread ();
void SwitchToFiber (LPVOID lpFiber);
DWORD_PTR SetThreadAffinityMask (HANDLE hThread, DWORD_PTR dwThreadAffinityMask);

enum _THREAD_INFORMATION_CLASS
{
    ThreadMemoryPriority = 0,
    ThreadAbsoluteCpuPriority = 1,
    ThreadInformationClassMax = 2
}

alias THREAD_INFORMATION_CLASS = _THREAD_INFORMATION_CLASS;

enum _PROCESS_INFORMATION_CLASS
{
    ProcessMemoryPriority = 0,
    ProcessInformationClassMax = 1
}

alias PROCESS_INFORMATION_CLASS = _PROCESS_INFORMATION_CLASS;

WINBOOL SetProcessPriorityBoost (HANDLE hProcess, WINBOOL bDisablePriorityBoost);
WINBOOL GetProcessPriorityBoost (HANDLE hProcess, PBOOL pDisablePriorityBoost);
WINBOOL RequestWakeupLatency (LATENCY_TIME latency);
WINBOOL IsSystemResumeAutomatic ();
WINBOOL GetThreadIOPendingFlag (HANDLE hThread, PBOOL lpIOIsPending);
WINBOOL GetThreadSelectorEntry (HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
EXECUTION_STATE SetThreadExecutionState (EXECUTION_STATE esFlags);

DWORD GetThreadErrorMode ();
WINBOOL SetThreadErrorMode (DWORD dwNewMode, LPDWORD lpOldMode);

WINBOOL DebugSetProcessKillOnExit (WINBOOL KillOnExit);
WINBOOL DebugBreakProcess (HANDLE Process);

enum _DEP_SYSTEM_POLICY_TYPE
{
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn = 1,
    DEPPolicyOptIn = 2,
    DEPPolicyOptOut = 3,
    DEPTotalPolicyCount = 4
}

alias DEP_SYSTEM_POLICY_TYPE = _DEP_SYSTEM_POLICY_TYPE;

WINBOOL PulseEvent (HANDLE hEvent);
DWORD WaitForMultipleObjects (DWORD nCount, const(HANDLE)* lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds);
ATOM GlobalDeleteAtom (ATOM nAtom);
WINBOOL InitAtomTable (DWORD nSize);
ATOM DeleteAtom (ATOM nAtom);
UINT SetHandleCount (UINT uNumber);
WINBOOL RequestDeviceWakeup (HANDLE hDevice);
WINBOOL CancelDeviceWakeupRequest (HANDLE hDevice);
WINBOOL GetDevicePowerState (HANDLE hDevice, WINBOOL* pfOn);
WINBOOL SetMessageWaitingIndicator (HANDLE hMsgIndicator, ULONG ulMsgCount);
WINBOOL SetFileShortNameA (HANDLE hFile, LPCSTR lpShortName);
WINBOOL SetFileShortNameW (HANDLE hFile, LPCWSTR lpShortName);
DWORD LoadModule (LPCSTR lpModuleName, LPVOID lpParameterBlock);
UINT WinExec (LPCSTR lpCmdLine, UINT uCmdShow);
WINBOOL ClearCommBreak (HANDLE hFile);
WINBOOL ClearCommError (HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
WINBOOL SetupComm (HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
WINBOOL EscapeCommFunction (HANDLE hFile, DWORD dwFunc);
WINBOOL GetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
WINBOOL GetCommMask (HANDLE hFile, LPDWORD lpEvtMask);
WINBOOL GetCommProperties (HANDLE hFile, LPCOMMPROP lpCommProp);
WINBOOL GetCommModemStatus (HANDLE hFile, LPDWORD lpModemStat);
WINBOOL GetCommState (HANDLE hFile, LPDCB lpDCB);
WINBOOL GetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL PurgeComm (HANDLE hFile, DWORD dwFlags);
WINBOOL SetCommBreak (HANDLE hFile);
WINBOOL SetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
WINBOOL SetCommMask (HANDLE hFile, DWORD dwEvtMask);
WINBOOL SetCommState (HANDLE hFile, LPDCB lpDCB);
WINBOOL SetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL TransmitCommChar (HANDLE hFile, char cChar);
WINBOOL WaitCommEvent (HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
DWORD SetTapePosition (HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, WINBOOL bImmediate);
DWORD GetTapePosition (HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
DWORD PrepareTape (HANDLE hDevice, DWORD dwOperation, WINBOOL bImmediate);
DWORD EraseTape (HANDLE hDevice, DWORD dwEraseType, WINBOOL bImmediate);
DWORD CreateTapePartition (HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
DWORD WriteTapemark (HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, WINBOOL bImmediate);
DWORD GetTapeStatus (HANDLE hDevice);
DWORD GetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
DWORD SetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
DEP_SYSTEM_POLICY_TYPE GetSystemDEPPolicy ();
WINBOOL GetSystemRegistryQuota (PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
WINBOOL GetSystemTimes (LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
WINBOOL FileTimeToDosDateTime (const(FILETIME)* lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
WINBOOL DosDateTimeToFileTime (WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
WINBOOL SetSystemTimeAdjustment (DWORD dwTimeAdjustment, WINBOOL bTimeAdjustmentDisabled);

int MulDiv (int nNumber, int nNumerator, int nDenominator);

DWORD FormatMessageA (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list* Arguments);
DWORD FormatMessageW (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list* Arguments);

alias PFE_EXPORT_FUNC = c_ulong function (PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
alias PFE_IMPORT_FUNC = c_ulong function (PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);

WINBOOL GetNamedPipeInfo (HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
HANDLE CreateMailslotA (LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE CreateMailslotW (LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL GetMailslotInfo (HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
WINBOOL SetMailslotInfo (HANDLE hMailslot, DWORD lReadTimeout);
WINBOOL EncryptFileA (LPCSTR lpFileName);
WINBOOL EncryptFileW (LPCWSTR lpFileName);
WINBOOL DecryptFileA (LPCSTR lpFileName, DWORD dwReserved);
WINBOOL DecryptFileW (LPCWSTR lpFileName, DWORD dwReserved);
WINBOOL FileEncryptionStatusA (LPCSTR lpFileName, LPDWORD lpStatus);
WINBOOL FileEncryptionStatusW (LPCWSTR lpFileName, LPDWORD lpStatus);
DWORD OpenEncryptedFileRawA (LPCSTR lpFileName, ULONG ulFlags, PVOID* pvContext);
DWORD OpenEncryptedFileRawW (LPCWSTR lpFileName, ULONG ulFlags, PVOID* pvContext);
DWORD ReadEncryptedFileRaw (PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
DWORD WriteEncryptedFileRaw (PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
void CloseEncryptedFileRaw (PVOID pvContext);
int lstrcmpA (LPCSTR lpString1, LPCSTR lpString2);
int lstrcmpW (LPCWSTR lpString1, LPCWSTR lpString2);
int lstrcmpiA (LPCSTR lpString1, LPCSTR lpString2);
int lstrcmpiW (LPCWSTR lpString1, LPCWSTR lpString2);
LPSTR lstrcpynA (LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
LPWSTR lstrcpynW (LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
LPSTR lstrcpyA (LPSTR lpString1, LPCSTR lpString2);
LPWSTR lstrcpyW (LPWSTR lpString1, LPCWSTR lpString2);
LPSTR lstrcatA (LPSTR lpString1, LPCSTR lpString2);
LPWSTR lstrcatW (LPWSTR lpString1, LPCWSTR lpString2);
int lstrlenA (LPCSTR lpString);
int lstrlenW (LPCWSTR lpString);
HFILE OpenFile (LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
HFILE _lopen (LPCSTR lpPathName, int iReadWrite);
HFILE _lcreat (LPCSTR lpPathName, int iAttribute);
UINT _lread (HFILE hFile, LPVOID lpBuffer, UINT uBytes);
UINT _lwrite (HFILE hFile, LPCCH lpBuffer, UINT uBytes);
c_long _hread (HFILE hFile, LPVOID lpBuffer, c_long lBytes);
c_long _hwrite (HFILE hFile, LPCCH lpBuffer, c_long lBytes);
HFILE _lclose (HFILE hFile);
LONG _llseek (HFILE hFile, LONG lOffset, int iOrigin);
WINBOOL IsTextUnicode (const(void)* lpv, int iSize, LPINT lpiResult);
DWORD SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
WINBOOL BackupRead (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID* lpContext);
WINBOOL BackupSeek (HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID* lpContext);
WINBOOL BackupWrite (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID* lpContext);

struct _WIN32_STREAM_ID
{
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR[1] cStreamName;
}

alias WIN32_STREAM_ID = _WIN32_STREAM_ID;
alias LPWIN32_STREAM_ID = _WIN32_STREAM_ID*;

HANDLE CreateSemaphoreW (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);

HMODULE LoadLibraryW (LPCWSTR lpLibFileName);

HANDLE OpenMutexA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
HANDLE CreateSemaphoreA (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
HANDLE OpenSemaphoreA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
HANDLE CreateWaitableTimerA (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCSTR lpTimerName);
HANDLE CreateWaitableTimerW (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCWSTR lpTimerName);
HANDLE OpenWaitableTimerA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpTimerName);
HANDLE CreateFileMappingA (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);

HANDLE OpenFileMappingA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
DWORD GetLogicalDriveStringsA (DWORD nBufferLength, LPSTR lpBuffer);
HMODULE LoadLibraryA (LPCSTR lpLibFileName);

WINBOOL GetProcessShutdownParameters (LPDWORD lpdwLevel, LPDWORD lpdwFlags);
void FatalAppExitA (UINT uAction, LPCSTR lpMessageText);
void FatalAppExitW (UINT uAction, LPCWSTR lpMessageText);
void GetStartupInfoA (LPSTARTUPINFOA lpStartupInfo);
DWORD GetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
DWORD GetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
WINBOOL SetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
WINBOOL SetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
HRSRC FindResourceA (HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
HRSRC FindResourceW (HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
HRSRC FindResourceExA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
WINBOOL EnumResourceTypesA (HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
WINBOOL EnumResourceTypesW (HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
WINBOOL EnumResourceNamesA (HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
WINBOOL EnumResourceNamesW (HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
WINBOOL EnumResourceLanguagesA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
WINBOOL EnumResourceLanguagesW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
HANDLE BeginUpdateResourceA (LPCSTR pFileName, WINBOOL bDeleteExistingResources);
HANDLE BeginUpdateResourceW (LPCWSTR pFileName, WINBOOL bDeleteExistingResources);
WINBOOL UpdateResourceA (HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
WINBOOL UpdateResourceW (HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
WINBOOL EndUpdateResourceA (HANDLE hUpdate, WINBOOL fDiscard);
WINBOOL EndUpdateResourceW (HANDLE hUpdate, WINBOOL fDiscard);

ATOM GlobalAddAtomA (LPCSTR lpString);
ATOM GlobalAddAtomW (LPCWSTR lpString);
ATOM GlobalAddAtomExA (LPCSTR lpString, DWORD Flags);
ATOM GlobalAddAtomExW (LPCWSTR lpString, DWORD Flags);
ATOM GlobalFindAtomA (LPCSTR lpString);
ATOM GlobalFindAtomW (LPCWSTR lpString);
UINT GlobalGetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
UINT GlobalGetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
ATOM AddAtomA (LPCSTR lpString);
ATOM AddAtomW (LPCWSTR lpString);
ATOM FindAtomA (LPCSTR lpString);
ATOM FindAtomW (LPCWSTR lpString);
UINT GetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
UINT GetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
UINT GetProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
UINT GetProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
DWORD GetProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
DWORD GetProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
WINBOOL WriteProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
WINBOOL WriteProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
DWORD GetProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
DWORD GetProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
WINBOOL WriteProfileSectionA (LPCSTR lpAppName, LPCSTR lpString);
WINBOOL WriteProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString);
UINT GetPrivateProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
UINT GetPrivateProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
DWORD GetPrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
DWORD GetPrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
WINBOOL WritePrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
WINBOOL WritePrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
DWORD GetPrivateProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
DWORD GetPrivateProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
WINBOOL WritePrivateProfileSectionA (LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
WINBOOL WritePrivateProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
DWORD GetPrivateProfileSectionNamesA (LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
DWORD GetPrivateProfileSectionNamesW (LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
WINBOOL GetPrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
WINBOOL GetPrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
WINBOOL WritePrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
WINBOOL WritePrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
DWORD GetTempPathA (DWORD nBufferLength, LPSTR lpBuffer);
UINT GetTempFileNameA (LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);

UINT GetSystemWow64DirectoryA (LPSTR lpBuffer, UINT uSize);
UINT GetSystemWow64DirectoryW (LPWSTR lpBuffer, UINT uSize);

BOOLEAN Wow64EnableWow64FsRedirection (BOOLEAN Wow64FsEnableRedirection);

alias PGET_SYSTEM_WOW64_DIRECTORY_A = uint function (LPSTR lpBuffer, UINT uSize);
alias PGET_SYSTEM_WOW64_DIRECTORY_W = uint function (LPWSTR lpBuffer, UINT uSize);

WINBOOL SetDllDirectoryA (LPCSTR lpPathName);
WINBOOL SetDllDirectoryW (LPCWSTR lpPathName);
DWORD GetDllDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
DWORD GetDllDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);

WINBOOL SetSearchPathMode (DWORD Flags);

WINBOOL CreateDirectoryExA (LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL CreateDirectoryExW (LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);

WINBOOL DefineDosDeviceA (DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
DWORD QueryDosDeviceA (LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);

HANDLE ReOpenFile (HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);

DWORD GetCompressedFileSizeA (LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
DWORD GetCompressedFileSizeW (LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);

alias LPPROGRESS_ROUTINE = c_ulong function (LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);

WINBOOL CheckNameLegalDOS8Dot3A (LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
WINBOOL CheckNameLegalDOS8Dot3W (LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
WINBOOL CopyFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, WINBOOL bFailIfExists);
WINBOOL CopyFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, WINBOOL bFailIfExists);
WINBOOL CopyFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
WINBOOL CopyFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);

WINBOOL MoveFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
WINBOOL MoveFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);

WINBOOL MoveFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
WINBOOL MoveFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);

WINBOOL MoveFileWithProgressA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
WINBOOL MoveFileWithProgressW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);

WINBOOL ReplaceFileA (LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
WINBOOL ReplaceFileW (LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
WINBOOL CreateHardLinkA (LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL CreateHardLinkW (LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);

enum _STREAM_INFO_LEVELS
{
    FindStreamInfoStandard = 0,
    FindStreamInfoMaxInfoLevel = 1
}

alias STREAM_INFO_LEVELS = _STREAM_INFO_LEVELS;

struct _WIN32_FIND_STREAM_DATA
{
    LARGE_INTEGER StreamSize;
    WCHAR[296] cStreamName;
}

alias WIN32_FIND_STREAM_DATA = _WIN32_FIND_STREAM_DATA;
alias PWIN32_FIND_STREAM_DATA = _WIN32_FIND_STREAM_DATA*;

HANDLE FindFirstStreamW (LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
WINBOOL FindNextStreamW (HANDLE hFindStream, LPVOID lpFindStreamData);

HANDLE CreateNamedPipeA (LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL GetNamedPipeHandleStateA (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
WINBOOL GetNamedPipeHandleStateW (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
WINBOOL CallNamedPipeA (LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
WINBOOL CallNamedPipeW (LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
WINBOOL WaitNamedPipeA (LPCSTR lpNamedPipeName, DWORD nTimeOut);
WINBOOL SetVolumeLabelA (LPCSTR lpRootPathName, LPCSTR lpVolumeName);
WINBOOL SetVolumeLabelW (LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
void SetFileApisToOEM ();
void SetFileApisToANSI ();
WINBOOL AreFileApisANSI ();
WINBOOL GetVolumeInformationA (LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
WINBOOL ClearEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
WINBOOL ClearEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
WINBOOL BackupEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
WINBOOL BackupEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
WINBOOL CloseEventLog (HANDLE hEventLog);
WINBOOL DeregisterEventSource (HANDLE hEventLog);
WINBOOL NotifyChangeEventLog (HANDLE hEventLog, HANDLE hEvent);
WINBOOL GetNumberOfEventLogRecords (HANDLE hEventLog, PDWORD NumberOfRecords);
WINBOOL GetOldestEventLogRecord (HANDLE hEventLog, PDWORD OldestRecord);
HANDLE OpenEventLogA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
HANDLE OpenEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
HANDLE RegisterEventSourceA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
HANDLE RegisterEventSourceW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
HANDLE OpenBackupEventLogA (LPCSTR lpUNCServerName, LPCSTR lpFileName);
HANDLE OpenBackupEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
WINBOOL ReadEventLogA (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD* pnBytesRead, DWORD* pnMinNumberOfBytesNeeded);
WINBOOL ReadEventLogW (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD* pnBytesRead, DWORD* pnMinNumberOfBytesNeeded);
WINBOOL ReportEventA (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR* lpStrings, LPVOID lpRawData);
WINBOOL ReportEventW (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR* lpStrings, LPVOID lpRawData);

struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}

alias EVENTLOG_FULL_INFORMATION = _EVENTLOG_FULL_INFORMATION;
alias LPEVENTLOG_FULL_INFORMATION = _EVENTLOG_FULL_INFORMATION*;

WINBOOL GetEventLogInformation (HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);

WINBOOL AccessCheckAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
WINBOOL AccessCheckByTypeAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
WINBOOL AccessCheckByTypeResultListAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
WINBOOL AccessCheckByTypeResultListAndAuditAlarmByHandleA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
WINBOOL ObjectOpenAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);
WINBOOL ObjectPrivilegeAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
WINBOOL ObjectCloseAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
WINBOOL ObjectDeleteAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
WINBOOL PrivilegedServiceAuditAlarmA (LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
WINBOOL SetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
WINBOOL GetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
WINBOOL ReadDirectoryChangesW (HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
WINBOOL IsBadReadPtr (const(void)* lp, UINT_PTR ucb);
WINBOOL IsBadWritePtr (LPVOID lp, UINT_PTR ucb);
WINBOOL IsBadHugeReadPtr (const(void)* lp, UINT_PTR ucb);
WINBOOL IsBadHugeWritePtr (LPVOID lp, UINT_PTR ucb);
WINBOOL IsBadCodePtr (FARPROC lpfn);
WINBOOL IsBadStringPtrA (LPCSTR lpsz, UINT_PTR ucchMax);
WINBOOL IsBadStringPtrW (LPCWSTR lpsz, UINT_PTR ucchMax);

WINBOOL LookupAccountSidA (LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
WINBOOL LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
WINBOOL LookupAccountNameA (LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
WINBOOL LookupAccountNameW (LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);

WINBOOL LookupPrivilegeValueA (LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
WINBOOL LookupPrivilegeValueW (LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
WINBOOL LookupPrivilegeNameA (LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
WINBOOL LookupPrivilegeNameW (LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
WINBOOL LookupPrivilegeDisplayNameA (LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
WINBOOL LookupPrivilegeDisplayNameW (LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
WINBOOL BuildCommDCBA (LPCSTR lpDef, LPDCB lpDCB);
WINBOOL BuildCommDCBW (LPCWSTR lpDef, LPDCB lpDCB);
WINBOOL BuildCommDCBAndTimeoutsA (LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL BuildCommDCBAndTimeoutsW (LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL CommConfigDialogA (LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
WINBOOL CommConfigDialogW (LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
WINBOOL GetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
WINBOOL GetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
WINBOOL SetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
WINBOOL SetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);

WINBOOL GetComputerNameA (LPSTR lpBuffer, LPDWORD nSize);
WINBOOL GetComputerNameW (LPWSTR lpBuffer, LPDWORD nSize);
WINBOOL SetComputerNameA (LPCSTR lpComputerName);
WINBOOL SetComputerNameW (LPCWSTR lpComputerName);
WINBOOL SetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPCTSTR lpBuffer);
WINBOOL DnsHostnameToComputerNameA (LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
WINBOOL DnsHostnameToComputerNameW (LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
WINBOOL GetUserNameA (LPSTR lpBuffer, LPDWORD pcbBuffer);
WINBOOL GetUserNameW (LPWSTR lpBuffer, LPDWORD pcbBuffer);

WINBOOL LogonUserA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
WINBOOL LogonUserW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
WINBOOL LogonUserExA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID* ppLogonSid, PVOID* ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
WINBOOL LogonUserExW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID* ppLogonSid, PVOID* ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
WINBOOL CreateProcessAsUserA (HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);

WINBOOL CreateProcessWithLogonW (LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL CreateProcessWithTokenW (HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL IsTokenUntrusted (HANDLE TokenHandle);
WINBOOL RegisterWaitForSingleObject (PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
WINBOOL UnregisterWait (HANDLE WaitHandle);
WINBOOL BindIoCompletionCallback (HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
HANDLE SetTimerQueueTimer (HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, WINBOOL PreferIo);
WINBOOL CancelTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer);
WINBOOL DeleteTimerQueue (HANDLE TimerQueue);

HANDLE CreatePrivateNamespaceA (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
HANDLE OpenPrivateNamespaceA (LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
HANDLE CreateBoundaryDescriptorA (LPCSTR Name, ULONG Flags);
WINBOOL AddIntegrityLabelToBoundaryDescriptor (HANDLE* BoundaryDescriptor, PSID IntegrityLabel);

struct tagHW_PROFILE_INFOA
{
    DWORD dwDockInfo;
    CHAR[39] szHwProfileGuid;
    CHAR[80] szHwProfileName;
}

alias HW_PROFILE_INFOA = tagHW_PROFILE_INFOA;
alias LPHW_PROFILE_INFOA = tagHW_PROFILE_INFOA*;

struct tagHW_PROFILE_INFOW
{
    DWORD dwDockInfo;
    WCHAR[39] szHwProfileGuid;
    WCHAR[80] szHwProfileName;
}

alias HW_PROFILE_INFOW = tagHW_PROFILE_INFOW;
alias LPHW_PROFILE_INFOW = tagHW_PROFILE_INFOW*;

alias HW_PROFILE_INFO = tagHW_PROFILE_INFOA;
alias LPHW_PROFILE_INFO = tagHW_PROFILE_INFOA*;

WINBOOL GetCurrentHwProfileA (LPHW_PROFILE_INFOA lpHwProfileInfo);
WINBOOL GetCurrentHwProfileW (LPHW_PROFILE_INFOW lpHwProfileInfo);
WINBOOL VerifyVersionInfoA (LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
WINBOOL VerifyVersionInfoW (LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);

struct _TIME_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR[32] StandardName;
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR[32] DaylightName;
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
}

alias TIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION;
alias PTIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION*;
alias LPTIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION*;

struct _TIME_DYNAMIC_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR[32] StandardName;
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR[32] DaylightName;
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR[128] TimeZoneKeyName;
    BOOLEAN DynamicDaylightTimeDisabled;
}

alias DYNAMIC_TIME_ZONE_INFORMATION = _TIME_DYNAMIC_ZONE_INFORMATION;
alias PDYNAMIC_TIME_ZONE_INFORMATION = _TIME_DYNAMIC_ZONE_INFORMATION*;

WINBOOL SystemTimeToTzSpecificLocalTime (const(TIME_ZONE_INFORMATION)* lpTimeZoneInformation, const(SYSTEMTIME)* lpUniversalTime, LPSYSTEMTIME lpLocalTime);
WINBOOL TzSpecificLocalTimeToSystemTime (const(TIME_ZONE_INFORMATION)* lpTimeZoneInformation, const(SYSTEMTIME)* lpLocalTime, LPSYSTEMTIME lpUniversalTime);
WINBOOL FileTimeToSystemTime (const(FILETIME)* lpFileTime, LPSYSTEMTIME lpSystemTime);
WINBOOL SystemTimeToFileTime (const(SYSTEMTIME)* lpSystemTime, LPFILETIME lpFileTime);
DWORD GetTimeZoneInformation (LPTIME_ZONE_INFORMATION lpTimeZoneInformation);

WINBOOL SetTimeZoneInformation (const(TIME_ZONE_INFORMATION)* lpTimeZoneInformation);

struct _SYSTEM_POWER_STATUS
{
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}

alias SYSTEM_POWER_STATUS = _SYSTEM_POWER_STATUS;
alias LPSYSTEM_POWER_STATUS = _SYSTEM_POWER_STATUS*;

WINBOOL GetSystemPowerStatus (LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
WINBOOL SetSystemPowerState (WINBOOL fSuspend, WINBOOL fForce);

WINBOOL AllocateUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
WINBOOL FreeUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
WINBOOL MapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
WINBOOL MapUserPhysicalPagesScatter (PVOID* VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
HANDLE CreateJobObjectA (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
HANDLE CreateJobObjectW (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
HANDLE OpenJobObjectA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
HANDLE OpenJobObjectW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
WINBOOL AssignProcessToJobObject (HANDLE hJob, HANDLE hProcess);
WINBOOL TerminateJobObject (HANDLE hJob, UINT uExitCode);
WINBOOL QueryInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
WINBOOL SetInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
WINBOOL CreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
HANDLE FindFirstVolumeA (LPSTR lpszVolumeName, DWORD cchBufferLength);
WINBOOL FindNextVolumeA (HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
HANDLE FindFirstVolumeMountPointA (LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
HANDLE FindFirstVolumeMountPointW (LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
WINBOOL FindNextVolumeMountPointA (HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
WINBOOL FindNextVolumeMountPointW (HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
WINBOOL FindVolumeMountPointClose (HANDLE hFindVolumeMountPoint);
WINBOOL SetVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
WINBOOL SetVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
WINBOOL DeleteVolumeMountPointA (LPCSTR lpszVolumeMountPoint);
WINBOOL GetVolumeNameForVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
WINBOOL GetVolumePathNameA (LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
WINBOOL GetVolumePathNamesForVolumeNameA (LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);

struct tagACTCTXA
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
}

alias ACTCTXA = tagACTCTXA;
alias PACTCTXA = tagACTCTXA*;

struct tagACTCTXW
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
}

alias ACTCTXW = tagACTCTXW;
alias PACTCTXW = tagACTCTXW*;

alias ACTCTX = tagACTCTXA;
alias PACTCTX = tagACTCTXA*;

alias PCACTCTXA = const(tagACTCTXA)*;
alias PCACTCTXW = const(tagACTCTXW)*;

alias PCACTCTX = const(tagACTCTXA)*;

HANDLE CreateActCtxA (PCACTCTXA pActCtx);
HANDLE CreateActCtxW (PCACTCTXW pActCtx);
void AddRefActCtx (HANDLE hActCtx);
void ReleaseActCtx (HANDLE hActCtx);
WINBOOL ZombifyActCtx (HANDLE hActCtx);
WINBOOL ActivateActCtx (HANDLE hActCtx, ULONG_PTR* lpCookie);
WINBOOL DeactivateActCtx (DWORD dwFlags, ULONG_PTR ulCookie);
WINBOOL GetCurrentActCtx (HANDLE* lphActCtx);

struct tagACTCTX_SECTION_KEYED_DATA_2600
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
}

alias ACTCTX_SECTION_KEYED_DATA_2600 = tagACTCTX_SECTION_KEYED_DATA_2600;
alias PACTCTX_SECTION_KEYED_DATA_2600 = tagACTCTX_SECTION_KEYED_DATA_2600*;

alias PCACTCTX_SECTION_KEYED_DATA_2600 = const(tagACTCTX_SECTION_KEYED_DATA_2600)*;

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
}

alias ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
alias PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA*;

alias PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = const(tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA)*;

struct tagACTCTX_SECTION_KEYED_DATA
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
}

alias ACTCTX_SECTION_KEYED_DATA = tagACTCTX_SECTION_KEYED_DATA;
alias PACTCTX_SECTION_KEYED_DATA = tagACTCTX_SECTION_KEYED_DATA*;

alias PCACTCTX_SECTION_KEYED_DATA = const(tagACTCTX_SECTION_KEYED_DATA)*;

WINBOOL FindActCtxSectionStringA (DWORD dwFlags, const(GUID)* lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
WINBOOL FindActCtxSectionStringW (DWORD dwFlags, const(GUID)* lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
WINBOOL FindActCtxSectionGuid (DWORD dwFlags, const(GUID)* lpExtensionGuid, ULONG ulSectionId, const(GUID)* lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);

struct _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
    HANDLE hActCtx;
    DWORD dwFlags;
}

alias ACTIVATION_CONTEXT_BASIC_INFORMATION = _ACTIVATION_CONTEXT_BASIC_INFORMATION;
alias PACTIVATION_CONTEXT_BASIC_INFORMATION = _ACTIVATION_CONTEXT_BASIC_INFORMATION*;

alias PCACTIVATION_CONTEXT_BASIC_INFORMATION = const(_ACTIVATION_CONTEXT_BASIC_INFORMATION)*;

WINBOOL QueryActCtxW (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T* pcbWrittenOrRequired);

alias PQUERYACTCTXW_FUNC = int function (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T* pcbWrittenOrRequired);

DWORD WTSGetActiveConsoleSessionId ();
WINBOOL GetNumaProcessorNode (UCHAR Processor, PUCHAR NodeNumber);
WINBOOL GetNumaNodeProcessorMask (UCHAR Node, PULONGLONG ProcessorMask);
WINBOOL GetNumaAvailableMemoryNode (UCHAR Node, PULONGLONG AvailableBytes);

alias APPLICATION_RECOVERY_CALLBACK = c_ulong function (PVOID pvParameter);

WINBOOL CopyContext (PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source);

WINBOOL InitializeContext (PVOID Buffer, DWORD ContextFlags, PCONTEXT* Context, PDWORD ContextLength);

DWORD64 GetEnabledXStateFeatures ();
WINBOOL GetXStateFeaturesMask (PCONTEXT Context, PDWORD64 FeatureMask);
PVOID LocateXStateFeature (PCONTEXT Context, DWORD FeatureId, PDWORD Length);

WINBOOL SetXStateFeaturesMask (PCONTEXT Context, DWORD64 FeatureMask);

struct _DRAWPATRECT
{
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
}

alias DRAWPATRECT = _DRAWPATRECT;
alias PDRAWPATRECT = _DRAWPATRECT*;

struct _PSINJECTDATA
{
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
}

alias PSINJECTDATA = _PSINJECTDATA;
alias PPSINJECTDATA = _PSINJECTDATA*;

struct _PSFEATURE_OUTPUT
{
    WINBOOL bPageIndependent;
    WINBOOL bSetPageDevice;
}

alias PSFEATURE_OUTPUT = _PSFEATURE_OUTPUT;
alias PPSFEATURE_OUTPUT = _PSFEATURE_OUTPUT*;

struct _PSFEATURE_CUSTPAPER
{
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
}

alias PSFEATURE_CUSTPAPER = _PSFEATURE_CUSTPAPER;
alias PPSFEATURE_CUSTPAPER = _PSFEATURE_CUSTPAPER*;

struct tagXFORM
{
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
}

alias XFORM = tagXFORM;
alias PXFORM = tagXFORM*;
alias LPXFORM = tagXFORM*;

struct tagBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
}

alias BITMAP = tagBITMAP;
alias PBITMAP = tagBITMAP*;
alias NPBITMAP = tagBITMAP*;
alias LPBITMAP = tagBITMAP*;

struct tagRGBTRIPLE
{
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
}

alias RGBTRIPLE = tagRGBTRIPLE;

struct tagRGBQUAD
{
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
}

alias RGBQUAD = tagRGBQUAD;

alias LPRGBQUAD = tagRGBQUAD*;

alias LCSCSTYPE = c_long;

alias LCSGAMUTMATCH = c_long;

alias FXPT16DOT16 = c_long;
alias LPFXPT16DOT16 = c_long*;
alias FXPT2DOT30 = c_long;
alias LPFXPT2DOT30 = c_long*;

struct tagCIEXYZ
{
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
}

alias CIEXYZ = tagCIEXYZ;

alias LPCIEXYZ = tagCIEXYZ*;

struct tagICEXYZTRIPLE
{
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
}

alias CIEXYZTRIPLE = tagICEXYZTRIPLE;

alias LPCIEXYZTRIPLE = tagICEXYZTRIPLE*;

struct tagLOGCOLORSPACEA
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR[260] lcsFilename;
}

alias LOGCOLORSPACEA = tagLOGCOLORSPACEA;
alias LPLOGCOLORSPACEA = tagLOGCOLORSPACEA*;

struct tagLOGCOLORSPACEW
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR[260] lcsFilename;
}

alias LOGCOLORSPACEW = tagLOGCOLORSPACEW;
alias LPLOGCOLORSPACEW = tagLOGCOLORSPACEW*;

alias LOGCOLORSPACE = tagLOGCOLORSPACEA;
alias LPLOGCOLORSPACE = tagLOGCOLORSPACEA*;

struct tagBITMAPCOREHEADER
{
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
}

alias BITMAPCOREHEADER = tagBITMAPCOREHEADER;
alias LPBITMAPCOREHEADER = tagBITMAPCOREHEADER*;
alias PBITMAPCOREHEADER = tagBITMAPCOREHEADER*;

struct tagBITMAPINFOHEADER
{
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
}

alias BITMAPINFOHEADER = tagBITMAPINFOHEADER;
alias LPBITMAPINFOHEADER = tagBITMAPINFOHEADER*;
alias PBITMAPINFOHEADER = tagBITMAPINFOHEADER*;

struct BITMAPV4HEADER
{
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
}

alias LPBITMAPV4HEADER = BITMAPV4HEADER*;
alias PBITMAPV4HEADER = BITMAPV4HEADER*;

struct BITMAPV5HEADER
{
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
}

alias LPBITMAPV5HEADER = BITMAPV5HEADER*;
alias PBITMAPV5HEADER = BITMAPV5HEADER*;

struct tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD[1] bmiColors;
}

alias BITMAPINFO = tagBITMAPINFO;
alias LPBITMAPINFO = tagBITMAPINFO*;
alias PBITMAPINFO = tagBITMAPINFO*;

struct tagBITMAPCOREINFO
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE[1] bmciColors;
}

alias BITMAPCOREINFO = tagBITMAPCOREINFO;
alias LPBITMAPCOREINFO = tagBITMAPCOREINFO*;
alias PBITMAPCOREINFO = tagBITMAPCOREINFO*;

struct tagBITMAPFILEHEADER
{
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
}

alias BITMAPFILEHEADER = tagBITMAPFILEHEADER;
alias LPBITMAPFILEHEADER = tagBITMAPFILEHEADER*;
alias PBITMAPFILEHEADER = tagBITMAPFILEHEADER*;

struct tagFONTSIGNATURE
{
    DWORD[4] fsUsb;
    DWORD[2] fsCsb;
}

alias FONTSIGNATURE = tagFONTSIGNATURE;
alias PFONTSIGNATURE = tagFONTSIGNATURE*;
alias LPFONTSIGNATURE = tagFONTSIGNATURE*;

struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
}

alias CHARSETINFO = tagCHARSETINFO;
alias PCHARSETINFO = tagCHARSETINFO*;
alias NPCHARSETINFO = tagCHARSETINFO*;
alias LPCHARSETINFO = tagCHARSETINFO*;

struct tagLOCALESIGNATURE
{
    DWORD[4] lsUsb;
    DWORD[2] lsCsbDefault;
    DWORD[2] lsCsbSupported;
}

alias LOCALESIGNATURE = tagLOCALESIGNATURE;
alias PLOCALESIGNATURE = tagLOCALESIGNATURE*;
alias LPLOCALESIGNATURE = tagLOCALESIGNATURE*;

struct tagHANDLETABLE
{
    HGDIOBJ[1] objectHandle;
}

alias HANDLETABLE = tagHANDLETABLE;
alias PHANDLETABLE = tagHANDLETABLE*;
alias LPHANDLETABLE = tagHANDLETABLE*;

struct tagMETARECORD
{
    DWORD rdSize;
    WORD rdFunction;
    WORD[1] rdParm;
}

alias METARECORD = tagMETARECORD;

alias PMETARECORD = tagMETARECORD*;

alias LPMETARECORD = tagMETARECORD*;

struct tagMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
}

alias METAFILEPICT = tagMETAFILEPICT;
alias LPMETAFILEPICT = tagMETAFILEPICT*;

struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
}

alias METAHEADER = tagMETAHEADER;
alias PMETAHEADER = tagMETAHEADER*;
alias LPMETAHEADER = tagMETAHEADER*;

struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD[1] dParm;
}

alias ENHMETARECORD = tagENHMETARECORD;
alias PENHMETARECORD = tagENHMETARECORD*;
alias LPENHMETARECORD = tagENHMETARECORD*;

struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
}

alias ENHMETAHEADER = tagENHMETAHEADER;
alias PENHMETAHEADER = tagENHMETAHEADER*;
alias LPENHMETAHEADER = tagENHMETAHEADER*;

alias BCHAR = ubyte;

struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
}

alias TEXTMETRICA = tagTEXTMETRICA;
alias PTEXTMETRICA = tagTEXTMETRICA*;
alias NPTEXTMETRICA = tagTEXTMETRICA*;
alias LPTEXTMETRICA = tagTEXTMETRICA*;

struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
}

alias TEXTMETRICW = tagTEXTMETRICW;
alias PTEXTMETRICW = tagTEXTMETRICW*;
alias NPTEXTMETRICW = tagTEXTMETRICW*;
alias LPTEXTMETRICW = tagTEXTMETRICW*;

alias TEXTMETRIC = tagTEXTMETRICA;
alias PTEXTMETRIC = tagTEXTMETRICA*;
alias NPTEXTMETRIC = tagTEXTMETRICA*;
alias LPTEXTMETRIC = tagTEXTMETRICA*;

struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
}

alias NEWTEXTMETRICA = tagNEWTEXTMETRICA;
alias PNEWTEXTMETRICA = tagNEWTEXTMETRICA*;
alias NPNEWTEXTMETRICA = tagNEWTEXTMETRICA*;
alias LPNEWTEXTMETRICA = tagNEWTEXTMETRICA*;

struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
}

alias NEWTEXTMETRICW = tagNEWTEXTMETRICW;
alias PNEWTEXTMETRICW = tagNEWTEXTMETRICW*;
alias NPNEWTEXTMETRICW = tagNEWTEXTMETRICW*;
alias LPNEWTEXTMETRICW = tagNEWTEXTMETRICW*;

alias NEWTEXTMETRIC = tagNEWTEXTMETRICA;
alias PNEWTEXTMETRIC = tagNEWTEXTMETRICA*;
alias NPNEWTEXTMETRIC = tagNEWTEXTMETRICA*;
alias LPNEWTEXTMETRIC = tagNEWTEXTMETRICA*;

struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}

alias NEWTEXTMETRICEXA = tagNEWTEXTMETRICEXA;

struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}

alias NEWTEXTMETRICEXW = tagNEWTEXTMETRICEXW;

alias NEWTEXTMETRICEX = tagNEWTEXTMETRICEXA;

struct tagPELARRAY
{
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
}

alias PELARRAY = tagPELARRAY;
alias PPELARRAY = tagPELARRAY*;
alias NPPELARRAY = tagPELARRAY*;
alias LPPELARRAY = tagPELARRAY*;

struct tagLOGBRUSH
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
}

alias LOGBRUSH = tagLOGBRUSH;
alias PLOGBRUSH = tagLOGBRUSH*;
alias NPLOGBRUSH = tagLOGBRUSH*;
alias LPLOGBRUSH = tagLOGBRUSH*;

struct tagLOGBRUSH32
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
}

alias LOGBRUSH32 = tagLOGBRUSH32;
alias PLOGBRUSH32 = tagLOGBRUSH32*;
alias NPLOGBRUSH32 = tagLOGBRUSH32*;
alias LPLOGBRUSH32 = tagLOGBRUSH32*;

alias PATTERN = tagLOGBRUSH;
alias PPATTERN = tagLOGBRUSH*;
alias NPPATTERN = tagLOGBRUSH*;
alias LPPATTERN = tagLOGBRUSH*;

struct tagLOGPEN
{
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
}

alias LOGPEN = tagLOGPEN;
alias PLOGPEN = tagLOGPEN*;
alias NPLOGPEN = tagLOGPEN*;
alias LPLOGPEN = tagLOGPEN*;

struct tagEXTLOGPEN
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD[1] elpStyleEntry;
}

alias EXTLOGPEN = tagEXTLOGPEN;
alias PEXTLOGPEN = tagEXTLOGPEN*;
alias NPEXTLOGPEN = tagEXTLOGPEN*;
alias LPEXTLOGPEN = tagEXTLOGPEN*;

struct tagEXTLOGPEN32
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD[1] elpStyleEntry;
}

alias EXTLOGPEN32 = tagEXTLOGPEN32;
alias PEXTLOGPEN32 = tagEXTLOGPEN32*;
alias NPEXTLOGPEN32 = tagEXTLOGPEN32*;
alias LPEXTLOGPEN32 = tagEXTLOGPEN32*;

struct tagPALETTEENTRY
{
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
}

alias PALETTEENTRY = tagPALETTEENTRY;
alias PPALETTEENTRY = tagPALETTEENTRY*;
alias LPPALETTEENTRY = tagPALETTEENTRY*;

struct tagLOGPALETTE
{
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY[1] palPalEntry;
}

alias LOGPALETTE = tagLOGPALETTE;
alias PLOGPALETTE = tagLOGPALETTE*;
alias NPLOGPALETTE = tagLOGPALETTE*;
alias LPLOGPALETTE = tagLOGPALETTE*;

struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR[32] lfFaceName;
}

alias LOGFONTA = tagLOGFONTA;
alias PLOGFONTA = tagLOGFONTA*;
alias NPLOGFONTA = tagLOGFONTA*;
alias LPLOGFONTA = tagLOGFONTA*;

struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR[32] lfFaceName;
}

alias LOGFONTW = tagLOGFONTW;
alias PLOGFONTW = tagLOGFONTW*;
alias NPLOGFONTW = tagLOGFONTW*;
alias LPLOGFONTW = tagLOGFONTW*;

alias LOGFONT = tagLOGFONTA;
alias PLOGFONT = tagLOGFONTA*;
alias NPLOGFONT = tagLOGFONTA*;
alias LPLOGFONT = tagLOGFONTA*;

struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE[64] elfFullName;
    BYTE[32] elfStyle;
}

alias ENUMLOGFONTA = tagENUMLOGFONTA;
alias LPENUMLOGFONTA = tagENUMLOGFONTA*;

struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR[64] elfFullName;
    WCHAR[32] elfStyle;
}

alias ENUMLOGFONTW = tagENUMLOGFONTW;
alias LPENUMLOGFONTW = tagENUMLOGFONTW*;

alias ENUMLOGFONT = tagENUMLOGFONTA;
alias LPENUMLOGFONT = tagENUMLOGFONTA*;

struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE[64] elfFullName;
    BYTE[32] elfStyle;
    BYTE[32] elfScript;
}

alias ENUMLOGFONTEXA = tagENUMLOGFONTEXA;
alias LPENUMLOGFONTEXA = tagENUMLOGFONTEXA*;

struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR[64] elfFullName;
    WCHAR[32] elfStyle;
    WCHAR[32] elfScript;
}

alias ENUMLOGFONTEXW = tagENUMLOGFONTEXW;
alias LPENUMLOGFONTEXW = tagENUMLOGFONTEXW*;

alias ENUMLOGFONTEX = tagENUMLOGFONTEXA;
alias LPENUMLOGFONTEX = tagENUMLOGFONTEXA*;

struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
}

alias PANOSE = tagPANOSE;
alias LPPANOSE = tagPANOSE*;

struct tagEXTLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE[64] elfFullName;
    BYTE[32] elfStyle;
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE[4] elfVendorId;
    DWORD elfCulture;
    PANOSE elfPanose;
}

alias EXTLOGFONTA = tagEXTLOGFONTA;
alias PEXTLOGFONTA = tagEXTLOGFONTA*;
alias NPEXTLOGFONTA = tagEXTLOGFONTA*;
alias LPEXTLOGFONTA = tagEXTLOGFONTA*;

struct tagEXTLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR[64] elfFullName;
    WCHAR[32] elfStyle;
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE[4] elfVendorId;
    DWORD elfCulture;
    PANOSE elfPanose;
}

alias EXTLOGFONTW = tagEXTLOGFONTW;
alias PEXTLOGFONTW = tagEXTLOGFONTW*;
alias NPEXTLOGFONTW = tagEXTLOGFONTW*;
alias LPEXTLOGFONTW = tagEXTLOGFONTW*;

alias EXTLOGFONT = tagEXTLOGFONTA;
alias PEXTLOGFONT = tagEXTLOGFONTA*;
alias NPEXTLOGFONT = tagEXTLOGFONTA*;
alias LPEXTLOGFONT = tagEXTLOGFONTA*;

struct _devicemodeA
{
    BYTE[32] dmDeviceName;
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;

    union
    {
        struct
        {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        }

        struct
        {
            POINTL dmPosition;
            DWORD dmDisplayOrientation;
            DWORD dmDisplayFixedOutput;
        }
    }

    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE[32] dmFormName;
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;

    union
    {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    }

    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
}

alias DEVMODEA = _devicemodeA;
alias PDEVMODEA = _devicemodeA*;
alias NPDEVMODEA = _devicemodeA*;
alias LPDEVMODEA = _devicemodeA*;

struct _devicemodeW
{
    WCHAR[32] dmDeviceName;
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;

    union
    {
        struct
        {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        }

        struct
        {
            POINTL dmPosition;
            DWORD dmDisplayOrientation;
            DWORD dmDisplayFixedOutput;
        }
    }

    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR[32] dmFormName;
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;

    union
    {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    }

    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
}

alias DEVMODEW = _devicemodeW;
alias PDEVMODEW = _devicemodeW*;
alias NPDEVMODEW = _devicemodeW*;
alias LPDEVMODEW = _devicemodeW*;

alias DEVMODE = _devicemodeA;
alias PDEVMODE = _devicemodeA*;
alias NPDEVMODE = _devicemodeA*;
alias LPDEVMODE = _devicemodeA*;

struct _DISPLAY_DEVICEA
{
    DWORD cb;
    CHAR[32] DeviceName;
    CHAR[128] DeviceString;
    DWORD StateFlags;
    CHAR[128] DeviceID;
    CHAR[128] DeviceKey;
}

alias DISPLAY_DEVICEA = _DISPLAY_DEVICEA;
alias PDISPLAY_DEVICEA = _DISPLAY_DEVICEA*;
alias LPDISPLAY_DEVICEA = _DISPLAY_DEVICEA*;

struct _DISPLAY_DEVICEW
{
    DWORD cb;
    WCHAR[32] DeviceName;
    WCHAR[128] DeviceString;
    DWORD StateFlags;
    WCHAR[128] DeviceID;
    WCHAR[128] DeviceKey;
}

alias DISPLAY_DEVICEW = _DISPLAY_DEVICEW;
alias PDISPLAY_DEVICEW = _DISPLAY_DEVICEW*;
alias LPDISPLAY_DEVICEW = _DISPLAY_DEVICEW*;

alias DISPLAY_DEVICE = _DISPLAY_DEVICEA;
alias PDISPLAY_DEVICE = _DISPLAY_DEVICEA*;
alias LPDISPLAY_DEVICE = _DISPLAY_DEVICEA*;

struct _RGNDATAHEADER
{
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
}

alias RGNDATAHEADER = _RGNDATAHEADER;
alias PRGNDATAHEADER = _RGNDATAHEADER*;

struct _RGNDATA
{
    RGNDATAHEADER rdh;
    char[1] Buffer;
}

alias RGNDATA = _RGNDATA;
alias PRGNDATA = _RGNDATA*;
alias NPRGNDATA = _RGNDATA*;
alias LPRGNDATA = _RGNDATA*;

struct _ABC
{
    int abcA;
    UINT abcB;
    int abcC;
}

alias ABC = _ABC;
alias PABC = _ABC*;
alias NPABC = _ABC*;
alias LPABC = _ABC*;

struct _ABCFLOAT
{
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
}

alias ABCFLOAT = _ABCFLOAT;
alias PABCFLOAT = _ABCFLOAT*;
alias NPABCFLOAT = _ABCFLOAT*;
alias LPABCFLOAT = _ABCFLOAT*;

struct _OUTLINETEXTMETRICA
{
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
}

alias OUTLINETEXTMETRICA = _OUTLINETEXTMETRICA;
alias POUTLINETEXTMETRICA = _OUTLINETEXTMETRICA*;
alias NPOUTLINETEXTMETRICA = _OUTLINETEXTMETRICA*;
alias LPOUTLINETEXTMETRICA = _OUTLINETEXTMETRICA*;

struct _OUTLINETEXTMETRICW
{
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
}

alias OUTLINETEXTMETRICW = _OUTLINETEXTMETRICW;
alias POUTLINETEXTMETRICW = _OUTLINETEXTMETRICW*;
alias NPOUTLINETEXTMETRICW = _OUTLINETEXTMETRICW*;
alias LPOUTLINETEXTMETRICW = _OUTLINETEXTMETRICW*;

alias OUTLINETEXTMETRIC = _OUTLINETEXTMETRICA;
alias POUTLINETEXTMETRIC = _OUTLINETEXTMETRICA*;
alias NPOUTLINETEXTMETRIC = _OUTLINETEXTMETRICA*;
alias LPOUTLINETEXTMETRIC = _OUTLINETEXTMETRICA*;

struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
}

alias POLYTEXTA = tagPOLYTEXTA;
alias PPOLYTEXTA = tagPOLYTEXTA*;
alias NPPOLYTEXTA = tagPOLYTEXTA*;
alias LPPOLYTEXTA = tagPOLYTEXTA*;

struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
}

alias POLYTEXTW = tagPOLYTEXTW;
alias PPOLYTEXTW = tagPOLYTEXTW*;
alias NPPOLYTEXTW = tagPOLYTEXTW*;
alias LPPOLYTEXTW = tagPOLYTEXTW*;

alias POLYTEXT = tagPOLYTEXTA;
alias PPOLYTEXT = tagPOLYTEXTA*;
alias NPPOLYTEXT = tagPOLYTEXTA*;
alias LPPOLYTEXT = tagPOLYTEXTA*;

struct _FIXED
{
    WORD fract;
    short value;
}

alias FIXED = _FIXED;

struct _MAT2
{
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
}

alias MAT2 = _MAT2;
alias LPMAT2 = _MAT2*;

struct _GLYPHMETRICS
{
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
}

alias GLYPHMETRICS = _GLYPHMETRICS;
alias LPGLYPHMETRICS = _GLYPHMETRICS*;

struct tagPOINTFX
{
    FIXED x;
    FIXED y;
}

alias POINTFX = tagPOINTFX;
alias LPPOINTFX = tagPOINTFX*;

struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX[1] apfx;
}

alias TTPOLYCURVE = tagTTPOLYCURVE;
alias LPTTPOLYCURVE = tagTTPOLYCURVE*;

struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
}

alias TTPOLYGONHEADER = tagTTPOLYGONHEADER;
alias LPTTPOLYGONHEADER = tagTTPOLYGONHEADER*;

struct tagGCP_RESULTSA
{
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT* lpOrder;
    int* lpDx;
    int* lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
}

alias GCP_RESULTSA = tagGCP_RESULTSA;
alias LPGCP_RESULTSA = tagGCP_RESULTSA*;

struct tagGCP_RESULTSW
{
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT* lpOrder;
    int* lpDx;
    int* lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
}

alias GCP_RESULTSW = tagGCP_RESULTSW;
alias LPGCP_RESULTSW = tagGCP_RESULTSW*;

alias GCP_RESULTS = tagGCP_RESULTSA;
alias LPGCP_RESULTS = tagGCP_RESULTSA*;

struct _RASTERIZER_STATUS
{
    short nSize;
    short wFlags;
    short nLanguageID;
}

alias RASTERIZER_STATUS = _RASTERIZER_STATUS;
alias LPRASTERIZER_STATUS = _RASTERIZER_STATUS*;

struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
}

alias PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR;
alias PPIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR*;
alias LPPIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR*;

alias OLDFONTENUMPROCA = int function (const(LOGFONTA)*, const(TEXTMETRICA)*, DWORD, LPARAM);
alias OLDFONTENUMPROCW = int function (const(LOGFONTW)*, const(TEXTMETRICW)*, DWORD, LPARAM);

alias FONTENUMPROCA = int function ();
alias FONTENUMPROCW = int function ();

alias FONTENUMPROC = int function ();

alias GOBJENUMPROC = int function (LPVOID, LPARAM);
alias LINEDDAPROC = void function (int, int, LPARAM);

int AddFontResourceA (LPCSTR);
int AddFontResourceW (LPCWSTR);
WINBOOL AnimatePalette (HPALETTE hPal, UINT iStartIndex, UINT cEntries, const(PALETTEENTRY)* ppe);
WINBOOL Arc (HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
WINBOOL BitBlt (HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
WINBOOL CancelDC (HDC hdc);
WINBOOL Chord (HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
int ChoosePixelFormat (HDC hdc, const(PIXELFORMATDESCRIPTOR)* ppfd);
HMETAFILE CloseMetaFile (HDC hdc);
int CombineRgn (HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
HMETAFILE CopyMetaFileA (HMETAFILE, LPCSTR);
HMETAFILE CopyMetaFileW (HMETAFILE, LPCWSTR);
HBITMAP CreateBitmap (int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const(void)* lpBits);
HBITMAP CreateBitmapIndirect (const(BITMAP)* pbm);
HBRUSH CreateBrushIndirect (const(LOGBRUSH)* plbrush);
HBITMAP CreateCompatibleBitmap (HDC hdc, int cx, int cy);
HBITMAP CreateDiscardableBitmap (HDC hdc, int cx, int cy);
HDC CreateCompatibleDC (HDC hdc);
HDC CreateDCA (LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const(DEVMODEA)* pdm);
HDC CreateDCW (LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const(DEVMODEW)* pdm);
HBITMAP CreateDIBitmap (HDC hdc, const(BITMAPINFOHEADER)* pbmih, DWORD flInit, const(void)* pjBits, const(BITMAPINFO)* pbmi, UINT iUsage);
HBRUSH CreateDIBPatternBrush (HGLOBAL h, UINT iUsage);
HBRUSH CreateDIBPatternBrushPt (const(void)* lpPackedDIB, UINT iUsage);
HRGN CreateEllipticRgn (int x1, int y1, int x2, int y2);
HRGN CreateEllipticRgnIndirect (const(RECT)* lprect);
HFONT CreateFontIndirectA (const(LOGFONTA)* lplf);
HFONT CreateFontIndirectW (const(LOGFONTW)* lplf);
HFONT CreateFontA (int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
HFONT CreateFontW (int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
HBRUSH CreateHatchBrush (int iHatch, COLORREF color);
HDC CreateICA (LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const(DEVMODEA)* pdm);
HDC CreateICW (LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const(DEVMODEW)* pdm);
HDC CreateMetaFileA (LPCSTR pszFile);
HDC CreateMetaFileW (LPCWSTR pszFile);
HPALETTE CreatePalette (const(LOGPALETTE)* plpal);
HPEN CreatePen (int iStyle, int cWidth, COLORREF color);
HPEN CreatePenIndirect (const(LOGPEN)* plpen);
HRGN CreatePolyPolygonRgn (const(POINT)* pptl, const(INT)* pc, int cPoly, int iMode);
HBRUSH CreatePatternBrush (HBITMAP hbm);
HRGN CreateRectRgn (int x1, int y1, int x2, int y2);
HRGN CreateRectRgnIndirect (const(RECT)* lprect);
HRGN CreateRoundRectRgn (int x1, int y1, int x2, int y2, int w, int h);
WINBOOL CreateScalableFontResourceA (DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
WINBOOL CreateScalableFontResourceW (DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
HBRUSH CreateSolidBrush (COLORREF color);
WINBOOL DeleteDC (HDC hdc);
WINBOOL DeleteMetaFile (HMETAFILE hmf);
WINBOOL DeleteObject (HGDIOBJ ho);
int DescribePixelFormat (HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);

alias LPFNDEVMODE = uint function (HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
alias LPFNDEVCAPS = c_ulong function (LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

int DeviceCapabilitiesA (LPCSTR pDevice, LPCSTR pPort, WORD fwCapability, LPSTR pOutput, const(DEVMODEA)* pDevMode);
int DeviceCapabilitiesW (LPCWSTR pDevice, LPCWSTR pPort, WORD fwCapability, LPWSTR pOutput, const(DEVMODEW)* pDevMode);
int DrawEscape (HDC hdc, int iEscape, int cjIn, LPCSTR lpIn);
WINBOOL Ellipse (HDC hdc, int left, int top, int right, int bottom);
int EnumFontFamiliesExA (HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
int EnumFontFamiliesExW (HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
int EnumFontFamiliesA (HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int EnumFontFamiliesW (HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
int EnumFontsA (HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int EnumFontsW (HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
int EnumObjects (HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);
WINBOOL EqualRgn (HRGN hrgn1, HRGN hrgn2);
int Escape (HDC hdc, int iEscape, int cjIn, LPCSTR pvIn, LPVOID pvOut);
int ExtEscape (HDC hdc, int iEscape, int cjInput, LPCSTR lpInData, int cjOutput, LPSTR lpOutData);
int ExcludeClipRect (HDC hdc, int left, int top, int right, int bottom);
HRGN ExtCreateRegion (const(XFORM)* lpx, DWORD nCount, const(RGNDATA)* lpData);
WINBOOL ExtFloodFill (HDC hdc, int x, int y, COLORREF color, UINT type);
WINBOOL FillRgn (HDC hdc, HRGN hrgn, HBRUSH hbr);
WINBOOL FloodFill (HDC hdc, int x, int y, COLORREF color);
WINBOOL FrameRgn (HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
int GetROP2 (HDC hdc);
WINBOOL GetAspectRatioFilterEx (HDC hdc, LPSIZE lpsize);
COLORREF GetBkColor (HDC hdc);
COLORREF GetDCBrushColor (HDC hdc);
COLORREF GetDCPenColor (HDC hdc);
int GetBkMode (HDC hdc);
LONG GetBitmapBits (HBITMAP hbit, LONG cb, LPVOID lpvBits);
WINBOOL GetBitmapDimensionEx (HBITMAP hbit, LPSIZE lpsize);
UINT GetBoundsRect (HDC hdc, LPRECT lprect, UINT flags);
WINBOOL GetBrushOrgEx (HDC hdc, LPPOINT lppt);
WINBOOL GetCharWidthA (HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
WINBOOL GetCharWidthW (HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
WINBOOL GetCharWidth32A (HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
WINBOOL GetCharWidth32W (HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
WINBOOL GetCharWidthFloatA (HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
WINBOOL GetCharWidthFloatW (HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
WINBOOL GetCharABCWidthsA (HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
WINBOOL GetCharABCWidthsW (HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
WINBOOL GetCharABCWidthsFloatA (HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
WINBOOL GetCharABCWidthsFloatW (HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
int GetClipBox (HDC hdc, LPRECT lprect);
int GetClipRgn (HDC hdc, HRGN hrgn);
int GetMetaRgn (HDC hdc, HRGN hrgn);
HGDIOBJ GetCurrentObject (HDC hdc, UINT type);
WINBOOL GetCurrentPositionEx (HDC hdc, LPPOINT lppt);
int GetDeviceCaps (HDC hdc, int index);
int GetDIBits (HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
DWORD GetFontData (HDC hdc, DWORD dwTable, DWORD dwOffset, PVOID pvBuffer, DWORD cjBuffer);
DWORD GetGlyphOutlineA (HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const(MAT2)* lpmat2);
DWORD GetGlyphOutlineW (HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const(MAT2)* lpmat2);
int GetGraphicsMode (HDC hdc);
int GetMapMode (HDC hdc);
UINT GetMetaFileBitsEx (HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
HMETAFILE GetMetaFileA (LPCSTR lpName);
HMETAFILE GetMetaFileW (LPCWSTR lpName);
COLORREF GetNearestColor (HDC hdc, COLORREF color);
UINT GetNearestPaletteIndex (HPALETTE h, COLORREF color);
DWORD GetObjectType (HGDIOBJ h);

UINT GetOutlineTextMetricsA (HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICA potm);
UINT GetOutlineTextMetricsW (HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICW potm);

UINT GetPaletteEntries (HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
COLORREF GetPixel (HDC hdc, int x, int y);
int GetPixelFormat (HDC hdc);
int GetPolyFillMode (HDC hdc);
WINBOOL GetRasterizerCaps (LPRASTERIZER_STATUS lpraststat, UINT cjBytes);
int GetRandomRgn (HDC hdc, HRGN hrgn, INT i);
DWORD GetRegionData (HRGN hrgn, DWORD nCount, LPRGNDATA lpRgnData);
int GetRgnBox (HRGN hrgn, LPRECT lprc);
HGDIOBJ GetStockObject (int i);
int GetStretchBltMode (HDC hdc);
UINT GetSystemPaletteEntries (HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
UINT GetSystemPaletteUse (HDC hdc);
int GetTextCharacterExtra (HDC hdc);
UINT GetTextAlign (HDC hdc);
COLORREF GetTextColor (HDC hdc);
WINBOOL GetTextExtentPointA (HDC hdc, LPCSTR lpString, int c, LPSIZE lpsz);
WINBOOL GetTextExtentPointW (HDC hdc, LPCWSTR lpString, int c, LPSIZE lpsz);
WINBOOL GetTextExtentPoint32A (HDC hdc, LPCSTR lpString, int c, LPSIZE psizl);
WINBOOL GetTextExtentPoint32W (HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl);
WINBOOL GetTextExtentExPointA (HDC hdc, LPCSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
WINBOOL GetTextExtentExPointW (HDC hdc, LPCWSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
int GetTextCharset (HDC hdc);
int GetTextCharsetInfo (HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
WINBOOL TranslateCharsetInfo (DWORD* lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
DWORD GetFontLanguageInfo (HDC hdc);
DWORD GetCharacterPlacementA (HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
DWORD GetCharacterPlacementW (HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);

struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
}

alias WCRANGE = tagWCRANGE;
alias PWCRANGE = tagWCRANGE*;
alias LPWCRANGE = tagWCRANGE*;

struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE[1] ranges;
}

alias GLYPHSET = tagGLYPHSET;
alias PGLYPHSET = tagGLYPHSET*;
alias LPGLYPHSET = tagGLYPHSET*;

DWORD GetFontUnicodeRanges (HDC hdc, LPGLYPHSET lpgs);
DWORD GetGlyphIndicesA (HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
DWORD GetGlyphIndicesW (HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);
WINBOOL GetTextExtentPointI (HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
WINBOOL GetTextExtentExPointI (HDC hdc, LPWORD lpwszString, int cwchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
WINBOOL GetCharWidthI (HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT piWidths);
WINBOOL GetCharABCWidthsI (HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC pabc);

struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG[16] dvValues;
}

alias DESIGNVECTOR = tagDESIGNVECTOR;
alias PDESIGNVECTOR = tagDESIGNVECTOR*;
alias LPDESIGNVECTOR = tagDESIGNVECTOR*;

int AddFontResourceExA (LPCSTR name, DWORD fl, PVOID res);
int AddFontResourceExW (LPCWSTR name, DWORD fl, PVOID res);
WINBOOL RemoveFontResourceExA (LPCSTR name, DWORD fl, PVOID pdv);
WINBOOL RemoveFontResourceExW (LPCWSTR name, DWORD fl, PVOID pdv);
HANDLE AddFontMemResourceEx (PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD* pNumFonts);
WINBOOL RemoveFontMemResourceEx (HANDLE h);

struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE[16] axAxisName;
}

alias AXISINFOA = tagAXISINFOA;
alias PAXISINFOA = tagAXISINFOA*;
alias LPAXISINFOA = tagAXISINFOA*;

struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR[16] axAxisName;
}

alias AXISINFOW = tagAXISINFOW;
alias PAXISINFOW = tagAXISINFOW*;
alias LPAXISINFOW = tagAXISINFOW*;

alias AXISINFO = tagAXISINFOA;
alias PAXISINFO = tagAXISINFOA*;
alias LPAXISINFO = tagAXISINFOA*;

struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA[16] axlAxisInfo;
}

alias AXESLISTA = tagAXESLISTA;
alias PAXESLISTA = tagAXESLISTA*;
alias LPAXESLISTA = tagAXESLISTA*;

struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW[16] axlAxisInfo;
}

alias AXESLISTW = tagAXESLISTW;
alias PAXESLISTW = tagAXESLISTW*;
alias LPAXESLISTW = tagAXESLISTW*;

alias AXESLIST = tagAXESLISTA;
alias PAXESLIST = tagAXESLISTA*;
alias LPAXESLIST = tagAXESLISTA*;

struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
}

alias ENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA;
alias PENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA*;
alias LPENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA*;

struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
}

alias ENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW;
alias PENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW*;
alias LPENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW*;

alias ENUMLOGFONTEXDV = tagENUMLOGFONTEXDVA;
alias PENUMLOGFONTEXDV = tagENUMLOGFONTEXDVA*;
alias LPENUMLOGFONTEXDV = tagENUMLOGFONTEXDVA*;

HFONT CreateFontIndirectExA (const(ENUMLOGFONTEXDVA)*);
HFONT CreateFontIndirectExW (const(ENUMLOGFONTEXDVW)*);

struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
}

alias ENUMTEXTMETRICA = tagENUMTEXTMETRICA;
alias PENUMTEXTMETRICA = tagENUMTEXTMETRICA*;
alias LPENUMTEXTMETRICA = tagENUMTEXTMETRICA*;

struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
}

alias ENUMTEXTMETRICW = tagENUMTEXTMETRICW;
alias PENUMTEXTMETRICW = tagENUMTEXTMETRICW*;
alias LPENUMTEXTMETRICW = tagENUMTEXTMETRICW*;

alias ENUMTEXTMETRIC = tagENUMTEXTMETRICA;
alias PENUMTEXTMETRIC = tagENUMTEXTMETRICA*;
alias LPENUMTEXTMETRIC = tagENUMTEXTMETRICA*;

WINBOOL GetViewportExtEx (HDC hdc, LPSIZE lpsize);
WINBOOL GetViewportOrgEx (HDC hdc, LPPOINT lppoint);
WINBOOL GetWindowExtEx (HDC hdc, LPSIZE lpsize);
WINBOOL GetWindowOrgEx (HDC hdc, LPPOINT lppoint);
int IntersectClipRect (HDC hdc, int left, int top, int right, int bottom);
WINBOOL InvertRgn (HDC hdc, HRGN hrgn);
WINBOOL LineDDA (int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
WINBOOL LineTo (HDC hdc, int x, int y);
WINBOOL MaskBlt (HDC hdcDest, int xDest, int yDest, int width, int height, HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
WINBOOL PlgBlt (HDC hdcDest, const(POINT)* lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width, int height, HBITMAP hbmMask, int xMask, int yMask);
int OffsetClipRgn (HDC hdc, int x, int y);
int OffsetRgn (HRGN hrgn, int x, int y);
WINBOOL PatBlt (HDC hdc, int x, int y, int w, int h, DWORD rop);
WINBOOL Pie (HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
WINBOOL PlayMetaFile (HDC hdc, HMETAFILE hmf);
WINBOOL PaintRgn (HDC hdc, HRGN hrgn);
WINBOOL PolyPolygon (HDC hdc, const(POINT)* apt, const(INT)* asz, int csz);
WINBOOL PtInRegion (HRGN hrgn, int x, int y);
WINBOOL PtVisible (HDC hdc, int x, int y);
WINBOOL RectInRegion (HRGN hrgn, const(RECT)* lprect);
WINBOOL RectVisible (HDC hdc, const(RECT)* lprect);
WINBOOL Rectangle (HDC hdc, int left, int top, int right, int bottom);
WINBOOL RestoreDC (HDC hdc, int nSavedDC);
HDC ResetDCA (HDC hdc, const(DEVMODEA)* lpdm);
HDC ResetDCW (HDC hdc, const(DEVMODEW)* lpdm);
UINT RealizePalette (HDC hdc);
WINBOOL RemoveFontResourceA (LPCSTR lpFileName);
WINBOOL RemoveFontResourceW (LPCWSTR lpFileName);
WINBOOL RoundRect (HDC hdc, int left, int top, int right, int bottom, int width, int height);
WINBOOL ResizePalette (HPALETTE hpal, UINT n);
int SaveDC (HDC hdc);
int SelectClipRgn (HDC hdc, HRGN hrgn);
int ExtSelectClipRgn (HDC hdc, HRGN hrgn, int mode);
int SetMetaRgn (HDC hdc);
HGDIOBJ SelectObject (HDC hdc, HGDIOBJ h);
HPALETTE SelectPalette (HDC hdc, HPALETTE hPal, WINBOOL bForceBkgd);
COLORREF SetBkColor (HDC hdc, COLORREF color);
COLORREF SetDCBrushColor (HDC hdc, COLORREF color);
COLORREF SetDCPenColor (HDC hdc, COLORREF color);
int SetBkMode (HDC hdc, int mode);
LONG SetBitmapBits (HBITMAP hbm, DWORD cb, const(void)* pvBits);
UINT SetBoundsRect (HDC hdc, const(RECT)* lprect, UINT flags);
int SetDIBits (HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const(void)* lpBits, const(BITMAPINFO)* lpbmi, UINT ColorUse);
int SetDIBitsToDevice (HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc, int ySrc, UINT StartScan, UINT cLines, const(void)* lpvBits, const(BITMAPINFO)* lpbmi, UINT ColorUse);
DWORD SetMapperFlags (HDC hdc, DWORD flags);
int SetGraphicsMode (HDC hdc, int iMode);
int SetMapMode (HDC hdc, int iMode);
DWORD SetLayout (HDC hdc, DWORD l);
DWORD GetLayout (HDC hdc);
HMETAFILE SetMetaFileBitsEx (UINT cbBuffer, const(BYTE)* lpData);
UINT SetPaletteEntries (HPALETTE hpal, UINT iStart, UINT cEntries, const(PALETTEENTRY)* pPalEntries);
COLORREF SetPixel (HDC hdc, int x, int y, COLORREF color);
WINBOOL SetPixelV (HDC hdc, int x, int y, COLORREF color);
WINBOOL SetPixelFormat (HDC hdc, int format, const(PIXELFORMATDESCRIPTOR)* ppfd);
int SetPolyFillMode (HDC hdc, int mode);
WINBOOL StretchBlt (HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
WINBOOL SetRectRgn (HRGN hrgn, int left, int top, int right, int bottom);
int StretchDIBits (HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, const(void)* lpBits, const(BITMAPINFO)* lpbmi, UINT iUsage, DWORD rop);
int SetROP2 (HDC hdc, int rop2);
int SetStretchBltMode (HDC hdc, int mode);
UINT SetSystemPaletteUse (HDC hdc, UINT use);
int SetTextCharacterExtra (HDC hdc, int extra);
COLORREF SetTextColor (HDC hdc, COLORREF color);
UINT SetTextAlign (HDC hdc, UINT align_);
WINBOOL SetTextJustification (HDC hdc, int extra, int count);
WINBOOL UpdateColors (HDC hdc);

alias COLOR16 = ushort;

struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}

alias TRIVERTEX = _TRIVERTEX;
alias PTRIVERTEX = _TRIVERTEX*;
alias LPTRIVERTEX = _TRIVERTEX*;

struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
}

alias GRADIENT_TRIANGLE = _GRADIENT_TRIANGLE;
alias PGRADIENT_TRIANGLE = _GRADIENT_TRIANGLE*;
alias LPGRADIENT_TRIANGLE = _GRADIENT_TRIANGLE*;

struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}

alias GRADIENT_RECT = _GRADIENT_RECT;
alias PGRADIENT_RECT = _GRADIENT_RECT*;
alias LPGRADIENT_RECT = _GRADIENT_RECT*;

struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}

alias BLENDFUNCTION = _BLENDFUNCTION;
alias PBLENDFUNCTION = _BLENDFUNCTION*;

WINBOOL AlphaBlend (HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
WINBOOL GdiAlphaBlend (HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
WINBOOL TransparentBlt (HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
WINBOOL GdiTransparentBlt (HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);

WINBOOL GradientFill (HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode);
WINBOOL GdiGradientFill (HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode);

WINBOOL PlayMetaFileRecord (HDC hdc, LPHANDLETABLE lpHandleTable, LPMETARECORD lpMR, UINT noObjs);

alias MFENUMPROC = int function (HDC hdc, HANDLETABLE* lpht, METARECORD* lpMR, int nObj, LPARAM lParam);

WINBOOL EnumMetaFile (HDC hdc, HMETAFILE hmf, MFENUMPROC lpProc, LPARAM lParam);

alias ENHMFENUMPROC = int function (HDC hdc, HANDLETABLE* lpht, const(ENHMETARECORD)* lpmr, int hHandles, LPARAM data);

HENHMETAFILE CloseEnhMetaFile (HDC hdc);
HENHMETAFILE CopyEnhMetaFileA (HENHMETAFILE hEnh, LPCSTR lpFileName);
HENHMETAFILE CopyEnhMetaFileW (HENHMETAFILE hEnh, LPCWSTR lpFileName);
HDC CreateEnhMetaFileA (HDC hdc, LPCSTR lpFilename, const(RECT)* lprc, LPCSTR lpDesc);
HDC CreateEnhMetaFileW (HDC hdc, LPCWSTR lpFilename, const(RECT)* lprc, LPCWSTR lpDesc);
WINBOOL DeleteEnhMetaFile (HENHMETAFILE hmf);
WINBOOL EnumEnhMetaFile (HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC lpProc, LPVOID lpParam, const(RECT)* lpRect);
HENHMETAFILE GetEnhMetaFileA (LPCSTR lpName);
HENHMETAFILE GetEnhMetaFileW (LPCWSTR lpName);
UINT GetEnhMetaFileBits (HENHMETAFILE hEMF, UINT nSize, LPBYTE lpData);
UINT GetEnhMetaFileDescriptionA (HENHMETAFILE hemf, UINT cchBuffer, LPSTR lpDescription);
UINT GetEnhMetaFileDescriptionW (HENHMETAFILE hemf, UINT cchBuffer, LPWSTR lpDescription);
UINT GetEnhMetaFileHeader (HENHMETAFILE hemf, UINT nSize, LPENHMETAHEADER lpEnhMetaHeader);
UINT GetEnhMetaFilePaletteEntries (HENHMETAFILE hemf, UINT nNumEntries, LPPALETTEENTRY lpPaletteEntries);
UINT GetEnhMetaFilePixelFormat (HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR* ppfd);
UINT GetWinMetaFileBits (HENHMETAFILE hemf, UINT cbData16, LPBYTE pData16, INT iMapMode, HDC hdcRef);
WINBOOL PlayEnhMetaFile (HDC hdc, HENHMETAFILE hmf, const(RECT)* lprect);
WINBOOL PlayEnhMetaFileRecord (HDC hdc, LPHANDLETABLE pht, const(ENHMETARECORD)* pmr, UINT cht);
HENHMETAFILE SetEnhMetaFileBits (UINT nSize, const(BYTE)* pb);
HENHMETAFILE SetWinMetaFileBits (UINT nSize, const(BYTE)* lpMeta16Data, HDC hdcRef, const(METAFILEPICT)* lpMFP);
WINBOOL GdiComment (HDC hdc, UINT nSize, const(BYTE)* lpData);

WINBOOL GetTextMetricsA (HDC hdc, LPTEXTMETRICA lptm);
WINBOOL GetTextMetricsW (HDC hdc, LPTEXTMETRICW lptm);

struct tagDIBSECTION
{
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD[3] dsBitfields;
    HANDLE dshSection;
    DWORD dsOffset;
}

alias DIBSECTION = tagDIBSECTION;
alias LPDIBSECTION = tagDIBSECTION*;
alias PDIBSECTION = tagDIBSECTION*;

WINBOOL AngleArc (HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
WINBOOL PolyPolyline (HDC hdc, const(POINT)* apt, const(DWORD)* asz, DWORD csz);
WINBOOL GetWorldTransform (HDC hdc, LPXFORM lpxf);
WINBOOL SetWorldTransform (HDC hdc, const(XFORM)* lpxf);
WINBOOL ModifyWorldTransform (HDC hdc, const(XFORM)* lpxf, DWORD mode);
WINBOOL CombineTransform (LPXFORM lpxfOut, const(XFORM)* lpxf1, const(XFORM)* lpxf2);
HBITMAP CreateDIBSection (HDC hdc, const(BITMAPINFO)* lpbmi, UINT usage, void** ppvBits, HANDLE hSection, DWORD offset);
UINT GetDIBColorTable (HDC hdc, UINT iStart, UINT cEntries, RGBQUAD* prgbq);
UINT SetDIBColorTable (HDC hdc, UINT iStart, UINT cEntries, const(RGBQUAD)* prgbq);

struct tagCOLORADJUSTMENT
{
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
}

alias COLORADJUSTMENT = tagCOLORADJUSTMENT;
alias PCOLORADJUSTMENT = tagCOLORADJUSTMENT*;
alias LPCOLORADJUSTMENT = tagCOLORADJUSTMENT*;

WINBOOL SetColorAdjustment (HDC hdc, const(COLORADJUSTMENT)* lpca);
WINBOOL GetColorAdjustment (HDC hdc, LPCOLORADJUSTMENT lpca);
HPALETTE CreateHalftonePalette (HDC hdc);

alias ABORTPROC = int function (HDC, int);

struct _DOCINFOA
{
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
}

alias DOCINFOA = _DOCINFOA;
alias LPDOCINFOA = _DOCINFOA*;

struct _DOCINFOW
{
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
}

alias DOCINFOW = _DOCINFOW;
alias LPDOCINFOW = _DOCINFOW*;

alias DOCINFO = _DOCINFOA;
alias LPDOCINFO = _DOCINFOA*;

int StartDocA (HDC hdc, const(DOCINFOA)* lpdi);
int StartDocW (HDC hdc, const(DOCINFOW)* lpdi);
int EndDoc (HDC hdc);
int StartPage (HDC hdc);
int EndPage (HDC hdc);
int AbortDoc (HDC hdc);
int SetAbortProc (HDC hdc, ABORTPROC lpProc);
WINBOOL AbortPath (HDC hdc);
WINBOOL ArcTo (HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
WINBOOL BeginPath (HDC hdc);
WINBOOL CloseFigure (HDC hdc);
WINBOOL EndPath (HDC hdc);
WINBOOL FillPath (HDC hdc);
WINBOOL FlattenPath (HDC hdc);
int GetPath (HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
HRGN PathToRegion (HDC hdc);
WINBOOL PolyDraw (HDC hdc, const(POINT)* apt, const(BYTE)* aj, int cpt);
WINBOOL SelectClipPath (HDC hdc, int mode);
int SetArcDirection (HDC hdc, int dir);
WINBOOL SetMiterLimit (HDC hdc, FLOAT limit, PFLOAT old);
WINBOOL StrokeAndFillPath (HDC hdc);
WINBOOL StrokePath (HDC hdc);
WINBOOL WidenPath (HDC hdc);
HPEN ExtCreatePen (DWORD iPenStyle, DWORD cWidth, const(LOGBRUSH)* plbrush, DWORD cStyle, const(DWORD)* pstyle);
WINBOOL GetMiterLimit (HDC hdc, PFLOAT plimit);
int GetArcDirection (HDC hdc);
int GetObjectA (HANDLE h, int c, LPVOID pv);
int GetObjectW (HANDLE h, int c, LPVOID pv);
WINBOOL MoveToEx (HDC hdc, int x, int y, LPPOINT lppt);
WINBOOL TextOutA (HDC hdc, int x, int y, LPCSTR lpString, int c);
WINBOOL TextOutW (HDC hdc, int x, int y, LPCWSTR lpString, int c);
WINBOOL ExtTextOutA (HDC hdc, int x, int y, UINT options, const(RECT)* lprect, LPCSTR lpString, UINT c, const(INT)* lpDx);
WINBOOL ExtTextOutW (HDC hdc, int x, int y, UINT options, const(RECT)* lprect, LPCWSTR lpString, UINT c, const(INT)* lpDx);
WINBOOL PolyTextOutA (HDC hdc, const(POLYTEXTA)* ppt, int nstrings);
WINBOOL PolyTextOutW (HDC hdc, const(POLYTEXTW)* ppt, int nstrings);
HRGN CreatePolygonRgn (const(POINT)* pptl, int cPoint, int iMode);
WINBOOL DPtoLP (HDC hdc, LPPOINT lppt, int c);
WINBOOL LPtoDP (HDC hdc, LPPOINT lppt, int c);
WINBOOL Polygon (HDC hdc, const(POINT)* apt, int cpt);
WINBOOL Polyline (HDC hdc, const(POINT)* apt, int cpt);
WINBOOL PolyBezier (HDC hdc, const(POINT)* apt, DWORD cpt);
WINBOOL PolyBezierTo (HDC hdc, const(POINT)* apt, DWORD cpt);
WINBOOL PolylineTo (HDC hdc, const(POINT)* apt, DWORD cpt);
WINBOOL SetViewportExtEx (HDC hdc, int x, int y, LPSIZE lpsz);
WINBOOL SetViewportOrgEx (HDC hdc, int x, int y, LPPOINT lppt);
WINBOOL SetWindowExtEx (HDC hdc, int x, int y, LPSIZE lpsz);
WINBOOL SetWindowOrgEx (HDC hdc, int x, int y, LPPOINT lppt);
WINBOOL OffsetViewportOrgEx (HDC hdc, int x, int y, LPPOINT lppt);
WINBOOL OffsetWindowOrgEx (HDC hdc, int x, int y, LPPOINT lppt);
WINBOOL ScaleViewportExtEx (HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
WINBOOL ScaleWindowExtEx (HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
WINBOOL SetBitmapDimensionEx (HBITMAP hbm, int w, int h, LPSIZE lpsz);
WINBOOL SetBrushOrgEx (HDC hdc, int x, int y, LPPOINT lppt);
int GetTextFaceA (HDC hdc, int c, LPSTR lpName);
int GetTextFaceW (HDC hdc, int c, LPWSTR lpName);

struct tagKERNINGPAIR
{
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
}

alias KERNINGPAIR = tagKERNINGPAIR;
alias LPKERNINGPAIR = tagKERNINGPAIR*;

DWORD GetKerningPairsA (HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
DWORD GetKerningPairsW (HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
WINBOOL GetDCOrgEx (HDC hdc, LPPOINT lppt);
WINBOOL FixBrushOrgEx (HDC hdc, int x, int y, LPPOINT ptl);
WINBOOL UnrealizeObject (HGDIOBJ h);
WINBOOL GdiFlush ();
DWORD GdiSetBatchLimit (DWORD dw);
DWORD GdiGetBatchLimit ();

alias ICMENUMPROCA = int function (LPSTR, LPARAM);
alias ICMENUMPROCW = int function (LPWSTR, LPARAM);

int SetICMMode (HDC hdc, int mode);
WINBOOL CheckColorsInGamut (HDC hdc, LPVOID lpRGBTriple, LPVOID dlpBuffer, DWORD nCount);
HCOLORSPACE GetColorSpace (HDC hdc);
WINBOOL GetLogColorSpaceA (HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize);
WINBOOL GetLogColorSpaceW (HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize);
HCOLORSPACE CreateColorSpaceA (LPLOGCOLORSPACEA lplcs);
HCOLORSPACE CreateColorSpaceW (LPLOGCOLORSPACEW lplcs);
HCOLORSPACE SetColorSpace (HDC hdc, HCOLORSPACE hcs);
WINBOOL DeleteColorSpace (HCOLORSPACE hcs);
WINBOOL GetICMProfileA (HDC hdc, LPDWORD pBufSize, LPSTR pszFilename);
WINBOOL GetICMProfileW (HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename);
WINBOOL SetICMProfileA (HDC hdc, LPSTR lpFileName);
WINBOOL SetICMProfileW (HDC hdc, LPWSTR lpFileName);
WINBOOL GetDeviceGammaRamp (HDC hdc, LPVOID lpRamp);
WINBOOL SetDeviceGammaRamp (HDC hdc, LPVOID lpRamp);
WINBOOL ColorMatchToTarget (HDC hdc, HDC hdcTarget, DWORD action);
int EnumICMProfilesA (HDC hdc, ICMENUMPROCA lpProc, LPARAM lParam);
int EnumICMProfilesW (HDC hdc, ICMENUMPROCW lpProc, LPARAM lParam);
WINBOOL UpdateICMRegKeyA (DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
WINBOOL UpdateICMRegKeyW (DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
WINBOOL ColorCorrectPalette (HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);

struct tagEMR
{
    DWORD iType;
    DWORD nSize;
}

alias EMR = tagEMR;
alias PEMR = tagEMR*;

struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
}

alias EMRTEXT = tagEMRTEXT;
alias PEMRTEXT = tagEMRTEXT*;

struct tagABORTPATH
{
    EMR emr;
}

alias EMRABORTPATH = tagABORTPATH;
alias PEMRABORTPATH = tagABORTPATH*;
alias EMRBEGINPATH = tagABORTPATH;
alias PEMRBEGINPATH = tagABORTPATH*;
alias EMRENDPATH = tagABORTPATH;
alias PEMRENDPATH = tagABORTPATH*;
alias EMRCLOSEFIGURE = tagABORTPATH;
alias PEMRCLOSEFIGURE = tagABORTPATH*;
alias EMRFLATTENPATH = tagABORTPATH;
alias PEMRFLATTENPATH = tagABORTPATH*;
alias EMRWIDENPATH = tagABORTPATH;
alias PEMRWIDENPATH = tagABORTPATH*;
alias EMRSETMETARGN = tagABORTPATH;
alias PEMRSETMETARGN = tagABORTPATH*;
alias EMRSAVEDC = tagABORTPATH;
alias PEMRSAVEDC = tagABORTPATH*;
alias EMRREALIZEPALETTE = tagABORTPATH;
alias PEMRREALIZEPALETTE = tagABORTPATH*;

struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
}

alias EMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH;
alias PEMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH*;
alias EMRSETBKMODE = tagEMRSELECTCLIPPATH;
alias PEMRSETBKMODE = tagEMRSELECTCLIPPATH*;
alias EMRSETMAPMODE = tagEMRSELECTCLIPPATH;
alias PEMRSETMAPMODE = tagEMRSELECTCLIPPATH*;
alias EMRSETLAYOUT = tagEMRSELECTCLIPPATH;
alias PEMRSETLAYOUT = tagEMRSELECTCLIPPATH*;
alias EMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH;
alias PEMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH*;
alias EMRSETROP2 = tagEMRSELECTCLIPPATH;
alias PEMRSETROP2 = tagEMRSELECTCLIPPATH*;
alias EMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH;
alias PEMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH*;
alias EMRSETICMMODE = tagEMRSELECTCLIPPATH;
alias PEMRSETICMMODE = tagEMRSELECTCLIPPATH*;
alias EMRSETTEXTALIGN = tagEMRSELECTCLIPPATH;
alias PEMRSETTEXTALIGN = tagEMRSELECTCLIPPATH*;

struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
}

alias EMRSETMITERLIMIT = tagEMRSETMITERLIMIT;
alias PEMRSETMITERLIMIT = tagEMRSETMITERLIMIT*;

struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
}

alias EMRRESTOREDC = tagEMRRESTOREDC;
alias PEMRRESTOREDC = tagEMRRESTOREDC*;

struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;
}

alias EMRSETARCDIRECTION = tagEMRSETARCDIRECTION;
alias PEMRSETARCDIRECTION = tagEMRSETARCDIRECTION*;

struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
}

alias EMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS;
alias PEMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS*;

struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
}

alias EMRSETBKCOLOR = tagEMRSETTEXTCOLOR;
alias PEMRSETBKCOLOR = tagEMRSETTEXTCOLOR*;
alias EMRSETTEXTCOLOR = tagEMRSETTEXTCOLOR;
alias PEMRSETTEXTCOLOR = tagEMRSETTEXTCOLOR*;

struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
}

alias EMRSELECTOBJECT = tagEMRSELECTOBJECT;
alias PEMRSELECTOBJECT = tagEMRSELECTOBJECT*;
alias EMRDELETEOBJECT = tagEMRSELECTOBJECT;
alias PEMRDELETEOBJECT = tagEMRSELECTOBJECT*;

struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
}

alias EMRSELECTPALETTE = tagEMRSELECTPALETTE;
alias PEMRSELECTPALETTE = tagEMRSELECTPALETTE*;

struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
}

alias EMRRESIZEPALETTE = tagEMRRESIZEPALETTE;
alias PEMRRESIZEPALETTE = tagEMRRESIZEPALETTE*;

struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY[1] aPalEntries;
}

alias EMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES;
alias PEMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES*;

struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
}

alias EMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT;
alias PEMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT*;

struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE[1] Data;
}

alias EMRGDICOMMENT = tagEMRGDICOMMENT;
alias PEMRGDICOMMENT = tagEMRGDICOMMENT*;

struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
}

alias EMREOF = tagEMREOF;
alias PEMREOF = tagEMREOF*;

struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
}

alias EMRLINETO = tagEMRLINETO;
alias PEMRLINETO = tagEMRLINETO*;
alias EMRMOVETOEX = tagEMRLINETO;
alias PEMRMOVETOEX = tagEMRLINETO*;

struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
}

alias EMROFFSETCLIPRGN = tagEMROFFSETCLIPRGN;
alias PEMROFFSETCLIPRGN = tagEMROFFSETCLIPRGN*;

struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
}

alias EMRFILLPATH = tagEMRFILLPATH;
alias PEMRFILLPATH = tagEMRFILLPATH*;
alias EMRSTROKEANDFILLPATH = tagEMRFILLPATH;
alias PEMRSTROKEANDFILLPATH = tagEMRFILLPATH*;
alias EMRSTROKEPATH = tagEMRFILLPATH;
alias PEMRSTROKEPATH = tagEMRFILLPATH*;

struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
}

alias EMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT;
alias PEMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT*;
alias EMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT;
alias PEMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT*;

struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
}

alias EMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX;
alias PEMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX*;
alias EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX;
alias PEMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX*;
alias EMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX;
alias PEMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX*;

struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
}

alias EMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX;
alias PEMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX*;
alias EMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX;
alias PEMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX*;

struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
}

alias EMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX;
alias PEMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX*;
alias EMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX;
alias PEMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX*;

struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
}

alias EMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM;
alias PEMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM*;

struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
}

alias EMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM;
alias PEMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM*;

struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
}

alias EMRSETPIXELV = tagEMRSETPIXELV;
alias PEMRSETPIXELV = tagEMRSETPIXELV*;

struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
}

alias EMREXTFLOODFILL = tagEMREXTFLOODFILL;
alias PEMREXTFLOODFILL = tagEMREXTFLOODFILL*;

struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
}

alias EMRELLIPSE = tagEMRELLIPSE;
alias PEMRELLIPSE = tagEMRELLIPSE*;
alias EMRRECTANGLE = tagEMRELLIPSE;
alias PEMRRECTANGLE = tagEMRELLIPSE*;

struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
}

alias EMRROUNDRECT = tagEMRROUNDRECT;
alias PEMRROUNDRECT = tagEMRROUNDRECT*;

struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
}

alias EMRARC = tagEMRARC;
alias PEMRARC = tagEMRARC*;
alias EMRARCTO = tagEMRARC;
alias PEMRARCTO = tagEMRARC*;
alias EMRCHORD = tagEMRARC;
alias PEMRCHORD = tagEMRARC*;
alias EMRPIE = tagEMRARC;
alias PEMRPIE = tagEMRARC*;

struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
}

alias EMRANGLEARC = tagEMRANGLEARC;
alias PEMRANGLEARC = tagEMRANGLEARC*;

struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL[1] aptl;
}

alias EMRPOLYLINE = tagEMRPOLYLINE;
alias PEMRPOLYLINE = tagEMRPOLYLINE*;
alias EMRPOLYBEZIER = tagEMRPOLYLINE;
alias PEMRPOLYBEZIER = tagEMRPOLYLINE*;
alias EMRPOLYGON = tagEMRPOLYLINE;
alias PEMRPOLYGON = tagEMRPOLYLINE*;
alias EMRPOLYBEZIERTO = tagEMRPOLYLINE;
alias PEMRPOLYBEZIERTO = tagEMRPOLYLINE*;
alias EMRPOLYLINETO = tagEMRPOLYLINE;
alias PEMRPOLYLINETO = tagEMRPOLYLINE*;

struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS[1] apts;
}

alias EMRPOLYLINE16 = tagEMRPOLYLINE16;
alias PEMRPOLYLINE16 = tagEMRPOLYLINE16*;
alias EMRPOLYBEZIER16 = tagEMRPOLYLINE16;
alias PEMRPOLYBEZIER16 = tagEMRPOLYLINE16*;
alias EMRPOLYGON16 = tagEMRPOLYLINE16;
alias PEMRPOLYGON16 = tagEMRPOLYLINE16*;
alias EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16;
alias PEMRPOLYBEZIERTO16 = tagEMRPOLYLINE16*;
alias EMRPOLYLINETO16 = tagEMRPOLYLINE16;
alias PEMRPOLYLINETO16 = tagEMRPOLYLINE16*;

struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL[1] aptl;
    BYTE[1] abTypes;
}

alias EMRPOLYDRAW = tagEMRPOLYDRAW;
alias PEMRPOLYDRAW = tagEMRPOLYDRAW*;

struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS[1] apts;
    BYTE[1] abTypes;
}

alias EMRPOLYDRAW16 = tagEMRPOLYDRAW16;
alias PEMRPOLYDRAW16 = tagEMRPOLYDRAW16*;

struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD[1] aPolyCounts;
    POINTL[1] aptl;
}

alias EMRPOLYPOLYLINE = tagEMRPOLYPOLYLINE;
alias PEMRPOLYPOLYLINE = tagEMRPOLYPOLYLINE*;
alias EMRPOLYPOLYGON = tagEMRPOLYPOLYLINE;
alias PEMRPOLYPOLYGON = tagEMRPOLYPOLYLINE*;

struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD[1] aPolyCounts;
    POINTS[1] apts;
}

alias EMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16;
alias PEMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16*;
alias EMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16;
alias PEMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16*;

struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE[1] RgnData;
}

alias EMRINVERTRGN = tagEMRINVERTRGN;
alias PEMRINVERTRGN = tagEMRINVERTRGN*;
alias EMRPAINTRGN = tagEMRINVERTRGN;
alias PEMRPAINTRGN = tagEMRINVERTRGN*;

struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE[1] RgnData;
}

alias EMRFILLRGN = tagEMRFILLRGN;
alias PEMRFILLRGN = tagEMRFILLRGN*;

struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE[1] RgnData;
}

alias EMRFRAMERGN = tagEMRFRAMERGN;
alias PEMRFRAMERGN = tagEMRFRAMERGN*;

struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE[1] RgnData;
}

alias EMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN;
alias PEMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN*;

struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
}

alias EMREXTTEXTOUTA = tagEMREXTTEXTOUTA;
alias PEMREXTTEXTOUTA = tagEMREXTTEXTOUTA*;
alias EMREXTTEXTOUTW = tagEMREXTTEXTOUTA;
alias PEMREXTTEXTOUTW = tagEMREXTTEXTOUTA*;

struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT[1] aemrtext;
}

alias EMRPOLYTEXTOUTA = tagEMRPOLYTEXTOUTA;
alias PEMRPOLYTEXTOUTA = tagEMRPOLYTEXTOUTA*;
alias EMRPOLYTEXTOUTW = tagEMRPOLYTEXTOUTA;
alias PEMRPOLYTEXTOUTW = tagEMRPOLYTEXTOUTA*;

struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
}

alias EMRBITBLT = tagEMRBITBLT;
alias PEMRBITBLT = tagEMRBITBLT*;

struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}

alias EMRSTRETCHBLT = tagEMRSTRETCHBLT;
alias PEMRSTRETCHBLT = tagEMRSTRETCHBLT*;

struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
}

alias EMRMASKBLT = tagEMRMASKBLT;
alias PEMRMASKBLT = tagEMRMASKBLT*;

struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL[3] aptlDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
}

alias EMRPLGBLT = tagEMRPLGBLT;
alias PEMRPLGBLT = tagEMRPLGBLT*;

struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
}

alias EMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE;
alias PEMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE*;

struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
}

alias EMRSTRETCHDIBITS = tagEMRSTRETCHDIBITS;
alias PEMRSTRETCHDIBITS = tagEMRSTRETCHDIBITS*;

struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
}

alias EMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW;
alias PEMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW*;

struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
}

alias EMRCREATEPALETTE = tagEMRCREATEPALETTE;
alias PEMRCREATEPALETTE = tagEMRCREATEPALETTE*;

struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
}

alias EMRCREATEPEN = tagEMRCREATEPEN;
alias PEMRCREATEPEN = tagEMRCREATEPEN*;

struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
}

alias EMREXTCREATEPEN = tagEMREXTCREATEPEN;
alias PEMREXTCREATEPEN = tagEMREXTCREATEPEN*;

struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
}

alias EMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT;
alias PEMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT*;

struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
}

alias EMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH;
alias PEMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH*;

struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
}

alias EMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT;
alias PEMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT*;

struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
}

alias EMRFORMAT = tagEMRFORMAT;
alias PEMRFORMAT = tagEMRFORMAT*;

struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE[1] Data;
}

alias EMRGLSRECORD = tagEMRGLSRECORD;
alias PEMRGLSRECORD = tagEMRGLSRECORD*;

struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE[1] Data;
}

alias EMRGLSBOUNDEDRECORD = tagEMRGLSBOUNDEDRECORD;
alias PEMRGLSBOUNDEDRECORD = tagEMRGLSBOUNDEDRECORD*;

struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
}

alias EMRPIXELFORMAT = tagEMRPIXELFORMAT;
alias PEMRPIXELFORMAT = tagEMRPIXELFORMAT*;

struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
}

alias EMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE;
alias PEMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE*;

struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
}

alias EMRSETCOLORSPACE = tagEMRSETCOLORSPACE;
alias PEMRSETCOLORSPACE = tagEMRSETCOLORSPACE*;
alias EMRSELECTCOLORSPACE = tagEMRSETCOLORSPACE;
alias PEMRSELECTCOLORSPACE = tagEMRSETCOLORSPACE*;
alias EMRDELETECOLORSPACE = tagEMRSETCOLORSPACE;
alias PEMRDELETECOLORSPACE = tagEMRSETCOLORSPACE*;

struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE[1] EscData;
}

alias EMREXTESCAPE = tagEMREXTESCAPE;
alias PEMREXTESCAPE = tagEMREXTESCAPE*;
alias EMRDRAWESCAPE = tagEMREXTESCAPE;
alias PEMRDRAWESCAPE = tagEMREXTESCAPE*;

struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE[1] EscData;
}

alias EMRNAMEDESCAPE = tagEMRNAMEDESCAPE;
alias PEMRNAMEDESCAPE = tagEMRNAMEDESCAPE*;

struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE[1] Data;
}

alias EMRSETICMPROFILE = tagEMRSETICMPROFILE;
alias PEMRSETICMPROFILE = tagEMRSETICMPROFILE*;
alias EMRSETICMPROFILEA = tagEMRSETICMPROFILE;
alias PEMRSETICMPROFILEA = tagEMRSETICMPROFILE*;
alias EMRSETICMPROFILEW = tagEMRSETICMPROFILE;
alias PEMRSETICMPROFILEW = tagEMRSETICMPROFILE*;

struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE[1] Data;
}

alias EMRCREATECOLORSPACEW = tagEMRCREATECOLORSPACEW;
alias PEMRCREATECOLORSPACEW = tagEMRCREATECOLORSPACEW*;

struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE[1] Data;
}

alias EMRCOLORMATCHTOTARGET = tagCOLORMATCHTOTARGET;
alias PEMRCOLORMATCHTOTARGET = tagCOLORMATCHTOTARGET*;

struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
}

alias EMRCOLORCORRECTPALETTE = tagCOLORCORRECTPALETTE;
alias PEMRCOLORCORRECTPALETTE = tagCOLORCORRECTPALETTE*;

struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}

alias EMRALPHABLEND = tagEMRALPHABLEND;
alias PEMRALPHABLEND = tagEMRALPHABLEND*;

struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX[1] Ver;
}

alias EMRGRADIENTFILL = tagEMRGRADIENTFILL;
alias PEMRGRADIENTFILL = tagEMRGRADIENTFILL*;

struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}

alias EMRTRANSPARENTBLT = tagEMRTRANSPARENTBLT;
alias PEMRTRANSPARENTBLT = tagEMRTRANSPARENTBLT*;

WINBOOL wglCopyContext (HGLRC, HGLRC, UINT);
HGLRC wglCreateContext (HDC);
HGLRC wglCreateLayerContext (HDC, int);
WINBOOL wglDeleteContext (HGLRC);
HGLRC wglGetCurrentContext ();
HDC wglGetCurrentDC ();
PROC wglGetProcAddress (LPCSTR);
WINBOOL wglMakeCurrent (HDC, HGLRC);
WINBOOL wglShareLists (HGLRC, HGLRC);
WINBOOL wglUseFontBitmapsA (HDC, DWORD, DWORD, DWORD);
WINBOOL wglUseFontBitmapsW (HDC, DWORD, DWORD, DWORD);
WINBOOL SwapBuffers (HDC);

struct _POINTFLOAT
{
    FLOAT x;
    FLOAT y;
}

alias POINTFLOAT = _POINTFLOAT;
alias PPOINTFLOAT = _POINTFLOAT*;

struct _GLYPHMETRICSFLOAT
{
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
}

alias GLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT;
alias PGLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT*;
alias LPGLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT*;

WINBOOL wglUseFontOutlinesA (HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);
WINBOOL wglUseFontOutlinesW (HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);

struct tagLAYERPLANEDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
}

alias LAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR;
alias PLAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR*;
alias LPLAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR*;

WINBOOL wglDescribeLayerPlane (HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR);
int wglSetLayerPaletteEntries (HDC, int, int, int, const(COLORREF)*);
int wglGetLayerPaletteEntries (HDC, int, int, int, COLORREF*);
WINBOOL wglRealizeLayerPalette (HDC, int, WINBOOL);
WINBOOL wglSwapLayerBuffers (HDC, UINT);

struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
}

alias WGLSWAP = _WGLSWAP;
alias PWGLSWAP = _WGLSWAP*;
alias LPWGLSWAP = _WGLSWAP*;

DWORD wglSwapMultipleBuffers (UINT, const(WGLSWAP)*);

alias HDWP = void*;
alias MENUTEMPLATEA = void;
alias MENUTEMPLATEW = void;
alias LPMENUTEMPLATEA = void*;
alias LPMENUTEMPLATEW = void*;

alias MENUTEMPLATE = void;
alias LPMENUTEMPLATE = void*;

alias WNDPROC = long function (HWND, UINT, WPARAM, LPARAM);

alias DLGPROC = long function (HWND, UINT, WPARAM, LPARAM);

alias TIMERPROC = void function (HWND, UINT, UINT_PTR, DWORD);
alias GRAYSTRINGPROC = int function (HDC, LPARAM, int);
alias WNDENUMPROC = int function (HWND, LPARAM);
alias HOOKPROC = long function (int code, WPARAM wParam, LPARAM lParam);
alias SENDASYNCPROC = void function (HWND, UINT, ULONG_PTR, LRESULT);

alias PROPENUMPROCA = int function (HWND, LPCSTR, HANDLE);
alias PROPENUMPROCW = int function (HWND, LPCWSTR, HANDLE);

alias PROPENUMPROCEXA = int function (HWND, LPSTR, HANDLE, ULONG_PTR);
alias PROPENUMPROCEXW = int function (HWND, LPWSTR, HANDLE, ULONG_PTR);

alias EDITWORDBREAKPROCA = int function (LPSTR lpch, int ichCurrent, int cch, int code);
alias EDITWORDBREAKPROCW = int function (LPWSTR lpch, int ichCurrent, int cch, int code);

alias DRAWSTATEPROC = int function (HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);

alias PROPENUMPROC = int function ();
alias PROPENUMPROCEX = int function ();
alias EDITWORDBREAKPROC = int function ();

alias NAMEENUMPROCA = int function (LPSTR, LPARAM);
alias NAMEENUMPROCW = int function (LPWSTR, LPARAM);
alias WINSTAENUMPROCA = int function ();
alias WINSTAENUMPROCW = int function ();
alias DESKTOPENUMPROCA = int function ();
alias DESKTOPENUMPROCW = int function ();

alias WINSTAENUMPROC = int function ();
alias DESKTOPENUMPROC = int function ();

int wvsprintfA (LPSTR, LPCSTR, va_list arglist);
int wvsprintfW (LPWSTR, LPCWSTR, va_list arglist);
int wsprintfA (LPSTR, LPCSTR, ...);
int wsprintfW (LPWSTR, LPCWSTR, ...);

struct tagCBT_CREATEWNDA
{
    tagCREATESTRUCTA* lpcs;
    HWND hwndInsertAfter;
}

alias CBT_CREATEWNDA = tagCBT_CREATEWNDA;
alias LPCBT_CREATEWNDA = tagCBT_CREATEWNDA*;

struct tagCBT_CREATEWNDW
{
    tagCREATESTRUCTW* lpcs;
    HWND hwndInsertAfter;
}

alias CBT_CREATEWNDW = tagCBT_CREATEWNDW;
alias LPCBT_CREATEWNDW = tagCBT_CREATEWNDW*;

alias CBT_CREATEWND = tagCBT_CREATEWNDA;
alias LPCBT_CREATEWND = tagCBT_CREATEWNDA*;

struct tagCBTACTIVATESTRUCT
{
    WINBOOL fMouse;
    HWND hWndActive;
}

alias CBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT;
alias LPCBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT*;

struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;
}

alias WTSSESSION_NOTIFICATION = tagWTSSESSION_NOTIFICATION;
alias PWTSSESSION_NOTIFICATION = tagWTSSESSION_NOTIFICATION*;

struct SHELLHOOKINFO
{
    HWND hwnd;
    RECT rc;
}

alias LPSHELLHOOKINFO = SHELLHOOKINFO*;

struct tagEVENTMSG
{
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
}

alias EVENTMSG = tagEVENTMSG;
alias PEVENTMSGMSG = tagEVENTMSG*;
alias NPEVENTMSGMSG = tagEVENTMSG*;
alias LPEVENTMSGMSG = tagEVENTMSG*;

alias PEVENTMSG = tagEVENTMSG*;
alias NPEVENTMSG = tagEVENTMSG*;
alias LPEVENTMSG = tagEVENTMSG*;

struct tagCWPSTRUCT
{
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
}

alias CWPSTRUCT = tagCWPSTRUCT;
alias PCWPSTRUCT = tagCWPSTRUCT*;
alias NPCWPSTRUCT = tagCWPSTRUCT*;
alias LPCWPSTRUCT = tagCWPSTRUCT*;

struct tagCWPRETSTRUCT
{
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
}

alias CWPRETSTRUCT = tagCWPRETSTRUCT;
alias PCWPRETSTRUCT = tagCWPRETSTRUCT*;
alias NPCWPRETSTRUCT = tagCWPRETSTRUCT*;
alias LPCWPRETSTRUCT = tagCWPRETSTRUCT*;

struct tagKBDLLHOOKSTRUCT
{
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}

alias KBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT;
alias LPKBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT*;
alias PKBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT*;

struct tagMSLLHOOKSTRUCT
{
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}

alias MSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT;
alias LPMSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT*;
alias PMSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT*;

struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
}

alias DEBUGHOOKINFO = tagDEBUGHOOKINFO;
alias PDEBUGHOOKINFO = tagDEBUGHOOKINFO*;
alias NPDEBUGHOOKINFO = tagDEBUGHOOKINFO*;
alias LPDEBUGHOOKINFO = tagDEBUGHOOKINFO*;

struct tagMOUSEHOOKSTRUCT
{
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
}

alias MOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT;
alias LPMOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT*;
alias PMOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT*;

struct tagMOUSEHOOKSTRUCTEX
{
    MOUSEHOOKSTRUCT __unnamed;
    DWORD mouseData;
}

alias MOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX;
alias LPMOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX*;
alias PMOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX*;

struct tagHARDWAREHOOKSTRUCT
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
}

alias HARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT;
alias LPHARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT*;
alias PHARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT*;

HKL LoadKeyboardLayoutA (LPCSTR pwszKLID, UINT Flags);
HKL LoadKeyboardLayoutW (LPCWSTR pwszKLID, UINT Flags);
HKL ActivateKeyboardLayout (HKL hkl, UINT Flags);
int ToUnicodeEx (UINT wVirtKey, UINT wScanCode, const(BYTE)* lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
WINBOOL UnloadKeyboardLayout (HKL hkl);
WINBOOL GetKeyboardLayoutNameA (LPSTR pwszKLID);
WINBOOL GetKeyboardLayoutNameW (LPWSTR pwszKLID);
int GetKeyboardLayoutList (int nBuff, HKL* lpList);
HKL GetKeyboardLayout (DWORD idThread);

struct tagMOUSEMOVEPOINT
{
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}

alias MOUSEMOVEPOINT = tagMOUSEMOVEPOINT;
alias PMOUSEMOVEPOINT = tagMOUSEMOVEPOINT*;
alias LPMOUSEMOVEPOINT = tagMOUSEMOVEPOINT*;

int GetMouseMovePointsEx (UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution);

HDESK CreateDesktopA (LPCSTR lpszDesktop, LPCSTR lpszDevice, LPDEVMODEA pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
HDESK CreateDesktopW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, LPDEVMODEW pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
HDESK CreateDesktopExA (LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
HDESK CreateDesktopExW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW* pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);

HDESK OpenDesktopA (LPCSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
HDESK OpenDesktopW (LPCWSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
HDESK OpenInputDesktop (DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
WINBOOL EnumDesktopsA (HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);
WINBOOL EnumDesktopsW (HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam);
WINBOOL EnumDesktopWindows (HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
WINBOOL SwitchDesktop (HDESK hDesktop);
WINBOOL SetThreadDesktop (HDESK hDesktop);
WINBOOL CloseDesktop (HDESK hDesktop);
HDESK GetThreadDesktop (DWORD dwThreadId);

HWINSTA CreateWindowStationA (LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
HWINSTA CreateWindowStationW (LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
HWINSTA OpenWindowStationA (LPCSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
HWINSTA OpenWindowStationW (LPCWSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
WINBOOL EnumWindowStationsA (WINSTAENUMPROCA lpEnumFunc, LPARAM lParam);
WINBOOL EnumWindowStationsW (WINSTAENUMPROCW lpEnumFunc, LPARAM lParam);
WINBOOL CloseWindowStation (HWINSTA hWinSta);
WINBOOL SetProcessWindowStation (HWINSTA hWinSta);
HWINSTA GetProcessWindowStation ();

WINBOOL SetUserObjectSecurity (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
WINBOOL GetUserObjectSecurity (HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);

struct tagUSEROBJECTFLAGS
{
    WINBOOL fInherit;
    WINBOOL fReserved;
    DWORD dwFlags;
}

alias USEROBJECTFLAGS = tagUSEROBJECTFLAGS;
alias PUSEROBJECTFLAGS = tagUSEROBJECTFLAGS*;

WINBOOL GetUserObjectInformationA (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
WINBOOL GetUserObjectInformationW (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
WINBOOL SetUserObjectInformationA (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
WINBOOL SetUserObjectInformationW (HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);

struct tagWNDCLASSEXA
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
}

alias WNDCLASSEXA = tagWNDCLASSEXA;
alias PWNDCLASSEXA = tagWNDCLASSEXA*;
alias NPWNDCLASSEXA = tagWNDCLASSEXA*;
alias LPWNDCLASSEXA = tagWNDCLASSEXA*;

struct tagWNDCLASSEXW
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
}

alias WNDCLASSEXW = tagWNDCLASSEXW;
alias PWNDCLASSEXW = tagWNDCLASSEXW*;
alias NPWNDCLASSEXW = tagWNDCLASSEXW*;
alias LPWNDCLASSEXW = tagWNDCLASSEXW*;

alias WNDCLASSEX = tagWNDCLASSEXA;
alias PWNDCLASSEX = tagWNDCLASSEXA*;
alias NPWNDCLASSEX = tagWNDCLASSEXA*;
alias LPWNDCLASSEX = tagWNDCLASSEXA*;

struct tagWNDCLASSA
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
}

alias WNDCLASSA = tagWNDCLASSA;
alias PWNDCLASSA = tagWNDCLASSA*;
alias NPWNDCLASSA = tagWNDCLASSA*;
alias LPWNDCLASSA = tagWNDCLASSA*;

struct tagWNDCLASSW
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
}

alias WNDCLASSW = tagWNDCLASSW;
alias PWNDCLASSW = tagWNDCLASSW*;
alias NPWNDCLASSW = tagWNDCLASSW*;
alias LPWNDCLASSW = tagWNDCLASSW*;

alias WNDCLASS = tagWNDCLASSA;
alias PWNDCLASS = tagWNDCLASSA*;
alias NPWNDCLASS = tagWNDCLASSA*;
alias LPWNDCLASS = tagWNDCLASSA*;

WINBOOL IsHungAppWindow (HWND hwnd);
void DisableProcessWindowsGhosting ();

struct tagMSG
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
}

alias MSG = tagMSG;
alias PMSG = tagMSG*;
alias NPMSG = tagMSG*;
alias LPMSG = tagMSG*;

struct tagMINMAXINFO
{
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
}

alias MINMAXINFO = tagMINMAXINFO;
alias PMINMAXINFO = tagMINMAXINFO*;
alias LPMINMAXINFO = tagMINMAXINFO*;

struct tagCOPYDATASTRUCT
{
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
}

alias COPYDATASTRUCT = tagCOPYDATASTRUCT;
alias PCOPYDATASTRUCT = tagCOPYDATASTRUCT*;

struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
}

alias MDINEXTMENU = tagMDINEXTMENU;
alias PMDINEXTMENU = tagMDINEXTMENU*;
alias LPMDINEXTMENU = tagMDINEXTMENU*;

struct POWERBROADCAST_SETTING
{
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR[1] Data;
}

alias PPOWERBROADCAST_SETTING = POWERBROADCAST_SETTING*;

UINT RegisterWindowMessageA (LPCSTR lpString);
UINT RegisterWindowMessageW (LPCWSTR lpString);

struct tagWINDOWPOS
{
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
}

alias WINDOWPOS = tagWINDOWPOS;
alias LPWINDOWPOS = tagWINDOWPOS*;
alias PWINDOWPOS = tagWINDOWPOS*;

struct tagNCCALCSIZE_PARAMS
{
    RECT[3] rgrc;
    PWINDOWPOS lppos;
}

alias NCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS;
alias LPNCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS*;

struct tagTRACKMOUSEEVENT
{
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
}

alias TRACKMOUSEEVENT = tagTRACKMOUSEEVENT;
alias LPTRACKMOUSEEVENT = tagTRACKMOUSEEVENT*;

WINBOOL TrackMouseEvent (LPTRACKMOUSEEVENT lpEventTrack);

WINBOOL DrawEdge (HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);

WINBOOL DrawFrameControl (HDC, LPRECT, UINT, UINT);

WINBOOL DrawCaption (HWND hwnd, HDC hdc, const(RECT)* lprect, UINT flags);

WINBOOL DrawAnimatedRects (HWND hwnd, int idAni, const(RECT)* lprcFrom, const(RECT)* lprcTo);

struct tagACCEL
{
    BYTE fVirt;
    WORD key;
    WORD cmd;
}

alias ACCEL = tagACCEL;
alias LPACCEL = tagACCEL*;

struct tagPAINTSTRUCT
{
    HDC hdc;
    WINBOOL fErase;
    RECT rcPaint;
    WINBOOL fRestore;
    WINBOOL fIncUpdate;
    BYTE[32] rgbReserved;
}

alias PAINTSTRUCT = tagPAINTSTRUCT;
alias PPAINTSTRUCT = tagPAINTSTRUCT*;
alias NPPAINTSTRUCT = tagPAINTSTRUCT*;
alias LPPAINTSTRUCT = tagPAINTSTRUCT*;

struct tagCREATESTRUCTA
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
}

alias CREATESTRUCTA = tagCREATESTRUCTA;
alias LPCREATESTRUCTA = tagCREATESTRUCTA*;

struct tagCREATESTRUCTW
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
}

alias CREATESTRUCTW = tagCREATESTRUCTW;
alias LPCREATESTRUCTW = tagCREATESTRUCTW*;

alias CREATESTRUCT = tagCREATESTRUCTA;
alias LPCREATESTRUCT = tagCREATESTRUCTA*;

struct tagWINDOWPLACEMENT
{
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
}

alias WINDOWPLACEMENT = tagWINDOWPLACEMENT;
alias PWINDOWPLACEMENT = tagWINDOWPLACEMENT*;
alias LPWINDOWPLACEMENT = tagWINDOWPLACEMENT*;

struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
}

alias NMHDR = tagNMHDR;

alias LPNMHDR = tagNMHDR*;

struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
}

alias STYLESTRUCT = tagSTYLESTRUCT;
alias LPSTYLESTRUCT = tagSTYLESTRUCT*;

struct tagMEASUREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
}

alias MEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT;
alias PMEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT*;
alias LPMEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT*;

struct tagDRAWITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
}

alias DRAWITEMSTRUCT = tagDRAWITEMSTRUCT;
alias PDRAWITEMSTRUCT = tagDRAWITEMSTRUCT*;
alias LPDRAWITEMSTRUCT = tagDRAWITEMSTRUCT*;

struct tagDELETEITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
}

alias DELETEITEMSTRUCT = tagDELETEITEMSTRUCT;
alias PDELETEITEMSTRUCT = tagDELETEITEMSTRUCT*;
alias LPDELETEITEMSTRUCT = tagDELETEITEMSTRUCT*;

struct tagCOMPAREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
}

alias COMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT;
alias PCOMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT*;
alias LPCOMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT*;

WINBOOL GetMessageA (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
WINBOOL GetMessageW (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
WINBOOL TranslateMessage (const(MSG)* lpMsg);
LRESULT DispatchMessageA (const(MSG)* lpMsg);
LRESULT DispatchMessageW (const(MSG)* lpMsg);
WINBOOL SetMessageQueue (int cMessagesMax);
WINBOOL PeekMessageA (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
WINBOOL PeekMessageW (LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);

WINBOOL RegisterHotKey (HWND hWnd, int id, UINT fsModifiers, UINT vk);
WINBOOL UnregisterHotKey (HWND hWnd, int id);

WINBOOL ExitWindowsEx (UINT uFlags, DWORD dwReason);
WINBOOL SwapMouseButton (WINBOOL fSwap);
DWORD GetMessagePos ();
LONG GetMessageTime ();
LPARAM GetMessageExtraInfo ();

WINBOOL IsWow64Message ();
LPARAM SetMessageExtraInfo (LPARAM lParam);
LRESULT SendMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT SendMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT SendMessageTimeoutA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
LRESULT SendMessageTimeoutW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
WINBOOL SendNotifyMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
WINBOOL SendNotifyMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
WINBOOL SendMessageCallbackA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
WINBOOL SendMessageCallbackW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);

struct BSMINFO
{
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
}

alias PBSMINFO = BSMINFO*;

c_long BroadcastSystemMessageExA (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
c_long BroadcastSystemMessageExW (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
c_long BroadcastSystemMessageA (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
c_long BroadcastSystemMessageW (DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);

alias HDEVNOTIFY = void*;
alias PHDEVNOTIFY = void**;

alias HPOWERNOTIFY = void*;
alias PHPOWERNOTIFY = void**;

HPOWERNOTIFY RegisterPowerSettingNotification (HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);
WINBOOL UnregisterPowerSettingNotification (HPOWERNOTIFY Handle);
HPOWERNOTIFY RegisterSuspendResumeNotification (HANDLE hRecipient, DWORD Flags);
WINBOOL UnregisterSuspendResumeNotification (HPOWERNOTIFY Handle);

WINBOOL PostMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
WINBOOL PostMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
WINBOOL PostThreadMessageA (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
WINBOOL PostThreadMessageW (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);

WINBOOL AttachThreadInput (DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach);
WINBOOL ReplyMessage (LRESULT lResult);
WINBOOL WaitMessage ();
DWORD WaitForInputIdle (HANDLE hProcess, DWORD dwMilliseconds);
LRESULT DefWindowProcA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT DefWindowProcW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
void PostQuitMessage (int nExitCode);
WINBOOL InSendMessage ();
DWORD InSendMessageEx (LPVOID lpReserved);
UINT GetDoubleClickTime ();
WINBOOL SetDoubleClickTime (UINT);
ATOM RegisterClassA (const(WNDCLASSA)* lpWndClass);
ATOM RegisterClassW (const(WNDCLASSW)* lpWndClass);
WINBOOL UnregisterClassA (LPCSTR lpClassName, HINSTANCE hInstance);
WINBOOL UnregisterClassW (LPCWSTR lpClassName, HINSTANCE hInstance);
WINBOOL GetClassInfoA (HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
WINBOOL GetClassInfoW (HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
ATOM RegisterClassExA (const(WNDCLASSEXA)*);
ATOM RegisterClassExW (const(WNDCLASSEXW)*);
WINBOOL GetClassInfoExA (HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
WINBOOL GetClassInfoExW (HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);

LRESULT CallWindowProcA (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT CallWindowProcW (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

HDEVNOTIFY RegisterDeviceNotificationA (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
HDEVNOTIFY RegisterDeviceNotificationW (HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
WINBOOL UnregisterDeviceNotification (HDEVNOTIFY Handle);

alias PREGISTERCLASSNAMEW = ubyte function (LPCWSTR);

HWND CreateWindowExA (DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
HWND CreateWindowExW (DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);

WINBOOL IsWindow (HWND hWnd);
WINBOOL IsMenu (HMENU hMenu);
WINBOOL IsChild (HWND hWndParent, HWND hWnd);
WINBOOL DestroyWindow (HWND hWnd);
WINBOOL ShowWindow (HWND hWnd, int nCmdShow);
WINBOOL AnimateWindow (HWND hWnd, DWORD dwTime, DWORD dwFlags);

WINBOOL UpdateLayeredWindow (HWND hWnd, HDC hdcDst, POINT* pptDst, SIZE* psize, HDC hdcSrc, POINT* pptSrc, COLORREF crKey, BLENDFUNCTION* pblend, DWORD dwFlags);

struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const(POINT)* pptDst;
    const(SIZE)* psize;
    HDC hdcSrc;
    const(POINT)* pptSrc;
    COLORREF crKey;
    const(BLENDFUNCTION)* pblend;
    DWORD dwFlags;
    const(RECT)* prcDirty;
}

alias UPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO;
alias PUPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO*;

WINBOOL UpdateLayeredWindowIndirect (HWND hWnd, const(UPDATELAYEREDWINDOWINFO)* pULWInfo);

WINBOOL GetLayeredWindowAttributes (HWND hwnd, COLORREF* pcrKey, BYTE* pbAlpha, DWORD* pdwFlags);

WINBOOL PrintWindow (HWND hwnd, HDC hdcBlt, UINT nFlags);
WINBOOL SetLayeredWindowAttributes (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);

struct FLASHWINFO
{
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
}

alias PFLASHWINFO = FLASHWINFO*;

WINBOOL ShowWindowAsync (HWND hWnd, int nCmdShow);
WINBOOL FlashWindow (HWND hWnd, WINBOOL bInvert);
WINBOOL FlashWindowEx (PFLASHWINFO pfwi);
WINBOOL ShowOwnedPopups (HWND hWnd, WINBOOL fShow);
WINBOOL OpenIcon (HWND hWnd);
WINBOOL CloseWindow (HWND hWnd);
WINBOOL MoveWindow (HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint);
WINBOOL SetWindowPos (HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
WINBOOL GetWindowPlacement (HWND hWnd, WINDOWPLACEMENT* lpwndpl);
WINBOOL SetWindowPlacement (HWND hWnd, const(WINDOWPLACEMENT)* lpwndpl);

HDWP BeginDeferWindowPos (int nNumWindows);
HDWP DeferWindowPos (HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
WINBOOL EndDeferWindowPos (HDWP hWinPosInfo);

WINBOOL IsWindowVisible (HWND hWnd);
WINBOOL IsIconic (HWND hWnd);
WINBOOL AnyPopup ();
WINBOOL BringWindowToTop (HWND hWnd);
WINBOOL IsZoomed (HWND hWnd);

struct DLGTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
}

alias LPDLGTEMPLATEA = DLGTEMPLATE*;
alias LPDLGTEMPLATEW = DLGTEMPLATE*;

alias LPDLGTEMPLATE = DLGTEMPLATE*;

alias LPCDLGTEMPLATEA = const(DLGTEMPLATE)*;
alias LPCDLGTEMPLATEW = const(DLGTEMPLATE)*;

alias LPCDLGTEMPLATE = const(DLGTEMPLATE)*;

struct DLGITEMTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
}

alias PDLGITEMTEMPLATEA = DLGITEMTEMPLATE*;
alias PDLGITEMTEMPLATEW = DLGITEMTEMPLATE*;

alias PDLGITEMTEMPLATE = DLGITEMTEMPLATE*;

alias LPDLGITEMTEMPLATEA = DLGITEMTEMPLATE*;
alias LPDLGITEMTEMPLATEW = DLGITEMTEMPLATE*;

alias LPDLGITEMTEMPLATE = DLGITEMTEMPLATE*;

HWND CreateDialogParamA (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
HWND CreateDialogParamW (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
HWND CreateDialogIndirectParamA (HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
HWND CreateDialogIndirectParamW (HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

INT_PTR DialogBoxParamA (HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
INT_PTR DialogBoxParamW (HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
INT_PTR DialogBoxIndirectParamA (HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
INT_PTR DialogBoxIndirectParamW (HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);

WINBOOL EndDialog (HWND hDlg, INT_PTR nResult);
HWND GetDlgItem (HWND hDlg, int nIDDlgItem);
WINBOOL SetDlgItemInt (HWND hDlg, int nIDDlgItem, UINT uValue, WINBOOL bSigned);
UINT GetDlgItemInt (HWND hDlg, int nIDDlgItem, WINBOOL* lpTranslated, WINBOOL bSigned);
WINBOOL SetDlgItemTextA (HWND hDlg, int nIDDlgItem, LPCSTR lpString);
WINBOOL SetDlgItemTextW (HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
UINT GetDlgItemTextA (HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax);
UINT GetDlgItemTextW (HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax);
WINBOOL CheckDlgButton (HWND hDlg, int nIDButton, UINT uCheck);
WINBOOL CheckRadioButton (HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
UINT IsDlgButtonChecked (HWND hDlg, int nIDButton);
LRESULT SendDlgItemMessageA (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT SendDlgItemMessageW (HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
HWND GetNextDlgGroupItem (HWND hDlg, HWND hCtl, WINBOOL bPrevious);
HWND GetNextDlgTabItem (HWND hDlg, HWND hCtl, WINBOOL bPrevious);
int GetDlgCtrlID (HWND hWnd);
c_long GetDialogBaseUnits ();
LRESULT DefDlgProcA (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT DefDlgProcW (HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);

WINBOOL CallMsgFilterA (LPMSG lpMsg, int nCode);
WINBOOL CallMsgFilterW (LPMSG lpMsg, int nCode);

WINBOOL OpenClipboard (HWND hWndNewOwner);
WINBOOL CloseClipboard ();
DWORD GetClipboardSequenceNumber ();
HWND GetClipboardOwner ();
HWND SetClipboardViewer (HWND hWndNewViewer);
HWND GetClipboardViewer ();
WINBOOL ChangeClipboardChain (HWND hWndRemove, HWND hWndNewNext);
HANDLE SetClipboardData (UINT uFormat, HANDLE hMem);
HANDLE GetClipboardData (UINT uFormat);
UINT RegisterClipboardFormatA (LPCSTR lpszFormat);
UINT RegisterClipboardFormatW (LPCWSTR lpszFormat);
int CountClipboardFormats ();
UINT EnumClipboardFormats (UINT format);
int GetClipboardFormatNameA (UINT format, LPSTR lpszFormatName, int cchMaxCount);
int GetClipboardFormatNameW (UINT format, LPWSTR lpszFormatName, int cchMaxCount);
WINBOOL EmptyClipboard ();
WINBOOL IsClipboardFormatAvailable (UINT format);
int GetPriorityClipboardFormat (UINT* paFormatPriorityList, int cFormats);
HWND GetOpenClipboardWindow ();

WINBOOL CharToOemA (LPCSTR lpszSrc, LPSTR lpszDst);
WINBOOL CharToOemW (LPCWSTR lpszSrc, LPSTR lpszDst);
WINBOOL OemToCharA (LPCSTR lpszSrc, LPSTR lpszDst);
WINBOOL OemToCharW (LPCSTR lpszSrc, LPWSTR lpszDst);
WINBOOL CharToOemBuffA (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
WINBOOL CharToOemBuffW (LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
WINBOOL OemToCharBuffA (LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
WINBOOL OemToCharBuffW (LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength);
LPSTR CharUpperA (LPSTR lpsz);
LPWSTR CharUpperW (LPWSTR lpsz);
DWORD CharUpperBuffA (LPSTR lpsz, DWORD cchLength);
DWORD CharUpperBuffW (LPWSTR lpsz, DWORD cchLength);
LPSTR CharLowerA (LPSTR lpsz);
LPWSTR CharLowerW (LPWSTR lpsz);
DWORD CharLowerBuffA (LPSTR lpsz, DWORD cchLength);
DWORD CharLowerBuffW (LPWSTR lpsz, DWORD cchLength);
LPSTR CharNextA (LPCSTR lpsz);
LPWSTR CharNextW (LPCWSTR lpsz);
LPSTR CharPrevA (LPCSTR lpszStart, LPCSTR lpszCurrent);
LPWSTR CharPrevW (LPCWSTR lpszStart, LPCWSTR lpszCurrent);
LPSTR CharNextExA (WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);
LPSTR CharPrevExA (WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);

WINBOOL IsCharAlphaA (CHAR ch);
WINBOOL IsCharAlphaW (WCHAR ch);
WINBOOL IsCharAlphaNumericA (CHAR ch);
WINBOOL IsCharAlphaNumericW (WCHAR ch);
WINBOOL IsCharUpperA (CHAR ch);
WINBOOL IsCharUpperW (WCHAR ch);
WINBOOL IsCharLowerA (CHAR ch);
WINBOOL IsCharLowerW (WCHAR ch);

HWND SetFocus (HWND hWnd);
HWND GetActiveWindow ();
HWND GetFocus ();
UINT GetKBCodePage ();
SHORT GetKeyState (int nVirtKey);
SHORT GetAsyncKeyState (int vKey);
WINBOOL GetKeyboardState (PBYTE lpKeyState);
WINBOOL SetKeyboardState (LPBYTE lpKeyState);
int GetKeyNameTextA (LONG lParam, LPSTR lpString, int cchSize);
int GetKeyNameTextW (LONG lParam, LPWSTR lpString, int cchSize);
int GetKeyboardType (int nTypeFlag);
int ToAscii (UINT uVirtKey, UINT uScanCode, const(BYTE)* lpKeyState, LPWORD lpChar, UINT uFlags);
int ToAsciiEx (UINT uVirtKey, UINT uScanCode, const(BYTE)* lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
int ToUnicode (UINT wVirtKey, UINT wScanCode, const(BYTE)* lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
DWORD OemKeyScan (WORD wOemChar);
SHORT VkKeyScanA (CHAR ch);
SHORT VkKeyScanW (WCHAR ch);
SHORT VkKeyScanExA (CHAR ch, HKL dwhkl);
SHORT VkKeyScanExW (WCHAR ch, HKL dwhkl);
void keybd_event (BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);

void mouse_event (DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);

struct tagMOUSEINPUT
{
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}

alias MOUSEINPUT = tagMOUSEINPUT;
alias PMOUSEINPUT = tagMOUSEINPUT*;
alias LPMOUSEINPUT = tagMOUSEINPUT*;

struct tagKEYBDINPUT
{
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}

alias KEYBDINPUT = tagKEYBDINPUT;
alias PKEYBDINPUT = tagKEYBDINPUT*;
alias LPKEYBDINPUT = tagKEYBDINPUT*;

struct tagHARDWAREINPUT
{
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
}

alias HARDWAREINPUT = tagHARDWAREINPUT;
alias PHARDWAREINPUT = tagHARDWAREINPUT*;
alias LPHARDWAREINPUT = tagHARDWAREINPUT*;

struct tagINPUT
{
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    }
}

alias INPUT = tagINPUT;
alias PINPUT = tagINPUT*;
alias LPINPUT = tagINPUT*;

UINT SendInput (UINT cInputs, LPINPUT pInputs, int cbSize);

struct tagLASTINPUTINFO
{
    UINT cbSize;
    DWORD dwTime;
}

alias LASTINPUTINFO = tagLASTINPUTINFO;
alias PLASTINPUTINFO = tagLASTINPUTINFO*;

WINBOOL GetLastInputInfo (PLASTINPUTINFO plii);
UINT MapVirtualKeyA (UINT uCode, UINT uMapType);
UINT MapVirtualKeyW (UINT uCode, UINT uMapType);
UINT MapVirtualKeyExA (UINT uCode, UINT uMapType, HKL dwhkl);
UINT MapVirtualKeyExW (UINT uCode, UINT uMapType, HKL dwhkl);
WINBOOL GetInputState ();
DWORD GetQueueStatus (UINT flags);
HWND GetCapture ();
HWND SetCapture (HWND hWnd);
WINBOOL ReleaseCapture ();
DWORD MsgWaitForMultipleObjects (DWORD nCount, const(HANDLE)* pHandles, WINBOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
DWORD MsgWaitForMultipleObjectsEx (DWORD nCount, const(HANDLE)* pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);

UINT_PTR SetTimer (HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
WINBOOL KillTimer (HWND hWnd, UINT_PTR uIDEvent);
WINBOOL IsWindowUnicode (HWND hWnd);
WINBOOL EnableWindow (HWND hWnd, WINBOOL bEnable);
WINBOOL IsWindowEnabled (HWND hWnd);
HACCEL LoadAcceleratorsA (HINSTANCE hInstance, LPCSTR lpTableName);
HACCEL LoadAcceleratorsW (HINSTANCE hInstance, LPCWSTR lpTableName);
HACCEL CreateAcceleratorTableA (LPACCEL paccel, int cAccel);
HACCEL CreateAcceleratorTableW (LPACCEL paccel, int cAccel);
WINBOOL DestroyAcceleratorTable (HACCEL hAccel);
int CopyAcceleratorTableA (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
int CopyAcceleratorTableW (HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);

int TranslateAcceleratorA (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
int TranslateAcceleratorW (HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);

int GetSystemMetrics (int nIndex);

HMENU LoadMenuA (HINSTANCE hInstance, LPCSTR lpMenuName);
HMENU LoadMenuW (HINSTANCE hInstance, LPCWSTR lpMenuName);
HMENU LoadMenuIndirectA (const(MENUTEMPLATEA)* lpMenuTemplate);
HMENU LoadMenuIndirectW (const(MENUTEMPLATEW)* lpMenuTemplate);
HMENU GetMenu (HWND hWnd);
WINBOOL SetMenu (HWND hWnd, HMENU hMenu);
WINBOOL ChangeMenuA (HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags);
WINBOOL ChangeMenuW (HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags);
WINBOOL HiliteMenuItem (HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite);
int GetMenuStringA (HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags);
int GetMenuStringW (HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags);
UINT GetMenuState (HMENU hMenu, UINT uId, UINT uFlags);
WINBOOL DrawMenuBar (HWND hWnd);

HMENU GetSystemMenu (HWND hWnd, WINBOOL bRevert);
HMENU CreateMenu ();
HMENU CreatePopupMenu ();
WINBOOL DestroyMenu (HMENU hMenu);
DWORD CheckMenuItem (HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
WINBOOL EnableMenuItem (HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
HMENU GetSubMenu (HMENU hMenu, int nPos);
UINT GetMenuItemID (HMENU hMenu, int nPos);
int GetMenuItemCount (HMENU hMenu);
WINBOOL InsertMenuA (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
WINBOOL InsertMenuW (HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
WINBOOL AppendMenuA (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
WINBOOL AppendMenuW (HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
WINBOOL ModifyMenuA (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
WINBOOL ModifyMenuW (HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
WINBOOL RemoveMenu (HMENU hMenu, UINT uPosition, UINT uFlags);
WINBOOL DeleteMenu (HMENU hMenu, UINT uPosition, UINT uFlags);
WINBOOL SetMenuItemBitmaps (HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);
LONG GetMenuCheckMarkDimensions ();
WINBOOL TrackPopupMenu (HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const(RECT)* prcRect);

struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
}

alias TPMPARAMS = tagTPMPARAMS;

struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
}

alias MENUINFO = tagMENUINFO;
alias LPMENUINFO = tagMENUINFO*;

alias LPTPMPARAMS = tagTPMPARAMS*;
alias LPCMENUINFO = const(tagMENUINFO)*;

WINBOOL TrackPopupMenuEx (HMENU, UINT, int, int, HWND, LPTPMPARAMS);
WINBOOL GetMenuInfo (HMENU, LPMENUINFO);
WINBOOL SetMenuInfo (HMENU, LPCMENUINFO);
WINBOOL EndMenu ();

struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
}

alias MENUGETOBJECTINFO = tagMENUGETOBJECTINFO;
alias PMENUGETOBJECTINFO = tagMENUGETOBJECTINFO*;

struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
}

alias MENUITEMINFOA = tagMENUITEMINFOA;
alias LPMENUITEMINFOA = tagMENUITEMINFOA*;

struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
}

alias MENUITEMINFOW = tagMENUITEMINFOW;
alias LPMENUITEMINFOW = tagMENUITEMINFOW*;

alias MENUITEMINFO = tagMENUITEMINFOA;
alias LPMENUITEMINFO = tagMENUITEMINFOA*;

alias LPCMENUITEMINFOA = const(tagMENUITEMINFOA)*;
alias LPCMENUITEMINFOW = const(tagMENUITEMINFOW)*;

alias LPCMENUITEMINFO = const(tagMENUITEMINFOA)*;

WINBOOL InsertMenuItemA (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOA lpmi);
WINBOOL InsertMenuItemW (HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOW lpmi);
WINBOOL GetMenuItemInfoA (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOA lpmii);
WINBOOL GetMenuItemInfoW (HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOW lpmii);
WINBOOL SetMenuItemInfoA (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOA lpmii);
WINBOOL SetMenuItemInfoW (HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOW lpmii);

UINT GetMenuDefaultItem (HMENU hMenu, UINT fByPos, UINT gmdiFlags);
WINBOOL SetMenuDefaultItem (HMENU hMenu, UINT uItem, UINT fByPos);
WINBOOL GetMenuItemRect (HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
int MenuItemFromPoint (HWND hWnd, HMENU hMenu, POINT ptScreen);

struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
}

alias DROPSTRUCT = tagDROPSTRUCT;
alias PDROPSTRUCT = tagDROPSTRUCT*;
alias LPDROPSTRUCT = tagDROPSTRUCT*;

DWORD DragObject (HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur);
WINBOOL DragDetect (HWND hwnd, POINT pt);
WINBOOL DrawIcon (HDC hDC, int X, int Y, HICON hIcon);

struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
}

alias DRAWTEXTPARAMS = tagDRAWTEXTPARAMS;
alias LPDRAWTEXTPARAMS = tagDRAWTEXTPARAMS*;

int DrawTextA (HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format);
int DrawTextW (HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format);
int DrawTextExA (HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
int DrawTextExW (HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);

WINBOOL GrayStringA (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
WINBOOL GrayStringW (HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
WINBOOL DrawStateA (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
WINBOOL DrawStateW (HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
LONG TabbedTextOutA (HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, const(INT)* lpnTabStopPositions, int nTabOrigin);
LONG TabbedTextOutW (HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, const(INT)* lpnTabStopPositions, int nTabOrigin);
DWORD GetTabbedTextExtentA (HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, const(INT)* lpnTabStopPositions);
DWORD GetTabbedTextExtentW (HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, const(INT)* lpnTabStopPositions);
WINBOOL UpdateWindow (HWND hWnd);
HWND SetActiveWindow (HWND hWnd);
HWND GetForegroundWindow ();
WINBOOL PaintDesktop (HDC hdc);
void SwitchToThisWindow (HWND hwnd, WINBOOL fUnknown);
WINBOOL SetForegroundWindow (HWND hWnd);
WINBOOL AllowSetForegroundWindow (DWORD dwProcessId);
WINBOOL LockSetForegroundWindow (UINT uLockCode);
HWND WindowFromDC (HDC hDC);
HDC GetDC (HWND hWnd);
HDC GetDCEx (HWND hWnd, HRGN hrgnClip, DWORD flags);

HDC GetWindowDC (HWND hWnd);
int ReleaseDC (HWND hWnd, HDC hDC);
HDC BeginPaint (HWND hWnd, LPPAINTSTRUCT lpPaint);
WINBOOL EndPaint (HWND hWnd, const(PAINTSTRUCT)* lpPaint);
WINBOOL GetUpdateRect (HWND hWnd, LPRECT lpRect, WINBOOL bErase);
int GetUpdateRgn (HWND hWnd, HRGN hRgn, WINBOOL bErase);
int SetWindowRgn (HWND hWnd, HRGN hRgn, WINBOOL bRedraw);
int GetWindowRgn (HWND hWnd, HRGN hRgn);
int GetWindowRgnBox (HWND hWnd, LPRECT lprc);
int ExcludeUpdateRgn (HDC hDC, HWND hWnd);
WINBOOL InvalidateRect (HWND hWnd, const(RECT)* lpRect, WINBOOL bErase);
WINBOOL ValidateRect (HWND hWnd, const(RECT)* lpRect);
WINBOOL InvalidateRgn (HWND hWnd, HRGN hRgn, WINBOOL bErase);
WINBOOL ValidateRgn (HWND hWnd, HRGN hRgn);
WINBOOL RedrawWindow (HWND hWnd, const(RECT)* lprcUpdate, HRGN hrgnUpdate, UINT flags);

WINBOOL LockWindowUpdate (HWND hWndLock);
WINBOOL ScrollWindow (HWND hWnd, int XAmount, int YAmount, const(RECT)* lpRect, const(RECT)* lpClipRect);
WINBOOL ScrollDC (HDC hDC, int dx, int dy, const(RECT)* lprcScroll, const(RECT)* lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);
int ScrollWindowEx (HWND hWnd, int dx, int dy, const(RECT)* prcScroll, const(RECT)* prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);

int SetScrollPos (HWND hWnd, int nBar, int nPos, WINBOOL bRedraw);
int GetScrollPos (HWND hWnd, int nBar);
WINBOOL SetScrollRange (HWND hWnd, int nBar, int nMinPos, int nMaxPos, WINBOOL bRedraw);
WINBOOL GetScrollRange (HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos);
WINBOOL ShowScrollBar (HWND hWnd, int wBar, WINBOOL bShow);
WINBOOL EnableScrollBar (HWND hWnd, UINT wSBflags, UINT wArrows);

WINBOOL SetPropA (HWND hWnd, LPCSTR lpString, HANDLE hData);
WINBOOL SetPropW (HWND hWnd, LPCWSTR lpString, HANDLE hData);
HANDLE GetPropA (HWND hWnd, LPCSTR lpString);
HANDLE GetPropW (HWND hWnd, LPCWSTR lpString);
HANDLE RemovePropA (HWND hWnd, LPCSTR lpString);
HANDLE RemovePropW (HWND hWnd, LPCWSTR lpString);
int EnumPropsExA (HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam);
int EnumPropsExW (HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam);
int EnumPropsA (HWND hWnd, PROPENUMPROCA lpEnumFunc);
int EnumPropsW (HWND hWnd, PROPENUMPROCW lpEnumFunc);
WINBOOL SetWindowTextA (HWND hWnd, LPCSTR lpString);
WINBOOL SetWindowTextW (HWND hWnd, LPCWSTR lpString);
int GetWindowTextA (HWND hWnd, LPSTR lpString, int nMaxCount);
int GetWindowTextW (HWND hWnd, LPWSTR lpString, int nMaxCount);
int GetWindowTextLengthA (HWND hWnd);
int GetWindowTextLengthW (HWND hWnd);
WINBOOL GetClientRect (HWND hWnd, LPRECT lpRect);
WINBOOL GetWindowRect (HWND hWnd, LPRECT lpRect);
WINBOOL AdjustWindowRect (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu);
WINBOOL AdjustWindowRectEx (LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu, DWORD dwExStyle);

struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
}

alias HELPINFO = tagHELPINFO;
alias LPHELPINFO = tagHELPINFO*;

WINBOOL SetWindowContextHelpId (HWND, DWORD);
DWORD GetWindowContextHelpId (HWND);
WINBOOL SetMenuContextHelpId (HMENU, DWORD);
DWORD GetMenuContextHelpId (HMENU);

int MessageBoxA (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
int MessageBoxW (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
int MessageBoxExA (HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId);
int MessageBoxExW (HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);

alias MSGBOXCALLBACK = void function (LPHELPINFO lpHelpInfo);

struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
}

alias MSGBOXPARAMSA = tagMSGBOXPARAMSA;
alias PMSGBOXPARAMSA = tagMSGBOXPARAMSA*;
alias LPMSGBOXPARAMSA = tagMSGBOXPARAMSA*;

struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
}

alias MSGBOXPARAMSW = tagMSGBOXPARAMSW;
alias PMSGBOXPARAMSW = tagMSGBOXPARAMSW*;
alias LPMSGBOXPARAMSW = tagMSGBOXPARAMSW*;

alias MSGBOXPARAMS = tagMSGBOXPARAMSA;
alias PMSGBOXPARAMS = tagMSGBOXPARAMSA*;
alias LPMSGBOXPARAMS = tagMSGBOXPARAMSA*;

int MessageBoxIndirectA (const(MSGBOXPARAMSA)* lpmbp);
int MessageBoxIndirectW (const(MSGBOXPARAMSW)* lpmbp);
WINBOOL MessageBeep (UINT uType);

int ShowCursor (WINBOOL bShow);
WINBOOL SetCursorPos (int X, int Y);
HCURSOR SetCursor (HCURSOR hCursor);
WINBOOL GetCursorPos (LPPOINT lpPoint);
WINBOOL ClipCursor (const(RECT)* lpRect);
WINBOOL GetClipCursor (LPRECT lpRect);
HCURSOR GetCursor ();
WINBOOL CreateCaret (HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight);
UINT GetCaretBlinkTime ();
WINBOOL SetCaretBlinkTime (UINT uMSeconds);
WINBOOL DestroyCaret ();
WINBOOL HideCaret (HWND hWnd);
WINBOOL ShowCaret (HWND hWnd);
WINBOOL SetCaretPos (int X, int Y);
WINBOOL GetCaretPos (LPPOINT lpPoint);
WINBOOL ClientToScreen (HWND hWnd, LPPOINT lpPoint);
WINBOOL ScreenToClient (HWND hWnd, LPPOINT lpPoint);
int MapWindowPoints (HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
HWND WindowFromPoint (POINT Point);
HWND ChildWindowFromPoint (HWND hWndParent, POINT Point);
HWND ChildWindowFromPointEx (HWND hwnd, POINT pt, UINT flags);

DWORD GetSysColor (int nIndex);
HBRUSH GetSysColorBrush (int nIndex);
WINBOOL SetSysColors (int cElements, const(INT)* lpaElements, const(COLORREF)* lpaRgbValues);

WINBOOL DrawFocusRect (HDC hDC, const(RECT)* lprc);
int FillRect (HDC hDC, const(RECT)* lprc, HBRUSH hbr);
int FrameRect (HDC hDC, const(RECT)* lprc, HBRUSH hbr);
WINBOOL InvertRect (HDC hDC, const(RECT)* lprc);
WINBOOL SetRect (LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
WINBOOL SetRectEmpty (LPRECT lprc);
WINBOOL CopyRect (LPRECT lprcDst, const(RECT)* lprcSrc);
WINBOOL InflateRect (LPRECT lprc, int dx, int dy);
WINBOOL IntersectRect (LPRECT lprcDst, const(RECT)* lprcSrc1, const(RECT)* lprcSrc2);
WINBOOL UnionRect (LPRECT lprcDst, const(RECT)* lprcSrc1, const(RECT)* lprcSrc2);
WINBOOL SubtractRect (LPRECT lprcDst, const(RECT)* lprcSrc1, const(RECT)* lprcSrc2);
WINBOOL OffsetRect (LPRECT lprc, int dx, int dy);
WINBOOL IsRectEmpty (const(RECT)* lprc);
WINBOOL EqualRect (const(RECT)* lprc1, const(RECT)* lprc2);
WINBOOL PtInRect (const(RECT)* lprc, POINT pt);

WORD GetWindowWord (HWND hWnd, int nIndex);
WORD SetWindowWord (HWND hWnd, int nIndex, WORD wNewWord);
LONG GetWindowLongA (HWND hWnd, int nIndex);
LONG GetWindowLongW (HWND hWnd, int nIndex);
LONG SetWindowLongA (HWND hWnd, int nIndex, LONG dwNewLong);
LONG SetWindowLongW (HWND hWnd, int nIndex, LONG dwNewLong);

LONG_PTR GetWindowLongPtrA (HWND hWnd, int nIndex);
LONG_PTR GetWindowLongPtrW (HWND hWnd, int nIndex);
LONG_PTR SetWindowLongPtrA (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
LONG_PTR SetWindowLongPtrW (HWND hWnd, int nIndex, LONG_PTR dwNewLong);

WORD GetClassWord (HWND hWnd, int nIndex);
WORD SetClassWord (HWND hWnd, int nIndex, WORD wNewWord);
DWORD GetClassLongA (HWND hWnd, int nIndex);
DWORD GetClassLongW (HWND hWnd, int nIndex);
DWORD SetClassLongA (HWND hWnd, int nIndex, LONG dwNewLong);
DWORD SetClassLongW (HWND hWnd, int nIndex, LONG dwNewLong);

ULONG_PTR GetClassLongPtrA (HWND hWnd, int nIndex);
ULONG_PTR GetClassLongPtrW (HWND hWnd, int nIndex);
ULONG_PTR SetClassLongPtrA (HWND hWnd, int nIndex, LONG_PTR dwNewLong);
ULONG_PTR SetClassLongPtrW (HWND hWnd, int nIndex, LONG_PTR dwNewLong);

WINBOOL GetProcessDefaultLayout (DWORD* pdwDefaultLayout);
WINBOOL SetProcessDefaultLayout (DWORD dwDefaultLayout);
HWND GetDesktopWindow ();
HWND GetParent (HWND hWnd);
HWND SetParent (HWND hWndChild, HWND hWndNewParent);
WINBOOL EnumChildWindows (HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
HWND FindWindowA (LPCSTR lpClassName, LPCSTR lpWindowName);
HWND FindWindowW (LPCWSTR lpClassName, LPCWSTR lpWindowName);
HWND FindWindowExA (HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);
HWND FindWindowExW (HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);
HWND GetShellWindow ();
WINBOOL RegisterShellHookWindow (HWND hwnd);
WINBOOL DeregisterShellHookWindow (HWND hwnd);
WINBOOL EnumWindows (WNDENUMPROC lpEnumFunc, LPARAM lParam);
WINBOOL EnumThreadWindows (DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);

int GetClassNameA (HWND hWnd, LPSTR lpClassName, int nMaxCount);
int GetClassNameW (HWND hWnd, LPWSTR lpClassName, int nMaxCount);
HWND GetTopWindow (HWND hWnd);

DWORD GetWindowThreadProcessId (HWND hWnd, LPDWORD lpdwProcessId);
WINBOOL IsGUIThread (WINBOOL bConvert);

HWND GetLastActivePopup (HWND hWnd);

HWND GetWindow (HWND hWnd, UINT uCmd);

HHOOK SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc);
HHOOK SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc);

WINBOOL UnhookWindowsHook (int nCode, HOOKPROC pfnFilterProc);
HHOOK SetWindowsHookExA (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
HHOOK SetWindowsHookExW (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
WINBOOL UnhookWindowsHookEx (HHOOK hhk);
LRESULT CallNextHookEx (HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);

WINBOOL CheckMenuRadioItem (HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);

struct MENUITEMTEMPLATEHEADER
{
    WORD versionNumber;
    WORD offset;
}

alias PMENUITEMTEMPLATEHEADER = MENUITEMTEMPLATEHEADER*;

struct MENUITEMTEMPLATE
{
    WORD mtOption;
    WORD mtID;
    WCHAR[1] mtString;
}

alias PMENUITEMTEMPLATE = MENUITEMTEMPLATE*;

HBITMAP LoadBitmapA (HINSTANCE hInstance, LPCSTR lpBitmapName);
HBITMAP LoadBitmapW (HINSTANCE hInstance, LPCWSTR lpBitmapName);
HCURSOR LoadCursorA (HINSTANCE hInstance, LPCSTR lpCursorName);
HCURSOR LoadCursorW (HINSTANCE hInstance, LPCWSTR lpCursorName);
HCURSOR LoadCursorFromFileA (LPCSTR lpFileName);
HCURSOR LoadCursorFromFileW (LPCWSTR lpFileName);
HCURSOR CreateCursor (HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const(void)* pvANDPlane, const(void)* pvXORPlane);
WINBOOL DestroyCursor (HCURSOR hCursor);

struct _ICONINFO
{
    WINBOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
}

alias ICONINFO = _ICONINFO;
alias PICONINFO = _ICONINFO*;

WINBOOL SetSystemCursor (HCURSOR hcur, DWORD id);
HICON LoadIconA (HINSTANCE hInstance, LPCSTR lpIconName);
HICON LoadIconW (HINSTANCE hInstance, LPCWSTR lpIconName);
UINT PrivateExtractIconsA (LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON* phicon, UINT* piconid, UINT nIcons, UINT flags);
UINT PrivateExtractIconsW (LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON* phicon, UINT* piconid, UINT nIcons, UINT flags);
HICON CreateIcon (HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, const(BYTE)* lpbANDbits, const(BYTE)* lpbXORbits);
WINBOOL DestroyIcon (HICON hIcon);
int LookupIconIdFromDirectory (PBYTE presbits, WINBOOL fIcon);
int LookupIconIdFromDirectoryEx (PBYTE presbits, WINBOOL fIcon, int cxDesired, int cyDesired, UINT Flags);
HICON CreateIconFromResource (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer);
HICON CreateIconFromResourceEx (PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags);

struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
}

alias CURSORSHAPE = tagCURSORSHAPE;
alias LPCURSORSHAPE = tagCURSORSHAPE*;

HANDLE LoadImageA (HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad);
HANDLE LoadImageW (HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad);
HANDLE CopyImage (HANDLE h, UINT type, int cx, int cy, UINT flags);
WINBOOL DrawIconEx (HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
HICON CreateIconIndirect (PICONINFO piconinfo);
HICON CopyIcon (HICON hIcon);
WINBOOL GetIconInfo (HICON hIcon, PICONINFO piconinfo);

WINBOOL IsDialogMessageA (HWND hDlg, LPMSG lpMsg);
WINBOOL IsDialogMessageW (HWND hDlg, LPMSG lpMsg);

WINBOOL MapDialogRect (HWND hDlg, LPRECT lpRect);
int DlgDirListA (HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
int DlgDirListW (HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
WINBOOL DlgDirSelectExA (HWND hwndDlg, LPSTR lpString, int chCount, int idListBox);
WINBOOL DlgDirSelectExW (HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox);
int DlgDirListComboBoxA (HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
int DlgDirListComboBoxW (HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
WINBOOL DlgDirSelectComboBoxExA (HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox);
WINBOOL DlgDirSelectComboBoxExW (HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox);

struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
}

alias SCROLLINFO = tagSCROLLINFO;
alias LPSCROLLINFO = tagSCROLLINFO*;
alias LPCSCROLLINFO = const(tagSCROLLINFO)*;

int SetScrollInfo (HWND hwnd, int nBar, LPCSCROLLINFO lpsi, WINBOOL redraw);
WINBOOL GetScrollInfo (HWND hwnd, int nBar, LPSCROLLINFO lpsi);

struct tagMDICREATESTRUCTA
{
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
}

alias MDICREATESTRUCTA = tagMDICREATESTRUCTA;
alias LPMDICREATESTRUCTA = tagMDICREATESTRUCTA*;

struct tagMDICREATESTRUCTW
{
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
}

alias MDICREATESTRUCTW = tagMDICREATESTRUCTW;
alias LPMDICREATESTRUCTW = tagMDICREATESTRUCTW*;

alias MDICREATESTRUCT = tagMDICREATESTRUCTA;
alias LPMDICREATESTRUCT = tagMDICREATESTRUCTA*;

struct tagCLIENTCREATESTRUCT
{
    HANDLE hWindowMenu;
    UINT idFirstChild;
}

alias CLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT;
alias LPCLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT*;

LRESULT DefFrameProcA (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
LRESULT DefFrameProcW (HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
LRESULT DefMDIChildProcA (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
LRESULT DefMDIChildProcW (HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

WINBOOL TranslateMDISysAccel (HWND hWndClient, LPMSG lpMsg);

UINT ArrangeIconicWindows (HWND hWnd);
HWND CreateMDIWindowA (LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
HWND CreateMDIWindowW (LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
WORD TileWindows (HWND hwndParent, UINT wHow, const(RECT)* lpRect, UINT cKids, const(HWND)* lpKids);
WORD CascadeWindows (HWND hwndParent, UINT wHow, const(RECT)* lpRect, UINT cKids, const(HWND)* lpKids);

alias HELPPOLY = c_ulong;

struct tagMULTIKEYHELPA
{
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR[1] szKeyphrase;
}

alias MULTIKEYHELPA = tagMULTIKEYHELPA;
alias PMULTIKEYHELPA = tagMULTIKEYHELPA*;
alias LPMULTIKEYHELPA = tagMULTIKEYHELPA*;

struct tagMULTIKEYHELPW
{
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR[1] szKeyphrase;
}

alias MULTIKEYHELPW = tagMULTIKEYHELPW;
alias PMULTIKEYHELPW = tagMULTIKEYHELPW*;
alias LPMULTIKEYHELPW = tagMULTIKEYHELPW*;

alias MULTIKEYHELP = tagMULTIKEYHELPA;
alias PMULTIKEYHELP = tagMULTIKEYHELPA*;
alias LPMULTIKEYHELP = tagMULTIKEYHELPA*;

struct tagHELPWININFOA
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR[2] rgchMember;
}

alias HELPWININFOA = tagHELPWININFOA;
alias PHELPWININFOA = tagHELPWININFOA*;
alias LPHELPWININFOA = tagHELPWININFOA*;

struct tagHELPWININFOW
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR[2] rgchMember;
}

alias HELPWININFOW = tagHELPWININFOW;
alias PHELPWININFOW = tagHELPWININFOW*;
alias LPHELPWININFOW = tagHELPWININFOW*;

alias HELPWININFO = tagHELPWININFOA;
alias PHELPWININFO = tagHELPWININFOA*;
alias LPHELPWININFO = tagHELPWININFOA*;

WINBOOL WinHelpA (HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
WINBOOL WinHelpW (HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);

DWORD GetGuiResources (HANDLE hProcess, DWORD uiFlags);

struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}

alias NONCLIENTMETRICSA = tagNONCLIENTMETRICSA;
alias PNONCLIENTMETRICSA = tagNONCLIENTMETRICSA*;
alias LPNONCLIENTMETRICSA = tagNONCLIENTMETRICSA*;

struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}

alias NONCLIENTMETRICSW = tagNONCLIENTMETRICSW;
alias PNONCLIENTMETRICSW = tagNONCLIENTMETRICSW*;
alias LPNONCLIENTMETRICSW = tagNONCLIENTMETRICSW*;

alias NONCLIENTMETRICS = tagNONCLIENTMETRICSA;
alias PNONCLIENTMETRICS = tagNONCLIENTMETRICSA*;
alias LPNONCLIENTMETRICS = tagNONCLIENTMETRICSA*;

struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
}

alias MINIMIZEDMETRICS = tagMINIMIZEDMETRICS;
alias PMINIMIZEDMETRICS = tagMINIMIZEDMETRICS*;
alias LPMINIMIZEDMETRICS = tagMINIMIZEDMETRICS*;

struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
}

alias ICONMETRICSA = tagICONMETRICSA;
alias PICONMETRICSA = tagICONMETRICSA*;
alias LPICONMETRICSA = tagICONMETRICSA*;

struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
}

alias ICONMETRICSW = tagICONMETRICSW;
alias PICONMETRICSW = tagICONMETRICSW*;
alias LPICONMETRICSW = tagICONMETRICSW*;

alias ICONMETRICS = tagICONMETRICSA;
alias PICONMETRICS = tagICONMETRICSA*;
alias LPICONMETRICS = tagICONMETRICSA*;

struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
}

alias ANIMATIONINFO = tagANIMATIONINFO;
alias LPANIMATIONINFO = tagANIMATIONINFO*;

struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
}

alias SERIALKEYSA = tagSERIALKEYSA;
alias LPSERIALKEYSA = tagSERIALKEYSA*;

struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
}

alias SERIALKEYSW = tagSERIALKEYSW;
alias LPSERIALKEYSW = tagSERIALKEYSW*;

alias SERIALKEYS = tagSERIALKEYSA;
alias LPSERIALKEYS = tagSERIALKEYSA*;

struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
}

alias HIGHCONTRASTA = tagHIGHCONTRASTA;
alias LPHIGHCONTRASTA = tagHIGHCONTRASTA*;

struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
}

alias HIGHCONTRASTW = tagHIGHCONTRASTW;
alias LPHIGHCONTRASTW = tagHIGHCONTRASTW*;

alias HIGHCONTRAST = tagHIGHCONTRASTA;
alias LPHIGHCONTRAST = tagHIGHCONTRASTA*;

struct _VIDEOPARAMETERS
{
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR[256] bOEMCopyProtection;
}

alias VIDEOPARAMETERS = _VIDEOPARAMETERS;
alias PVIDEOPARAMETERS = _VIDEOPARAMETERS*;
alias LPVIDEOPARAMETERS = _VIDEOPARAMETERS*;

LONG ChangeDisplaySettingsA (LPDEVMODEA lpDevMode, DWORD dwFlags);
LONG ChangeDisplaySettingsW (LPDEVMODEW lpDevMode, DWORD dwFlags);
LONG ChangeDisplaySettingsExA (LPCSTR lpszDeviceName, LPDEVMODEA lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
LONG ChangeDisplaySettingsExW (LPCWSTR lpszDeviceName, LPDEVMODEW lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);

WINBOOL EnumDisplaySettingsA (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode);
WINBOOL EnumDisplaySettingsW (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode);
WINBOOL EnumDisplaySettingsExA (LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode, DWORD dwFlags);
WINBOOL EnumDisplaySettingsExW (LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode, DWORD dwFlags);

WINBOOL EnumDisplayDevicesA (LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags);
WINBOOL EnumDisplayDevicesW (LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags);

WINBOOL SystemParametersInfoA (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
WINBOOL SystemParametersInfoW (UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);

struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
}

alias FILTERKEYS = tagFILTERKEYS;
alias LPFILTERKEYS = tagFILTERKEYS*;

struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
}

alias STICKYKEYS = tagSTICKYKEYS;
alias LPSTICKYKEYS = tagSTICKYKEYS*;

struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
}

alias MOUSEKEYS = tagMOUSEKEYS;
alias LPMOUSEKEYS = tagMOUSEKEYS*;

struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
}

alias ACCESSTIMEOUT = tagACCESSTIMEOUT;
alias LPACCESSTIMEOUT = tagACCESSTIMEOUT*;

struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
}

alias SOUNDSENTRYA = tagSOUNDSENTRYA;
alias LPSOUNDSENTRYA = tagSOUNDSENTRYA*;

struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
}

alias SOUNDSENTRYW = tagSOUNDSENTRYW;
alias LPSOUNDSENTRYW = tagSOUNDSENTRYW*;

alias SOUNDSENTRY = tagSOUNDSENTRYA;
alias LPSOUNDSENTRY = tagSOUNDSENTRYA*;

struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
}

alias TOGGLEKEYS = tagTOGGLEKEYS;
alias LPTOGGLEKEYS = tagTOGGLEKEYS*;

struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
}

alias MONITORINFO = tagMONITORINFO;
alias LPMONITORINFO = tagMONITORINFO*;

struct tagMONITORINFOEXA
{
    struct
    {
        DWORD cbSize;
        RECT rcMonitor;
        RECT rcWork;
        DWORD dwFlags;
    }

    CHAR[32] szDevice;
}

alias MONITORINFOEXA = tagMONITORINFOEXA;
alias LPMONITORINFOEXA = tagMONITORINFOEXA*;

struct tagMONITORINFOEXW
{
    struct
    {
        DWORD cbSize;
        RECT rcMonitor;
        RECT rcWork;
        DWORD dwFlags;
    }

    WCHAR[32] szDevice;
}

alias MONITORINFOEXW = tagMONITORINFOEXW;
alias LPMONITORINFOEXW = tagMONITORINFOEXW*;

alias MONITORINFOEX = tagMONITORINFOEXA;
alias LPMONITORINFOEX = tagMONITORINFOEXA*;

alias MONITORENUMPROC = int function (HMONITOR, HDC, LPRECT, LPARAM);

void SetDebugErrorLevel (DWORD dwLevel);
void SetLastErrorEx (DWORD dwErrCode, DWORD dwType);
int InternalGetWindowText (HWND hWnd, LPWSTR pString, int cchMaxCount);
WINBOOL CancelShutdown ();
HMONITOR MonitorFromPoint (POINT pt, DWORD dwFlags);
HMONITOR MonitorFromRect (LPCRECT lprc, DWORD dwFlags);
HMONITOR MonitorFromWindow (HWND hwnd, DWORD dwFlags);

WINBOOL GetMonitorInfoA (HMONITOR hMonitor, LPMONITORINFO lpmi);
WINBOOL GetMonitorInfoW (HMONITOR hMonitor, LPMONITORINFO lpmi);
WINBOOL EnumDisplayMonitors (HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);

alias WINEVENTPROC = void function (HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime);

void NotifyWinEvent (DWORD event, HWND hwnd, LONG idObject, LONG idChild);
HWINEVENTHOOK SetWinEventHook (DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
WINBOOL IsWinEventHookInstalled (DWORD event);

WINBOOL UnhookWinEvent (HWINEVENTHOOK hWinEventHook);

struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
}

alias GUITHREADINFO = tagGUITHREADINFO;
alias PGUITHREADINFO = tagGUITHREADINFO*;
alias LPGUITHREADINFO = tagGUITHREADINFO*;

WINBOOL GetGUIThreadInfo (DWORD idThread, PGUITHREADINFO pgui);
WINBOOL BlockInput (WINBOOL fBlockIt);
UINT GetWindowModuleFileNameA (HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax);
UINT GetWindowModuleFileNameW (HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax);

struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
}

alias CURSORINFO = tagCURSORINFO;
alias PCURSORINFO = tagCURSORINFO*;
alias LPCURSORINFO = tagCURSORINFO*;

WINBOOL GetCursorInfo (PCURSORINFO pci);

struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
}

alias WINDOWINFO = tagWINDOWINFO;
alias PWINDOWINFO = tagWINDOWINFO*;
alias LPWINDOWINFO = tagWINDOWINFO*;

WINBOOL GetWindowInfo (HWND hwnd, PWINDOWINFO pwi);

struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD[6] rgstate;
}

alias TITLEBARINFO = tagTITLEBARINFO;
alias PTITLEBARINFO = tagTITLEBARINFO*;
alias LPTITLEBARINFO = tagTITLEBARINFO*;

WINBOOL GetTitleBarInfo (HWND hwnd, PTITLEBARINFO pti);

struct tagMENUBARINFO
{
    

    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;

    mixin(bitfields!(
        WINBOOL, "fBarFocused", 1,
        WINBOOL, "fFocused", 1,
        uint, "", 6));
}

alias MENUBARINFO = tagMENUBARINFO;
alias PMENUBARINFO = tagMENUBARINFO*;
alias LPMENUBARINFO = tagMENUBARINFO*;

WINBOOL GetMenuBarInfo (HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi);

struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD[6] rgstate;
}

alias SCROLLBARINFO = tagSCROLLBARINFO;
alias PSCROLLBARINFO = tagSCROLLBARINFO*;
alias LPSCROLLBARINFO = tagSCROLLBARINFO*;

WINBOOL GetScrollBarInfo (HWND hwnd, LONG idObject, PSCROLLBARINFO psbi);

struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
}

alias COMBOBOXINFO = tagCOMBOBOXINFO;
alias PCOMBOBOXINFO = tagCOMBOBOXINFO*;
alias LPCOMBOBOXINFO = tagCOMBOBOXINFO*;

WINBOOL GetComboBoxInfo (HWND hwndCombo, PCOMBOBOXINFO pcbi);

HWND GetAncestor (HWND hwnd, UINT gaFlags);
HWND RealChildWindowFromPoint (HWND hwndParent, POINT ptParentClientCoords);
UINT RealGetWindowClassA (HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax);
UINT RealGetWindowClassW (HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax);

struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
}

alias ALTTABINFO = tagALTTABINFO;
alias PALTTABINFO = tagALTTABINFO*;
alias LPALTTABINFO = tagALTTABINFO*;

WINBOOL GetAltTabInfoA (HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText);
WINBOOL GetAltTabInfoW (HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText);
DWORD GetListBoxInfo (HWND hwnd);

WINBOOL LockWorkStation ();
WINBOOL UserHandleGrantAccess (HANDLE hUserHandle, HANDLE hJob, WINBOOL bGrant);

struct HRAWINPUT__
{
    int unused;
}

alias HRAWINPUT = HRAWINPUT__*;

struct tagRAWINPUTHEADER
{
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
}

alias RAWINPUTHEADER = tagRAWINPUTHEADER;
alias PRAWINPUTHEADER = tagRAWINPUTHEADER*;
alias LPRAWINPUTHEADER = tagRAWINPUTHEADER*;

struct tagRAWMOUSE
{
    USHORT usFlags;

    union
    {
        ULONG ulButtons;

        struct
        {
            USHORT usButtonFlags;
            USHORT usButtonData;
        }
    }

    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
}

alias RAWMOUSE = tagRAWMOUSE;
alias PRAWMOUSE = tagRAWMOUSE*;
alias LPRAWMOUSE = tagRAWMOUSE*;

struct tagRAWKEYBOARD
{
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
}

alias RAWKEYBOARD = tagRAWKEYBOARD;
alias PRAWKEYBOARD = tagRAWKEYBOARD*;
alias LPRAWKEYBOARD = tagRAWKEYBOARD*;

struct tagRAWHID
{
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE[1] bRawData;
}

alias RAWHID = tagRAWHID;
alias PRAWHID = tagRAWHID*;
alias LPRAWHID = tagRAWHID*;

struct tagRAWINPUT
{
    RAWINPUTHEADER header;

    union _Anonymous_49
    {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    }

    _Anonymous_49 data;
}

alias RAWINPUT = tagRAWINPUT;
alias PRAWINPUT = tagRAWINPUT*;
alias LPRAWINPUT = tagRAWINPUT*;

UINT GetRawInputData (HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);

struct tagRID_DEVICE_INFO_MOUSE
{
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    WINBOOL fHasHorizontalWheel;
}

alias RID_DEVICE_INFO_MOUSE = tagRID_DEVICE_INFO_MOUSE;
alias PRID_DEVICE_INFO_MOUSE = tagRID_DEVICE_INFO_MOUSE*;

struct tagRID_DEVICE_INFO_KEYBOARD
{
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
}

alias RID_DEVICE_INFO_KEYBOARD = tagRID_DEVICE_INFO_KEYBOARD;
alias PRID_DEVICE_INFO_KEYBOARD = tagRID_DEVICE_INFO_KEYBOARD*;

struct tagRID_DEVICE_INFO_HID
{
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
}

alias RID_DEVICE_INFO_HID = tagRID_DEVICE_INFO_HID;
alias PRID_DEVICE_INFO_HID = tagRID_DEVICE_INFO_HID*;

struct tagRID_DEVICE_INFO
{
    DWORD cbSize;
    DWORD dwType;

    union
    {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    }
}

alias RID_DEVICE_INFO = tagRID_DEVICE_INFO;
alias PRID_DEVICE_INFO = tagRID_DEVICE_INFO*;
alias LPRID_DEVICE_INFO = tagRID_DEVICE_INFO*;

UINT GetRawInputDeviceInfoA (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
UINT GetRawInputDeviceInfoW (HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
UINT GetRawInputBuffer (PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);

struct tagRAWINPUTDEVICE
{
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
}

alias RAWINPUTDEVICE = tagRAWINPUTDEVICE;
alias PRAWINPUTDEVICE = tagRAWINPUTDEVICE*;
alias LPRAWINPUTDEVICE = tagRAWINPUTDEVICE*;

alias PCRAWINPUTDEVICE = const(tagRAWINPUTDEVICE)*;

struct tagRAWINPUTDEVICELIST
{
    HANDLE hDevice;
    DWORD dwType;
}

alias RAWINPUTDEVICELIST = tagRAWINPUTDEVICELIST;
alias PRAWINPUTDEVICELIST = tagRAWINPUTDEVICELIST*;

WINBOOL RegisterRawInputDevices (PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
UINT GetRegisteredRawInputDevices (PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
UINT GetRawInputDeviceList (PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
LRESULT DefRawInputProc (PRAWINPUT* paRawInput, INT nInput, UINT cbSizeHeader);

WINBOOL ShutdownBlockReasonCreate (HWND hWnd, LPCWSTR pwszReason);
WINBOOL ShutdownBlockReasonQuery (HWND hWnd, LPWSTR pwszBuff, DWORD* pcchBuff);
WINBOOL ShutdownBlockReasonDestroy (HWND hWnd);

int GetTimeFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const(SYSTEMTIME)* lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
int GetDateFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const(SYSTEMTIME)* lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar);

int GetDateFormatA (LCID Locale, DWORD dwFlags, const(SYSTEMTIME)* lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate);
int GetDateFormatW (LCID Locale, DWORD dwFlags, const(SYSTEMTIME)* lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
int GetTimeFormatA (LCID Locale, DWORD dwFlags, const(SYSTEMTIME)* lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime);
int GetTimeFormatW (LCID Locale, DWORD dwFlags, const(SYSTEMTIME)* lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);

alias LGRPID = c_ulong;
alias LCTYPE = c_ulong;
alias CALTYPE = c_ulong;
alias CALID = c_ulong;

struct _cpinfo
{
    UINT MaxCharSize;
    BYTE[2] DefaultChar;
    BYTE[12] LeadByte;
}

alias CPINFO = _cpinfo;
alias LPCPINFO = _cpinfo*;

struct _cpinfoexA
{
    UINT MaxCharSize;
    BYTE[2] DefaultChar;
    BYTE[12] LeadByte;
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR[260] CodePageName;
}

alias CPINFOEXA = _cpinfoexA;
alias LPCPINFOEXA = _cpinfoexA*;

struct _cpinfoexW
{
    UINT MaxCharSize;
    BYTE[2] DefaultChar;
    BYTE[12] LeadByte;
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR[260] CodePageName;
}

alias CPINFOEXW = _cpinfoexW;
alias LPCPINFOEXW = _cpinfoexW*;

alias CPINFOEX = _cpinfoexA;
alias LPCPINFOEX = _cpinfoexA*;

struct _numberfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
}

alias NUMBERFMTA = _numberfmtA;
alias LPNUMBERFMTA = _numberfmtA*;

struct _numberfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
}

alias NUMBERFMTW = _numberfmtW;
alias LPNUMBERFMTW = _numberfmtW*;

alias NUMBERFMT = _numberfmtA;
alias LPNUMBERFMT = _numberfmtA*;

struct _currencyfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
}

alias CURRENCYFMTA = _currencyfmtA;
alias LPCURRENCYFMTA = _currencyfmtA*;

struct _currencyfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
}

alias CURRENCYFMTW = _currencyfmtW;
alias LPCURRENCYFMTW = _currencyfmtW*;

alias CURRENCYFMT = _currencyfmtA;
alias LPCURRENCYFMT = _currencyfmtA*;

enum SYSNLS_FUNCTION
{
    COMPARE_STRING = 0x1
}

alias NLS_FUNCTION = c_ulong;

struct _nlsversioninfo
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
}

alias NLSVERSIONINFO = _nlsversioninfo;
alias LPNLSVERSIONINFO = _nlsversioninfo*;

struct _nlsversioninfoex
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
}

alias NLSVERSIONINFOEX = _nlsversioninfoex;
alias LPNLSVERSIONINFOEX = _nlsversioninfoex*;

alias GEOID = c_long;
alias GEOTYPE = c_ulong;
alias GEOCLASS = c_ulong;

enum SYSGEOTYPE
{
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME = 0x0008,
    GEO_OFFICIALNAME = 0x0009,
    GEO_TIMEZONES = 0x000a,
    GEO_OFFICIALLANGUAGES = 0x000b,
    GEO_ISO_UN_NUMBER = 0x000c,
    GEO_PARENT = 0x000d
}

enum SYSGEOCLASS
{
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
}

alias LANGUAGEGROUP_ENUMPROCA = int function (LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
alias LANGGROUPLOCALE_ENUMPROCA = int function (LGRPID, LCID, LPSTR, LONG_PTR);
alias UILANGUAGE_ENUMPROCA = int function (LPSTR, LONG_PTR);
alias CODEPAGE_ENUMPROCA = int function (LPSTR);
alias DATEFMT_ENUMPROCA = int function (LPSTR);
alias DATEFMT_ENUMPROCEXA = int function (LPSTR, CALID);
alias TIMEFMT_ENUMPROCA = int function (LPSTR);
alias CALINFO_ENUMPROCA = int function (LPSTR);
alias CALINFO_ENUMPROCEXA = int function (LPSTR, CALID);
alias LOCALE_ENUMPROCA = int function (LPSTR);
alias LOCALE_ENUMPROCW = int function (LPWSTR);
alias LANGUAGEGROUP_ENUMPROCW = int function (LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
alias LANGGROUPLOCALE_ENUMPROCW = int function (LGRPID, LCID, LPWSTR, LONG_PTR);
alias UILANGUAGE_ENUMPROCW = int function (LPWSTR, LONG_PTR);
alias CODEPAGE_ENUMPROCW = int function (LPWSTR);
alias DATEFMT_ENUMPROCW = int function (LPWSTR);
alias DATEFMT_ENUMPROCEXW = int function (LPWSTR, CALID);
alias TIMEFMT_ENUMPROCW = int function (LPWSTR);
alias CALINFO_ENUMPROCW = int function (LPWSTR);
alias CALINFO_ENUMPROCEXW = int function (LPWSTR, CALID);
alias GEO_ENUMPROC = int function (GEOID);

struct _FILEMUIINFO
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE[16] pChecksum;
    BYTE[16] pServiceChecksum;
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE[8] abBuffer;
}

alias FILEMUIINFO = _FILEMUIINFO;
alias PFILEMUIINFO = _FILEMUIINFO*;

int CompareStringW (LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
int FoldStringW (DWORD dwMapFlags, LPCWCH lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);

WINBOOL GetStringTypeExW (LCID Locale, DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);

WINBOOL GetStringTypeW (DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
int MultiByteToWideChar (UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
int WideCharToMultiByte (UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);

WINBOOL IsValidCodePage (UINT CodePage);

UINT GetACP ();
WINBOOL IsDBCSLeadByteEx (UINT CodePage, BYTE TestChar);

UINT GetOEMCP ();
int CompareStringA (LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2);
int LCMapStringW (LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
int LCMapStringA (LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
int GetLocaleInfoW (LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
int GetLocaleInfoA (LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData);
WINBOOL IsDBCSLeadByte (BYTE TestChar);
int GetNumberFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const(NUMBERFMTA)* lpFormat, LPSTR lpNumberStr, int cchNumber);
int GetNumberFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const(NUMBERFMTW)* lpFormat, LPWSTR lpNumberStr, int cchNumber);
int GetCurrencyFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const(CURRENCYFMTA)* lpFormat, LPSTR lpCurrencyStr, int cchCurrency);
int GetCurrencyFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const(CURRENCYFMTW)* lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
WINBOOL EnumCalendarInfoA (CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
WINBOOL EnumCalendarInfoW (CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
WINBOOL EnumCalendarInfoExA (CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
WINBOOL EnumCalendarInfoExW (CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
WINBOOL EnumTimeFormatsA (TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
WINBOOL EnumTimeFormatsW (TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
WINBOOL EnumDateFormatsA (DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
WINBOOL EnumDateFormatsW (DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
WINBOOL EnumDateFormatsExA (DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
WINBOOL EnumDateFormatsExW (DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
WINBOOL IsValidLanguageGroup (LGRPID LanguageGroup, DWORD dwFlags);
WINBOOL GetNLSVersion (NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);
WINBOOL IsNLSDefinedString (NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);
WINBOOL IsValidLocale (LCID Locale, DWORD dwFlags);
WINBOOL SetLocaleInfoA (LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
WINBOOL SetLocaleInfoW (LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
int GetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue);
int GetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
WINBOOL SetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
WINBOOL SetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);

int GetGeoInfoA (GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId);
int GetGeoInfoW (GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId);
WINBOOL EnumSystemGeoID (GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
GEOID GetUserGeoID (GEOCLASS GeoClass);
WINBOOL GetCPInfo (UINT CodePage, LPCPINFO lpCPInfo);
WINBOOL GetCPInfoExA (UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
WINBOOL GetCPInfoExW (UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);

WINBOOL SetUserGeoID (GEOID GeoId);
LCID ConvertDefaultLocale (LCID Locale);
LCID GetThreadLocale ();
WINBOOL SetThreadLocale (LCID Locale);
LANGID GetSystemDefaultUILanguage ();
LANGID GetUserDefaultUILanguage ();
LANGID GetSystemDefaultLangID ();
LANGID GetUserDefaultLangID ();
LCID GetSystemDefaultLCID ();
LCID GetUserDefaultLCID ();
LANGID SetThreadUILanguage (LANGID LangId);
WINBOOL GetStringTypeExA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
WINBOOL GetStringTypeA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
int FoldStringA (DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
WINBOOL EnumSystemLocalesA (LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
WINBOOL EnumSystemLocalesW (LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
WINBOOL EnumSystemLanguageGroupsA (LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
WINBOOL EnumSystemLanguageGroupsW (LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
WINBOOL EnumLanguageGroupLocalesA (LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
WINBOOL EnumLanguageGroupLocalesW (LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
WINBOOL EnumUILanguagesA (UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
WINBOOL EnumUILanguagesW (UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);

WINBOOL EnumSystemCodePagesA (CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
WINBOOL EnumSystemCodePagesW (CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);

struct _COORD
{
    SHORT X;
    SHORT Y;
}

alias COORD = _COORD;
alias PCOORD = _COORD*;

struct _SMALL_RECT
{
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
}

alias SMALL_RECT = _SMALL_RECT;
alias PSMALL_RECT = _SMALL_RECT*;

struct _KEY_EVENT_RECORD
{
    WINBOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;

    union _Anonymous_50
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    }

    _Anonymous_50 uChar;
    DWORD dwControlKeyState;
}

alias KEY_EVENT_RECORD = _KEY_EVENT_RECORD;
alias PKEY_EVENT_RECORD = _KEY_EVENT_RECORD*;

struct _MOUSE_EVENT_RECORD
{
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
}

alias MOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD;
alias PMOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD*;

struct _WINDOW_BUFFER_SIZE_RECORD
{
    COORD dwSize;
}

alias WINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD;
alias PWINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD*;

struct _MENU_EVENT_RECORD
{
    UINT dwCommandId;
}

alias MENU_EVENT_RECORD = _MENU_EVENT_RECORD;
alias PMENU_EVENT_RECORD = _MENU_EVENT_RECORD*;

struct _FOCUS_EVENT_RECORD
{
    WINBOOL bSetFocus;
}

alias FOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD;
alias PFOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD*;

struct _INPUT_RECORD
{
    WORD EventType;

    union _Anonymous_51
    {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    }

    _Anonymous_51 Event;
}

alias INPUT_RECORD = _INPUT_RECORD;
alias PINPUT_RECORD = _INPUT_RECORD*;

struct _CHAR_INFO
{
    union _Anonymous_52
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    }

    _Anonymous_52 Char;
    WORD Attributes;
}

alias CHAR_INFO = _CHAR_INFO;
alias PCHAR_INFO = _CHAR_INFO*;

struct _CONSOLE_SCREEN_BUFFER_INFO
{
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
}

alias CONSOLE_SCREEN_BUFFER_INFO = _CONSOLE_SCREEN_BUFFER_INFO;
alias PCONSOLE_SCREEN_BUFFER_INFO = _CONSOLE_SCREEN_BUFFER_INFO*;

struct _CONSOLE_CURSOR_INFO
{
    DWORD dwSize;
    WINBOOL bVisible;
}

alias CONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO;
alias PCONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO*;

struct _CONSOLE_FONT_INFO
{
    DWORD nFont;
    COORD dwFontSize;
}

alias CONSOLE_FONT_INFO = _CONSOLE_FONT_INFO;
alias PCONSOLE_FONT_INFO = _CONSOLE_FONT_INFO*;

struct _CONSOLE_SELECTION_INFO
{
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
}

alias CONSOLE_SELECTION_INFO = _CONSOLE_SELECTION_INFO;
alias PCONSOLE_SELECTION_INFO = _CONSOLE_SELECTION_INFO*;

alias PHANDLER_ROUTINE = int function (DWORD CtrlType);

WINBOOL PeekConsoleInputA (HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
WINBOOL PeekConsoleInputW (HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
WINBOOL ReadConsoleInputA (HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
WINBOOL ReadConsoleInputW (HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
WINBOOL WriteConsoleInputA (HANDLE hConsoleInput, const(INPUT_RECORD)* lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
WINBOOL WriteConsoleInputW (HANDLE hConsoleInput, const(INPUT_RECORD)* lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
WINBOOL ReadConsoleOutputA (HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
WINBOOL ReadConsoleOutputW (HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
WINBOOL WriteConsoleOutputA (HANDLE hConsoleOutput, const(CHAR_INFO)* lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
WINBOOL WriteConsoleOutputW (HANDLE hConsoleOutput, const(CHAR_INFO)* lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
WINBOOL ReadConsoleOutputCharacterA (HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
WINBOOL ReadConsoleOutputCharacterW (HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
WINBOOL ReadConsoleOutputAttribute (HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead);
WINBOOL WriteConsoleOutputCharacterA (HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
WINBOOL WriteConsoleOutputCharacterW (HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
WINBOOL WriteConsoleOutputAttribute (HANDLE hConsoleOutput, const(WORD)* lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
WINBOOL FillConsoleOutputCharacterA (HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
WINBOOL FillConsoleOutputCharacterW (HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
WINBOOL FillConsoleOutputAttribute (HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
WINBOOL GetConsoleMode (HANDLE hConsoleHandle, LPDWORD lpMode);
WINBOOL GetNumberOfConsoleInputEvents (HANDLE hConsoleInput, LPDWORD lpNumberOfEvents);
WINBOOL GetConsoleScreenBufferInfo (HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
COORD GetLargestConsoleWindowSize (HANDLE hConsoleOutput);
WINBOOL GetConsoleCursorInfo (HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
WINBOOL GetCurrentConsoleFont (HANDLE hConsoleOutput, WINBOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont);
COORD GetConsoleFontSize (HANDLE hConsoleOutput, DWORD nFont);
WINBOOL GetConsoleSelectionInfo (PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
WINBOOL GetNumberOfConsoleMouseButtons (LPDWORD lpNumberOfMouseButtons);
WINBOOL SetConsoleMode (HANDLE hConsoleHandle, DWORD dwMode);
WINBOOL SetConsoleActiveScreenBuffer (HANDLE hConsoleOutput);
WINBOOL FlushConsoleInputBuffer (HANDLE hConsoleInput);
WINBOOL SetConsoleScreenBufferSize (HANDLE hConsoleOutput, COORD dwSize);
WINBOOL SetConsoleCursorPosition (HANDLE hConsoleOutput, COORD dwCursorPosition);
WINBOOL SetConsoleCursorInfo (HANDLE hConsoleOutput, const(CONSOLE_CURSOR_INFO)* lpConsoleCursorInfo);
WINBOOL ScrollConsoleScreenBufferA (HANDLE hConsoleOutput, const(SMALL_RECT)* lpScrollRectangle, const(SMALL_RECT)* lpClipRectangle, COORD dwDestinationOrigin, const(CHAR_INFO)* lpFill);
WINBOOL ScrollConsoleScreenBufferW (HANDLE hConsoleOutput, const(SMALL_RECT)* lpScrollRectangle, const(SMALL_RECT)* lpClipRectangle, COORD dwDestinationOrigin, const(CHAR_INFO)* lpFill);
WINBOOL SetConsoleWindowInfo (HANDLE hConsoleOutput, WINBOOL bAbsolute, const(SMALL_RECT)* lpConsoleWindow);
WINBOOL SetConsoleTextAttribute (HANDLE hConsoleOutput, WORD wAttributes);
WINBOOL SetConsoleCtrlHandler (PHANDLER_ROUTINE HandlerRoutine, WINBOOL Add);
WINBOOL GenerateConsoleCtrlEvent (DWORD dwCtrlEvent, DWORD dwProcessGroupId);
WINBOOL AllocConsole ();
WINBOOL FreeConsole ();
WINBOOL AttachConsole (DWORD dwProcessId);

DWORD GetConsoleTitleA (LPSTR lpConsoleTitle, DWORD nSize);
DWORD GetConsoleTitleW (LPWSTR lpConsoleTitle, DWORD nSize);
WINBOOL SetConsoleTitleA (LPCSTR lpConsoleTitle);
WINBOOL SetConsoleTitleW (LPCWSTR lpConsoleTitle);
WINBOOL ReadConsoleA (HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID lpReserved);
WINBOOL ReadConsoleW (HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID lpReserved);
WINBOOL WriteConsoleA (HANDLE hConsoleOutput, const(void)* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
WINBOOL WriteConsoleW (HANDLE hConsoleOutput, const(void)* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);

HANDLE CreateConsoleScreenBuffer (DWORD dwDesiredAccess, DWORD dwShareMode, const(SECURITY_ATTRIBUTES)* lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData);
UINT GetConsoleCP ();
WINBOOL SetConsoleCP (UINT wCodePageID);
UINT GetConsoleOutputCP ();
WINBOOL SetConsoleOutputCP (UINT wCodePageID);

WINBOOL GetConsoleDisplayMode (LPDWORD lpModeFlags);

WINBOOL SetConsoleDisplayMode (HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);

HWND GetConsoleWindow ();
DWORD GetConsoleProcessList (LPDWORD lpdwProcessList, DWORD dwProcessCount);
WINBOOL AddConsoleAliasA (LPSTR Source, LPSTR Target, LPSTR ExeName);
WINBOOL AddConsoleAliasW (LPWSTR Source, LPWSTR Target, LPWSTR ExeName);
DWORD GetConsoleAliasA (LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName);
DWORD GetConsoleAliasW (LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName);
DWORD GetConsoleAliasesLengthA (LPSTR ExeName);
DWORD GetConsoleAliasesLengthW (LPWSTR ExeName);
DWORD GetConsoleAliasExesLengthA ();
DWORD GetConsoleAliasExesLengthW ();
DWORD GetConsoleAliasesA (LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName);
DWORD GetConsoleAliasesW (LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName);
DWORD GetConsoleAliasExesA (LPSTR ExeNameBuffer, DWORD ExeNameBufferLength);
DWORD GetConsoleAliasExesW (LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength);

struct _CONSOLE_FONT_INFOEX
{
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR[32] FaceName;
}

alias CONSOLE_FONT_INFOEX = _CONSOLE_FONT_INFOEX;
alias PCONSOLE_FONT_INFOEX = _CONSOLE_FONT_INFOEX*;

struct _CONSOLE_HISTORY_INFO
{
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
}

alias CONSOLE_HISTORY_INFO = _CONSOLE_HISTORY_INFO;
alias PCONSOLE_HISTORY_INFO = _CONSOLE_HISTORY_INFO*;

struct _CONSOLE_READCONSOLE_CONTROL
{
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
}

alias CONSOLE_READCONSOLE_CONTROL = _CONSOLE_READCONSOLE_CONTROL;
alias PCONSOLE_READCONSOLE_CONTROL = _CONSOLE_READCONSOLE_CONTROL*;

struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    WINBOOL bFullscreenSupported;
    COLORREF[16] ColorTable;
}

alias CONSOLE_SCREEN_BUFFER_INFOEX = _CONSOLE_SCREEN_BUFFER_INFOEX;
alias PCONSOLE_SCREEN_BUFFER_INFOEX = _CONSOLE_SCREEN_BUFFER_INFOEX*;

WINBOOL GetConsoleHistoryInfo (PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

WINBOOL GetConsoleScreenBufferInfoEx (HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

WINBOOL GetCurrentConsoleFontEx (HANDLE hConsoleOutput, WINBOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

WINBOOL SetConsoleHistoryInfo (PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

WINBOOL SetConsoleScreenBufferInfoEx (HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

WINBOOL SetCurrentConsoleFontEx (HANDLE hConsoleOutput, WINBOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
}

alias VS_FIXEDFILEINFO = tagVS_FIXEDFILEINFO;

DWORD VerFindFileA (DWORD uFlags, LPSTR szFileName, LPSTR szWinDir, LPSTR szAppDir, LPSTR szCurDir, PUINT lpuCurDirLen, LPSTR szDestDir, PUINT lpuDestDirLen);
DWORD VerFindFileW (DWORD uFlags, LPWSTR szFileName, LPWSTR szWinDir, LPWSTR szAppDir, LPWSTR szCurDir, PUINT lpuCurDirLen, LPWSTR szDestDir, PUINT lpuDestDirLen);
DWORD VerInstallFileA (DWORD uFlags, LPSTR szSrcFileName, LPSTR szDestFileName, LPSTR szSrcDir, LPSTR szDestDir, LPSTR szCurDir, LPSTR szTmpFile, PUINT lpuTmpFileLen);
DWORD VerInstallFileW (DWORD uFlags, LPWSTR szSrcFileName, LPWSTR szDestFileName, LPWSTR szSrcDir, LPWSTR szDestDir, LPWSTR szCurDir, LPWSTR szTmpFile, PUINT lpuTmpFileLen);
DWORD GetFileVersionInfoSizeA (LPCSTR lptstrFilename, LPDWORD lpdwHandle);
DWORD GetFileVersionInfoSizeW (LPCWSTR lptstrFilename, LPDWORD lpdwHandle);
WINBOOL GetFileVersionInfoA (LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
WINBOOL GetFileVersionInfoW (LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
DWORD VerLanguageNameA (DWORD wLang, LPSTR szLang, DWORD nSize);
DWORD VerLanguageNameW (DWORD wLang, LPWSTR szLang, DWORD nSize);
WINBOOL VerQueryValueA (LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID* lplpBuffer, PUINT puLen);
WINBOOL VerQueryValueW (LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID* lplpBuffer, PUINT puLen);

alias REGSAM = c_ulong;
alias LSTATUS = c_long;

struct val_context
{
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
}

alias PVALCONTEXT = val_context*;

struct pvalueA
{
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}

alias PVALUEA = pvalueA;
alias PPVALUEA = pvalueA*;

struct pvalueW
{
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}

alias PVALUEW = pvalueW;
alias PPVALUEW = pvalueW*;

alias PVALUE = pvalueA;
alias PPVALUE = pvalueA*;

alias QUERYHANDLER = c_ulong function (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD* total_outlen, DWORD input_blen);

alias PQUERYHANDLER = c_ulong function ();

struct provider_info
{
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}

alias REG_PROVIDER = provider_info;

alias PPROVIDER = provider_info*;

struct value_entA
{
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}

alias VALENTA = value_entA;
alias PVALENTA = value_entA*;

struct value_entW
{
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}

alias VALENTW = value_entW;
alias PVALENTW = value_entW*;

alias VALENT = value_entA;
alias PVALENT = value_entA*;

LONG RegCloseKey (HKEY hKey);
LONG RegOverridePredefKey (HKEY hKey, HKEY hNewHKey);
LONG RegOpenUserClassesRoot (HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult);
LONG RegOpenCurrentUser (REGSAM samDesired, PHKEY phkResult);
LONG RegDisablePredefinedCache ();
LONG RegConnectRegistryA (LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult);
LONG RegConnectRegistryW (LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult);
LONG RegConnectRegistryExA (LPCSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult);
LONG RegConnectRegistryExW (LPCWSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult);
LONG RegCreateKeyA (HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult);
LONG RegCreateKeyW (HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult);
LONG RegCreateKeyExA (HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
LONG RegCreateKeyExW (HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
LONG RegDeleteKeyA (HKEY hKey, LPCSTR lpSubKey);
LONG RegDeleteKeyW (HKEY hKey, LPCWSTR lpSubKey);
LONG RegDeleteKeyExA (HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved);
LONG RegDeleteKeyExW (HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved);
LONG RegDisableReflectionKey (HKEY hBase);
LONG RegEnableReflectionKey (HKEY hBase);
LONG RegQueryReflectionKey (HKEY hBase, WINBOOL* bIsReflectionDisabled);
LONG RegDeleteValueA (HKEY hKey, LPCSTR lpValueName);
LONG RegDeleteValueW (HKEY hKey, LPCWSTR lpValueName);
LONG RegEnumKeyA (HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName);
LONG RegEnumKeyW (HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName);
LONG RegEnumKeyExA (HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
LONG RegEnumKeyExW (HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
LONG RegEnumValueA (HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
LONG RegEnumValueW (HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
LONG RegFlushKey (HKEY hKey);
LONG RegGetKeySecurity (HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor);
LONG RegLoadKeyA (HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile);
LONG RegLoadKeyW (HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile);
LONG RegNotifyChangeKeyValue (HKEY hKey, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, WINBOOL fAsynchronous);
LONG RegOpenKeyA (HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult);
LONG RegOpenKeyW (HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult);
LONG RegOpenKeyExA (HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
LONG RegOpenKeyExW (HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
LONG RegQueryInfoKeyA (HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
LONG RegQueryInfoKeyW (HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
LONG RegQueryValueA (HKEY hKey, LPCSTR lpSubKey, LPSTR lpData, PLONG lpcbData);
LONG RegQueryValueW (HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpData, PLONG lpcbData);
LONG RegQueryMultipleValuesA (HKEY hKey, PVALENTA val_list, DWORD num_vals, LPSTR lpValueBuf, LPDWORD ldwTotsize);
LONG RegQueryMultipleValuesW (HKEY hKey, PVALENTW val_list, DWORD num_vals, LPWSTR lpValueBuf, LPDWORD ldwTotsize);
LONG RegQueryValueExA (HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
LONG RegQueryValueExW (HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
LONG RegReplaceKeyA (HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile);
LONG RegReplaceKeyW (HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile);
LONG RegRestoreKeyA (HKEY hKey, LPCSTR lpFile, DWORD dwFlags);
LONG RegRestoreKeyW (HKEY hKey, LPCWSTR lpFile, DWORD dwFlags);
LONG RegSaveKeyA (HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
LONG RegSaveKeyW (HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
LONG RegSetKeySecurity (HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
LONG RegSetValueA (HKEY hKey, LPCSTR lpSubKey, DWORD dwType, LPCSTR lpData, DWORD cbData);
LONG RegSetValueW (HKEY hKey, LPCWSTR lpSubKey, DWORD dwType, LPCWSTR lpData, DWORD cbData);
LONG RegSetValueExA (HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const(BYTE)* lpData, DWORD cbData);
LONG RegSetValueExW (HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const(BYTE)* lpData, DWORD cbData);
LONG RegUnLoadKeyA (HKEY hKey, LPCSTR lpSubKey);
LONG RegUnLoadKeyW (HKEY hKey, LPCWSTR lpSubKey);
LONG RegGetValueA (HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);
LONG RegGetValueW (HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);
WINBOOL InitiateSystemShutdownA (LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown);
WINBOOL InitiateSystemShutdownW (LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown);
WINBOOL AbortSystemShutdownA (LPSTR lpMachineName);
WINBOOL AbortSystemShutdownW (LPWSTR lpMachineName);

WINBOOL InitiateSystemShutdownExA (LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown, DWORD dwReason);
WINBOOL InitiateSystemShutdownExW (LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown, DWORD dwReason);
LONG RegSaveKeyExA (HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags);
LONG RegSaveKeyExW (HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags);
LONG Wow64Win32ApiEntry (DWORD dwFuncNumber, DWORD dwFlag, DWORD dwRes);

struct _NETRESOURCEA
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
}

alias NETRESOURCEA = _NETRESOURCEA;
alias LPNETRESOURCEA = _NETRESOURCEA*;

struct _NETRESOURCEW
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
}

alias NETRESOURCEW = _NETRESOURCEW;
alias LPNETRESOURCEW = _NETRESOURCEW*;

alias NETRESOURCE = _NETRESOURCEA;
alias LPNETRESOURCE = _NETRESOURCEA*;

DWORD WNetAddConnectionA (LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName);
DWORD WNetAddConnectionW (LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName);
DWORD WNetAddConnection2A (LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags);
DWORD WNetAddConnection2W (LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags);
DWORD WNetAddConnection3A (HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags);
DWORD WNetAddConnection3W (HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags);
DWORD WNetCancelConnectionA (LPCSTR lpName, WINBOOL fForce);
DWORD WNetCancelConnectionW (LPCWSTR lpName, WINBOOL fForce);
DWORD WNetCancelConnection2A (LPCSTR lpName, DWORD dwFlags, WINBOOL fForce);
DWORD WNetCancelConnection2W (LPCWSTR lpName, DWORD dwFlags, WINBOOL fForce);
DWORD WNetGetConnectionA (LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength);
DWORD WNetGetConnectionW (LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength);
DWORD WNetRestoreConnectionA (HWND hwndParent, LPCSTR lpDevice);
DWORD WNetUseConnectionA (HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserID, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult);
DWORD WNetUseConnectionW (HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserID, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult);
DWORD WNetConnectionDialog (HWND hwnd, DWORD dwType);
DWORD WNetDisconnectDialog (HWND hwnd, DWORD dwType);

DWORD WNetRestoreConnectionW (HWND hwndParent, LPCWSTR lpDevice);

struct _CONNECTDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
}

alias CONNECTDLGSTRUCTA = _CONNECTDLGSTRUCTA;
alias LPCONNECTDLGSTRUCTA = _CONNECTDLGSTRUCTA*;

struct _CONNECTDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
}

alias CONNECTDLGSTRUCTW = _CONNECTDLGSTRUCTW;
alias LPCONNECTDLGSTRUCTW = _CONNECTDLGSTRUCTW*;

alias CONNECTDLGSTRUCT = _CONNECTDLGSTRUCTA;
alias LPCONNECTDLGSTRUCT = _CONNECTDLGSTRUCTA*;

DWORD WNetConnectionDialog1A (LPCONNECTDLGSTRUCTA lpConnDlgStruct);
DWORD WNetConnectionDialog1W (LPCONNECTDLGSTRUCTW lpConnDlgStruct);

struct _DISCDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
}

alias DISCDLGSTRUCTA = _DISCDLGSTRUCTA;
alias LPDISCDLGSTRUCTA = _DISCDLGSTRUCTA*;

struct _DISCDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
}

alias DISCDLGSTRUCTW = _DISCDLGSTRUCTW;
alias LPDISCDLGSTRUCTW = _DISCDLGSTRUCTW*;

alias DISCDLGSTRUCT = _DISCDLGSTRUCTA;
alias LPDISCDLGSTRUCT = _DISCDLGSTRUCTA*;

DWORD WNetDisconnectDialog1A (LPDISCDLGSTRUCTA lpConnDlgStruct);
DWORD WNetDisconnectDialog1W (LPDISCDLGSTRUCTW lpConnDlgStruct);
DWORD WNetOpenEnumA (DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum);
DWORD WNetOpenEnumW (DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum);
DWORD WNetEnumResourceA (HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
DWORD WNetEnumResourceW (HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
DWORD WNetCloseEnum (HANDLE hEnum);
DWORD WNetGetResourceParentA (LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer);
DWORD WNetGetResourceParentW (LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer);
DWORD WNetGetResourceInformationA (LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR* lplpSystem);
DWORD WNetGetResourceInformationW (LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR* lplpSystem);

struct _UNIVERSAL_NAME_INFOA
{
    LPSTR lpUniversalName;
}

alias UNIVERSAL_NAME_INFOA = _UNIVERSAL_NAME_INFOA;
alias LPUNIVERSAL_NAME_INFOA = _UNIVERSAL_NAME_INFOA*;

struct _UNIVERSAL_NAME_INFOW
{
    LPWSTR lpUniversalName;
}

alias UNIVERSAL_NAME_INFOW = _UNIVERSAL_NAME_INFOW;
alias LPUNIVERSAL_NAME_INFOW = _UNIVERSAL_NAME_INFOW*;

alias UNIVERSAL_NAME_INFO = _UNIVERSAL_NAME_INFOA;
alias LPUNIVERSAL_NAME_INFO = _UNIVERSAL_NAME_INFOA*;

struct _REMOTE_NAME_INFOA
{
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}

alias REMOTE_NAME_INFOA = _REMOTE_NAME_INFOA;
alias LPREMOTE_NAME_INFOA = _REMOTE_NAME_INFOA*;

struct _REMOTE_NAME_INFOW
{
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}

alias REMOTE_NAME_INFOW = _REMOTE_NAME_INFOW;
alias LPREMOTE_NAME_INFOW = _REMOTE_NAME_INFOW*;

alias REMOTE_NAME_INFO = _REMOTE_NAME_INFOA;
alias LPREMOTE_NAME_INFO = _REMOTE_NAME_INFOA*;

DWORD WNetGetUniversalNameA (LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize);
DWORD WNetGetUniversalNameW (LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize);
DWORD WNetGetUserA (LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength);
DWORD WNetGetUserW (LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength);

DWORD WNetGetProviderNameA (DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize);
DWORD WNetGetProviderNameW (DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize);

struct _NETINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
}

alias NETINFOSTRUCT = _NETINFOSTRUCT;
alias LPNETINFOSTRUCT = _NETINFOSTRUCT*;

DWORD WNetGetNetworkInformationA (LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct);
DWORD WNetGetNetworkInformationW (LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct);

alias PFNGETPROFILEPATHA = uint function (LPCSTR pszUsername, LPSTR pszBuffer, UINT cbBuffer);
alias PFNGETPROFILEPATHW = uint function (LPCWSTR pszUsername, LPWSTR pszBuffer, UINT cbBuffer);

alias PFNRECONCILEPROFILEA = uint function (LPCSTR pszCentralFile, LPCSTR pszLocalFile, DWORD dwFlags);
alias PFNRECONCILEPROFILEW = uint function (LPCWSTR pszCentralFile, LPCWSTR pszLocalFile, DWORD dwFlags);

alias PFNPROCESSPOLICIESA = int function (HWND hwnd, LPCSTR pszPath, LPCSTR pszUsername, LPCSTR pszComputerName, DWORD dwFlags);
alias PFNPROCESSPOLICIESW = int function (HWND hwnd, LPCWSTR pszPath, LPCWSTR pszUsername, LPCWSTR pszComputerName, DWORD dwFlags);

DWORD WNetGetLastErrorA (LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize);
DWORD WNetGetLastErrorW (LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize);

struct _NETCONNECTINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
}

alias NETCONNECTINFOSTRUCT = _NETCONNECTINFOSTRUCT;
alias LPNETCONNECTINFOSTRUCT = _NETCONNECTINFOSTRUCT*;

DWORD MultinetGetConnectionPerformanceA (LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
DWORD MultinetGetConnectionPerformanceW (LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);

struct DDEACK
{
    

    mixin(bitfields!(
        ushort, "bAppReturnCode", 8,
        ushort, "reserved", 6,
        ushort, "fBusy", 1,
        ushort, "fAck", 1));
}

struct DDEADVISE
{
    

    mixin(bitfields!(
        ushort, "reserved", 14,
        ushort, "fDeferUpd", 1,
        ushort, "fAckReq", 1));

    short cfFormat;
}

struct DDEDATA
{
    

    mixin(bitfields!(
        ushort, "unused", 12,
        ushort, "fResponse", 1,
        ushort, "fRelease", 1,
        ushort, "reserved", 1,
        ushort, "fAckReq", 1));

    short cfFormat;
    BYTE[1] Value;
}

struct DDEPOKE
{
    

    mixin(bitfields!(
        ushort, "unused", 13,
        ushort, "fRelease", 1,
        ushort, "fReserved", 2));

    short cfFormat;
    BYTE[1] Value;
}

struct DDELN
{
    

    mixin(bitfields!(
        ushort, "unused", 13,
        ushort, "fRelease", 1,
        ushort, "fDeferUpd", 1,
        ushort, "fAckReq", 1));

    short cfFormat;
}

struct DDEUP
{
    

    mixin(bitfields!(
        ushort, "unused", 12,
        ushort, "fAck", 1,
        ushort, "fRelease", 1,
        ushort, "fReserved", 1,
        ushort, "fAckReq", 1));

    short cfFormat;
    BYTE[1] rgb;
}

WINBOOL DdeSetQualityOfService (HWND hwndClient, const(SECURITY_QUALITY_OF_SERVICE)* pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev);
WINBOOL ImpersonateDdeClientWindow (HWND hWndClient, HWND hWndServer);
LPARAM PackDDElParam (UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
WINBOOL UnpackDDElParam (UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
WINBOOL FreeDDElParam (UINT msg, LPARAM lParam);
LPARAM ReuseDDElParam (LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);

struct HCONVLIST__
{
    int unused;
}

alias HCONVLIST = HCONVLIST__*;

struct HCONV__
{
    int unused;
}

alias HCONV = HCONV__*;

struct HSZ__
{
    int unused;
}

alias HSZ = HSZ__*;

struct HDDEDATA__
{
    int unused;
}

alias HDDEDATA = HDDEDATA__*;

struct tagHSZPAIR
{
    HSZ hszSvc;
    HSZ hszTopic;
}

alias HSZPAIR = tagHSZPAIR;
alias PHSZPAIR = tagHSZPAIR*;

struct tagCONVCONTEXT
{
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
}

alias CONVCONTEXT = tagCONVCONTEXT;
alias PCONVCONTEXT = tagCONVCONTEXT*;

struct tagCONVINFO
{
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
}

alias CONVINFO = tagCONVINFO;
alias PCONVINFO = tagCONVINFO*;

alias FNCALLBACK = HDDEDATA__* function (UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
alias PFNCALLBACK = HDDEDATA__* function (UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);

UINT DdeInitializeA (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
UINT DdeInitializeW (LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);

WINBOOL DdeUninitialize (DWORD idInst);
HCONVLIST DdeConnectList (DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC);
HCONV DdeQueryNextServer (HCONVLIST hConvList, HCONV hConvPrev);
WINBOOL DdeDisconnectList (HCONVLIST hConvList);
HCONV DdeConnect (DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC);
WINBOOL DdeDisconnect (HCONV hConv);
HCONV DdeReconnect (HCONV hConv);
UINT DdeQueryConvInfo (HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo);
WINBOOL DdeSetUserHandle (HCONV hConv, DWORD id, DWORD_PTR hUser);
WINBOOL DdeAbandonTransaction (DWORD idInst, HCONV hConv, DWORD idTransaction);
WINBOOL DdePostAdvise (DWORD idInst, HSZ hszTopic, HSZ hszItem);
WINBOOL DdeEnableCallback (DWORD idInst, HCONV hConv, UINT wCmd);
WINBOOL DdeImpersonateClient (HCONV hConv);

HDDEDATA DdeNameService (DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);
HDDEDATA DdeClientTransaction (LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult);
HDDEDATA DdeCreateDataHandle (DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
HDDEDATA DdeAddData (HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
DWORD DdeGetData (HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
LPBYTE DdeAccessData (HDDEDATA hData, LPDWORD pcbDataSize);
WINBOOL DdeUnaccessData (HDDEDATA hData);
WINBOOL DdeFreeDataHandle (HDDEDATA hData);

UINT DdeGetLastError (DWORD idInst);

HSZ DdeCreateStringHandleA (DWORD idInst, LPCSTR psz, int iCodePage);
HSZ DdeCreateStringHandleW (DWORD idInst, LPCWSTR psz, int iCodePage);
DWORD DdeQueryStringA (DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage);
DWORD DdeQueryStringW (DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage);
WINBOOL DdeFreeStringHandle (DWORD idInst, HSZ hsz);
WINBOOL DdeKeepStringHandle (DWORD idInst, HSZ hsz);
int DdeCmpStringHandles (HSZ hsz1, HSZ hsz2);

struct tagDDEML_MSG_HOOK_DATA
{
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD[8] Data;
}

alias DDEML_MSG_HOOK_DATA = tagDDEML_MSG_HOOK_DATA;
alias PDDEML_MSG_HOOK_DATA = tagDDEML_MSG_HOOK_DATA*;

struct tagMONMSGSTRUCT
{
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
}

alias MONMSGSTRUCT = tagMONMSGSTRUCT;
alias PMONMSGSTRUCT = tagMONMSGSTRUCT*;

struct tagMONCBSTRUCT
{
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD[8] Data;
}

alias MONCBSTRUCT = tagMONCBSTRUCT;
alias PMONCBSTRUCT = tagMONCBSTRUCT*;

struct tagMONHSZSTRUCTA
{
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR[1] str;
}

alias MONHSZSTRUCTA = tagMONHSZSTRUCTA;
alias PMONHSZSTRUCTA = tagMONHSZSTRUCTA*;

struct tagMONHSZSTRUCTW
{
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR[1] str;
}

alias MONHSZSTRUCTW = tagMONHSZSTRUCTW;
alias PMONHSZSTRUCTW = tagMONHSZSTRUCTW*;

alias MONHSZSTRUCT = tagMONHSZSTRUCTA;
alias PMONHSZSTRUCT = tagMONHSZSTRUCTA*;

struct tagMONERRSTRUCT
{
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
}

alias MONERRSTRUCT = tagMONERRSTRUCT;
alias PMONERRSTRUCT = tagMONERRSTRUCT*;

struct tagMONLINKSTRUCT
{
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    WINBOOL fEstablished;
    WINBOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    WINBOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
}

alias MONLINKSTRUCT = tagMONLINKSTRUCT;
alias PMONLINKSTRUCT = tagMONLINKSTRUCT*;

struct tagMONCONVSTRUCT
{
    UINT cb;
    WINBOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
}

alias MONCONVSTRUCT = tagMONCONVSTRUCT;
alias PMONCONVSTRUCT = tagMONCONVSTRUCT*;

struct tagCRGB
{
    BYTE bRed;
    BYTE bGreen;
    BYTE bBlue;
    BYTE bExtra;
}

alias CRGB = tagCRGB;

INT LZStart ();
void LZDone ();
LONG CopyLZFile (INT, INT);
LONG LZCopy (INT, INT);
INT LZInit (INT);
INT GetExpandedNameA (LPSTR, LPSTR);
INT GetExpandedNameW (LPWSTR, LPWSTR);
INT LZOpenFileA (LPSTR, LPOFSTRUCT, WORD);
INT LZOpenFileW (LPWSTR, LPOFSTRUCT, WORD);
LONG LZSeek (INT, LONG, INT);
INT LZRead (INT, LPSTR, INT);
void LZClose (INT);

alias MMVERSION = uint;
alias MMRESULT = uint;

alias LPUINT = uint*;

struct mmtime_tag
{
    UINT wType;

    union _Anonymous_53
    {
        DWORD ms;
        DWORD sample;
        DWORD cb;
        DWORD ticks;

        struct _Anonymous_54
        {
            BYTE hour;
            BYTE min;
            BYTE sec;
            BYTE frame;
            BYTE fps;
            BYTE dummy;
            BYTE[2] pad;
        }

        _Anonymous_54 smpte;

        struct _Anonymous_55
        {
            DWORD songptrpos;
        }

        _Anonymous_55 midi;
    }

    _Anonymous_53 u;
}

alias MMTIME = mmtime_tag;
alias PMMTIME = mmtime_tag*;
alias NPMMTIME = mmtime_tag*;
alias LPMMTIME = mmtime_tag*;

struct HDRVR__
{
    int unused;
}

alias HDRVR = HDRVR__*;

struct DRVCONFIGINFOEX
{
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
}

alias PDRVCONFIGINFOEX = DRVCONFIGINFOEX*;
alias NPDRVCONFIGINFOEX = DRVCONFIGINFOEX*;
alias LPDRVCONFIGINFOEX = DRVCONFIGINFOEX*;

struct tagDRVCONFIGINFO
{
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
}

alias DRVCONFIGINFO = tagDRVCONFIGINFO;
alias PDRVCONFIGINFO = tagDRVCONFIGINFO*;
alias NPDRVCONFIGINFO = tagDRVCONFIGINFO*;
alias LPDRVCONFIGINFO = tagDRVCONFIGINFO*;

alias DRIVERPROC = long function (DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

LRESULT CloseDriver (HDRVR hDriver, LPARAM lParam1, LPARAM lParam2);
HDRVR OpenDriver (LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2);
LRESULT SendDriverMessage (HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2);
HMODULE DrvGetModuleHandle (HDRVR hDriver);
HMODULE GetDriverModuleHandle (HDRVR hDriver);
LRESULT DefDriverProc (DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2);

alias DRVCALLBACK = void function (HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

alias LPDRVCALLBACK = void function ();
alias PDRVCALLBACK = void function ();

WINBOOL sndPlaySoundA (LPCSTR pszSound, UINT fuSound);
WINBOOL sndPlaySoundW (LPCWSTR pszSound, UINT fuSound);

WINBOOL PlaySoundA (LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
WINBOOL PlaySoundW (LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);

struct HWAVE__
{
    int unused;
}

alias HWAVE = HWAVE__*;

struct HWAVEIN__
{
    int unused;
}

alias HWAVEIN = HWAVEIN__*;

struct HWAVEOUT__
{
    int unused;
}

alias HWAVEOUT = HWAVEOUT__*;
alias LPHWAVEIN = HWAVEIN__**;
alias LPHWAVEOUT = HWAVEOUT__**;
alias WAVECALLBACK = void function ();
alias LPWAVECALLBACK = void function ();

struct wavehdr_tag
{
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    wavehdr_tag* lpNext;
    DWORD_PTR reserved;
}

alias WAVEHDR = wavehdr_tag;
alias PWAVEHDR = wavehdr_tag*;
alias NPWAVEHDR = wavehdr_tag*;
alias LPWAVEHDR = wavehdr_tag*;

struct tagWAVEOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
}

alias WAVEOUTCAPSA = tagWAVEOUTCAPSA;
alias PWAVEOUTCAPSA = tagWAVEOUTCAPSA*;
alias NPWAVEOUTCAPSA = tagWAVEOUTCAPSA*;
alias LPWAVEOUTCAPSA = tagWAVEOUTCAPSA*;

struct tagWAVEOUTCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
}

alias WAVEOUTCAPSW = tagWAVEOUTCAPSW;
alias PWAVEOUTCAPSW = tagWAVEOUTCAPSW*;
alias NPWAVEOUTCAPSW = tagWAVEOUTCAPSW*;
alias LPWAVEOUTCAPSW = tagWAVEOUTCAPSW*;

alias WAVEOUTCAPS = tagWAVEOUTCAPSA;
alias PWAVEOUTCAPS = tagWAVEOUTCAPSA*;
alias NPWAVEOUTCAPS = tagWAVEOUTCAPSA*;
alias LPWAVEOUTCAPS = tagWAVEOUTCAPSA*;

struct tagWAVEOUTCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias WAVEOUTCAPS2A = tagWAVEOUTCAPS2A;
alias PWAVEOUTCAPS2A = tagWAVEOUTCAPS2A*;
alias NPWAVEOUTCAPS2A = tagWAVEOUTCAPS2A*;
alias LPWAVEOUTCAPS2A = tagWAVEOUTCAPS2A*;

struct tagWAVEOUTCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias WAVEOUTCAPS2W = tagWAVEOUTCAPS2W;
alias PWAVEOUTCAPS2W = tagWAVEOUTCAPS2W*;
alias NPWAVEOUTCAPS2W = tagWAVEOUTCAPS2W*;
alias LPWAVEOUTCAPS2W = tagWAVEOUTCAPS2W*;

alias WAVEOUTCAPS2 = tagWAVEOUTCAPS2A;
alias PWAVEOUTCAPS2 = tagWAVEOUTCAPS2A*;
alias NPWAVEOUTCAPS2 = tagWAVEOUTCAPS2A*;
alias LPWAVEOUTCAPS2 = tagWAVEOUTCAPS2A*;

struct tagWAVEINCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
}

alias WAVEINCAPSA = tagWAVEINCAPSA;
alias PWAVEINCAPSA = tagWAVEINCAPSA*;
alias NPWAVEINCAPSA = tagWAVEINCAPSA*;
alias LPWAVEINCAPSA = tagWAVEINCAPSA*;

struct tagWAVEINCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
}

alias WAVEINCAPSW = tagWAVEINCAPSW;
alias PWAVEINCAPSW = tagWAVEINCAPSW*;
alias NPWAVEINCAPSW = tagWAVEINCAPSW*;
alias LPWAVEINCAPSW = tagWAVEINCAPSW*;

alias WAVEINCAPS = tagWAVEINCAPSA;
alias PWAVEINCAPS = tagWAVEINCAPSA*;
alias NPWAVEINCAPS = tagWAVEINCAPSA*;
alias LPWAVEINCAPS = tagWAVEINCAPSA*;

struct tagWAVEINCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias WAVEINCAPS2A = tagWAVEINCAPS2A;
alias PWAVEINCAPS2A = tagWAVEINCAPS2A*;
alias NPWAVEINCAPS2A = tagWAVEINCAPS2A*;
alias LPWAVEINCAPS2A = tagWAVEINCAPS2A*;

struct tagWAVEINCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias WAVEINCAPS2W = tagWAVEINCAPS2W;
alias PWAVEINCAPS2W = tagWAVEINCAPS2W*;
alias NPWAVEINCAPS2W = tagWAVEINCAPS2W*;
alias LPWAVEINCAPS2W = tagWAVEINCAPS2W*;

alias WAVEINCAPS2 = tagWAVEINCAPS2A;
alias PWAVEINCAPS2 = tagWAVEINCAPS2A*;
alias NPWAVEINCAPS2 = tagWAVEINCAPS2A*;
alias LPWAVEINCAPS2 = tagWAVEINCAPS2A*;

struct waveformat_tag
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
}

alias WAVEFORMAT = waveformat_tag;
alias PWAVEFORMAT = waveformat_tag*;
alias NPWAVEFORMAT = waveformat_tag*;
alias LPWAVEFORMAT = waveformat_tag*;

struct pcmwaveformat_tag
{
    WAVEFORMAT wf;
    WORD wBitsPerSample;
}

alias PCMWAVEFORMAT = pcmwaveformat_tag;
alias PPCMWAVEFORMAT = pcmwaveformat_tag*;
alias NPPCMWAVEFORMAT = pcmwaveformat_tag*;
alias LPPCMWAVEFORMAT = pcmwaveformat_tag*;

struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
}

alias WAVEFORMATEX = tWAVEFORMATEX;
alias PWAVEFORMATEX = tWAVEFORMATEX*;
alias NPWAVEFORMATEX = tWAVEFORMATEX*;
alias LPWAVEFORMATEX = tWAVEFORMATEX*;

alias LPCWAVEFORMATEX = const(tWAVEFORMATEX)*;

UINT waveOutGetNumDevs ();
MMRESULT waveOutGetDevCapsA (UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc);
MMRESULT waveOutGetDevCapsW (UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc);

MMRESULT waveOutGetVolume (HWAVEOUT hwo, LPDWORD pdwVolume);
MMRESULT waveOutSetVolume (HWAVEOUT hwo, DWORD dwVolume);
MMRESULT waveOutGetErrorTextA (MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT waveOutGetErrorTextW (MMRESULT mmrError, LPWSTR pszText, UINT cchText);

MMRESULT waveOutOpen (LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT waveOutClose (HWAVEOUT hwo);
MMRESULT waveOutPrepareHeader (HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveOutUnprepareHeader (HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveOutWrite (HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveOutPause (HWAVEOUT hwo);
MMRESULT waveOutRestart (HWAVEOUT hwo);
MMRESULT waveOutReset (HWAVEOUT hwo);
MMRESULT waveOutBreakLoop (HWAVEOUT hwo);
MMRESULT waveOutGetPosition (HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
MMRESULT waveOutGetPitch (HWAVEOUT hwo, LPDWORD pdwPitch);
MMRESULT waveOutSetPitch (HWAVEOUT hwo, DWORD dwPitch);
MMRESULT waveOutGetPlaybackRate (HWAVEOUT hwo, LPDWORD pdwRate);
MMRESULT waveOutSetPlaybackRate (HWAVEOUT hwo, DWORD dwRate);
MMRESULT waveOutGetID (HWAVEOUT hwo, LPUINT puDeviceID);
MMRESULT waveOutMessage (HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
UINT waveInGetNumDevs ();
MMRESULT waveInGetDevCapsA (UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic);
MMRESULT waveInGetDevCapsW (UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic);

MMRESULT waveInGetErrorTextA (MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT waveInGetErrorTextW (MMRESULT mmrError, LPWSTR pszText, UINT cchText);

MMRESULT waveInOpen (LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT waveInClose (HWAVEIN hwi);
MMRESULT waveInPrepareHeader (HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveInUnprepareHeader (HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveInAddBuffer (HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveInStart (HWAVEIN hwi);
MMRESULT waveInStop (HWAVEIN hwi);
MMRESULT waveInReset (HWAVEIN hwi);
MMRESULT waveInGetPosition (HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
MMRESULT waveInGetID (HWAVEIN hwi, LPUINT puDeviceID);
MMRESULT waveInMessage (HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);

struct HMIDI__
{
    int unused;
}

alias HMIDI = HMIDI__*;

struct HMIDIIN__
{
    int unused;
}

alias HMIDIIN = HMIDIIN__*;

struct HMIDIOUT__
{
    int unused;
}

alias HMIDIOUT = HMIDIOUT__*;

struct HMIDISTRM__
{
    int unused;
}

alias HMIDISTRM = HMIDISTRM__*;
alias LPHMIDI = HMIDI__**;
alias LPHMIDIIN = HMIDIIN__**;
alias LPHMIDIOUT = HMIDIOUT__**;
alias LPHMIDISTRM = HMIDISTRM__**;
alias MIDICALLBACK = void function ();
alias LPMIDICALLBACK = void function ();

alias PATCHARRAY = ushort[128];
alias LPPATCHARRAY = ushort*;
alias KEYARRAY = ushort[128];
alias LPKEYARRAY = ushort*;

struct tagMIDIOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
}

alias MIDIOUTCAPSA = tagMIDIOUTCAPSA;
alias PMIDIOUTCAPSA = tagMIDIOUTCAPSA*;
alias NPMIDIOUTCAPSA = tagMIDIOUTCAPSA*;
alias LPMIDIOUTCAPSA = tagMIDIOUTCAPSA*;

struct tagMIDIOUTCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
}

alias MIDIOUTCAPSW = tagMIDIOUTCAPSW;
alias PMIDIOUTCAPSW = tagMIDIOUTCAPSW*;
alias NPMIDIOUTCAPSW = tagMIDIOUTCAPSW*;
alias LPMIDIOUTCAPSW = tagMIDIOUTCAPSW*;

alias MIDIOUTCAPS = tagMIDIOUTCAPSA;
alias PMIDIOUTCAPS = tagMIDIOUTCAPSA*;
alias NPMIDIOUTCAPS = tagMIDIOUTCAPSA*;
alias LPMIDIOUTCAPS = tagMIDIOUTCAPSA*;

struct tagMIDIOUTCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias MIDIOUTCAPS2A = tagMIDIOUTCAPS2A;
alias PMIDIOUTCAPS2A = tagMIDIOUTCAPS2A*;
alias NPMIDIOUTCAPS2A = tagMIDIOUTCAPS2A*;
alias LPMIDIOUTCAPS2A = tagMIDIOUTCAPS2A*;

struct tagMIDIOUTCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias MIDIOUTCAPS2W = tagMIDIOUTCAPS2W;
alias PMIDIOUTCAPS2W = tagMIDIOUTCAPS2W*;
alias NPMIDIOUTCAPS2W = tagMIDIOUTCAPS2W*;
alias LPMIDIOUTCAPS2W = tagMIDIOUTCAPS2W*;

alias MIDIOUTCAPS2 = tagMIDIOUTCAPS2A;
alias PMIDIOUTCAPS2 = tagMIDIOUTCAPS2A*;
alias NPMIDIOUTCAPS2 = tagMIDIOUTCAPS2A*;
alias LPMIDIOUTCAPS2 = tagMIDIOUTCAPS2A*;

struct tagMIDIINCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD dwSupport;
}

alias MIDIINCAPSA = tagMIDIINCAPSA;
alias PMIDIINCAPSA = tagMIDIINCAPSA*;
alias NPMIDIINCAPSA = tagMIDIINCAPSA*;
alias LPMIDIINCAPSA = tagMIDIINCAPSA*;

struct tagMIDIINCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD dwSupport;
}

alias MIDIINCAPSW = tagMIDIINCAPSW;
alias PMIDIINCAPSW = tagMIDIINCAPSW*;
alias NPMIDIINCAPSW = tagMIDIINCAPSW*;
alias LPMIDIINCAPSW = tagMIDIINCAPSW*;

alias MIDIINCAPS = tagMIDIINCAPSA;
alias PMIDIINCAPS = tagMIDIINCAPSA*;
alias NPMIDIINCAPS = tagMIDIINCAPSA*;
alias LPMIDIINCAPS = tagMIDIINCAPSA*;

struct tagMIDIINCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias MIDIINCAPS2A = tagMIDIINCAPS2A;
alias PMIDIINCAPS2A = tagMIDIINCAPS2A*;
alias NPMIDIINCAPS2A = tagMIDIINCAPS2A*;
alias LPMIDIINCAPS2A = tagMIDIINCAPS2A*;

struct tagMIDIINCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias MIDIINCAPS2W = tagMIDIINCAPS2W;
alias PMIDIINCAPS2W = tagMIDIINCAPS2W*;
alias NPMIDIINCAPS2W = tagMIDIINCAPS2W*;
alias LPMIDIINCAPS2W = tagMIDIINCAPS2W*;

alias MIDIINCAPS2 = tagMIDIINCAPS2A;
alias PMIDIINCAPS2 = tagMIDIINCAPS2A*;
alias NPMIDIINCAPS2 = tagMIDIINCAPS2A*;
alias LPMIDIINCAPS2 = tagMIDIINCAPS2A*;

struct midihdr_tag
{
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    midihdr_tag* lpNext;
    DWORD_PTR reserved;
    DWORD dwOffset;
    DWORD_PTR[8] dwReserved;
}

alias MIDIHDR = midihdr_tag;
alias PMIDIHDR = midihdr_tag*;
alias NPMIDIHDR = midihdr_tag*;
alias LPMIDIHDR = midihdr_tag*;

struct midievent_tag
{
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD[1] dwParms;
}

alias MIDIEVENT = midievent_tag;

struct midistrmbuffver_tag
{
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
}

alias MIDISTRMBUFFVER = midistrmbuffver_tag;

struct midiproptimediv_tag
{
    DWORD cbStruct;
    DWORD dwTimeDiv;
}

alias MIDIPROPTIMEDIV = midiproptimediv_tag;
alias LPMIDIPROPTIMEDIV = midiproptimediv_tag*;

struct midiproptempo_tag
{
    DWORD cbStruct;
    DWORD dwTempo;
}

alias MIDIPROPTEMPO = midiproptempo_tag;
alias LPMIDIPROPTEMPO = midiproptempo_tag*;

UINT midiOutGetNumDevs ();
MMRESULT midiStreamOpen (LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT midiStreamClose (HMIDISTRM hms);
MMRESULT midiStreamProperty (HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty);
MMRESULT midiStreamPosition (HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt);
MMRESULT midiStreamOut (HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiStreamPause (HMIDISTRM hms);
MMRESULT midiStreamRestart (HMIDISTRM hms);
MMRESULT midiStreamStop (HMIDISTRM hms);
MMRESULT midiConnect (HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
MMRESULT midiDisconnect (HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
MMRESULT midiOutGetDevCapsA (UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc);
MMRESULT midiOutGetDevCapsW (UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc);

MMRESULT midiOutGetVolume (HMIDIOUT hmo, LPDWORD pdwVolume);
MMRESULT midiOutSetVolume (HMIDIOUT hmo, DWORD dwVolume);
MMRESULT midiOutGetErrorTextA (MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT midiOutGetErrorTextW (MMRESULT mmrError, LPWSTR pszText, UINT cchText);

MMRESULT midiOutOpen (LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT midiOutClose (HMIDIOUT hmo);
MMRESULT midiOutPrepareHeader (HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiOutUnprepareHeader (HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiOutShortMsg (HMIDIOUT hmo, DWORD dwMsg);
MMRESULT midiOutLongMsg (HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiOutReset (HMIDIOUT hmo);
MMRESULT midiOutCachePatches (HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache);
MMRESULT midiOutCacheDrumPatches (HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache);
MMRESULT midiOutGetID (HMIDIOUT hmo, LPUINT puDeviceID);
MMRESULT midiOutMessage (HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
UINT midiInGetNumDevs ();
MMRESULT midiInGetDevCapsA (UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic);
MMRESULT midiInGetDevCapsW (UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic);

MMRESULT midiInGetErrorTextA (MMRESULT mmrError, LPSTR pszText, UINT cchText);
MMRESULT midiInGetErrorTextW (MMRESULT mmrError, LPWSTR pszText, UINT cchText);

MMRESULT midiInOpen (LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT midiInClose (HMIDIIN hmi);
MMRESULT midiInPrepareHeader (HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiInUnprepareHeader (HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiInAddBuffer (HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
MMRESULT midiInStart (HMIDIIN hmi);
MMRESULT midiInStop (HMIDIIN hmi);
MMRESULT midiInReset (HMIDIIN hmi);
MMRESULT midiInGetID (HMIDIIN hmi, LPUINT puDeviceID);
MMRESULT midiInMessage (HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);

struct tagAUXCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
}

alias AUXCAPSA = tagAUXCAPSA;
alias PAUXCAPSA = tagAUXCAPSA*;
alias NPAUXCAPSA = tagAUXCAPSA*;
alias LPAUXCAPSA = tagAUXCAPSA*;

struct tagAUXCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
}

alias AUXCAPSW = tagAUXCAPSW;
alias PAUXCAPSW = tagAUXCAPSW*;
alias NPAUXCAPSW = tagAUXCAPSW*;
alias LPAUXCAPSW = tagAUXCAPSW*;

alias AUXCAPS = tagAUXCAPSA;
alias PAUXCAPS = tagAUXCAPSA*;
alias NPAUXCAPS = tagAUXCAPSA*;
alias LPAUXCAPS = tagAUXCAPSA*;

struct tagAUXCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias AUXCAPS2A = tagAUXCAPS2A;
alias PAUXCAPS2A = tagAUXCAPS2A*;
alias NPAUXCAPS2A = tagAUXCAPS2A*;
alias LPAUXCAPS2A = tagAUXCAPS2A*;

struct tagAUXCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias AUXCAPS2W = tagAUXCAPS2W;
alias PAUXCAPS2W = tagAUXCAPS2W*;
alias NPAUXCAPS2W = tagAUXCAPS2W*;
alias LPAUXCAPS2W = tagAUXCAPS2W*;

alias AUXCAPS2 = tagAUXCAPS2A;
alias PAUXCAPS2 = tagAUXCAPS2A*;
alias NPAUXCAPS2 = tagAUXCAPS2A*;
alias LPAUXCAPS2 = tagAUXCAPS2A*;

UINT auxGetNumDevs ();
MMRESULT auxGetDevCapsA (UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac);
MMRESULT auxGetDevCapsW (UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac);

MMRESULT auxSetVolume (UINT uDeviceID, DWORD dwVolume);
MMRESULT auxGetVolume (UINT uDeviceID, LPDWORD pdwVolume);
MMRESULT auxOutMessage (UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);

struct HMIXEROBJ__
{
    int unused;
}

alias HMIXEROBJ = HMIXEROBJ__*;
alias LPHMIXEROBJ = HMIXEROBJ__**;

struct HMIXER__
{
    int unused;
}

alias HMIXER = HMIXER__*;
alias LPHMIXER = HMIXER__**;

UINT mixerGetNumDevs ();

struct tagMIXERCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
}

alias MIXERCAPSA = tagMIXERCAPSA;
alias PMIXERCAPSA = tagMIXERCAPSA*;
alias LPMIXERCAPSA = tagMIXERCAPSA*;

struct tagMIXERCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
}

alias MIXERCAPSW = tagMIXERCAPSW;
alias PMIXERCAPSW = tagMIXERCAPSW*;
alias LPMIXERCAPSW = tagMIXERCAPSW*;

alias MIXERCAPS = tagMIXERCAPSA;
alias PMIXERCAPS = tagMIXERCAPSA*;
alias LPMIXERCAPS = tagMIXERCAPSA*;

struct tagMIXERCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR[32] szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias MIXERCAPS2A = tagMIXERCAPS2A;
alias PMIXERCAPS2A = tagMIXERCAPS2A*;
alias LPMIXERCAPS2A = tagMIXERCAPS2A*;

struct tagMIXERCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR[32] szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias MIXERCAPS2W = tagMIXERCAPS2W;
alias PMIXERCAPS2W = tagMIXERCAPS2W*;
alias LPMIXERCAPS2W = tagMIXERCAPS2W*;

alias MIXERCAPS2 = tagMIXERCAPS2A;
alias PMIXERCAPS2 = tagMIXERCAPS2A*;
alias LPMIXERCAPS2 = tagMIXERCAPS2A*;

MMRESULT mixerGetDevCapsA (UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps);
MMRESULT mixerGetDevCapsW (UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps);

MMRESULT mixerOpen (LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
MMRESULT mixerClose (HMIXER hmx);
DWORD mixerMessage (HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);

struct tagMIXERLINEA
{
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR[16] szShortName;
    CHAR[64] szName;

    struct _Anonymous_56
    {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR[32] szPname;
    }

    _Anonymous_56 Target;
}

alias MIXERLINEA = tagMIXERLINEA;
alias PMIXERLINEA = tagMIXERLINEA*;
alias LPMIXERLINEA = tagMIXERLINEA*;

struct tagMIXERLINEW
{
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR[16] szShortName;
    WCHAR[64] szName;

    struct _Anonymous_57
    {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR[32] szPname;
    }

    _Anonymous_57 Target;
}

alias MIXERLINEW = tagMIXERLINEW;
alias PMIXERLINEW = tagMIXERLINEW*;
alias LPMIXERLINEW = tagMIXERLINEW*;

alias MIXERLINE = tagMIXERLINEA;
alias PMIXERLINE = tagMIXERLINEA*;
alias LPMIXERLINE = tagMIXERLINEA*;

MMRESULT mixerGetLineInfoA (HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo);
MMRESULT mixerGetLineInfoW (HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo);

MMRESULT mixerGetID (HMIXEROBJ hmxobj, UINT* puMxId, DWORD fdwId);

struct tagMIXERCONTROLA
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR[16] szShortName;
    CHAR[64] szName;

    union _Anonymous_58
    {
        struct
        {
            LONG lMinimum;
            LONG lMaximum;
        }

        struct
        {
            DWORD dwMinimum;
            DWORD dwMaximum;
        }

        DWORD[6] dwReserved;
    }

    _Anonymous_58 Bounds;

    union _Anonymous_59
    {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD[6] dwReserved;
    }

    _Anonymous_59 Metrics;
}

alias MIXERCONTROLA = tagMIXERCONTROLA;
alias PMIXERCONTROLA = tagMIXERCONTROLA*;
alias LPMIXERCONTROLA = tagMIXERCONTROLA*;

struct tagMIXERCONTROLW
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR[16] szShortName;
    WCHAR[64] szName;

    union _Anonymous_60
    {
        struct
        {
            LONG lMinimum;
            LONG lMaximum;
        }

        struct
        {
            DWORD dwMinimum;
            DWORD dwMaximum;
        }

        DWORD[6] dwReserved;
    }

    _Anonymous_60 Bounds;

    union _Anonymous_61
    {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD[6] dwReserved;
    }

    _Anonymous_61 Metrics;
}

alias MIXERCONTROLW = tagMIXERCONTROLW;
alias PMIXERCONTROLW = tagMIXERCONTROLW*;
alias LPMIXERCONTROLW = tagMIXERCONTROLW*;

alias MIXERCONTROL = tagMIXERCONTROLA;
alias PMIXERCONTROL = tagMIXERCONTROLA*;
alias LPMIXERCONTROL = tagMIXERCONTROLA*;

struct tagMIXERLINECONTROLSA
{
    DWORD cbStruct;
    DWORD dwLineID;

    union
    {
        DWORD dwControlID;
        DWORD dwControlType;
    }

    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
}

alias MIXERLINECONTROLSA = tagMIXERLINECONTROLSA;
alias PMIXERLINECONTROLSA = tagMIXERLINECONTROLSA*;
alias LPMIXERLINECONTROLSA = tagMIXERLINECONTROLSA*;

struct tagMIXERLINECONTROLSW
{
    DWORD cbStruct;
    DWORD dwLineID;

    union
    {
        DWORD dwControlID;
        DWORD dwControlType;
    }

    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
}

alias MIXERLINECONTROLSW = tagMIXERLINECONTROLSW;
alias PMIXERLINECONTROLSW = tagMIXERLINECONTROLSW*;
alias LPMIXERLINECONTROLSW = tagMIXERLINECONTROLSW*;

alias MIXERLINECONTROLS = tagMIXERLINECONTROLSA;
alias PMIXERLINECONTROLS = tagMIXERLINECONTROLSA*;
alias LPMIXERLINECONTROLS = tagMIXERLINECONTROLSA*;

MMRESULT mixerGetLineControlsA (HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls);
MMRESULT mixerGetLineControlsW (HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls);

struct tMIXERCONTROLDETAILS
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;

    union
    {
        HWND hwndOwner;
        DWORD cMultipleItems;
    }

    DWORD cbDetails;
    LPVOID paDetails;
}

alias MIXERCONTROLDETAILS = tMIXERCONTROLDETAILS;
alias PMIXERCONTROLDETAILS = tMIXERCONTROLDETAILS*;
alias LPMIXERCONTROLDETAILS = tMIXERCONTROLDETAILS*;

struct tagMIXERCONTROLDETAILS_LISTTEXTA
{
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR[64] szName;
}

alias MIXERCONTROLDETAILS_LISTTEXTA = tagMIXERCONTROLDETAILS_LISTTEXTA;
alias PMIXERCONTROLDETAILS_LISTTEXTA = tagMIXERCONTROLDETAILS_LISTTEXTA*;
alias LPMIXERCONTROLDETAILS_LISTTEXTA = tagMIXERCONTROLDETAILS_LISTTEXTA*;

struct tagMIXERCONTROLDETAILS_LISTTEXTW
{
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR[64] szName;
}

alias MIXERCONTROLDETAILS_LISTTEXTW = tagMIXERCONTROLDETAILS_LISTTEXTW;
alias PMIXERCONTROLDETAILS_LISTTEXTW = tagMIXERCONTROLDETAILS_LISTTEXTW*;
alias LPMIXERCONTROLDETAILS_LISTTEXTW = tagMIXERCONTROLDETAILS_LISTTEXTW*;

alias MIXERCONTROLDETAILS_LISTTEXT = tagMIXERCONTROLDETAILS_LISTTEXTA;
alias PMIXERCONTROLDETAILS_LISTTEXT = tagMIXERCONTROLDETAILS_LISTTEXTA*;
alias LPMIXERCONTROLDETAILS_LISTTEXT = tagMIXERCONTROLDETAILS_LISTTEXTA*;

struct tMIXERCONTROLDETAILS_BOOLEAN
{
    LONG fValue;
}

alias MIXERCONTROLDETAILS_BOOLEAN = tMIXERCONTROLDETAILS_BOOLEAN;
alias PMIXERCONTROLDETAILS_BOOLEAN = tMIXERCONTROLDETAILS_BOOLEAN*;
alias LPMIXERCONTROLDETAILS_BOOLEAN = tMIXERCONTROLDETAILS_BOOLEAN*;

struct tMIXERCONTROLDETAILS_SIGNED
{
    LONG lValue;
}

alias MIXERCONTROLDETAILS_SIGNED = tMIXERCONTROLDETAILS_SIGNED;
alias PMIXERCONTROLDETAILS_SIGNED = tMIXERCONTROLDETAILS_SIGNED*;
alias LPMIXERCONTROLDETAILS_SIGNED = tMIXERCONTROLDETAILS_SIGNED*;

struct tMIXERCONTROLDETAILS_UNSIGNED
{
    DWORD dwValue;
}

alias MIXERCONTROLDETAILS_UNSIGNED = tMIXERCONTROLDETAILS_UNSIGNED;
alias PMIXERCONTROLDETAILS_UNSIGNED = tMIXERCONTROLDETAILS_UNSIGNED*;
alias LPMIXERCONTROLDETAILS_UNSIGNED = tMIXERCONTROLDETAILS_UNSIGNED*;

MMRESULT mixerGetControlDetailsA (HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
MMRESULT mixerGetControlDetailsW (HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);

MMRESULT mixerSetControlDetails (HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);

alias TIMECALLBACK = void function (UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
alias LPTIMECALLBACK = void function ();

struct timecaps_tag
{
    UINT wPeriodMin;
    UINT wPeriodMax;
}

alias TIMECAPS = timecaps_tag;
alias PTIMECAPS = timecaps_tag*;
alias NPTIMECAPS = timecaps_tag*;
alias LPTIMECAPS = timecaps_tag*;

MMRESULT timeGetSystemTime (LPMMTIME pmmt, UINT cbmmt);
DWORD timeGetTime ();
MMRESULT timeSetEvent (UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent);
MMRESULT timeKillEvent (UINT uTimerID);
MMRESULT timeGetDevCaps (LPTIMECAPS ptc, UINT cbtc);
MMRESULT timeBeginPeriod (UINT uPeriod);
MMRESULT timeEndPeriod (UINT uPeriod);

struct tagJOYCAPSA
{
    WORD wMid;
    WORD wPid;
    CHAR[32] szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR[32] szRegKey;
    CHAR[260] szOEMVxD;
}

alias JOYCAPSA = tagJOYCAPSA;
alias PJOYCAPSA = tagJOYCAPSA*;
alias NPJOYCAPSA = tagJOYCAPSA*;
alias LPJOYCAPSA = tagJOYCAPSA*;

struct tagJOYCAPSW
{
    WORD wMid;
    WORD wPid;
    WCHAR[32] szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR[32] szRegKey;
    WCHAR[260] szOEMVxD;
}

alias JOYCAPSW = tagJOYCAPSW;
alias PJOYCAPSW = tagJOYCAPSW*;
alias NPJOYCAPSW = tagJOYCAPSW*;
alias LPJOYCAPSW = tagJOYCAPSW*;

alias JOYCAPS = tagJOYCAPSA;
alias PJOYCAPS = tagJOYCAPSA*;
alias NPJOYCAPS = tagJOYCAPSA*;
alias LPJOYCAPS = tagJOYCAPSA*;

struct tagJOYCAPS2A
{
    WORD wMid;
    WORD wPid;
    CHAR[32] szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR[32] szRegKey;
    CHAR[260] szOEMVxD;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias JOYCAPS2A = tagJOYCAPS2A;
alias PJOYCAPS2A = tagJOYCAPS2A*;
alias NPJOYCAPS2A = tagJOYCAPS2A*;
alias LPJOYCAPS2A = tagJOYCAPS2A*;

struct tagJOYCAPS2W
{
    WORD wMid;
    WORD wPid;
    WCHAR[32] szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR[32] szRegKey;
    WCHAR[260] szOEMVxD;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}

alias JOYCAPS2W = tagJOYCAPS2W;
alias PJOYCAPS2W = tagJOYCAPS2W*;
alias NPJOYCAPS2W = tagJOYCAPS2W*;
alias LPJOYCAPS2W = tagJOYCAPS2W*;

alias JOYCAPS2 = tagJOYCAPS2A;
alias PJOYCAPS2 = tagJOYCAPS2A*;
alias NPJOYCAPS2 = tagJOYCAPS2A*;
alias LPJOYCAPS2 = tagJOYCAPS2A*;

struct joyinfo_tag
{
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
}

alias JOYINFO = joyinfo_tag;
alias PJOYINFO = joyinfo_tag*;
alias NPJOYINFO = joyinfo_tag*;
alias LPJOYINFO = joyinfo_tag*;

struct joyinfoex_tag
{
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
}

alias JOYINFOEX = joyinfoex_tag;
alias PJOYINFOEX = joyinfoex_tag*;
alias NPJOYINFOEX = joyinfoex_tag*;
alias LPJOYINFOEX = joyinfoex_tag*;

UINT joyGetNumDevs ();
MMRESULT joyGetDevCapsA (UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc);
MMRESULT joyGetDevCapsW (UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc);

MMRESULT joyGetPos (UINT uJoyID, LPJOYINFO pji);
MMRESULT joyGetPosEx (UINT uJoyID, LPJOYINFOEX pji);
MMRESULT joyGetThreshold (UINT uJoyID, LPUINT puThreshold);
MMRESULT joyReleaseCapture (UINT uJoyID);
MMRESULT joySetCapture (HWND hwnd, UINT uJoyID, UINT uPeriod, WINBOOL fChanged);
MMRESULT joySetThreshold (UINT uJoyID, UINT uThreshold);

alias FOURCC = c_ulong;
alias HPSTR = char*;

struct HMMIO__
{
    int unused;
}

alias HMMIO = HMMIO__*;
alias MMIOPROC = long function (LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
alias LPMMIOPROC = long function ();

struct _MMIOINFO
{
    DWORD dwFlags;
    FOURCC fccIOProc;
    LPMMIOPROC pIOProc;
    UINT wErrorRet;
    HTASK htask;
    LONG cchBuffer;
    HPSTR pchBuffer;
    HPSTR pchNext;
    HPSTR pchEndRead;
    HPSTR pchEndWrite;
    LONG lBufOffset;
    LONG lDiskOffset;
    DWORD[3] adwInfo;
    DWORD dwReserved1;
    DWORD dwReserved2;
    HMMIO hmmio;
}

alias MMIOINFO = _MMIOINFO;
alias PMMIOINFO = _MMIOINFO*;
alias NPMMIOINFO = _MMIOINFO*;
alias LPMMIOINFO = _MMIOINFO*;

alias LPCMMIOINFO = const(_MMIOINFO)*;

struct _MMCKINFO
{
    FOURCC ckid;
    DWORD cksize;
    FOURCC fccType;
    DWORD dwDataOffset;
    DWORD dwFlags;
}

alias MMCKINFO = _MMCKINFO;
alias PMMCKINFO = _MMCKINFO*;
alias NPMMCKINFO = _MMCKINFO*;
alias LPMMCKINFO = _MMCKINFO*;

alias LPCMMCKINFO = const(_MMCKINFO)*;

FOURCC mmioStringToFOURCCA (LPCSTR sz, UINT uFlags);
FOURCC mmioStringToFOURCCW (LPCWSTR sz, UINT uFlags);

LPMMIOPROC mmioInstallIOProcA (FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
LPMMIOPROC mmioInstallIOProcW (FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);

HMMIO mmioOpenA (LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
HMMIO mmioOpenW (LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);

MMRESULT mmioRenameA (LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
MMRESULT mmioRenameW (LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);

MMRESULT mmioClose (HMMIO hmmio, UINT fuClose);
LONG mmioRead (HMMIO hmmio, HPSTR pch, LONG cch);
LONG mmioWrite (HMMIO hmmio, const(char)* pch, LONG cch);
LONG mmioSeek (HMMIO hmmio, LONG lOffset, int iOrigin);
MMRESULT mmioGetInfo (HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo);
MMRESULT mmioSetInfo (HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo);
MMRESULT mmioSetBuffer (HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer);
MMRESULT mmioFlush (HMMIO hmmio, UINT fuFlush);
MMRESULT mmioAdvance (HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance);
LRESULT mmioSendMessage (HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
MMRESULT mmioDescend (HMMIO hmmio, LPMMCKINFO pmmcki, const(MMCKINFO)* pmmckiParent, UINT fuDescend);
MMRESULT mmioAscend (HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend);
MMRESULT mmioCreateChunk (HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate);

alias MCIERROR = c_ulong;

alias MCIDEVICEID = uint;

alias YIELDPROC = uint function (MCIDEVICEID mciId, DWORD dwYieldData);

MCIERROR mciSendCommandA (MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
MCIERROR mciSendCommandW (MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);

MCIERROR mciSendStringA (LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
MCIERROR mciSendStringW (LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);

MCIDEVICEID mciGetDeviceIDA (LPCSTR pszDevice);
MCIDEVICEID mciGetDeviceIDW (LPCWSTR pszDevice);

MCIDEVICEID mciGetDeviceIDFromElementIDA (DWORD dwElementID, LPCSTR lpstrType);
MCIDEVICEID mciGetDeviceIDFromElementIDW (DWORD dwElementID, LPCWSTR lpstrType);

WINBOOL mciGetErrorStringA (MCIERROR mcierr, LPSTR pszText, UINT cchText);
WINBOOL mciGetErrorStringW (MCIERROR mcierr, LPWSTR pszText, UINT cchText);

WINBOOL mciSetYieldProc (MCIDEVICEID mciId, YIELDPROC fpYieldProc, DWORD dwYieldData);
HTASK mciGetCreatorTask (MCIDEVICEID mciId);
YIELDPROC mciGetYieldProc (MCIDEVICEID mciId, LPDWORD pdwYieldData);

struct tagMCI_GENERIC_PARMS
{
    DWORD_PTR dwCallback;
}

alias MCI_GENERIC_PARMS = tagMCI_GENERIC_PARMS;
alias PMCI_GENERIC_PARMS = tagMCI_GENERIC_PARMS*;
alias LPMCI_GENERIC_PARMS = tagMCI_GENERIC_PARMS*;

struct tagMCI_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
}

alias MCI_OPEN_PARMSA = tagMCI_OPEN_PARMSA;
alias PMCI_OPEN_PARMSA = tagMCI_OPEN_PARMSA*;
alias LPMCI_OPEN_PARMSA = tagMCI_OPEN_PARMSA*;

struct tagMCI_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
}

alias MCI_OPEN_PARMSW = tagMCI_OPEN_PARMSW;
alias PMCI_OPEN_PARMSW = tagMCI_OPEN_PARMSW*;
alias LPMCI_OPEN_PARMSW = tagMCI_OPEN_PARMSW*;

alias MCI_OPEN_PARMS = tagMCI_OPEN_PARMSA;
alias PMCI_OPEN_PARMS = tagMCI_OPEN_PARMSA*;
alias LPMCI_OPEN_PARMS = tagMCI_OPEN_PARMSA*;

struct tagMCI_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
}

alias MCI_PLAY_PARMS = tagMCI_PLAY_PARMS;
alias PMCI_PLAY_PARMS = tagMCI_PLAY_PARMS*;
alias LPMCI_PLAY_PARMS = tagMCI_PLAY_PARMS*;

struct tagMCI_SEEK_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTo;
}

alias MCI_SEEK_PARMS = tagMCI_SEEK_PARMS;
alias PMCI_SEEK_PARMS = tagMCI_SEEK_PARMS*;
alias LPMCI_SEEK_PARMS = tagMCI_SEEK_PARMS*;

struct tagMCI_STATUS_PARMS
{
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
}

alias MCI_STATUS_PARMS = tagMCI_STATUS_PARMS;
alias PMCI_STATUS_PARMS = tagMCI_STATUS_PARMS*;
alias LPMCI_STATUS_PARMS = tagMCI_STATUS_PARMS*;

struct tagMCI_INFO_PARMSA
{
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
}

alias MCI_INFO_PARMSA = tagMCI_INFO_PARMSA;
alias LPMCI_INFO_PARMSA = tagMCI_INFO_PARMSA*;

struct tagMCI_INFO_PARMSW
{
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
}

alias MCI_INFO_PARMSW = tagMCI_INFO_PARMSW;
alias LPMCI_INFO_PARMSW = tagMCI_INFO_PARMSW*;

alias MCI_INFO_PARMS = tagMCI_INFO_PARMSA;
alias LPMCI_INFO_PARMS = tagMCI_INFO_PARMSA*;

struct tagMCI_GETDEVCAPS_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
}

alias MCI_GETDEVCAPS_PARMS = tagMCI_GETDEVCAPS_PARMS;
alias PMCI_GETDEVCAPS_PARMS = tagMCI_GETDEVCAPS_PARMS*;
alias LPMCI_GETDEVCAPS_PARMS = tagMCI_GETDEVCAPS_PARMS*;

struct tagMCI_SYSINFO_PARMSA
{
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
}

alias MCI_SYSINFO_PARMSA = tagMCI_SYSINFO_PARMSA;
alias PMCI_SYSINFO_PARMSA = tagMCI_SYSINFO_PARMSA*;
alias LPMCI_SYSINFO_PARMSA = tagMCI_SYSINFO_PARMSA*;

struct tagMCI_SYSINFO_PARMSW
{
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
}

alias MCI_SYSINFO_PARMSW = tagMCI_SYSINFO_PARMSW;
alias PMCI_SYSINFO_PARMSW = tagMCI_SYSINFO_PARMSW*;
alias LPMCI_SYSINFO_PARMSW = tagMCI_SYSINFO_PARMSW*;

alias MCI_SYSINFO_PARMS = tagMCI_SYSINFO_PARMSA;
alias PMCI_SYSINFO_PARMS = tagMCI_SYSINFO_PARMSA*;
alias LPMCI_SYSINFO_PARMS = tagMCI_SYSINFO_PARMSA*;

struct tagMCI_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
}

alias MCI_SET_PARMS = tagMCI_SET_PARMS;
alias PMCI_SET_PARMS = tagMCI_SET_PARMS*;
alias LPMCI_SET_PARMS = tagMCI_SET_PARMS*;

struct tagMCI_BREAK_PARMS
{
    DWORD_PTR dwCallback;
    int nVirtKey;
    HWND hwndBreak;
}

alias MCI_BREAK_PARMS = tagMCI_BREAK_PARMS;
alias PMCI_BREAK_PARMS = tagMCI_BREAK_PARMS*;
alias LPMCI_BREAK_PARMS = tagMCI_BREAK_PARMS*;

struct tagMCI_SAVE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
}

alias MCI_SAVE_PARMSA = tagMCI_SAVE_PARMSA;
alias PMCI_SAVE_PARMSA = tagMCI_SAVE_PARMSA*;
alias LPMCI_SAVE_PARMSA = tagMCI_SAVE_PARMSA*;

struct tagMCI_SAVE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
}

alias MCI_SAVE_PARMSW = tagMCI_SAVE_PARMSW;
alias PMCI_SAVE_PARMSW = tagMCI_SAVE_PARMSW*;
alias LPMCI_SAVE_PARMSW = tagMCI_SAVE_PARMSW*;

alias MCI_SAVE_PARMS = tagMCI_SAVE_PARMSA;
alias PMCI_SAVE_PARMS = tagMCI_SAVE_PARMSA*;
alias LPMCI_SAVE_PARMS = tagMCI_SAVE_PARMSA*;

struct tagMCI_LOAD_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
}

alias MCI_LOAD_PARMSA = tagMCI_LOAD_PARMSA;
alias PMCI_LOAD_PARMSA = tagMCI_LOAD_PARMSA*;
alias LPMCI_LOAD_PARMSA = tagMCI_LOAD_PARMSA*;

struct tagMCI_LOAD_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
}

alias MCI_LOAD_PARMSW = tagMCI_LOAD_PARMSW;
alias PMCI_LOAD_PARMSW = tagMCI_LOAD_PARMSW*;
alias LPMCI_LOAD_PARMSW = tagMCI_LOAD_PARMSW*;

alias MCI_LOAD_PARMS = tagMCI_LOAD_PARMSA;
alias PMCI_LOAD_PARMS = tagMCI_LOAD_PARMSA*;
alias LPMCI_LOAD_PARMS = tagMCI_LOAD_PARMSA*;

struct tagMCI_RECORD_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
}

alias MCI_RECORD_PARMS = tagMCI_RECORD_PARMS;
alias LPMCI_RECORD_PARMS = tagMCI_RECORD_PARMS*;

struct tagMCI_VD_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
}

alias MCI_VD_PLAY_PARMS = tagMCI_VD_PLAY_PARMS;
alias PMCI_VD_PLAY_PARMS = tagMCI_VD_PLAY_PARMS*;
alias LPMCI_VD_PLAY_PARMS = tagMCI_VD_PLAY_PARMS*;

struct tagMCI_VD_STEP_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrames;
}

alias MCI_VD_STEP_PARMS = tagMCI_VD_STEP_PARMS;
alias PMCI_VD_STEP_PARMS = tagMCI_VD_STEP_PARMS*;
alias LPMCI_VD_STEP_PARMS = tagMCI_VD_STEP_PARMS*;

struct tagMCI_VD_ESCAPE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
}

alias MCI_VD_ESCAPE_PARMSA = tagMCI_VD_ESCAPE_PARMSA;
alias PMCI_VD_ESCAPE_PARMSA = tagMCI_VD_ESCAPE_PARMSA*;
alias LPMCI_VD_ESCAPE_PARMSA = tagMCI_VD_ESCAPE_PARMSA*;

struct tagMCI_VD_ESCAPE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
}

alias MCI_VD_ESCAPE_PARMSW = tagMCI_VD_ESCAPE_PARMSW;
alias PMCI_VD_ESCAPE_PARMSW = tagMCI_VD_ESCAPE_PARMSW*;
alias LPMCI_VD_ESCAPE_PARMSW = tagMCI_VD_ESCAPE_PARMSW*;

alias MCI_VD_ESCAPE_PARMS = tagMCI_VD_ESCAPE_PARMSA;
alias PMCI_VD_ESCAPE_PARMS = tagMCI_VD_ESCAPE_PARMSA*;
alias LPMCI_VD_ESCAPE_PARMS = tagMCI_VD_ESCAPE_PARMSA*;

struct tagMCI_WAVE_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
}

alias MCI_WAVE_OPEN_PARMSA = tagMCI_WAVE_OPEN_PARMSA;
alias PMCI_WAVE_OPEN_PARMSA = tagMCI_WAVE_OPEN_PARMSA*;
alias LPMCI_WAVE_OPEN_PARMSA = tagMCI_WAVE_OPEN_PARMSA*;

struct tagMCI_WAVE_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
}

alias MCI_WAVE_OPEN_PARMSW = tagMCI_WAVE_OPEN_PARMSW;
alias PMCI_WAVE_OPEN_PARMSW = tagMCI_WAVE_OPEN_PARMSW*;
alias LPMCI_WAVE_OPEN_PARMSW = tagMCI_WAVE_OPEN_PARMSW*;

alias MCI_WAVE_OPEN_PARMS = tagMCI_WAVE_OPEN_PARMSA;
alias PMCI_WAVE_OPEN_PARMS = tagMCI_WAVE_OPEN_PARMSA*;
alias LPMCI_WAVE_OPEN_PARMS = tagMCI_WAVE_OPEN_PARMSA*;

struct tagMCI_WAVE_DELETE_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
}

alias MCI_WAVE_DELETE_PARMS = tagMCI_WAVE_DELETE_PARMS;
alias PMCI_WAVE_DELETE_PARMS = tagMCI_WAVE_DELETE_PARMS*;
alias LPMCI_WAVE_DELETE_PARMS = tagMCI_WAVE_DELETE_PARMS*;

struct tagMCI_WAVE_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    UINT wInput;
    UINT wOutput;
    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
}

alias MCI_WAVE_SET_PARMS = tagMCI_WAVE_SET_PARMS;
alias PMCI_WAVE_SET_PARMS = tagMCI_WAVE_SET_PARMS*;
alias LPMCI_WAVE_SET_PARMS = tagMCI_WAVE_SET_PARMS*;

struct tagMCI_SEQ_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
}

alias MCI_SEQ_SET_PARMS = tagMCI_SEQ_SET_PARMS;
alias PMCI_SEQ_SET_PARMS = tagMCI_SEQ_SET_PARMS*;
alias LPMCI_SEQ_SET_PARMS = tagMCI_SEQ_SET_PARMS*;

struct tagMCI_ANIM_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}

alias MCI_ANIM_OPEN_PARMSA = tagMCI_ANIM_OPEN_PARMSA;
alias PMCI_ANIM_OPEN_PARMSA = tagMCI_ANIM_OPEN_PARMSA*;
alias LPMCI_ANIM_OPEN_PARMSA = tagMCI_ANIM_OPEN_PARMSA*;

struct tagMCI_ANIM_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}

alias MCI_ANIM_OPEN_PARMSW = tagMCI_ANIM_OPEN_PARMSW;
alias PMCI_ANIM_OPEN_PARMSW = tagMCI_ANIM_OPEN_PARMSW*;
alias LPMCI_ANIM_OPEN_PARMSW = tagMCI_ANIM_OPEN_PARMSW*;

alias MCI_ANIM_OPEN_PARMS = tagMCI_ANIM_OPEN_PARMSA;
alias PMCI_ANIM_OPEN_PARMS = tagMCI_ANIM_OPEN_PARMSA*;
alias LPMCI_ANIM_OPEN_PARMS = tagMCI_ANIM_OPEN_PARMSA*;

struct tagMCI_ANIM_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
}

alias MCI_ANIM_PLAY_PARMS = tagMCI_ANIM_PLAY_PARMS;
alias PMCI_ANIM_PLAY_PARMS = tagMCI_ANIM_PLAY_PARMS*;
alias LPMCI_ANIM_PLAY_PARMS = tagMCI_ANIM_PLAY_PARMS*;

struct tagMCI_ANIM_STEP_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrames;
}

alias MCI_ANIM_STEP_PARMS = tagMCI_ANIM_STEP_PARMS;
alias PMCI_ANIM_STEP_PARMS = tagMCI_ANIM_STEP_PARMS*;
alias LPMCI_ANIM_STEP_PARMS = tagMCI_ANIM_STEP_PARMS*;

struct tagMCI_ANIM_WINDOW_PARMSA
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
}

alias MCI_ANIM_WINDOW_PARMSA = tagMCI_ANIM_WINDOW_PARMSA;
alias PMCI_ANIM_WINDOW_PARMSA = tagMCI_ANIM_WINDOW_PARMSA*;
alias LPMCI_ANIM_WINDOW_PARMSA = tagMCI_ANIM_WINDOW_PARMSA*;

struct tagMCI_ANIM_WINDOW_PARMSW
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
}

alias MCI_ANIM_WINDOW_PARMSW = tagMCI_ANIM_WINDOW_PARMSW;
alias PMCI_ANIM_WINDOW_PARMSW = tagMCI_ANIM_WINDOW_PARMSW*;
alias LPMCI_ANIM_WINDOW_PARMSW = tagMCI_ANIM_WINDOW_PARMSW*;

alias MCI_ANIM_WINDOW_PARMS = tagMCI_ANIM_WINDOW_PARMSA;
alias PMCI_ANIM_WINDOW_PARMS = tagMCI_ANIM_WINDOW_PARMSA*;
alias LPMCI_ANIM_WINDOW_PARMS = tagMCI_ANIM_WINDOW_PARMSA*;

struct tagMCI_ANIM_RECT_PARMS
{
    DWORD_PTR dwCallback;

    RECT rc;
}

alias MCI_ANIM_RECT_PARMS = tagMCI_ANIM_RECT_PARMS;

alias PMCI_ANIM_RECT_PARMS = tagMCI_ANIM_RECT_PARMS*;
alias LPMCI_ANIM_RECT_PARMS = tagMCI_ANIM_RECT_PARMS*;

struct tagMCI_ANIM_UPDATE_PARMS
{
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
}

alias MCI_ANIM_UPDATE_PARMS = tagMCI_ANIM_UPDATE_PARMS;
alias PMCI_ANIM_UPDATE_PARMS = tagMCI_ANIM_UPDATE_PARMS*;
alias LPMCI_ANIM_UPDATE_PARMS = tagMCI_ANIM_UPDATE_PARMS*;

struct tagMCI_OVLY_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}

alias MCI_OVLY_OPEN_PARMSA = tagMCI_OVLY_OPEN_PARMSA;
alias PMCI_OVLY_OPEN_PARMSA = tagMCI_OVLY_OPEN_PARMSA*;
alias LPMCI_OVLY_OPEN_PARMSA = tagMCI_OVLY_OPEN_PARMSA*;

struct tagMCI_OVLY_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}

alias MCI_OVLY_OPEN_PARMSW = tagMCI_OVLY_OPEN_PARMSW;
alias PMCI_OVLY_OPEN_PARMSW = tagMCI_OVLY_OPEN_PARMSW*;
alias LPMCI_OVLY_OPEN_PARMSW = tagMCI_OVLY_OPEN_PARMSW*;

alias MCI_OVLY_OPEN_PARMS = tagMCI_OVLY_OPEN_PARMSA;
alias PMCI_OVLY_OPEN_PARMS = tagMCI_OVLY_OPEN_PARMSA*;
alias LPMCI_OVLY_OPEN_PARMS = tagMCI_OVLY_OPEN_PARMSA*;

struct tagMCI_OVLY_WINDOW_PARMSA
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
}

alias MCI_OVLY_WINDOW_PARMSA = tagMCI_OVLY_WINDOW_PARMSA;
alias PMCI_OVLY_WINDOW_PARMSA = tagMCI_OVLY_WINDOW_PARMSA*;
alias LPMCI_OVLY_WINDOW_PARMSA = tagMCI_OVLY_WINDOW_PARMSA*;

struct tagMCI_OVLY_WINDOW_PARMSW
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
}

alias MCI_OVLY_WINDOW_PARMSW = tagMCI_OVLY_WINDOW_PARMSW;
alias PMCI_OVLY_WINDOW_PARMSW = tagMCI_OVLY_WINDOW_PARMSW*;
alias LPMCI_OVLY_WINDOW_PARMSW = tagMCI_OVLY_WINDOW_PARMSW*;

alias MCI_OVLY_WINDOW_PARMS = tagMCI_OVLY_WINDOW_PARMSA;
alias PMCI_OVLY_WINDOW_PARMS = tagMCI_OVLY_WINDOW_PARMSA*;
alias LPMCI_OVLY_WINDOW_PARMS = tagMCI_OVLY_WINDOW_PARMSA*;

struct tagMCI_OVLY_RECT_PARMS
{
    DWORD_PTR dwCallback;

    RECT rc;
}

alias MCI_OVLY_RECT_PARMS = tagMCI_OVLY_RECT_PARMS;
alias PMCI_OVLY_RECT_PARMS = tagMCI_OVLY_RECT_PARMS*;
alias LPMCI_OVLY_RECT_PARMS = tagMCI_OVLY_RECT_PARMS*;

struct tagMCI_OVLY_SAVE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
}

alias MCI_OVLY_SAVE_PARMSA = tagMCI_OVLY_SAVE_PARMSA;
alias PMCI_OVLY_SAVE_PARMSA = tagMCI_OVLY_SAVE_PARMSA*;
alias LPMCI_OVLY_SAVE_PARMSA = tagMCI_OVLY_SAVE_PARMSA*;

struct tagMCI_OVLY_SAVE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
}

alias MCI_OVLY_SAVE_PARMSW = tagMCI_OVLY_SAVE_PARMSW;
alias PMCI_OVLY_SAVE_PARMSW = tagMCI_OVLY_SAVE_PARMSW*;
alias LPMCI_OVLY_SAVE_PARMSW = tagMCI_OVLY_SAVE_PARMSW*;

alias MCI_OVLY_SAVE_PARMS = tagMCI_OVLY_SAVE_PARMSA;
alias PMCI_OVLY_SAVE_PARMS = tagMCI_OVLY_SAVE_PARMSA*;
alias LPMCI_OVLY_SAVE_PARMS = tagMCI_OVLY_SAVE_PARMSA*;

struct tagMCI_OVLY_LOAD_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
}

alias MCI_OVLY_LOAD_PARMSA = tagMCI_OVLY_LOAD_PARMSA;
alias PMCI_OVLY_LOAD_PARMSA = tagMCI_OVLY_LOAD_PARMSA*;
alias LPMCI_OVLY_LOAD_PARMSA = tagMCI_OVLY_LOAD_PARMSA*;

struct tagMCI_OVLY_LOAD_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
}

alias MCI_OVLY_LOAD_PARMSW = tagMCI_OVLY_LOAD_PARMSW;
alias PMCI_OVLY_LOAD_PARMSW = tagMCI_OVLY_LOAD_PARMSW*;
alias LPMCI_OVLY_LOAD_PARMSW = tagMCI_OVLY_LOAD_PARMSW*;

alias MCI_OVLY_LOAD_PARMS = tagMCI_OVLY_LOAD_PARMSA;
alias PMCI_OVLY_LOAD_PARMS = tagMCI_OVLY_LOAD_PARMSA*;
alias LPMCI_OVLY_LOAD_PARMS = tagMCI_OVLY_LOAD_PARMSA*;

struct _NCB
{
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR[16] ncb_callname;
    UCHAR[16] ncb_name;
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void function (_NCB*) ncb_post;
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;

    UCHAR[18] ncb_reserve;

    HANDLE ncb_event;
}

alias NCB = _NCB;
alias PNCB = _NCB*;

struct _ADAPTER_STATUS
{
    UCHAR[6] adapter_address;
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;
    WORD iframe_recv_err;
    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;
    WORD iframe_xmit_err;
    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
}

alias ADAPTER_STATUS = _ADAPTER_STATUS;
alias PADAPTER_STATUS = _ADAPTER_STATUS*;

struct _NAME_BUFFER
{
    UCHAR[16] name;
    UCHAR name_num;
    UCHAR name_flags;
}

alias NAME_BUFFER = _NAME_BUFFER;
alias PNAME_BUFFER = _NAME_BUFFER*;

struct _SESSION_HEADER
{
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
}

alias SESSION_HEADER = _SESSION_HEADER;
alias PSESSION_HEADER = _SESSION_HEADER*;

struct _SESSION_BUFFER
{
    UCHAR lsn;
    UCHAR state;
    UCHAR[16] local_name;
    UCHAR[16] remote_name;
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
}

alias SESSION_BUFFER = _SESSION_BUFFER;
alias PSESSION_BUFFER = _SESSION_BUFFER*;

struct _LANA_ENUM
{
    UCHAR length;
    UCHAR[255] lana;
}

alias LANA_ENUM = _LANA_ENUM;
alias PLANA_ENUM = _LANA_ENUM*;

struct _FIND_NAME_HEADER
{
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
}

alias FIND_NAME_HEADER = _FIND_NAME_HEADER;
alias PFIND_NAME_HEADER = _FIND_NAME_HEADER*;

struct _FIND_NAME_BUFFER
{
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR[6] destination_addr;
    UCHAR[6] source_addr;
    UCHAR[18] routing_info;
}

alias FIND_NAME_BUFFER = _FIND_NAME_BUFFER;
alias PFIND_NAME_BUFFER = _FIND_NAME_BUFFER*;

struct _ACTION_HEADER
{
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
}

alias ACTION_HEADER = _ACTION_HEADER;
alias PACTION_HEADER = _ACTION_HEADER*;

UCHAR Netbios (PNCB pncb);

alias I_RPC_HANDLE = void*;
alias RPC_STATUS = c_long;

alias RPC_CSTR = ubyte*;
alias RPC_WSTR = ushort*;
alias RPC_BINDING_HANDLE = void*;
alias handle_t = void*;

alias UUID = _GUID;

struct _RPC_BINDING_VECTOR
{
    c_ulong Count;
    RPC_BINDING_HANDLE[1] BindingH;
}

alias RPC_BINDING_VECTOR = _RPC_BINDING_VECTOR;

struct _UUID_VECTOR
{
    c_ulong Count;
    UUID*[1] Uuid;
}

alias UUID_VECTOR = _UUID_VECTOR;

alias RPC_IF_HANDLE = void*;

struct _RPC_IF_ID
{
    UUID Uuid;
    ushort VersMajor;
    ushort VersMinor;
}

alias RPC_IF_ID = _RPC_IF_ID;

struct _RPC_PROTSEQ_VECTORA
{
    uint Count;
    ubyte*[1] Protseq;
}

alias RPC_PROTSEQ_VECTORA = _RPC_PROTSEQ_VECTORA;

struct _RPC_PROTSEQ_VECTORW
{
    uint Count;
    ushort*[1] Protseq;
}

alias RPC_PROTSEQ_VECTORW = _RPC_PROTSEQ_VECTORW;

struct _RPC_POLICY
{
    uint Length;
    c_ulong EndpointFlags;
    c_ulong NICFlags;
}

alias RPC_POLICY = _RPC_POLICY;
alias PRPC_POLICY = _RPC_POLICY*;

alias RPC_OBJECT_INQ_FN = void function (UUID* ObjectUuid, UUID* TypeUuid, RPC_STATUS* Status);
alias RPC_IF_CALLBACK_FN = c_long function (RPC_IF_HANDLE InterfaceUuid, void* Context);
alias RPC_SECURITY_CALLBACK_FN = void function (void* Context);

struct RPC_STATS_VECTOR
{
    uint Count;
    c_ulong[1] Stats;
}

struct RPC_IF_ID_VECTOR
{
    c_ulong Count;
    RPC_IF_ID*[1] IfId;
}

RPC_STATUS RpcBindingCopy (RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE* DestinationBinding);
RPC_STATUS RpcBindingFree (RPC_BINDING_HANDLE* Binding);
RPC_STATUS RpcBindingSetOption (RPC_BINDING_HANDLE hBinding, c_ulong option, ULONG_PTR optionValue);
RPC_STATUS RpcBindingInqOption (RPC_BINDING_HANDLE hBinding, c_ulong option, ULONG_PTR* pOptionValue);
RPC_STATUS RpcBindingFromStringBindingA (RPC_CSTR StringBinding, RPC_BINDING_HANDLE* Binding);
RPC_STATUS RpcBindingFromStringBindingW (RPC_WSTR StringBinding, RPC_BINDING_HANDLE* Binding);
RPC_STATUS RpcSsGetContextBinding (void* ContextHandle, RPC_BINDING_HANDLE* Binding);
RPC_STATUS RpcBindingInqObject (RPC_BINDING_HANDLE Binding, UUID* ObjectUuid);
RPC_STATUS RpcBindingReset (RPC_BINDING_HANDLE Binding);
RPC_STATUS RpcBindingSetObject (RPC_BINDING_HANDLE Binding, UUID* ObjectUuid);
RPC_STATUS RpcMgmtInqDefaultProtectLevel (c_ulong AuthnSvc, c_ulong* AuthnLevel);
RPC_STATUS RpcBindingToStringBindingA (RPC_BINDING_HANDLE Binding, RPC_CSTR* StringBinding);
RPC_STATUS RpcBindingToStringBindingW (RPC_BINDING_HANDLE Binding, RPC_WSTR* StringBinding);
RPC_STATUS RpcBindingVectorFree (RPC_BINDING_VECTOR** BindingVector);
RPC_STATUS RpcStringBindingComposeA (RPC_CSTR ObjUuid, RPC_CSTR Protseq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR* StringBinding);
RPC_STATUS RpcStringBindingComposeW (RPC_WSTR ObjUuid, RPC_WSTR Protseq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR* StringBinding);
RPC_STATUS RpcStringBindingParseA (RPC_CSTR StringBinding, RPC_CSTR* ObjUuid, RPC_CSTR* Protseq, RPC_CSTR* NetworkAddr, RPC_CSTR* Endpoint, RPC_CSTR* NetworkOptions);
RPC_STATUS RpcStringBindingParseW (RPC_WSTR StringBinding, RPC_WSTR* ObjUuid, RPC_WSTR* Protseq, RPC_WSTR* NetworkAddr, RPC_WSTR* Endpoint, RPC_WSTR* NetworkOptions);
RPC_STATUS RpcStringFreeA (RPC_CSTR* String);
RPC_STATUS RpcStringFreeW (RPC_WSTR* String);
RPC_STATUS RpcIfInqId (RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID* RpcIfId);
RPC_STATUS RpcNetworkIsProtseqValidA (RPC_CSTR Protseq);
RPC_STATUS RpcNetworkIsProtseqValidW (RPC_WSTR Protseq);
RPC_STATUS RpcMgmtInqComTimeout (RPC_BINDING_HANDLE Binding, uint* Timeout);
RPC_STATUS RpcMgmtSetComTimeout (RPC_BINDING_HANDLE Binding, uint Timeout);
RPC_STATUS RpcMgmtSetCancelTimeout (c_long Timeout);
RPC_STATUS RpcNetworkInqProtseqsA (RPC_PROTSEQ_VECTORA** ProtseqVector);
RPC_STATUS RpcNetworkInqProtseqsW (RPC_PROTSEQ_VECTORW** ProtseqVector);
RPC_STATUS RpcObjectInqType (UUID* ObjUuid, UUID* TypeUuid);
RPC_STATUS RpcObjectSetInqFn (void function () InquiryFn);
RPC_STATUS RpcObjectSetType (UUID* ObjUuid, UUID* TypeUuid);
RPC_STATUS RpcProtseqVectorFreeA (RPC_PROTSEQ_VECTORA** ProtseqVector);
RPC_STATUS RpcProtseqVectorFreeW (RPC_PROTSEQ_VECTORW** ProtseqVector);
RPC_STATUS RpcServerInqBindings (RPC_BINDING_VECTOR** BindingVector);
RPC_STATUS RpcServerInqIf (RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void** MgrEpv);
RPC_STATUS RpcServerListen (uint MinimumCallThreads, uint MaxCalls, uint DontWait);
RPC_STATUS RpcServerRegisterIf (RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv);
RPC_STATUS RpcServerRegisterIfEx (RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv, uint Flags, uint MaxCalls, RPC_STATUS function () IfCallback);
RPC_STATUS RpcServerRegisterIf2 (RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv, uint Flags, uint MaxCalls, uint MaxRpcSize, RPC_STATUS function () IfCallbackFn);
RPC_STATUS RpcServerUnregisterIf (RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, uint WaitForCallsToComplete);
RPC_STATUS RpcServerUnregisterIfEx (RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, int RundownContextHandles);
RPC_STATUS RpcServerUseAllProtseqs (uint MaxCalls, void* SecurityDescriptor);
RPC_STATUS RpcServerUseAllProtseqsEx (uint MaxCalls, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseAllProtseqsIf (uint MaxCalls, RPC_IF_HANDLE IfSpec, void* SecurityDescriptor);
RPC_STATUS RpcServerUseAllProtseqsIfEx (uint MaxCalls, RPC_IF_HANDLE IfSpec, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseProtseqA (RPC_CSTR Protseq, uint MaxCalls, void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqExA (RPC_CSTR Protseq, uint MaxCalls, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseProtseqW (RPC_WSTR Protseq, uint MaxCalls, void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqExW (RPC_WSTR Protseq, uint MaxCalls, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseProtseqEpA (RPC_CSTR Protseq, uint MaxCalls, RPC_CSTR Endpoint, void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqEpExA (RPC_CSTR Protseq, uint MaxCalls, RPC_CSTR Endpoint, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseProtseqEpW (RPC_WSTR Protseq, uint MaxCalls, RPC_WSTR Endpoint, void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqEpExW (RPC_WSTR Protseq, uint MaxCalls, RPC_WSTR Endpoint, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseProtseqIfA (RPC_CSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqIfExA (RPC_CSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void* SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS RpcServerUseProtseqIfW (RPC_WSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void* SecurityDescriptor);
RPC_STATUS RpcServerUseProtseqIfExW (RPC_WSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void* SecurityDescriptor, PRPC_POLICY Policy);
void RpcServerYield ();
RPC_STATUS RpcMgmtStatsVectorFree (RPC_STATS_VECTOR** StatsVector);
RPC_STATUS RpcMgmtInqStats (RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR** Statistics);
RPC_STATUS RpcMgmtIsServerListening (RPC_BINDING_HANDLE Binding);
RPC_STATUS RpcMgmtStopServerListening (RPC_BINDING_HANDLE Binding);
RPC_STATUS RpcMgmtWaitServerListen ();
RPC_STATUS RpcMgmtSetServerStackSize (c_ulong ThreadStackSize);
void RpcSsDontSerializeContext ();
RPC_STATUS RpcMgmtEnableIdleCleanup ();
RPC_STATUS RpcMgmtInqIfIds (RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR** IfIdVector);
RPC_STATUS RpcIfIdVectorFree (RPC_IF_ID_VECTOR** IfIdVector);
RPC_STATUS RpcMgmtInqServerPrincNameA (RPC_BINDING_HANDLE Binding, c_ulong AuthnSvc, RPC_CSTR* ServerPrincName);
RPC_STATUS RpcMgmtInqServerPrincNameW (RPC_BINDING_HANDLE Binding, c_ulong AuthnSvc, RPC_WSTR* ServerPrincName);
RPC_STATUS RpcServerInqDefaultPrincNameA (c_ulong AuthnSvc, RPC_CSTR* PrincName);
RPC_STATUS RpcServerInqDefaultPrincNameW (c_ulong AuthnSvc, RPC_WSTR* PrincName);
RPC_STATUS RpcEpResolveBinding (RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);
RPC_STATUS RpcNsBindingInqEntryNameA (RPC_BINDING_HANDLE Binding, c_ulong EntryNameSyntax, RPC_CSTR* EntryName);
RPC_STATUS RpcNsBindingInqEntryNameW (RPC_BINDING_HANDLE Binding, c_ulong EntryNameSyntax, RPC_WSTR* EntryName);

alias RPC_AUTH_IDENTITY_HANDLE = void*;
alias RPC_AUTHZ_HANDLE = void*;

struct _RPC_SECURITY_QOS
{
    c_ulong Version;
    c_ulong Capabilities;
    c_ulong IdentityTracking;
    c_ulong ImpersonationType;
}

alias RPC_SECURITY_QOS = _RPC_SECURITY_QOS;
alias PRPC_SECURITY_QOS = _RPC_SECURITY_QOS*;

struct _SEC_WINNT_AUTH_IDENTITY_W
{
    ushort* User;
    c_ulong UserLength;
    ushort* Domain;
    c_ulong DomainLength;
    ushort* Password;
    c_ulong PasswordLength;
    c_ulong Flags;
}

alias SEC_WINNT_AUTH_IDENTITY_W = _SEC_WINNT_AUTH_IDENTITY_W;
alias PSEC_WINNT_AUTH_IDENTITY_W = _SEC_WINNT_AUTH_IDENTITY_W*;

struct _SEC_WINNT_AUTH_IDENTITY_A
{
    ubyte* User;
    c_ulong UserLength;
    ubyte* Domain;
    c_ulong DomainLength;
    ubyte* Password;
    c_ulong PasswordLength;
    c_ulong Flags;
}

alias SEC_WINNT_AUTH_IDENTITY_A = _SEC_WINNT_AUTH_IDENTITY_A;
alias PSEC_WINNT_AUTH_IDENTITY_A = _SEC_WINNT_AUTH_IDENTITY_A*;

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
    c_ulong Flags;
    c_ulong AuthenticationTarget;
    c_ulong NumberOfAuthnSchemes;
    c_ulong* AuthnSchemes;
    ushort* ServerCertificateSubject;
}

alias RPC_HTTP_TRANSPORT_CREDENTIALS_W = _RPC_HTTP_TRANSPORT_CREDENTIALS_W;
alias PRPC_HTTP_TRANSPORT_CREDENTIALS_W = _RPC_HTTP_TRANSPORT_CREDENTIALS_W*;

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
    c_ulong Flags;
    c_ulong AuthenticationTarget;
    c_ulong NumberOfAuthnSchemes;
    c_ulong* AuthnSchemes;
    ubyte* ServerCertificateSubject;
}

alias RPC_HTTP_TRANSPORT_CREDENTIALS_A = _RPC_HTTP_TRANSPORT_CREDENTIALS_A;
alias PRPC_HTTP_TRANSPORT_CREDENTIALS_A = _RPC_HTTP_TRANSPORT_CREDENTIALS_A*;

struct _RPC_SECURITY_QOS_V2_W
{
    c_ulong Version;
    c_ulong Capabilities;
    c_ulong IdentityTracking;
    c_ulong ImpersonationType;
    c_ulong AdditionalSecurityInfoType;

    union _Anonymous_62
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    }

    _Anonymous_62 u;
}

alias RPC_SECURITY_QOS_V2_W = _RPC_SECURITY_QOS_V2_W;
alias PRPC_SECURITY_QOS_V2_W = _RPC_SECURITY_QOS_V2_W*;

struct _RPC_SECURITY_QOS_V2_A
{
    c_ulong Version;
    c_ulong Capabilities;
    c_ulong IdentityTracking;
    c_ulong ImpersonationType;
    c_ulong AdditionalSecurityInfoType;

    union _Anonymous_63
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    }

    _Anonymous_63 u;
}

alias RPC_SECURITY_QOS_V2_A = _RPC_SECURITY_QOS_V2_A;
alias PRPC_SECURITY_QOS_V2_A = _RPC_SECURITY_QOS_V2_A*;

struct _RPC_SECURITY_QOS_V3_W
{
    c_ulong Version;
    c_ulong Capabilities;
    c_ulong IdentityTracking;
    c_ulong ImpersonationType;
    c_ulong AdditionalSecurityInfoType;

    union _Anonymous_64
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    }

    _Anonymous_64 u;
    void* Sid;
}

alias RPC_SECURITY_QOS_V3_W = _RPC_SECURITY_QOS_V3_W;
alias PRPC_SECURITY_QOS_V3_W = _RPC_SECURITY_QOS_V3_W*;

struct _RPC_SECURITY_QOS_V3_A
{
    c_ulong Version;
    c_ulong Capabilities;
    c_ulong IdentityTracking;
    c_ulong ImpersonationType;
    c_ulong AdditionalSecurityInfoType;

    union _Anonymous_65
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    }

    _Anonymous_65 u;
    void* Sid;
}

alias RPC_SECURITY_QOS_V3_A = _RPC_SECURITY_QOS_V3_A;
alias PRPC_SECURITY_QOS_V3_A = _RPC_SECURITY_QOS_V3_A*;

enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1 = 2,
    RPCHTTP_RS_SESSION = 3,
    RPCHTTP_RS_ACCESS_2 = 4,
    RPCHTTP_RS_INTERFACE = 5
}

alias RPC_HTTP_REDIRECTOR_STAGE = _RPC_HTTP_REDIRECTOR_STAGE;

alias RPC_NEW_HTTP_PROXY_CHANNEL = c_long function (RPC_HTTP_REDIRECTOR_STAGE RedirectorStage, ushort* ServerName, ushort* ServerPort, ushort* RemoteUser, ushort* AuthType, void* ResourceUuid, void* Metadata, void* SessionId, void* Interface, void* Reserved, c_ulong Flags, ushort** NewServerName, ushort** NewServerPort);
alias RPC_HTTP_PROXY_FREE_STRING = void function (ushort* String);

RPC_STATUS RpcImpersonateClient (RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS RpcRevertToSelfEx (RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS RpcRevertToSelf ();
RPC_STATUS RpcBindingInqAuthClientA (RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE* Privs, RPC_CSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, c_ulong* AuthzSvc);
RPC_STATUS RpcBindingInqAuthClientW (RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE* Privs, RPC_WSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, c_ulong* AuthzSvc);
RPC_STATUS RpcBindingInqAuthClientExA (RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE* Privs, RPC_CSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, c_ulong* AuthzSvc, c_ulong Flags);
RPC_STATUS RpcBindingInqAuthClientExW (RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE* Privs, RPC_WSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, c_ulong* AuthzSvc, c_ulong Flags);
RPC_STATUS RpcBindingInqAuthInfoA (RPC_BINDING_HANDLE Binding, RPC_CSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, RPC_AUTH_IDENTITY_HANDLE* AuthIdentity, c_ulong* AuthzSvc);
RPC_STATUS RpcBindingInqAuthInfoW (RPC_BINDING_HANDLE Binding, RPC_WSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, RPC_AUTH_IDENTITY_HANDLE* AuthIdentity, c_ulong* AuthzSvc);
RPC_STATUS RpcBindingSetAuthInfoA (RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, c_ulong AuthnLevel, c_ulong AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, c_ulong AuthzSvc);
RPC_STATUS RpcBindingSetAuthInfoExA (RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, c_ulong AuthnLevel, c_ulong AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, c_ulong AuthzSvc, RPC_SECURITY_QOS* SecurityQos);
RPC_STATUS RpcBindingSetAuthInfoW (RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, c_ulong AuthnLevel, c_ulong AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, c_ulong AuthzSvc);
RPC_STATUS RpcBindingSetAuthInfoExW (RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, c_ulong AuthnLevel, c_ulong AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, c_ulong AuthzSvc, RPC_SECURITY_QOS* SecurityQOS);
RPC_STATUS RpcBindingInqAuthInfoExA (RPC_BINDING_HANDLE Binding, RPC_CSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, RPC_AUTH_IDENTITY_HANDLE* AuthIdentity, c_ulong* AuthzSvc, c_ulong RpcQosVersion, RPC_SECURITY_QOS* SecurityQOS);
RPC_STATUS RpcBindingInqAuthInfoExW (RPC_BINDING_HANDLE Binding, RPC_WSTR* ServerPrincName, c_ulong* AuthnLevel, c_ulong* AuthnSvc, RPC_AUTH_IDENTITY_HANDLE* AuthIdentity, c_ulong* AuthzSvc, c_ulong RpcQosVersion, RPC_SECURITY_QOS* SecurityQOS);

alias RPC_AUTH_KEY_RETRIEVAL_FN = void function (void* Arg, ushort* ServerPrincName, c_ulong KeyVer, void** Key, RPC_STATUS* Status);

RPC_STATUS RpcServerRegisterAuthInfoA (RPC_CSTR ServerPrincName, c_ulong AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void* Arg);
RPC_STATUS RpcServerRegisterAuthInfoW (RPC_WSTR ServerPrincName, c_ulong AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void* Arg);

struct RPC_CLIENT_INFORMATION1
{
    ubyte* UserName;
    ubyte* ComputerName;
    ushort Privilege;
    c_ulong AuthFlags;
}

alias PRPC_CLIENT_INFORMATION1 = RPC_CLIENT_INFORMATION1*;

RPC_STATUS RpcBindingServerFromClient (RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE* ServerBinding);
void RpcRaiseException (RPC_STATUS exception);
RPC_STATUS RpcTestCancel ();
RPC_STATUS RpcServerTestCancel (RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS RpcCancelThread (void* Thread);
RPC_STATUS RpcCancelThreadEx (void* Thread, c_long Timeout);
RPC_STATUS UuidCreate (UUID* Uuid);
RPC_STATUS UuidCreateSequential (UUID* Uuid);
RPC_STATUS UuidToStringA (UUID* Uuid, RPC_CSTR* StringUuid);
RPC_STATUS UuidFromStringA (RPC_CSTR StringUuid, UUID* Uuid);
RPC_STATUS UuidToStringW (UUID* Uuid, RPC_WSTR* StringUuid);
RPC_STATUS UuidFromStringW (RPC_WSTR StringUuid, UUID* Uuid);
int UuidCompare (UUID* Uuid1, UUID* Uuid2, RPC_STATUS* Status);
RPC_STATUS UuidCreateNil (UUID* NilUuid);
int UuidEqual (UUID* Uuid1, UUID* Uuid2, RPC_STATUS* Status);
ushort UuidHash (UUID* Uuid, RPC_STATUS* Status);
int UuidIsNil (UUID* Uuid, RPC_STATUS* Status);
RPC_STATUS RpcEpRegisterNoReplaceA (RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector, UUID_VECTOR* UuidVector, RPC_CSTR Annotation);
RPC_STATUS RpcEpRegisterNoReplaceW (RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector, UUID_VECTOR* UuidVector, RPC_WSTR Annotation);
RPC_STATUS RpcEpRegisterA (RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector, UUID_VECTOR* UuidVector, RPC_CSTR Annotation);
RPC_STATUS RpcEpRegisterW (RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector, UUID_VECTOR* UuidVector, RPC_WSTR Annotation);
RPC_STATUS RpcEpUnregister (RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector, UUID_VECTOR* UuidVector);
RPC_STATUS DceErrorInqTextA (RPC_STATUS RpcStatus, RPC_CSTR ErrorText);
RPC_STATUS DceErrorInqTextW (RPC_STATUS RpcStatus, RPC_WSTR ErrorText);

alias RPC_EP_INQ_HANDLE = void**;

RPC_STATUS RpcMgmtEpEltInqBegin (RPC_BINDING_HANDLE EpBinding, c_ulong InquiryType, RPC_IF_ID* IfId, c_ulong VersOption, UUID* ObjectUuid, RPC_EP_INQ_HANDLE* InquiryContext);
RPC_STATUS RpcMgmtEpEltInqDone (RPC_EP_INQ_HANDLE* InquiryContext);
RPC_STATUS RpcMgmtEpEltInqNextA (RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID* IfId, RPC_BINDING_HANDLE* Binding, UUID* ObjectUuid, RPC_CSTR* Annotation);
RPC_STATUS RpcMgmtEpEltInqNextW (RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID* IfId, RPC_BINDING_HANDLE* Binding, UUID* ObjectUuid, RPC_WSTR* Annotation);
RPC_STATUS RpcMgmtEpUnregister (RPC_BINDING_HANDLE EpBinding, RPC_IF_ID* IfId, RPC_BINDING_HANDLE Binding, UUID* ObjectUuid);

alias RPC_MGMT_AUTHORIZATION_FN = int function (RPC_BINDING_HANDLE ClientBinding, c_ulong RequestedMgmtOperation, RPC_STATUS* Status);

RPC_STATUS RpcMgmtSetAuthorizationFn (RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);

struct _RPC_VERSION
{
    ushort MajorVersion;
    ushort MinorVersion;
}

alias RPC_VERSION = _RPC_VERSION;

struct _RPC_SYNTAX_IDENTIFIER
{
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
}

alias RPC_SYNTAX_IDENTIFIER = _RPC_SYNTAX_IDENTIFIER;
alias PRPC_SYNTAX_IDENTIFIER = _RPC_SYNTAX_IDENTIFIER*;

struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    c_ulong DataRepresentation;
    void* Buffer;
    uint BufferLength;
    uint ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void* RpcInterfaceInformation;
    void* ReservedForRuntime;
    void* ManagerEpv;
    void* ImportContext;
    c_ulong RpcFlags;
}

alias RPC_MESSAGE = _RPC_MESSAGE;
alias PRPC_MESSAGE = _RPC_MESSAGE*;

alias RPC_FORWARD_FUNCTION = c_long function (UUID* InterfaceId, RPC_VERSION* InterfaceVersion, UUID* ObjectId, ubyte* Rpcpro, void** ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED = 2,
    PROTOCOL_ADDRESS_CHANGE = 3
}

alias RPC_ADDRESS_CHANGE_FN = void function (void* arg);

alias RPC_DISPATCH_FUNCTION = void function (PRPC_MESSAGE Message);

struct RPC_DISPATCH_TABLE
{
    uint DispatchTableCount;
    RPC_DISPATCH_FUNCTION* DispatchTable;
    LONG_PTR Reserved;
}

alias PRPC_DISPATCH_TABLE = RPC_DISPATCH_TABLE*;

struct _RPC_PROTSEQ_ENDPOINT
{
    ubyte* RpcProtocolSequence;
    ubyte* Endpoint;
}

alias RPC_PROTSEQ_ENDPOINT = _RPC_PROTSEQ_ENDPOINT;
alias PRPC_PROTSEQ_ENDPOINT = _RPC_PROTSEQ_ENDPOINT*;

struct _RPC_SERVER_INTERFACE
{
    uint Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    uint RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void* DefaultManagerEpv;
    const(void)* InterpreterInfo;
    uint Flags;
}

alias RPC_SERVER_INTERFACE = _RPC_SERVER_INTERFACE;
alias PRPC_SERVER_INTERFACE = _RPC_SERVER_INTERFACE*;

struct _RPC_CLIENT_INTERFACE
{
    uint Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    uint RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    const(void)* InterpreterInfo;
    uint Flags;
}

alias RPC_CLIENT_INTERFACE = _RPC_CLIENT_INTERFACE;
alias PRPC_CLIENT_INTERFACE = _RPC_CLIENT_INTERFACE*;

RPC_STATUS I_RpcNegotiateTransferSyntax (RPC_MESSAGE* Message);
RPC_STATUS I_RpcGetBuffer (RPC_MESSAGE* Message);
RPC_STATUS I_RpcGetBufferWithObject (RPC_MESSAGE* Message, UUID* ObjectUuid);
RPC_STATUS I_RpcSendReceive (RPC_MESSAGE* Message);
RPC_STATUS I_RpcFreeBuffer (RPC_MESSAGE* Message);
RPC_STATUS I_RpcSend (PRPC_MESSAGE Message);
RPC_STATUS I_RpcReceive (PRPC_MESSAGE Message, uint Size);
RPC_STATUS I_RpcFreePipeBuffer (RPC_MESSAGE* Message);
RPC_STATUS I_RpcReallocPipeBuffer (PRPC_MESSAGE Message, uint NewSize);

alias I_RPC_MUTEX = void*;

void I_RpcRequestMutex (I_RPC_MUTEX* Mutex);
void I_RpcClearMutex (I_RPC_MUTEX Mutex);
void I_RpcDeleteMutex (I_RPC_MUTEX Mutex);
void* I_RpcAllocate (uint Size);
void I_RpcFree (void* Object);
void I_RpcPauseExecution (c_ulong Milliseconds);
RPC_STATUS I_RpcGetExtendedError ();

alias PRPC_RUNDOWN = void function (void* AssociationContext);

RPC_STATUS I_RpcMonitorAssociation (RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void* Context);
RPC_STATUS I_RpcStopMonitorAssociation (RPC_BINDING_HANDLE Handle);
RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle ();
RPC_STATUS I_RpcGetAssociationContext (RPC_BINDING_HANDLE BindingHandle, void** AssociationContext);
void* I_RpcGetServerContextList (RPC_BINDING_HANDLE BindingHandle);
void I_RpcSetServerContextList (RPC_BINDING_HANDLE BindingHandle, void* ServerContextList);
RPC_STATUS I_RpcNsInterfaceExported (c_ulong EntryNameSyntax, ushort* EntryName, RPC_SERVER_INTERFACE* RpcInterfaceInformation);
RPC_STATUS I_RpcNsInterfaceUnexported (c_ulong EntryNameSyntax, ushort* EntryName, RPC_SERVER_INTERFACE* RpcInterfaceInformation);
RPC_STATUS I_RpcBindingToStaticStringBindingW (RPC_BINDING_HANDLE Binding, ushort** StringBinding);
RPC_STATUS I_RpcBindingInqSecurityContext (RPC_BINDING_HANDLE Binding, void** SecurityContextHandle);
RPC_STATUS I_RpcBindingInqWireIdForSnego (RPC_BINDING_HANDLE Binding, RPC_CSTR WireId);
RPC_STATUS I_RpcBindingInqMarshalledTargetInfo (RPC_BINDING_HANDLE Binding, c_ulong* MarshalledTargetInfoLength, RPC_CSTR* MarshalledTargetInfo);
RPC_STATUS I_RpcBindingInqLocalClientPID (RPC_BINDING_HANDLE Binding, c_ulong* Pid);
RPC_STATUS I_RpcBindingHandleToAsyncHandle (RPC_BINDING_HANDLE Binding, void** AsyncHandle);
RPC_STATUS I_RpcNsBindingSetEntryNameW (RPC_BINDING_HANDLE Binding, c_ulong EntryNameSyntax, RPC_WSTR EntryName);
RPC_STATUS I_RpcNsBindingSetEntryNameA (RPC_BINDING_HANDLE Binding, c_ulong EntryNameSyntax, RPC_CSTR EntryName);
RPC_STATUS I_RpcServerUseProtseqEp2A (RPC_CSTR NetworkAddress, RPC_CSTR Protseq, uint MaxCalls, RPC_CSTR Endpoint, void* SecurityDescriptor, void* Policy);
RPC_STATUS I_RpcServerUseProtseqEp2W (RPC_WSTR NetworkAddress, RPC_WSTR Protseq, uint MaxCalls, RPC_WSTR Endpoint, void* SecurityDescriptor, void* Policy);
RPC_STATUS I_RpcServerUseProtseq2W (RPC_WSTR NetworkAddress, RPC_WSTR Protseq, uint MaxCalls, void* SecurityDescriptor, void* Policy);
RPC_STATUS I_RpcServerUseProtseq2A (RPC_CSTR NetworkAddress, RPC_CSTR Protseq, uint MaxCalls, void* SecurityDescriptor, void* Policy);
RPC_STATUS I_RpcBindingInqDynamicEndpointW (RPC_BINDING_HANDLE Binding, RPC_WSTR* DynamicEndpoint);
RPC_STATUS I_RpcBindingInqDynamicEndpointA (RPC_BINDING_HANDLE Binding, RPC_CSTR* DynamicEndpoint);
RPC_STATUS I_RpcServerCheckClientRestriction (RPC_BINDING_HANDLE Context);

RPC_STATUS I_RpcBindingInqTransportType (RPC_BINDING_HANDLE Binding, uint* Type);

struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    ushort VersMajor;
    ushort VersMinor;
}

alias RPC_TRANSFER_SYNTAX = _RPC_TRANSFER_SYNTAX;

RPC_STATUS I_RpcIfInqTransferSyntaxes (RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX* TransferSyntaxes, uint TransferSyntaxSize, uint* TransferSyntaxCount);
RPC_STATUS I_UuidCreate (UUID* Uuid);
RPC_STATUS I_RpcBindingCopy (RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE* DestinationBinding);
RPC_STATUS I_RpcBindingIsClientLocal (RPC_BINDING_HANDLE BindingHandle, uint* ClientLocalFlag);
RPC_STATUS I_RpcBindingInqConnId (RPC_BINDING_HANDLE Binding, void** ConnId, int* pfFirstCall);
void I_RpcSsDontSerializeContext ();
RPC_STATUS I_RpcLaunchDatagramReceiveThread (void* pAddress);
RPC_STATUS I_RpcServerRegisterForwardFunction (RPC_STATUS function () pForwardFunction);
void function () I_RpcServerInqAddressChangeFn ();
RPC_STATUS I_RpcServerSetAddressChangeFn (void function () pAddressChangeFn);

RPC_STATUS I_RpcServerInqLocalConnAddress (RPC_BINDING_HANDLE Binding, void* Buffer, c_ulong* BufferSize, c_ulong* AddressFormat);
void I_RpcSessionStrictContextHandle ();
RPC_STATUS I_RpcTurnOnEEInfoPropagation ();
RPC_STATUS I_RpcConnectionInqSockBuffSize (c_ulong* RecvBuffSize, c_ulong* SendBuffSize);
RPC_STATUS I_RpcConnectionSetSockBuffSize (c_ulong RecvBuffSize, c_ulong SendBuffSize);

alias RPCLT_PDU_FILTER_FUNC = void function (void* Buffer, uint BufferLength, int fDatagram);
alias RPC_SETFILTER_FUNC = void function (RPCLT_PDU_FILTER_FUNC pfnFilter);

RPC_STATUS I_RpcServerStartListening (void* hWnd);
RPC_STATUS I_RpcServerStopListening ();

alias RPC_BLOCKING_FN = c_long function (void* hWnd, void* Context, void* hSyncEvent);

RPC_STATUS I_RpcBindingSetAsync (RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, c_ulong ServerTid);
RPC_STATUS I_RpcSetThreadParams (int fClientFree, void* Context, void* hWndClient);
uint I_RpcWindowProc (void* hWnd, uint Message, uint wParam, c_ulong lParam);
RPC_STATUS I_RpcServerUnregisterEndpointA (RPC_CSTR Protseq, RPC_CSTR Endpoint);
RPC_STATUS I_RpcServerUnregisterEndpointW (RPC_WSTR Protseq, RPC_WSTR Endpoint);

RPC_STATUS I_RpcServerInqTransportType (uint* Type);
c_long I_RpcMapWin32Status (RPC_STATUS Status);

struct _RPC_C_OPT_METADATA_DESCRIPTOR
{
    c_ulong BufferSize;
    char* Buffer;
}

alias RPC_C_OPT_METADATA_DESCRIPTOR = _RPC_C_OPT_METADATA_DESCRIPTOR;

struct _RDR_CALLOUT_STATE
{
    RPC_STATUS LastError;
    void* LastEEInfo;
    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
    ushort* ServerName;
    ushort* ServerPort;
    ushort* RemoteUser;
    ushort* AuthType;
    ubyte ResourceTypePresent;
    ubyte MetadataPresent;
    ubyte SessionIdPresent;
    ubyte InterfacePresent;
    UUID ResourceType;
    RPC_C_OPT_METADATA_DESCRIPTOR Metadata;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void* CertContext;
}

alias RDR_CALLOUT_STATE = _RDR_CALLOUT_STATE;

alias I_RpcProxyIsValidMachineFn = c_long function (char* pszMachine, char* pszDotMachine, c_ulong dwPortNumber);
alias I_RpcProxyGetClientAddressFn = c_long function (void* Context, char* Buffer, c_ulong* BufferLength);
alias I_RpcProxyGetConnectionTimeoutFn = c_long function (c_ulong* ConnectionTimeout);
alias I_RpcPerformCalloutFn = c_long function (void* Context, RDR_CALLOUT_STATE* CallOutState, RPC_HTTP_REDIRECTOR_STAGE Stage);
alias I_RpcFreeCalloutStateFn = void function (RDR_CALLOUT_STATE* CallOutState);

struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
}

alias I_RpcProxyCallbackInterface = tagI_RpcProxyCallbackInterface;

RPC_STATUS I_RpcProxyNewConnection (c_ulong ConnectionType, ushort* ServerAddress, ushort* ServerPort, ushort* MinConnTimeout, void* ConnectionParameter, RDR_CALLOUT_STATE* CallOutState, I_RpcProxyCallbackInterface* ProxyCallbackInterface);
RPC_STATUS I_RpcReplyToClientWithStatus (void* ConnectionParameter, RPC_STATUS RpcStatus);
void I_RpcRecordCalloutFailure (RPC_STATUS RpcStatus, RDR_CALLOUT_STATE* CallOutState, ushort* DllName);

alias RPC_NS_HANDLE = void*;

RPC_STATUS RpcNsBindingExportA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVec, UUID_VECTOR* ObjectUuidVec);
RPC_STATUS RpcNsBindingUnexportA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR* ObjectUuidVec);
RPC_STATUS RpcNsBindingExportW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVec, UUID_VECTOR* ObjectUuidVec);
RPC_STATUS RpcNsBindingUnexportW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR* ObjectUuidVec);
RPC_STATUS RpcNsBindingExportPnPA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR* ObjectVector);
RPC_STATUS RpcNsBindingUnexportPnPA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR* ObjectVector);
RPC_STATUS RpcNsBindingExportPnPW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR* ObjectVector);
RPC_STATUS RpcNsBindingUnexportPnPW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR* ObjectVector);
RPC_STATUS RpcNsBindingLookupBeginA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID* ObjUuid, c_ulong BindingMaxCount, RPC_NS_HANDLE* LookupContext);
RPC_STATUS RpcNsBindingLookupBeginW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID* ObjUuid, c_ulong BindingMaxCount, RPC_NS_HANDLE* LookupContext);
RPC_STATUS RpcNsBindingLookupNext (RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR** BindingVec);
RPC_STATUS RpcNsBindingLookupDone (RPC_NS_HANDLE* LookupContext);
RPC_STATUS RpcNsGroupDeleteA (c_ulong GroupNameSyntax, RPC_CSTR GroupName);
RPC_STATUS RpcNsGroupMbrAddA (c_ulong GroupNameSyntax, RPC_CSTR GroupName, c_ulong MemberNameSyntax, RPC_CSTR MemberName);
RPC_STATUS RpcNsGroupMbrRemoveA (c_ulong GroupNameSyntax, RPC_CSTR GroupName, c_ulong MemberNameSyntax, RPC_CSTR MemberName);
RPC_STATUS RpcNsGroupMbrInqBeginA (c_ulong GroupNameSyntax, RPC_CSTR GroupName, c_ulong MemberNameSyntax, RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsGroupMbrInqNextA (RPC_NS_HANDLE InquiryContext, RPC_CSTR* MemberName);
RPC_STATUS RpcNsGroupDeleteW (c_ulong GroupNameSyntax, RPC_WSTR GroupName);
RPC_STATUS RpcNsGroupMbrAddW (c_ulong GroupNameSyntax, RPC_WSTR GroupName, c_ulong MemberNameSyntax, RPC_WSTR MemberName);
RPC_STATUS RpcNsGroupMbrRemoveW (c_ulong GroupNameSyntax, RPC_WSTR GroupName, c_ulong MemberNameSyntax, RPC_WSTR MemberName);
RPC_STATUS RpcNsGroupMbrInqBeginW (c_ulong GroupNameSyntax, RPC_WSTR GroupName, c_ulong MemberNameSyntax, RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsGroupMbrInqNextW (RPC_NS_HANDLE InquiryContext, RPC_WSTR* MemberName);
RPC_STATUS RpcNsGroupMbrInqDone (RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsProfileDeleteA (c_ulong ProfileNameSyntax, RPC_CSTR ProfileName);
RPC_STATUS RpcNsProfileEltAddA (c_ulong ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID* IfId, c_ulong MemberNameSyntax, RPC_CSTR MemberName, c_ulong Priority, RPC_CSTR Annotation);
RPC_STATUS RpcNsProfileEltRemoveA (c_ulong ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID* IfId, c_ulong MemberNameSyntax, RPC_CSTR MemberName);
RPC_STATUS RpcNsProfileEltInqBeginA (c_ulong ProfileNameSyntax, RPC_CSTR ProfileName, c_ulong InquiryType, RPC_IF_ID* IfId, c_ulong VersOption, c_ulong MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsProfileEltInqNextA (RPC_NS_HANDLE InquiryContext, RPC_IF_ID* IfId, RPC_CSTR* MemberName, c_ulong* Priority, RPC_CSTR* Annotation);
RPC_STATUS RpcNsProfileDeleteW (c_ulong ProfileNameSyntax, RPC_WSTR ProfileName);
RPC_STATUS RpcNsProfileEltAddW (c_ulong ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID* IfId, c_ulong MemberNameSyntax, RPC_WSTR MemberName, c_ulong Priority, RPC_WSTR Annotation);
RPC_STATUS RpcNsProfileEltRemoveW (c_ulong ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID* IfId, c_ulong MemberNameSyntax, RPC_WSTR MemberName);
RPC_STATUS RpcNsProfileEltInqBeginW (c_ulong ProfileNameSyntax, RPC_WSTR ProfileName, c_ulong InquiryType, RPC_IF_ID* IfId, c_ulong VersOption, c_ulong MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsProfileEltInqNextW (RPC_NS_HANDLE InquiryContext, RPC_IF_ID* IfId, RPC_WSTR* MemberName, c_ulong* Priority, RPC_WSTR* Annotation);
RPC_STATUS RpcNsProfileEltInqDone (RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsEntryObjectInqBeginA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsEntryObjectInqBeginW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsEntryObjectInqNext (RPC_NS_HANDLE InquiryContext, UUID* ObjUuid);
RPC_STATUS RpcNsEntryObjectInqDone (RPC_NS_HANDLE* InquiryContext);
RPC_STATUS RpcNsEntryExpandNameA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR* ExpandedName);
RPC_STATUS RpcNsMgmtBindingUnexportA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID* IfId, c_ulong VersOption, UUID_VECTOR* ObjectUuidVec);
RPC_STATUS RpcNsMgmtEntryCreateA (c_ulong EntryNameSyntax, RPC_CSTR EntryName);
RPC_STATUS RpcNsMgmtEntryDeleteA (c_ulong EntryNameSyntax, RPC_CSTR EntryName);
RPC_STATUS RpcNsMgmtEntryInqIfIdsA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR** IfIdVec);
RPC_STATUS RpcNsMgmtHandleSetExpAge (RPC_NS_HANDLE NsHandle, c_ulong ExpirationAge);
RPC_STATUS RpcNsMgmtInqExpAge (c_ulong* ExpirationAge);
RPC_STATUS RpcNsMgmtSetExpAge (c_ulong ExpirationAge);
RPC_STATUS RpcNsEntryExpandNameW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR* ExpandedName);
RPC_STATUS RpcNsMgmtBindingUnexportW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID* IfId, c_ulong VersOption, UUID_VECTOR* ObjectUuidVec);
RPC_STATUS RpcNsMgmtEntryCreateW (c_ulong EntryNameSyntax, RPC_WSTR EntryName);
RPC_STATUS RpcNsMgmtEntryDeleteW (c_ulong EntryNameSyntax, RPC_WSTR EntryName);
RPC_STATUS RpcNsMgmtEntryInqIfIdsW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR** IfIdVec);
RPC_STATUS RpcNsBindingImportBeginA (c_ulong EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID* ObjUuid, RPC_NS_HANDLE* ImportContext);
RPC_STATUS RpcNsBindingImportBeginW (c_ulong EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID* ObjUuid, RPC_NS_HANDLE* ImportContext);
RPC_STATUS RpcNsBindingImportNext (RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE* Binding);
RPC_STATUS RpcNsBindingImportDone (RPC_NS_HANDLE* ImportContext);
RPC_STATUS RpcNsBindingSelect (RPC_BINDING_VECTOR* BindingVec, RPC_BINDING_HANDLE* Binding);

enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone = 0,
    RpcNotificationTypeEvent = 1,
    RpcNotificationTypeApc = 2,
    RpcNotificationTypeIoc = 3,
    RpcNotificationTypeHwnd = 4,
    RpcNotificationTypeCallback = 5
}

alias RPC_NOTIFICATION_TYPES = _RPC_NOTIFICATION_TYPES;

enum _RPC_ASYNC_EVENT
{
    RpcCallComplete = 0,
    RpcSendComplete = 1,
    RpcReceiveComplete = 2
}

alias RPC_ASYNC_EVENT = _RPC_ASYNC_EVENT;

alias RPCNOTIFICATION_ROUTINE = void function (_RPC_ASYNC_STATE* pAsync, void* Context, RPC_ASYNC_EVENT Event);
alias PFN_RPCNOTIFICATION_ROUTINE = void function ();

struct _RPC_ASYNC_STATE
{
    uint Size;
    c_ulong Signature;
    c_long Lock;
    c_ulong Flags;
    void* StubInfo;
    void* UserInfo;
    void* RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;

    union _Anonymous_66
    {
        struct _Anonymous_67
        {
            PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
            HANDLE hThread;
        }

        _Anonymous_67 APC;

        struct _Anonymous_68
        {
            HANDLE hIOPort;
            DWORD dwNumberOfBytesTransferred;
            DWORD_PTR dwCompletionKey;
            LPOVERLAPPED lpOverlapped;
        }

        _Anonymous_68 IOC;

        struct _Anonymous_69
        {
            HWND hWnd;
            UINT Msg;
        }

        _Anonymous_69 HWND_;
        HANDLE hEvent;
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    }

    _Anonymous_66 u;
    LONG_PTR[4] Reserved;
}

alias RPC_ASYNC_STATE = _RPC_ASYNC_STATE;
alias PRPC_ASYNC_STATE = _RPC_ASYNC_STATE*;

RPC_STATUS RpcAsyncInitializeHandle (PRPC_ASYNC_STATE pAsync, uint Size);
RPC_STATUS RpcAsyncRegisterInfo (PRPC_ASYNC_STATE pAsync);
RPC_STATUS RpcAsyncGetCallStatus (PRPC_ASYNC_STATE pAsync);
RPC_STATUS RpcAsyncCompleteCall (PRPC_ASYNC_STATE pAsync, void* Reply);
RPC_STATUS RpcAsyncAbortCall (PRPC_ASYNC_STATE pAsync, c_ulong ExceptionCode);
RPC_STATUS RpcAsyncCancelCall (PRPC_ASYNC_STATE pAsync, WINBOOL fAbort);
RPC_STATUS RpcAsyncCleanupThread (DWORD dwTimeout);

enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString = 2,
    eeptLongVal = 3,
    eeptShortVal = 4,
    eeptPointerVal = 5,
    eeptNone = 6,
    eeptBinary = 7
}

alias ExtendedErrorParamTypes = tagExtendedErrorParamTypes;

struct tagBinaryParam
{
    void* Buffer;
    short Size;
}

alias BinaryParam = tagBinaryParam;

struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;

    union _Anonymous_70
    {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        c_long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
    }

    _Anonymous_70 u;
}

alias RPC_EE_INFO_PARAM = tagRPC_EE_INFO_PARAM;

struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;

    union _Anonymous_71
    {
        SYSTEMTIME SystemTime;
        FILETIME FileTime;
    }

    _Anonymous_71 u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM[4] Parameters;
}

alias RPC_EXTENDED_ERROR_INFO = tagRPC_EXTENDED_ERROR_INFO;

struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void* CurrentPos;
    void* Head;
}

alias RPC_ERROR_ENUM_HANDLE = tagRPC_ERROR_ENUM_HANDLE;

RPC_STATUS RpcErrorStartEnumeration (RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorGetNextRecord (RPC_ERROR_ENUM_HANDLE* EnumHandle, WINBOOL CopyStrings, RPC_EXTENDED_ERROR_INFO* ErrorInfo);
RPC_STATUS RpcErrorEndEnumeration (RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorResetEnumeration (RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorGetNumberOfRecords (RPC_ERROR_ENUM_HANDLE* EnumHandle, int* Records);
RPC_STATUS RpcErrorSaveErrorInfo (RPC_ERROR_ENUM_HANDLE* EnumHandle, PVOID* ErrorBlob, size_t* BlobSize);
RPC_STATUS RpcErrorLoadErrorInfo (PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE* EnumHandle);
RPC_STATUS RpcErrorAddRecord (RPC_EXTENDED_ERROR_INFO* ErrorInfo);
void RpcErrorClearInformation ();
RPC_STATUS RpcGetAuthorizationContextForClient (RPC_BINDING_HANDLE ClientBinding, WINBOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID* pAuthzClientContext);
RPC_STATUS RpcFreeAuthorizationContext (PVOID* pAuthzClientContext);
RPC_STATUS RpcSsContextLockExclusive (RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext);
RPC_STATUS RpcSsContextLockShared (RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext);

struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    uint Version;
    c_ulong Flags;
    c_ulong ServerPrincipalNameBufferLength;
    ushort* ServerPrincipalName;
    c_ulong ClientPrincipalNameBufferLength;
    ushort* ClientPrincipalName;
    c_ulong AuthenticationLevel;
    c_ulong AuthenticationService;
    WINBOOL NullSession;
}

alias RPC_CALL_ATTRIBUTES_V1_W = tagRPC_CALL_ATTRIBUTES_V1_W;

struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    uint Version;
    c_ulong Flags;
    c_ulong ServerPrincipalNameBufferLength;
    ubyte* ServerPrincipalName;
    c_ulong ClientPrincipalNameBufferLength;
    ubyte* ClientPrincipalName;
    c_ulong AuthenticationLevel;
    c_ulong AuthenticationService;
    WINBOOL NullSession;
}

alias RPC_CALL_ATTRIBUTES_V1_A = tagRPC_CALL_ATTRIBUTES_V1_A;

RPC_STATUS RpcServerInqCallAttributesW (RPC_BINDING_HANDLE ClientBinding, void* RpcCallAttributes);
RPC_STATUS RpcServerInqCallAttributesA (RPC_BINDING_HANDLE ClientBinding, void* RpcCallAttributes);

alias RPC_CALL_ATTRIBUTES = tagRPC_CALL_ATTRIBUTES_V1_A;

RPC_STATUS I_RpcAsyncSetHandle (PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync);
RPC_STATUS I_RpcAsyncAbortCall (PRPC_ASYNC_STATE pAsync, c_ulong ExceptionCode);
int I_RpcExceptionFilter (c_ulong ExceptionCode);

union _RPC_ASYNC_NOTIFICATION_INFO
{
    struct _Anonymous_72
    {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
    }

    _Anonymous_72 APC;

    struct _Anonymous_73
    {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
    }

    _Anonymous_73 IOC;

    struct _Anonymous_74
    {
        HWND hWnd;
        UINT Msg;
    }

    _Anonymous_74 HWND_;
    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
}

alias RPC_ASYNC_NOTIFICATION_INFO = _RPC_ASYNC_NOTIFICATION_INFO;
alias PRPC_ASYNC_NOTIFICATION_INFO = _RPC_ASYNC_NOTIFICATION_INFO*;

RPC_STATUS RpcBindingBind (PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);

RPC_STATUS RpcBindingUnbind (RPC_BINDING_HANDLE Binding);

enum _RpcCallType
{
    rctInvalid = 0,
    rctNormal = 1,
    rctTraining = 2,
    rctGuaranteed = 3
}

alias RpcCallType = _RpcCallType;

enum _RpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4 = 1,
    rlafIPv6 = 2
}

alias RpcLocalAddressFormat = _RpcLocalAddressFormat;

enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2
}

alias RPC_NOTIFICATIONS = _RPC_NOTIFICATIONS;

enum _RpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal = 1,
    rcclRemote = 2,
    rcclClientUnknownLocality = 3
}

alias RpcCallClientLocality = _RpcCallClientLocality;

RPC_STATUS RpcServerSubscribeForNotification (RPC_BINDING_HANDLE Binding, DWORD Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO* NotificationInfo);

RPC_STATUS RpcServerUnsubscribeForNotification (RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, c_ulong* NotificationsQueued);

struct HDROP__
{
    int unused;
}

alias HDROP = HDROP__*;

UINT DragQueryFileA (HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);
UINT DragQueryFileW (HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);
WINBOOL DragQueryPoint (HDROP hDrop, POINT* ppt);
void DragFinish (HDROP hDrop);
void DragAcceptFiles (HWND hWnd, WINBOOL fAccept);
HINSTANCE ShellExecuteA (HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
HINSTANCE ShellExecuteW (HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
HINSTANCE FindExecutableA (LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
HINSTANCE FindExecutableW (LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);
LPWSTR* CommandLineToArgvW (LPCWSTR lpCmdLine, int* pNumArgs);
INT ShellAboutA (HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
INT ShellAboutW (HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
HICON DuplicateIcon (HINSTANCE hInst, HICON hIcon);
HICON ExtractAssociatedIconA (HINSTANCE hInst, LPSTR pszIconPath, WORD* piIcon);
HICON ExtractAssociatedIconW (HINSTANCE hInst, LPWSTR pszIconPath, WORD* piIcon);
HICON ExtractAssociatedIconExA (HINSTANCE hInst, LPSTR pszIconPath, WORD* piIconIndex, WORD* piIconId);
HICON ExtractAssociatedIconExW (HINSTANCE hInst, LPWSTR pszIconPath, WORD* piIconIndex, WORD* piIconId);
HICON ExtractIconA (HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex);
HICON ExtractIconW (HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex);

struct _DRAGINFOA
{
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPSTR lpFileList;
    DWORD grfKeyState;
}

alias DRAGINFOA = _DRAGINFOA;
alias LPDRAGINFOA = _DRAGINFOA*;

struct _DRAGINFOW
{
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPWSTR lpFileList;
    DWORD grfKeyState;
}

alias DRAGINFOW = _DRAGINFOW;
alias LPDRAGINFOW = _DRAGINFOW*;

alias DRAGINFO = _DRAGINFOA;
alias LPDRAGINFO = _DRAGINFOA*;

struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
}

alias APPBARDATA = _AppBarData;
alias PAPPBARDATA = _AppBarData*;

UINT_PTR SHAppBarMessage (DWORD dwMessage, PAPPBARDATA pData);
DWORD DoEnvironmentSubstA (LPSTR pszSrc, UINT cchSrc);
DWORD DoEnvironmentSubstW (LPWSTR pszSrc, UINT cchSrc);
UINT ExtractIconExA (LPCSTR lpszFile, int nIconIndex, HICON* phiconLarge, HICON* phiconSmall, UINT nIcons);
UINT ExtractIconExW (LPCWSTR lpszFile, int nIconIndex, HICON* phiconLarge, HICON* phiconSmall, UINT nIcons);

alias FILEOP_FLAGS = ushort;

alias PRINTEROP_FLAGS = ushort;

struct _SHFILEOPSTRUCTA
{
    HWND hwnd;
    UINT wFunc;
    LPCSTR pFrom;
    LPCSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCSTR lpszProgressTitle;
}

alias SHFILEOPSTRUCTA = _SHFILEOPSTRUCTA;
alias LPSHFILEOPSTRUCTA = _SHFILEOPSTRUCTA*;

struct _SHFILEOPSTRUCTW
{
    HWND hwnd;
    UINT wFunc;
    LPCWSTR pFrom;
    LPCWSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCWSTR lpszProgressTitle;
}

alias SHFILEOPSTRUCTW = _SHFILEOPSTRUCTW;
alias LPSHFILEOPSTRUCTW = _SHFILEOPSTRUCTW*;

alias SHFILEOPSTRUCT = _SHFILEOPSTRUCTA;
alias LPSHFILEOPSTRUCT = _SHFILEOPSTRUCTA*;

int SHFileOperationA (LPSHFILEOPSTRUCTA lpFileOp);
int SHFileOperationW (LPSHFILEOPSTRUCTW lpFileOp);

void SHFreeNameMappings (HANDLE hNameMappings);

struct _SHNAMEMAPPINGA
{
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
}

alias SHNAMEMAPPINGA = _SHNAMEMAPPINGA;
alias LPSHNAMEMAPPINGA = _SHNAMEMAPPINGA*;

struct _SHNAMEMAPPINGW
{
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
}

alias SHNAMEMAPPINGW = _SHNAMEMAPPINGW;
alias LPSHNAMEMAPPINGW = _SHNAMEMAPPINGW*;

alias SHNAMEMAPPING = _SHNAMEMAPPINGA;
alias LPSHNAMEMAPPING = _SHNAMEMAPPINGA*;

struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void* lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;

    union
    {
        HANDLE hIcon;
        HANDLE hMonitor;
    }

    HANDLE hProcess;
}

alias SHELLEXECUTEINFOA = _SHELLEXECUTEINFOA;
alias LPSHELLEXECUTEINFOA = _SHELLEXECUTEINFOA*;

struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void* lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;

    union
    {
        HANDLE hIcon;
        HANDLE hMonitor;
    }

    HANDLE hProcess;
}

alias SHELLEXECUTEINFOW = _SHELLEXECUTEINFOW;
alias LPSHELLEXECUTEINFOW = _SHELLEXECUTEINFOW*;

alias SHELLEXECUTEINFO = _SHELLEXECUTEINFOA;
alias LPSHELLEXECUTEINFO = _SHELLEXECUTEINFOA*;

WINBOOL ShellExecuteExA (SHELLEXECUTEINFOA* pExecInfo);
WINBOOL ShellExecuteExW (SHELLEXECUTEINFOW* pExecInfo);

struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    WINBOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
}

alias SHCREATEPROCESSINFOW = _SHCREATEPROCESSINFOW;
alias PSHCREATEPROCESSINFOW = _SHCREATEPROCESSINFOW*;

WINBOOL SHCreateProcessAsUserW (PSHCREATEPROCESSINFOW pscpi);

struct _SHQUERYRBINFO
{
    DWORD cbSize;
    long i64Size;
    long i64NumItems;
}

alias SHQUERYRBINFO = _SHQUERYRBINFO;
alias LPSHQUERYRBINFO = _SHQUERYRBINFO*;

HRESULT SHQueryRecycleBinA (LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
HRESULT SHQueryRecycleBinW (LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);

HRESULT SHEmptyRecycleBinA (HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
HRESULT SHEmptyRecycleBinW (HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);

struct _NOTIFYICONDATAA
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    CHAR[128] szTip;
    DWORD dwState;
    DWORD dwStateMask;
    CHAR[256] szInfo;

    union
    {
        UINT uTimeout;
        UINT uVersion;
    }

    CHAR[64] szInfoTitle;
    DWORD dwInfoFlags;
    GUID guidItem;
}

alias NOTIFYICONDATAA = _NOTIFYICONDATAA;
alias PNOTIFYICONDATAA = _NOTIFYICONDATAA*;

struct _NOTIFYICONDATAW
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR[128] szTip;
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR[256] szInfo;

    union
    {
        UINT uTimeout;
        UINT uVersion;
    }

    WCHAR[64] szInfoTitle;
    DWORD dwInfoFlags;
    GUID guidItem;
}

alias NOTIFYICONDATAW = _NOTIFYICONDATAW;
alias PNOTIFYICONDATAW = _NOTIFYICONDATAW*;

alias NOTIFYICONDATA = _NOTIFYICONDATAA;
alias PNOTIFYICONDATA = _NOTIFYICONDATAA*;

struct _NOTIFYICONIDENTIFIER
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
}

alias NOTIFYICONIDENTIFIER = _NOTIFYICONIDENTIFIER;
alias PNOTIFYICONIDENTIFIER = _NOTIFYICONIDENTIFIER*;

WINBOOL Shell_NotifyIconA (DWORD dwMessage, PNOTIFYICONDATAA lpData);
WINBOOL Shell_NotifyIconW (DWORD dwMessage, PNOTIFYICONDATAW lpData);

struct _SHFILEINFOA
{
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    CHAR[260] szDisplayName;
    CHAR[80] szTypeName;
}

alias SHFILEINFOA = _SHFILEINFOA;

struct _SHFILEINFOW
{
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    WCHAR[260] szDisplayName;
    WCHAR[80] szTypeName;
}

alias SHFILEINFOW = _SHFILEINFOW;

alias SHFILEINFO = _SHFILEINFOA;

DWORD_PTR SHGetFileInfoA (LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA* psfi, UINT cbFileInfo, UINT uFlags);
DWORD_PTR SHGetFileInfoW (LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW* psfi, UINT cbFileInfo, UINT uFlags);

WINBOOL SHGetDiskFreeSpaceExA (LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
WINBOOL SHGetDiskFreeSpaceExW (LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
WINBOOL SHGetNewLinkInfoA (LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, WINBOOL* pfMustCopy, UINT uFlags);
WINBOOL SHGetNewLinkInfoW (LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, WINBOOL* pfMustCopy, UINT uFlags);

WINBOOL SHInvokePrinterCommandA (HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, WINBOOL fModal);
WINBOOL SHInvokePrinterCommandW (HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, WINBOOL fModal);

HRESULT SHLoadNonloadedIconOverlayIdentifiers ();
HRESULT SHIsFileAvailableOffline (PCWSTR pwszPath, DWORD* pdwStatus);

HRESULT SHSetLocalizedName (PCWSTR pszPath, PCWSTR pszResModule, int idsRes);

int ShellMessageBoxA (HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle, ...);
int ShellMessageBoxW (HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle, ...);

WINBOOL IsLFNDriveA (LPCSTR pszPath);
WINBOOL IsLFNDriveW (LPCWSTR pszPath);

HRESULT SHEnumerateUnreadMailAccountsA (HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
HRESULT SHEnumerateUnreadMailAccountsW (HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);
HRESULT SHGetUnreadMailCountA (HKEY hKeyUser, LPCSTR pszMailAddress, DWORD* pdwCount, FILETIME* pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
HRESULT SHGetUnreadMailCountW (HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD* pdwCount, FILETIME* pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);
HRESULT SHSetUnreadMailCountA (LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
HRESULT SHSetUnreadMailCountW (LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);

WINBOOL SHTestTokenMembership (HANDLE hToken, ULONG ulRID);

HRESULT SHGetImageList (int iImageList, const IID* riid, void** ppvObj);

alias PFNCANSHAREFOLDERW = c_long function (PCWSTR pszPath);
alias PFNSHOWSHAREFOLDERUIW = c_long function (HWND hwndParent, PCWSTR pszPath);

struct _PERF_DATA_BLOCK
{
    WCHAR[4] Signature;
    DWORD LittleEndian;
    DWORD Version;
    DWORD Revision;
    DWORD TotalByteLength;
    DWORD HeaderLength;
    DWORD NumObjectTypes;
    LONG DefaultObject;
    SYSTEMTIME SystemTime;
    LARGE_INTEGER PerfTime;
    LARGE_INTEGER PerfFreq;
    LARGE_INTEGER PerfTime100nSec;
    DWORD SystemNameLength;
    DWORD SystemNameOffset;
}

alias PERF_DATA_BLOCK = _PERF_DATA_BLOCK;
alias PPERF_DATA_BLOCK = _PERF_DATA_BLOCK*;

struct _PERF_OBJECT_TYPE
{
    DWORD TotalByteLength;
    DWORD DefinitionLength;
    DWORD HeaderLength;
    DWORD ObjectNameTitleIndex;

    DWORD ObjectNameTitle;

    DWORD ObjectHelpTitleIndex;

    DWORD ObjectHelpTitle;

    DWORD DetailLevel;
    DWORD NumCounters;
    LONG DefaultCounter;
    LONG NumInstances;
    DWORD CodePage;
    LARGE_INTEGER PerfTime;
    LARGE_INTEGER PerfFreq;
}

alias PERF_OBJECT_TYPE = _PERF_OBJECT_TYPE;
alias PPERF_OBJECT_TYPE = _PERF_OBJECT_TYPE*;

struct _PERF_COUNTER_DEFINITION
{
    DWORD ByteLength;
    DWORD CounterNameTitleIndex;

    DWORD CounterNameTitle;

    DWORD CounterHelpTitleIndex;

    DWORD CounterHelpTitle;

    LONG DefaultScale;
    DWORD DetailLevel;
    DWORD CounterType;
    DWORD CounterSize;
    DWORD CounterOffset;
}

alias PERF_COUNTER_DEFINITION = _PERF_COUNTER_DEFINITION;
alias PPERF_COUNTER_DEFINITION = _PERF_COUNTER_DEFINITION*;

struct _PERF_INSTANCE_DEFINITION
{
    DWORD ByteLength;
    DWORD ParentObjectTitleIndex;
    DWORD ParentObjectInstance;
    LONG UniqueID;
    DWORD NameOffset;
    DWORD NameLength;
}

alias PERF_INSTANCE_DEFINITION = _PERF_INSTANCE_DEFINITION;
alias PPERF_INSTANCE_DEFINITION = _PERF_INSTANCE_DEFINITION*;

struct _PERF_COUNTER_BLOCK
{
    DWORD ByteLength;
}

alias PERF_COUNTER_BLOCK = _PERF_COUNTER_BLOCK;
alias PPERF_COUNTER_BLOCK = _PERF_COUNTER_BLOCK*;

alias PM_OPEN_PROC = c_ulong function (LPWSTR);
alias PM_COLLECT_PROC = c_ulong function (LPWSTR, LPVOID*, LPDWORD, LPDWORD);
alias PM_CLOSE_PROC = c_ulong function ();
alias PM_QUERY_PROC = c_ulong function (LPDWORD, LPVOID*, LPDWORD, LPDWORD);

struct timeval
{
    c_long tv_sec;
    c_long tv_usec;
}

alias u_char = ubyte;
alias u_short = ushort;
alias u_int = uint;

alias u_long = c_ulong;

alias u_int64 = ulong;

struct in_addr
{
    union _Anonymous_75
    {
        struct _Anonymous_76
        {
            u_char s_b1;
            u_char s_b2;
            u_char s_b3;
            u_char s_b4;
        }

        _Anonymous_76 S_un_b;

        struct _Anonymous_77
        {
            u_short s_w1;
            u_short s_w2;
        }

        _Anonymous_77 S_un_w;
        u_long S_addr;
    }

    _Anonymous_75 S_un;
}

alias IN_ADDR = in_addr;
alias PIN_ADDR = in_addr*;
alias LPIN_ADDR = in_addr*;

alias SOCKET = ulong;

struct fd_set
{
    u_int fd_count;
    SOCKET[64] fd_array;
}

int __WSAFDIsSet (SOCKET, fd_set*);

alias FD_SET = fd_set;
alias PFD_SET = fd_set*;
alias LPFD_SET = fd_set*;

struct hostent
{
    char* h_name;
    char** h_aliases;
    short h_addrtype;
    short h_length;
    char** h_addr_list;
}

struct netent
{
    char* n_name;
    char** n_aliases;
    short n_addrtype;
    u_long n_net;
}

struct servent
{
    char* s_name;
    char** s_aliases;

    char* s_proto;
    short s_port;
}

struct protoent
{
    char* p_name;
    char** p_aliases;
    short p_proto;
}

struct sockproto
{
    u_short sp_family;
    u_short sp_protocol;
}

struct linger
{
    u_short l_onoff;
    u_short l_linger;
}

struct sockaddr
{
    u_short sa_family;
    char[14] sa_data;
}

struct sockaddr_in
{
    short sin_family;
    u_short sin_port;
    in_addr sin_addr;
    char[8] sin_zero;
}

alias HOSTENT = hostent;
alias PHOSTENT = hostent*;
alias LPHOSTENT = hostent*;

alias SERVENT = servent;
alias PSERVENT = servent*;
alias LPSERVENT = servent*;

alias PROTOENT = protoent;
alias PPROTOENT = protoent*;
alias LPPROTOENT = protoent*;

alias SOCKADDR = sockaddr;
alias PSOCKADDR = sockaddr*;
alias LPSOCKADDR = sockaddr*;

alias SOCKADDR_IN = sockaddr_in;
alias PSOCKADDR_IN = sockaddr_in*;
alias LPSOCKADDR_IN = sockaddr_in*;

alias LINGER = linger;
alias PLINGER = linger*;
alias LPLINGER = linger*;

alias TIMEVAL = timeval;
alias PTIMEVAL = timeval*;
alias LPTIMEVAL = timeval*;

struct ip_mreq
{
    in_addr imr_multiaddr;
    in_addr imr_interface;
}

struct WSAData
{
    WORD wVersion;
    WORD wHighVersion;

    ushort iMaxSockets;
    ushort iMaxUdpDg;
    char* lpVendorInfo;
    char[257] szDescription;
    char[129] szSystemStatus;
}

alias WSADATA = WSAData;
alias LPWSADATA = WSAData*;

struct _TRANSMIT_FILE_BUFFERS
{
    LPVOID Head;
    DWORD HeadLength;
    LPVOID Tail;
    DWORD TailLength;
}

alias TRANSMIT_FILE_BUFFERS = _TRANSMIT_FILE_BUFFERS;
alias PTRANSMIT_FILE_BUFFERS = _TRANSMIT_FILE_BUFFERS*;
alias LPTRANSMIT_FILE_BUFFERS = _TRANSMIT_FILE_BUFFERS*;

SOCKET accept (SOCKET s, sockaddr* addr, int* addrlen);
int bind (SOCKET s, const(sockaddr)* name, int namelen);
int closesocket (SOCKET s);
int connect (SOCKET s, const(sockaddr)* name, int namelen);
int ioctlsocket (SOCKET s, c_long cmd, u_long* argp);
int getpeername (SOCKET s, sockaddr* name, int* namelen);
int getsockname (SOCKET s, sockaddr* name, int* namelen);
int getsockopt (SOCKET s, int level, int optname, char* optval, int* optlen);

u_long htonl (u_long hostlong);
u_short htons (u_short hostshort);

c_ulong inet_addr (const(char)* cp);
char* inet_ntoa (in_addr in_);
int listen (SOCKET s, int backlog);

u_long ntohl (u_long netlong);
u_short ntohs (u_short netshort);

int recv (SOCKET s, char* buf, int len, int flags);
int recvfrom (SOCKET s, char* buf, int len, int flags, sockaddr* from, int* fromlen);

int select (int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, const PTIMEVAL timeout);

int send (SOCKET s, const(char)* buf, int len, int flags);
int sendto (SOCKET s, const(char)* buf, int len, int flags, const(sockaddr)* to, int tolen);
int setsockopt (SOCKET s, int level, int optname, const(char)* optval, int optlen);
int shutdown (SOCKET s, int how);
SOCKET socket (int af, int type, int protocol);
hostent* gethostbyaddr (const(char)* addr, int len, int type);
hostent* gethostbyname (const(char)* name);

int gethostname (char* name, int namelen);

servent* getservbyport (int port, const(char)* proto);
servent* getservbyname (const(char)* name, const(char)* proto);
protoent* getprotobynumber (int number);
protoent* getprotobyname (const(char)* name);
int WSAStartup (WORD wVersionRequested, LPWSADATA lpWSAData);
int WSACleanup ();
void WSASetLastError (int iError);
int WSAGetLastError ();
WINBOOL WSAIsBlocking ();
int WSAUnhookBlockingHook ();
FARPROC WSASetBlockingHook (FARPROC lpBlockFunc);
int WSACancelBlockingCall ();
HANDLE WSAAsyncGetServByName (HWND hWnd, u_int wMsg, const(char)* name, const(char)* proto, char* buf, int buflen);
HANDLE WSAAsyncGetServByPort (HWND hWnd, u_int wMsg, int port, const(char)* proto, char* buf, int buflen);
HANDLE WSAAsyncGetProtoByName (HWND hWnd, u_int wMsg, const(char)* name, char* buf, int buflen);
HANDLE WSAAsyncGetProtoByNumber (HWND hWnd, u_int wMsg, int number, char* buf, int buflen);
HANDLE WSAAsyncGetHostByName (HWND hWnd, u_int wMsg, const(char)* name, char* buf, int buflen);
HANDLE WSAAsyncGetHostByAddr (HWND hWnd, u_int wMsg, const(char)* addr, int len, int type, char* buf, int buflen);
int WSACancelAsyncRequest (HANDLE hAsyncTaskHandle);
int WSAAsyncSelect (SOCKET s, HWND hWnd, u_int wMsg, c_long lEvent);

int WSARecvEx (SOCKET s, char* buf, int len, int* flags);

WINBOOL TransmitFile (SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved);
WINBOOL AcceptEx (SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped);
void GetAcceptExSockaddrs (PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, sockaddr** LocalSockaddr, LPINT LocalSockaddrLength, sockaddr** RemoteSockaddr, LPINT RemoteSockaddrLength);

alias ALG_ID = uint;

alias HCRYPTHASH = ulong;
alias HCRYPTKEY = ulong;
alias HCRYPTPROV = ulong;

struct _CMS_KEY_INFO
{
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE* pbOID;
    DWORD cbOID;
}

alias CMS_KEY_INFO = _CMS_KEY_INFO;
alias PCMS_KEY_INFO = _CMS_KEY_INFO*;

struct _HMAC_Info
{
    ALG_ID HashAlgid;
    BYTE* pbInnerString;
    DWORD cbInnerString;
    BYTE* pbOuterString;
    DWORD cbOuterString;
}

alias HMAC_INFO = _HMAC_Info;
alias PHMAC_INFO = _HMAC_Info*;

struct _SCHANNEL_ALG
{
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
}

alias SCHANNEL_ALG = _SCHANNEL_ALG;
alias PSCHANNEL_ALG = _SCHANNEL_ALG*;

struct _PROV_ENUMALGS
{
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR[20] szName;
}

alias PROV_ENUMALGS = _PROV_ENUMALGS;

struct _PROV_ENUMALGS_EX
{
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR[20] szName;
    DWORD dwLongNameLen;
    CHAR[40] szLongName;
}

alias PROV_ENUMALGS_EX = _PROV_ENUMALGS_EX;

struct _PUBLICKEYSTRUC
{
    BYTE bType;
    BYTE bVersion;
    WORD reserved;
    ALG_ID aiKeyAlg;
}

alias BLOBHEADER = _PUBLICKEYSTRUC;
alias PUBLICKEYSTRUC = _PUBLICKEYSTRUC;

struct _RSAPUBKEY
{
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;
}

alias RSAPUBKEY = _RSAPUBKEY;

struct _PUBKEY
{
    DWORD magic;
    DWORD bitlen;
}

alias DHPUBKEY = _PUBKEY;
alias DSSPUBKEY = _PUBKEY;
alias KEAPUBKEY = _PUBKEY;
alias TEKPUBKEY = _PUBKEY;

struct _DSSSEED
{
    DWORD counter;
    BYTE[20] seed;
}

alias DSSSEED = _DSSSEED;

struct _PUBKEYVER3
{
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DSSSEED DSSSeed;
}

alias DHPUBKEY_VER3 = _PUBKEYVER3;
alias DSSPUBKEY_VER3 = _PUBKEYVER3;

struct _PRIVKEYVER3
{
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DWORD bitlenX;
    DSSSEED DSSSeed;
}

alias DHPRIVKEY_VER3 = _PRIVKEYVER3;
alias DSSPRIVKEY_VER3 = _PRIVKEYVER3;

struct _KEY_TYPE_SUBTYPE
{
    DWORD dwKeySpec;
    GUID Type;
    GUID Subtype;
}

alias KEY_TYPE_SUBTYPE = _KEY_TYPE_SUBTYPE;
alias PKEY_TYPE_SUBTYPE = _KEY_TYPE_SUBTYPE*;

struct _CERT_FORTEZZA_DATA_PROP
{
    ubyte[8] SerialNumber;
    int CertIndex;
    ubyte[36] CertLabel;
}

alias CERT_FORTEZZA_DATA_PROP = _CERT_FORTEZZA_DATA_PROP;

struct _CRYPT_RC4_KEY_STATE
{
    ubyte[16] Key;
    ubyte[256] SBox;
    ubyte i;
    ubyte j;
}

alias CRYPT_RC4_KEY_STATE = _CRYPT_RC4_KEY_STATE;
alias PCRYPT_RC4_KEY_STATE = _CRYPT_RC4_KEY_STATE*;

struct _CRYPT_DES_KEY_STATE
{
    ubyte[8] Key;
    ubyte[8] IV;
    ubyte[8] Feedback;
}

alias CRYPT_DES_KEY_STATE = _CRYPT_DES_KEY_STATE;
alias PCRYPT_DES_KEY_STATE = _CRYPT_DES_KEY_STATE*;

struct _CRYPT_3DES_KEY_STATE
{
    ubyte[24] Key;
    ubyte[8] IV;
    ubyte[8] Feedback;
}

alias CRYPT_3DES_KEY_STATE = _CRYPT_3DES_KEY_STATE;
alias PCRYPT_3DES_KEY_STATE = _CRYPT_3DES_KEY_STATE*;

struct _CRYPTOAPI_BLOB
{
    DWORD cbData;
    BYTE* pbData;
}

alias CRYPT_INTEGER_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_INTEGER_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_UINT_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_UINT_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_OBJID_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_OBJID_BLOB = _CRYPTOAPI_BLOB*;
alias CERT_NAME_BLOB = _CRYPTOAPI_BLOB;
alias PCERT_NAME_BLOB = _CRYPTOAPI_BLOB*;
alias CERT_RDN_VALUE_BLOB = _CRYPTOAPI_BLOB;
alias PCERT_RDN_VALUE_BLOB = _CRYPTOAPI_BLOB*;
alias CERT_BLOB = _CRYPTOAPI_BLOB;
alias PCERT_BLOB = _CRYPTOAPI_BLOB*;
alias CRL_BLOB = _CRYPTOAPI_BLOB;
alias PCRL_BLOB = _CRYPTOAPI_BLOB*;
alias DATA_BLOB = _CRYPTOAPI_BLOB;
alias PDATA_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_DATA_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_DATA_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_HASH_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_HASH_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_DIGEST_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_DIGEST_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_DER_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_DER_BLOB = _CRYPTOAPI_BLOB*;
alias CRYPT_ATTR_BLOB = _CRYPTOAPI_BLOB;
alias PCRYPT_ATTR_BLOB = _CRYPTOAPI_BLOB*;

WINBOOL CryptAcquireContextA (HCRYPTPROV* phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags);
WINBOOL CryptAcquireContextW (HCRYPTPROV* phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags);

WINBOOL CryptReleaseContext (HCRYPTPROV hProv, DWORD dwFlags);
WINBOOL CryptGenRandom (HCRYPTPROV hProv, DWORD dwLen, BYTE* pbBuffer);

struct _CMS_DH_KEY_INFO
{
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void* pReserved;
}

alias CMS_DH_KEY_INFO = _CMS_DH_KEY_INFO;
alias PCMS_DH_KEY_INFO = _CMS_DH_KEY_INFO*;

WINBOOL CryptGenKey (HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY* phKey);
WINBOOL CryptDeriveKey (HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY* phKey);
WINBOOL CryptDestroyKey (HCRYPTKEY hKey);
WINBOOL CryptSetKeyParam (HCRYPTKEY hKey, DWORD dwParam, const(BYTE)* pbData, DWORD dwFlags);
WINBOOL CryptGetKeyParam (HCRYPTKEY hKey, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags);
WINBOOL CryptSetHashParam (HCRYPTHASH hHash, DWORD dwParam, const(BYTE)* pbData, DWORD dwFlags);
WINBOOL CryptGetHashParam (HCRYPTHASH hHash, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags);
WINBOOL CryptSetProvParam (HCRYPTPROV hProv, DWORD dwParam, const(BYTE)* pbData, DWORD dwFlags);
WINBOOL CryptGetProvParam (HCRYPTPROV hProv, DWORD dwParam, BYTE* pbData, DWORD* pdwDataLen, DWORD dwFlags);
WINBOOL CryptGetUserKey (HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY* phUserKey);
WINBOOL CryptExportKey (HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen);
WINBOOL CryptImportKey (HCRYPTPROV hProv, const(BYTE)* pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY* phKey);
WINBOOL CryptEncrypt (HCRYPTKEY hKey, HCRYPTHASH hHash, WINBOOL Final, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen, DWORD dwBufLen);
WINBOOL CryptDecrypt (HCRYPTKEY hKey, HCRYPTHASH hHash, WINBOOL Final, DWORD dwFlags, BYTE* pbData, DWORD* pdwDataLen);
WINBOOL CryptCreateHash (HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH* phHash);
WINBOOL CryptHashData (HCRYPTHASH hHash, const(BYTE)* pbData, DWORD dwDataLen, DWORD dwFlags);
WINBOOL CryptHashSessionKey (HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags);
WINBOOL CryptDestroyHash (HCRYPTHASH hHash);
WINBOOL CryptSignHashA (HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE* pbSignature, DWORD* pdwSigLen);
WINBOOL CryptSignHashW (HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE* pbSignature, DWORD* pdwSigLen);
WINBOOL CryptVerifySignatureA (HCRYPTHASH hHash, const(BYTE)* pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags);
WINBOOL CryptVerifySignatureW (HCRYPTHASH hHash, const(BYTE)* pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags);
WINBOOL CryptSetProviderA (LPCSTR pszProvName, DWORD dwProvType);
WINBOOL CryptSetProviderW (LPCWSTR pszProvName, DWORD dwProvType);
WINBOOL CryptSetProviderExA (LPCSTR pszProvName, DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags);
WINBOOL CryptSetProviderExW (LPCWSTR pszProvName, DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags);
WINBOOL CryptGetDefaultProviderA (DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD* pcbProvName);
WINBOOL CryptGetDefaultProviderW (DWORD dwProvType, DWORD* pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD* pcbProvName);
WINBOOL CryptEnumProviderTypesA (DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPSTR szTypeName, DWORD* pcbTypeName);
WINBOOL CryptEnumProviderTypesW (DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPWSTR szTypeName, DWORD* pcbTypeName);
WINBOOL CryptEnumProvidersA (DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPSTR szProvName, DWORD* pcbProvName);
WINBOOL CryptEnumProvidersW (DWORD dwIndex, DWORD* pdwReserved, DWORD dwFlags, DWORD* pdwProvType, LPWSTR szProvName, DWORD* pcbProvName);
WINBOOL CryptContextAddRef (HCRYPTPROV hProv, DWORD* pdwReserved, DWORD dwFlags);
WINBOOL CryptDuplicateKey (HCRYPTKEY hKey, DWORD* pdwReserved, DWORD dwFlags, HCRYPTKEY* phKey);
WINBOOL CryptDuplicateHash (HCRYPTHASH hHash, DWORD* pdwReserved, DWORD dwFlags, HCRYPTHASH* phHash);
WINBOOL GetEncSChannel (BYTE** pData, DWORD* dwDecSize);

alias HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = ulong;
alias HCRYPTPROV_LEGACY = ulong;

alias NTSTATUS = c_long;
alias PNTSTATUS = c_long*;

struct __BCRYPT_KEY_LENGTHS_STRUCT
{
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
}

alias BCRYPT_KEY_LENGTHS_STRUCT = __BCRYPT_KEY_LENGTHS_STRUCT;

alias BCRYPT_AUTH_TAG_LENGTHS_STRUCT = __BCRYPT_KEY_LENGTHS_STRUCT;

struct _BCRYPT_OID
{
    ULONG cbOID;
    PUCHAR pbOID;
}

alias BCRYPT_OID = _BCRYPT_OID;

struct _BCRYPT_OID_LIST
{
    ULONG dwOIDCount;
    BCRYPT_OID* pOIDs;
}

alias BCRYPT_OID_LIST = _BCRYPT_OID_LIST;

struct _BCRYPT_PKCS1_PADDING_INFO
{
    LPCWSTR pszAlgId;
}

alias BCRYPT_PKCS1_PADDING_INFO = _BCRYPT_PKCS1_PADDING_INFO;

struct _BCRYPT_PSS_PADDING_INFO
{
    LPCWSTR pszAlgId;
    ULONG cbSalt;
}

alias BCRYPT_PSS_PADDING_INFO = _BCRYPT_PSS_PADDING_INFO;

struct _BCRYPT_OAEP_PADDING_INFO
{
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
}

alias BCRYPT_OAEP_PADDING_INFO = _BCRYPT_OAEP_PADDING_INFO;

struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
}

alias BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
alias PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO*;

struct _BCryptBuffer
{
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
}

alias BCryptBuffer = _BCryptBuffer;
alias PBCryptBuffer = _BCryptBuffer*;

struct _BCryptBufferDesc
{
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
}

alias BCryptBufferDesc = _BCryptBufferDesc;
alias PBCryptBufferDesc = _BCryptBufferDesc*;

alias BCRYPT_HANDLE = void*;
alias BCRYPT_ALG_HANDLE = void*;
alias BCRYPT_KEY_HANDLE = void*;
alias BCRYPT_HASH_HANDLE = void*;
alias BCRYPT_SECRET_HANDLE = void*;

struct _BCRYPT_KEY_BLOB
{
    ULONG Magic;
}

alias BCRYPT_KEY_BLOB = _BCRYPT_KEY_BLOB;

struct _BCRYPT_RSAKEY_BLOB
{
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
}

alias BCRYPT_RSAKEY_BLOB = _BCRYPT_RSAKEY_BLOB;

struct _BCRYPT_ECCKEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
}

alias BCRYPT_ECCKEY_BLOB = _BCRYPT_ECCKEY_BLOB;
alias PBCRYPT_ECCKEY_BLOB = _BCRYPT_ECCKEY_BLOB*;

struct _BCRYPT_DH_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
}

alias BCRYPT_DH_KEY_BLOB = _BCRYPT_DH_KEY_BLOB;
alias PBCRYPT_DH_KEY_BLOB = _BCRYPT_DH_KEY_BLOB*;

struct _BCRYPT_DH_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
}

alias BCRYPT_DH_PARAMETER_HEADER = _BCRYPT_DH_PARAMETER_HEADER;

struct _BCRYPT_DSA_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR[4] Count;
    UCHAR[20] Seed;
    UCHAR[20] q;
}

alias BCRYPT_DSA_KEY_BLOB = _BCRYPT_DSA_KEY_BLOB;
alias PBCRYPT_DSA_KEY_BLOB = _BCRYPT_DSA_KEY_BLOB*;

enum HASHALGORITHM_ENUM
{
    DSA_HASH_ALGORITHM_SHA1 = 0,
    DSA_HASH_ALGORITHM_SHA256 = 1,
    DSA_HASH_ALGORITHM_SHA512 = 2
}

enum DSAFIPSVERSION_ENUM
{
    DSA_FIPS186_2 = 0,
    DSA_FIPS186_3 = 1
}

struct _BCRYPT_DSA_KEY_BLOB_V2
{
    ULONG dwMagic;
    ULONG cbKey;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR[4] Count;
}

alias BCRYPT_DSA_KEY_BLOB_V2 = _BCRYPT_DSA_KEY_BLOB_V2;
alias PBCRYPT_DSA_KEY_BLOB_V2 = _BCRYPT_DSA_KEY_BLOB_V2*;

struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
}

alias BCRYPT_KEY_DATA_BLOB_HEADER = _BCRYPT_KEY_DATA_BLOB_HEADER;
alias PBCRYPT_KEY_DATA_BLOB_HEADER = _BCRYPT_KEY_DATA_BLOB_HEADER*;

struct _BCRYPT_DSA_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR[4] Count;
    UCHAR[20] Seed;
    UCHAR[20] q;
}

alias BCRYPT_DSA_PARAMETER_HEADER = _BCRYPT_DSA_PARAMETER_HEADER;

struct _BCRYPT_DSA_PARAMETER_HEADER_V2
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR[4] Count;
}

alias BCRYPT_DSA_PARAMETER_HEADER_V2 = _BCRYPT_DSA_PARAMETER_HEADER_V2;

struct _BCRYPT_ALGORITHM_IDENTIFIER
{
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;
}

alias BCRYPT_ALGORITHM_IDENTIFIER = _BCRYPT_ALGORITHM_IDENTIFIER;

struct _BCRYPT_PROVIDER_NAME
{
    LPWSTR pszProviderName;
}

alias BCRYPT_PROVIDER_NAME = _BCRYPT_PROVIDER_NAME;

struct _BCRYPT_INTERFACE_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;
}

alias BCRYPT_INTERFACE_VERSION = _BCRYPT_INTERFACE_VERSION;
alias PBCRYPT_INTERFACE_VERSION = _BCRYPT_INTERFACE_VERSION*;

struct _CRYPT_INTERFACE_REG
{
    ULONG dwInterface;
    ULONG dwFlags;
    ULONG cFunctions;
    PWSTR* rgpszFunctions;
}

alias CRYPT_INTERFACE_REG = _CRYPT_INTERFACE_REG;
alias PCRYPT_INTERFACE_REG = _CRYPT_INTERFACE_REG*;

struct _CRYPT_IMAGE_REG
{
    PWSTR pszImage;
    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG* rgpInterfaces;
}

alias CRYPT_IMAGE_REG = _CRYPT_IMAGE_REG;
alias PCRYPT_IMAGE_REG = _CRYPT_IMAGE_REG*;

struct _CRYPT_PROVIDER_REG
{
    ULONG cAliases;
    PWSTR* rgpszAliases;
    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
}

alias CRYPT_PROVIDER_REG = _CRYPT_PROVIDER_REG;
alias PCRYPT_PROVIDER_REG = _CRYPT_PROVIDER_REG*;

struct _CRYPT_PROVIDERS
{
    ULONG cProviders;
    PWSTR* rgpszProviders;
}

alias CRYPT_PROVIDERS = _CRYPT_PROVIDERS;
alias PCRYPT_PROVIDERS = _CRYPT_PROVIDERS*;

struct _CRYPT_CONTEXT_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}

alias CRYPT_CONTEXT_CONFIG = _CRYPT_CONTEXT_CONFIG;
alias PCRYPT_CONTEXT_CONFIG = _CRYPT_CONTEXT_CONFIG*;

struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}

alias CRYPT_CONTEXT_FUNCTION_CONFIG = _CRYPT_CONTEXT_FUNCTION_CONFIG;
alias PCRYPT_CONTEXT_FUNCTION_CONFIG = _CRYPT_CONTEXT_FUNCTION_CONFIG*;

struct _CRYPT_CONTEXTS
{
    ULONG cContexts;
    PWSTR* rgpszContexts;
}

alias CRYPT_CONTEXTS = _CRYPT_CONTEXTS;
alias PCRYPT_CONTEXTS = _CRYPT_CONTEXTS*;

struct _CRYPT_CONTEXT_FUNCTIONS
{
    ULONG cFunctions;
    PWSTR* rgpszFunctions;
}

alias CRYPT_CONTEXT_FUNCTIONS = _CRYPT_CONTEXT_FUNCTIONS;
alias PCRYPT_CONTEXT_FUNCTIONS = _CRYPT_CONTEXT_FUNCTIONS*;

struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
    ULONG cProviders;
    PWSTR* rgpszProviders;
}

alias CRYPT_CONTEXT_FUNCTION_PROVIDERS = _CRYPT_CONTEXT_FUNCTION_PROVIDERS;
alias PCRYPT_CONTEXT_FUNCTION_PROVIDERS = _CRYPT_CONTEXT_FUNCTION_PROVIDERS*;

struct _CRYPT_PROPERTY_REF
{
    PWSTR pszProperty;
    ULONG cbValue;
    PUCHAR pbValue;
}

alias CRYPT_PROPERTY_REF = _CRYPT_PROPERTY_REF;
alias PCRYPT_PROPERTY_REF = _CRYPT_PROPERTY_REF*;

struct _CRYPT_IMAGE_REF
{
    PWSTR pszImage;
    ULONG dwFlags;
}

alias CRYPT_IMAGE_REF = _CRYPT_IMAGE_REF;
alias PCRYPT_IMAGE_REF = _CRYPT_IMAGE_REF*;

struct _CRYPT_PROVIDER_REF
{
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;
    ULONG cProperties;
    PCRYPT_PROPERTY_REF* rgpProperties;
    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
}

alias CRYPT_PROVIDER_REF = _CRYPT_PROVIDER_REF;
alias PCRYPT_PROVIDER_REF = _CRYPT_PROVIDER_REF*;

struct _CRYPT_PROVIDER_REFS
{
    ULONG cProviders;
    PCRYPT_PROVIDER_REF* rgpProviders;
}

alias CRYPT_PROVIDER_REFS = _CRYPT_PROVIDER_REFS;
alias PCRYPT_PROVIDER_REFS = _CRYPT_PROVIDER_REFS*;

NTSTATUS BCryptOpenAlgorithmProvider (BCRYPT_ALG_HANDLE* phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
NTSTATUS BCryptEnumAlgorithms (ULONG dwAlgOperations, ULONG* pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER** ppAlgList, ULONG dwFlags);
NTSTATUS BCryptEnumProviders (LPCWSTR pszAlgId, ULONG* pImplCount, BCRYPT_PROVIDER_NAME** ppImplList, ULONG dwFlags);
NTSTATUS BCryptGetProperty (BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptSetProperty (BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS BCryptCloseAlgorithmProvider (BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
void BCryptFreeBuffer (PVOID pvBuffer);
NTSTATUS BCryptGenerateSymmetricKey (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE* phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS BCryptGenerateKeyPair (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE* phKey, ULONG dwLength, ULONG dwFlags);
NTSTATUS BCryptEncrypt (BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void* pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptDecrypt (BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void* pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptExportKey (BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptImportKey (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE* phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS BCryptImportKeyPair (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE* phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS BCryptDuplicateKey (BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE* phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags);
NTSTATUS BCryptFinalizeKeyPair (BCRYPT_KEY_HANDLE hKey, ULONG dwFlags);
NTSTATUS BCryptDestroyKey (BCRYPT_KEY_HANDLE hKey);
NTSTATUS BCryptDestroySecret (BCRYPT_SECRET_HANDLE hSecret);
NTSTATUS BCryptSignHash (BCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptVerifySignature (BCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags);
NTSTATUS BCryptSecretAgreement (BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE* phAgreedSecret, ULONG dwFlags);
NTSTATUS BCryptDeriveKey (BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc* pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptKeyDerivation (BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc* pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG* pcbResult, ULONG dwFlags);
NTSTATUS BCryptCreateHash (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE* phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS BCryptHashData (BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS BCryptFinishHash (BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags);
NTSTATUS BCryptDuplicateHash (BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE* phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags);
NTSTATUS BCryptDestroyHash (BCRYPT_HASH_HANDLE hHash);
NTSTATUS BCryptGenRandom (BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags);
NTSTATUS BCryptDeriveKeyCapi (BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
NTSTATUS BCryptDeriveKeyPBKDF2 (BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
NTSTATUS BCryptResolveProviders (LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG* pcbBuffer, PCRYPT_PROVIDER_REFS* ppBuffer);
NTSTATUS BCryptGetFipsAlgorithmMode (BOOLEAN* pfEnabled);

NTSTATUS BCryptQueryProviderRegistration (LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG* pcbBuffer, PCRYPT_PROVIDER_REG* ppBuffer);
NTSTATUS BCryptEnumRegisteredProviders (ULONG* pcbBuffer, PCRYPT_PROVIDERS* ppBuffer);
NTSTATUS BCryptCreateContext (ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS BCryptDeleteContext (ULONG dwTable, LPCWSTR pszContext);
NTSTATUS BCryptEnumContexts (ULONG dwTable, ULONG* pcbBuffer, PCRYPT_CONTEXTS* ppBuffer);
NTSTATUS BCryptConfigureContext (ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS BCryptQueryContextConfiguration (ULONG dwTable, LPCWSTR pszContext, ULONG* pcbBuffer, PCRYPT_CONTEXT_CONFIG* ppBuffer);
NTSTATUS BCryptAddContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition);
NTSTATUS BCryptRemoveContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction);
NTSTATUS BCryptEnumContextFunctions (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS* ppBuffer);
NTSTATUS BCryptConfigureContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
NTSTATUS BCryptQueryContextFunctionConfiguration (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG* ppBuffer);
NTSTATUS BCryptEnumContextFunctionProviders (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG* pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS* ppBuffer);
NTSTATUS BCryptSetContextFunctionProperty (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue);
NTSTATUS BCryptQueryContextFunctionProperty (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG* pcbValue, PUCHAR* ppbValue);
NTSTATUS BCryptRegisterConfigChangeNotify (HANDLE* phEvent);

alias SECURITY_STATUS = c_long;

alias PFN_NCRYPT_ALLOC = void* function (SIZE_T cbSize);
alias PFN_NCRYPT_FREE = void function (LPVOID pv);

struct NCRYPT_ALLOC_PARA
{
    DWORD cbSize;
    PFN_NCRYPT_ALLOC pfnAlloc;
    PFN_NCRYPT_FREE pfnFree;
}

alias NCryptBuffer = _BCryptBuffer;
alias PNCryptBuffer = _BCryptBuffer*;
alias NCryptBufferDesc = _BCryptBufferDesc;
alias PNCryptBufferDesc = _BCryptBufferDesc*;

alias NCRYPT_HANDLE = ulong;
alias NCRYPT_PROV_HANDLE = ulong;
alias NCRYPT_KEY_HANDLE = ulong;
alias NCRYPT_HASH_HANDLE = ulong;
alias NCRYPT_SECRET_HANDLE = ulong;

struct _NCryptAlgorithmName
{
    LPWSTR pszName;
    DWORD dwClass;
    DWORD dwAlgOperations;
    DWORD dwFlags;
}

alias NCryptAlgorithmName = _NCryptAlgorithmName;

struct NCryptKeyName
{
    LPWSTR pszName;
    LPWSTR pszAlgid;
    DWORD dwLegacyKeySpec;
    DWORD dwFlags;
}

struct NCryptProviderName
{
    LPWSTR pszName;
    LPWSTR pszComment;
}

SECURITY_STATUS NCryptOpenStorageProvider (NCRYPT_PROV_HANDLE* phProvider, LPCWSTR pszProviderName, DWORD dwFlags);
SECURITY_STATUS NCryptEnumAlgorithms (NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD* pdwAlgCount, NCryptAlgorithmName** ppAlgList, DWORD dwFlags);
SECURITY_STATUS NCryptIsAlgSupported (NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags);
SECURITY_STATUS NCryptEnumKeys (NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName** ppKeyName, PVOID* ppEnumState, DWORD dwFlags);
SECURITY_STATUS NCryptEnumStorageProviders (DWORD* pdwProviderCount, NCryptProviderName** ppProviderList, DWORD dwFlags);
SECURITY_STATUS NCryptFreeBuffer (PVOID pvInput);
SECURITY_STATUS NCryptOpenKey (NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE* phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
SECURITY_STATUS NCryptCreatePersistedKey (NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE* phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);

struct __NCRYPT_UI_POLICY
{
    DWORD dwVersion;
    DWORD dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
}

alias NCRYPT_UI_POLICY = __NCRYPT_UI_POLICY;

struct __NCRYPT_SUPPORTED_LENGTHS
{
    DWORD dwMinLength;
    DWORD dwMaxLength;
    DWORD dwIncrement;
    DWORD dwDefaultLength;
}

alias NCRYPT_SUPPORTED_LENGTHS = __NCRYPT_SUPPORTED_LENGTHS;

SECURITY_STATUS NCryptGetProperty (NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
SECURITY_STATUS NCryptSetProperty (NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags);
SECURITY_STATUS NCryptFinalizeKey (NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
SECURITY_STATUS NCryptEncrypt (NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void* pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
SECURITY_STATUS NCryptDecrypt (NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void* pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);

SECURITY_STATUS NCryptImportKey (NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc* pParameterList, NCRYPT_KEY_HANDLE* phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags);
SECURITY_STATUS NCryptExportKey (NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc* pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD* pcbResult, DWORD dwFlags);
SECURITY_STATUS NCryptSignHash (NCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD* pcbResult, DWORD dwFlags);
SECURITY_STATUS NCryptVerifySignature (NCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags);
SECURITY_STATUS NCryptDeleteKey (NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
SECURITY_STATUS NCryptFreeObject (NCRYPT_HANDLE hObject);
WINBOOL NCryptIsKeyHandle (NCRYPT_KEY_HANDLE hKey);
SECURITY_STATUS NCryptTranslateHandle (NCRYPT_PROV_HANDLE* phProvider, NCRYPT_KEY_HANDLE* phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags);
SECURITY_STATUS NCryptNotifyChangeKey (NCRYPT_PROV_HANDLE hProvider, HANDLE* phEvent, DWORD dwFlags);
SECURITY_STATUS NCryptSecretAgreement (NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE* phAgreedSecret, DWORD dwFlags);
SECURITY_STATUS NCryptDeriveKey (NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc* pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD* pcbResult, ULONG dwFlags);

struct _CRYPT_BIT_BLOB
{
    DWORD cbData;
    BYTE* pbData;
    DWORD cUnusedBits;
}

alias CRYPT_BIT_BLOB = _CRYPT_BIT_BLOB;
alias PCRYPT_BIT_BLOB = _CRYPT_BIT_BLOB*;

struct _CRYPT_ALGORITHM_IDENTIFIER
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
}

alias CRYPT_ALGORITHM_IDENTIFIER = _CRYPT_ALGORITHM_IDENTIFIER;
alias PCRYPT_ALGORITHM_IDENTIFIER = _CRYPT_ALGORITHM_IDENTIFIER*;

struct _CRYPT_OBJID_TABLE
{
    DWORD dwAlgId;
    LPCSTR pszObjId;
}

alias CRYPT_OBJID_TABLE = _CRYPT_OBJID_TABLE;
alias PCRYPT_OBJID_TABLE = _CRYPT_OBJID_TABLE*;

struct _CRYPT_HASH_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
}

alias CRYPT_HASH_INFO = _CRYPT_HASH_INFO;
alias PCRYPT_HASH_INFO = _CRYPT_HASH_INFO*;

struct _CERT_EXTENSION
{
    LPSTR pszObjId;
    WINBOOL fCritical;
    CRYPT_OBJID_BLOB Value;
}

alias CERT_EXTENSION = _CERT_EXTENSION;
alias PCERT_EXTENSION = _CERT_EXTENSION*;

alias PCCERT_EXTENSION = const(_CERT_EXTENSION)*;

struct _CRYPT_ATTRIBUTE_TYPE_VALUE
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}

alias CRYPT_ATTRIBUTE_TYPE_VALUE = _CRYPT_ATTRIBUTE_TYPE_VALUE;
alias PCRYPT_ATTRIBUTE_TYPE_VALUE = _CRYPT_ATTRIBUTE_TYPE_VALUE*;

struct _CRYPT_ATTRIBUTE
{
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
}

alias CRYPT_ATTRIBUTE = _CRYPT_ATTRIBUTE;
alias PCRYPT_ATTRIBUTE = _CRYPT_ATTRIBUTE*;

struct _CRYPT_ATTRIBUTES
{
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
}

alias CRYPT_ATTRIBUTES = _CRYPT_ATTRIBUTES;
alias PCRYPT_ATTRIBUTES = _CRYPT_ATTRIBUTES*;

struct _CERT_RDN_ATTR
{
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
}

alias CERT_RDN_ATTR = _CERT_RDN_ATTR;
alias PCERT_RDN_ATTR = _CERT_RDN_ATTR*;

struct _CERT_RDN
{
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
}

alias CERT_RDN = _CERT_RDN;
alias PCERT_RDN = _CERT_RDN*;

struct _CERT_NAME_INFO
{
    DWORD cRDN;
    PCERT_RDN rgRDN;
}

alias CERT_NAME_INFO = _CERT_NAME_INFO;
alias PCERT_NAME_INFO = _CERT_NAME_INFO*;

struct _CERT_NAME_VALUE
{
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
}

alias CERT_NAME_VALUE = _CERT_NAME_VALUE;
alias PCERT_NAME_VALUE = _CERT_NAME_VALUE*;

struct _CERT_PUBLIC_KEY_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
}

alias CERT_PUBLIC_KEY_INFO = _CERT_PUBLIC_KEY_INFO;
alias PCERT_PUBLIC_KEY_INFO = _CERT_PUBLIC_KEY_INFO*;

struct _CRYPT_ECC_PRIVATE_KEY_INFO
{
    DWORD dwVersion;
    CRYPT_DER_BLOB PrivateKey;
    LPSTR szCurveOid;
    CRYPT_BIT_BLOB PublicKey;
}

alias CRYPT_ECC_PRIVATE_KEY_INFO = _CRYPT_ECC_PRIVATE_KEY_INFO;
alias PCRYPT_ECC_PRIVATE_KEY_INFO = _CRYPT_ECC_PRIVATE_KEY_INFO*;

struct _CRYPT_PRIVATE_KEY_INFO
{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
}

alias CRYPT_PRIVATE_KEY_INFO = _CRYPT_PRIVATE_KEY_INFO;
alias PCRYPT_PRIVATE_KEY_INFO = _CRYPT_PRIVATE_KEY_INFO*;

struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
}

alias CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
alias PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO*;

alias PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = int function (CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE* pbClearTextKey, DWORD* pcbClearTextKey, LPVOID pVoidDecryptFunc);
alias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = int function (CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm, CRYPT_DATA_BLOB* pClearTextPrivateKey, BYTE* pbEncryptedKey, DWORD* pcbEncryptedKey, LPVOID pVoidEncryptFunc);
alias PCRYPT_RESOLVE_HCRYPTPROV_FUNC = int function (CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo, HCRYPTPROV* phCryptProv, LPVOID pVoidResolveFunc);

struct _CRYPT_PKCS8_IMPORT_PARAMS
{
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
}

alias CRYPT_PKCS8_IMPORT_PARAMS = _CRYPT_PKCS8_IMPORT_PARAMS;
alias PCRYPT_PKCS8_IMPORT_PARAMS = _CRYPT_PKCS8_IMPORT_PARAMS*;
alias CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = _CRYPT_PKCS8_IMPORT_PARAMS;
alias PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = _CRYPT_PKCS8_IMPORT_PARAMS*;

struct _CRYPT_PKCS8_EXPORT_PARAMS
{
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;
    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
}

alias CRYPT_PKCS8_EXPORT_PARAMS = _CRYPT_PKCS8_EXPORT_PARAMS;
alias PCRYPT_PKCS8_EXPORT_PARAMS = _CRYPT_PKCS8_EXPORT_PARAMS*;

struct _CERT_INFO
{
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias CERT_INFO = _CERT_INFO;
alias PCERT_INFO = _CERT_INFO*;

struct _CRL_ENTRY
{
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias CRL_ENTRY = _CRL_ENTRY;
alias PCRL_ENTRY = _CRL_ENTRY*;

struct _CRL_INFO
{
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias CRL_INFO = _CRL_INFO;
alias PCRL_INFO = _CRL_INFO*;

struct _CERT_OR_CRL_BLOB
{
    DWORD dwChoice;
    DWORD cbEncoded;
    BYTE* pbEncoded;
}

alias CERT_OR_CRL_BLOB = _CERT_OR_CRL_BLOB;
alias PCERT_OR_CRL_BLOB = _CERT_OR_CRL_BLOB*;

struct _CERT_OR_CRL_BUNDLE
{
    DWORD cItem;
    PCERT_OR_CRL_BLOB rgItem;
}

alias CERT_OR_CRL_BUNDLE = _CERT_OR_CRL_BUNDLE;
alias PCERT_OR_CRL_BUNDLE = _CERT_OR_CRL_BUNDLE*;

struct _CERT_REQUEST_INFO
{
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}

alias CERT_REQUEST_INFO = _CERT_REQUEST_INFO;
alias PCERT_REQUEST_INFO = _CERT_REQUEST_INFO*;

struct _CERT_KEYGEN_REQUEST_INFO
{
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
}

alias CERT_KEYGEN_REQUEST_INFO = _CERT_KEYGEN_REQUEST_INFO;
alias PCERT_KEYGEN_REQUEST_INFO = _CERT_KEYGEN_REQUEST_INFO*;

struct _CERT_SIGNED_CONTENT_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
}

alias CERT_SIGNED_CONTENT_INFO = _CERT_SIGNED_CONTENT_INFO;
alias PCERT_SIGNED_CONTENT_INFO = _CERT_SIGNED_CONTENT_INFO*;

struct _CTL_USAGE
{
    DWORD cUsageIdentifier;
    LPSTR* rgpszUsageIdentifier;
}

alias CTL_USAGE = _CTL_USAGE;
alias PCTL_USAGE = _CTL_USAGE*;
alias CERT_ENHKEY_USAGE = _CTL_USAGE;
alias PCERT_ENHKEY_USAGE = _CTL_USAGE*;

alias PCCTL_USAGE = const(_CTL_USAGE)*;
alias PCCERT_ENHKEY_USAGE = const(_CTL_USAGE)*;

struct _CTL_ENTRY
{
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}

alias CTL_ENTRY = _CTL_ENTRY;
alias PCTL_ENTRY = _CTL_ENTRY*;

struct _CTL_INFO
{
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias CTL_INFO = _CTL_INFO;
alias PCTL_INFO = _CTL_INFO*;

struct _CRYPT_TIME_STAMP_REQUEST_INFO
{
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}

alias CRYPT_TIME_STAMP_REQUEST_INFO = _CRYPT_TIME_STAMP_REQUEST_INFO;
alias PCRYPT_TIME_STAMP_REQUEST_INFO = _CRYPT_TIME_STAMP_REQUEST_INFO*;

struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR
{
    LPWSTR pwszName;
    LPWSTR pwszValue;
}

alias CRYPT_ENROLLMENT_NAME_VALUE_PAIR = _CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
alias PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = _CRYPT_ENROLLMENT_NAME_VALUE_PAIR*;

struct _CRYPT_CSP_PROVIDER
{
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
}

alias CRYPT_CSP_PROVIDER = _CRYPT_CSP_PROVIDER;
alias PCRYPT_CSP_PROVIDER = _CRYPT_CSP_PROVIDER*;

WINBOOL CryptFormatObject (DWORD dwCertEncodingType, DWORD dwFormatType, DWORD dwFormatStrType, void* pFormatStruct, LPCSTR lpszStructType, const(BYTE)* pbEncoded, DWORD cbEncoded, void* pbFormat, DWORD* pcbFormat);

alias PFN_CRYPT_ALLOC = void* function (size_t cbSize);
alias PFN_CRYPT_FREE = void function (LPVOID pv);

struct _CRYPT_ENCODE_PARA
{
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
}

alias CRYPT_ENCODE_PARA = _CRYPT_ENCODE_PARA;
alias PCRYPT_ENCODE_PARA = _CRYPT_ENCODE_PARA*;

WINBOOL CryptEncodeObjectEx (DWORD dwCertEncodingType, LPCSTR lpszStructType, const(void)* pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void* pvEncoded, DWORD* pcbEncoded);
WINBOOL CryptEncodeObject (DWORD dwCertEncodingType, LPCSTR lpszStructType, const(void)* pvStructInfo, BYTE* pbEncoded, DWORD* pcbEncoded);

struct _CRYPT_DECODE_PARA
{
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
}

alias CRYPT_DECODE_PARA = _CRYPT_DECODE_PARA;
alias PCRYPT_DECODE_PARA = _CRYPT_DECODE_PARA*;

WINBOOL CryptDecodeObjectEx (DWORD dwCertEncodingType, LPCSTR lpszStructType, const(BYTE)* pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCRYPT_DECODE_PARA pDecodePara, void* pvStructInfo, DWORD* pcbStructInfo);
WINBOOL CryptDecodeObject (DWORD dwCertEncodingType, LPCSTR lpszStructType, const(BYTE)* pbEncoded, DWORD cbEncoded, DWORD dwFlags, void* pvStructInfo, DWORD* pcbStructInfo);

struct _CERT_EXTENSIONS
{
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias CERT_EXTENSIONS = _CERT_EXTENSIONS;
alias PCERT_EXTENSIONS = _CERT_EXTENSIONS*;

struct _CERT_AUTHORITY_KEY_ID_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
}

alias CERT_AUTHORITY_KEY_ID_INFO = _CERT_AUTHORITY_KEY_ID_INFO;
alias PCERT_AUTHORITY_KEY_ID_INFO = _CERT_AUTHORITY_KEY_ID_INFO*;

struct _CERT_PRIVATE_KEY_VALIDITY
{
    FILETIME NotBefore;
    FILETIME NotAfter;
}

alias CERT_PRIVATE_KEY_VALIDITY = _CERT_PRIVATE_KEY_VALIDITY;
alias PCERT_PRIVATE_KEY_VALIDITY = _CERT_PRIVATE_KEY_VALIDITY*;

struct _CERT_KEY_ATTRIBUTES_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
}

alias CERT_KEY_ATTRIBUTES_INFO = _CERT_KEY_ATTRIBUTES_INFO;
alias PCERT_KEY_ATTRIBUTES_INFO = _CERT_KEY_ATTRIBUTES_INFO*;

struct _CERT_POLICY_ID
{
    DWORD cCertPolicyElementId;
    LPSTR* rgpszCertPolicyElementId;
}

alias CERT_POLICY_ID = _CERT_POLICY_ID;
alias PCERT_POLICY_ID = _CERT_POLICY_ID*;

struct _CERT_KEY_USAGE_RESTRICTION_INFO
{
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
}

alias CERT_KEY_USAGE_RESTRICTION_INFO = _CERT_KEY_USAGE_RESTRICTION_INFO;
alias PCERT_KEY_USAGE_RESTRICTION_INFO = _CERT_KEY_USAGE_RESTRICTION_INFO*;

struct _CERT_OTHER_NAME
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}

alias CERT_OTHER_NAME = _CERT_OTHER_NAME;
alias PCERT_OTHER_NAME = _CERT_OTHER_NAME*;

struct _CERT_ALT_NAME_ENTRY
{
    DWORD dwAltNameChoice;

    union
    {
        PCERT_OTHER_NAME pOtherName;
        LPWSTR pwszRfc822Name;
        LPWSTR pwszDNSName;

        CERT_NAME_BLOB DirectoryName;

        LPWSTR pwszURL;
        CRYPT_DATA_BLOB IPAddress;
        LPSTR pszRegisteredID;
    }
}

alias CERT_ALT_NAME_ENTRY = _CERT_ALT_NAME_ENTRY;
alias PCERT_ALT_NAME_ENTRY = _CERT_ALT_NAME_ENTRY*;

struct _CERT_ALT_NAME_INFO
{
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
}

alias CERT_ALT_NAME_INFO = _CERT_ALT_NAME_INFO;
alias PCERT_ALT_NAME_INFO = _CERT_ALT_NAME_INFO*;

struct _CERT_BASIC_CONSTRAINTS_INFO
{
    CRYPT_BIT_BLOB SubjectType;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB* rgSubtreesConstraint;
}

alias CERT_BASIC_CONSTRAINTS_INFO = _CERT_BASIC_CONSTRAINTS_INFO;
alias PCERT_BASIC_CONSTRAINTS_INFO = _CERT_BASIC_CONSTRAINTS_INFO*;

struct _CERT_BASIC_CONSTRAINTS2_INFO
{
    WINBOOL fCA;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
}

alias CERT_BASIC_CONSTRAINTS2_INFO = _CERT_BASIC_CONSTRAINTS2_INFO;
alias PCERT_BASIC_CONSTRAINTS2_INFO = _CERT_BASIC_CONSTRAINTS2_INFO*;

struct _CERT_POLICY_QUALIFIER_INFO
{
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
}

alias CERT_POLICY_QUALIFIER_INFO = _CERT_POLICY_QUALIFIER_INFO;
alias PCERT_POLICY_QUALIFIER_INFO = _CERT_POLICY_QUALIFIER_INFO*;

struct _CERT_POLICY_INFO
{
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO* rgPolicyQualifier;
}

alias CERT_POLICY_INFO = _CERT_POLICY_INFO;
alias PCERT_POLICY_INFO = _CERT_POLICY_INFO*;

struct _CERT_POLICIES_INFO
{
    DWORD cPolicyInfo;
    CERT_POLICY_INFO* rgPolicyInfo;
}

alias CERT_POLICIES_INFO = _CERT_POLICIES_INFO;
alias PCERT_POLICIES_INFO = _CERT_POLICIES_INFO*;

struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
{
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int* rgNoticeNumbers;
}

alias CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
alias PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE*;

struct _CERT_POLICY_QUALIFIER_USER_NOTICE
{
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE* pNoticeReference;
    LPWSTR pszDisplayText;
}

alias CERT_POLICY_QUALIFIER_USER_NOTICE = _CERT_POLICY_QUALIFIER_USER_NOTICE;
alias PCERT_POLICY_QUALIFIER_USER_NOTICE = _CERT_POLICY_QUALIFIER_USER_NOTICE*;

struct _CPS_URLS
{
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm;
    CRYPT_DATA_BLOB* pDigest;
}

alias CPS_URLS = _CPS_URLS;
alias PCPS_URLS = _CPS_URLS*;

struct _CERT_POLICY95_QUALIFIER1
{
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS* rgCPSURLs;
}

alias CERT_POLICY95_QUALIFIER1 = _CERT_POLICY95_QUALIFIER1;
alias PCERT_POLICY95_QUALIFIER1 = _CERT_POLICY95_QUALIFIER1*;

struct _CERT_POLICY_MAPPING
{
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
}

alias CERT_POLICY_MAPPING = _CERT_POLICY_MAPPING;
alias PCERT_POLICY_MAPPING = _CERT_POLICY_MAPPING*;

struct _CERT_POLICY_MAPPINGS_INFO
{
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
}

alias CERT_POLICY_MAPPINGS_INFO = _CERT_POLICY_MAPPINGS_INFO;
alias PCERT_POLICY_MAPPINGS_INFO = _CERT_POLICY_MAPPINGS_INFO*;

struct _CERT_POLICY_CONSTRAINTS_INFO
{
    WINBOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;
    WINBOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
}

alias CERT_POLICY_CONSTRAINTS_INFO = _CERT_POLICY_CONSTRAINTS_INFO;
alias PCERT_POLICY_CONSTRAINTS_INFO = _CERT_POLICY_CONSTRAINTS_INFO*;

struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
{
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
}

alias CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
alias PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY*;

struct _CRYPT_CONTENT_INFO
{
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
}

alias CRYPT_CONTENT_INFO = _CRYPT_CONTENT_INFO;
alias PCRYPT_CONTENT_INFO = _CRYPT_CONTENT_INFO*;

struct _CRYPT_SEQUENCE_OF_ANY
{
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
}

alias CRYPT_SEQUENCE_OF_ANY = _CRYPT_SEQUENCE_OF_ANY;
alias PCRYPT_SEQUENCE_OF_ANY = _CRYPT_SEQUENCE_OF_ANY*;

struct _CERT_AUTHORITY_KEY_ID2_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;
    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
}

alias CERT_AUTHORITY_KEY_ID2_INFO = _CERT_AUTHORITY_KEY_ID2_INFO;
alias PCERT_AUTHORITY_KEY_ID2_INFO = _CERT_AUTHORITY_KEY_ID2_INFO*;

struct _CERT_ACCESS_DESCRIPTION
{
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
}

alias CERT_ACCESS_DESCRIPTION = _CERT_ACCESS_DESCRIPTION;
alias PCERT_ACCESS_DESCRIPTION = _CERT_ACCESS_DESCRIPTION*;

struct _CERT_AUTHORITY_INFO_ACCESS
{
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
}

alias CERT_AUTHORITY_INFO_ACCESS = _CERT_AUTHORITY_INFO_ACCESS;
alias PCERT_AUTHORITY_INFO_ACCESS = _CERT_AUTHORITY_INFO_ACCESS*;

alias CERT_SUBJECT_INFO_ACCESS = _CERT_AUTHORITY_INFO_ACCESS;
alias PCERT_SUBJECT_INFO_ACCESS = _CERT_AUTHORITY_INFO_ACCESS*;

struct _CRL_DIST_POINT_NAME
{
    DWORD dwDistPointNameChoice;

    union
    {
        CERT_ALT_NAME_INFO FullName;
    }
}

alias CRL_DIST_POINT_NAME = _CRL_DIST_POINT_NAME;
alias PCRL_DIST_POINT_NAME = _CRL_DIST_POINT_NAME*;

struct _CRL_DIST_POINT
{
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
}

alias CRL_DIST_POINT = _CRL_DIST_POINT;
alias PCRL_DIST_POINT = _CRL_DIST_POINT*;

struct _CRL_DIST_POINTS_INFO
{
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
}

alias CRL_DIST_POINTS_INFO = _CRL_DIST_POINTS_INFO;
alias PCRL_DIST_POINTS_INFO = _CRL_DIST_POINTS_INFO*;

struct _CROSS_CERT_DIST_POINTS_INFO
{
    DWORD dwSyncDeltaTime;
    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
}

alias CROSS_CERT_DIST_POINTS_INFO = _CROSS_CERT_DIST_POINTS_INFO;
alias PCROSS_CERT_DIST_POINTS_INFO = _CROSS_CERT_DIST_POINTS_INFO*;

struct _CERT_PAIR
{
    CERT_BLOB Forward;
    CERT_BLOB Reverse;
}

alias CERT_PAIR = _CERT_PAIR;
alias PCERT_PAIR = _CERT_PAIR*;

struct _CRL_ISSUING_DIST_POINT
{
    CRL_DIST_POINT_NAME DistPointName;
    WINBOOL fOnlyContainsUserCerts;
    WINBOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    WINBOOL fIndirectCRL;
}

alias CRL_ISSUING_DIST_POINT = _CRL_ISSUING_DIST_POINT;
alias PCRL_ISSUING_DIST_POINT = _CRL_ISSUING_DIST_POINT*;

struct _CERT_GENERAL_SUBTREE
{
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    WINBOOL fMaximum;
    DWORD dwMaximum;
}

alias CERT_GENERAL_SUBTREE = _CERT_GENERAL_SUBTREE;
alias PCERT_GENERAL_SUBTREE = _CERT_GENERAL_SUBTREE*;

struct _CERT_NAME_CONSTRAINTS_INFO
{
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
}

alias CERT_NAME_CONSTRAINTS_INFO = _CERT_NAME_CONSTRAINTS_INFO;
alias PCERT_NAME_CONSTRAINTS_INFO = _CERT_NAME_CONSTRAINTS_INFO*;

struct _CERT_DSS_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
}

alias CERT_DSS_PARAMETERS = _CERT_DSS_PARAMETERS;
alias PCERT_DSS_PARAMETERS = _CERT_DSS_PARAMETERS*;

struct _CERT_DH_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
}

alias CERT_DH_PARAMETERS = _CERT_DH_PARAMETERS;
alias PCERT_DH_PARAMETERS = _CERT_DH_PARAMETERS*;

struct _CERT_ECC_SIGNATURE
{
    CRYPT_UINT_BLOB r;
    CRYPT_UINT_BLOB s;
}

alias CERT_ECC_SIGNATURE = _CERT_ECC_SIGNATURE;
alias PCERT_ECC_SIGNATURE = _CERT_ECC_SIGNATURE*;

struct _CERT_X942_DH_VALIDATION_PARAMS
{
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
}

alias CERT_X942_DH_VALIDATION_PARAMS = _CERT_X942_DH_VALIDATION_PARAMS;
alias PCERT_X942_DH_VALIDATION_PARAMS = _CERT_X942_DH_VALIDATION_PARAMS*;

struct _CERT_X942_DH_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
}

alias CERT_X942_DH_PARAMETERS = _CERT_X942_DH_PARAMETERS;
alias PCERT_X942_DH_PARAMETERS = _CERT_X942_DH_PARAMETERS*;

struct _CRYPT_X942_OTHER_INFO
{
    LPSTR pszContentEncryptionObjId;
    BYTE[4] rgbCounter;
    BYTE[4] rgbKeyLength;
    CRYPT_DATA_BLOB PubInfo;
}

alias CRYPT_X942_OTHER_INFO = _CRYPT_X942_OTHER_INFO;
alias PCRYPT_X942_OTHER_INFO = _CRYPT_X942_OTHER_INFO*;

struct _CRYPT_ECC_CMS_SHARED_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DATA_BLOB EntityUInfo;
    BYTE[4] rgbSuppPubInfo;
}

alias CRYPT_ECC_CMS_SHARED_INFO = _CRYPT_ECC_CMS_SHARED_INFO;
alias PCRYPT_ECC_CMS_SHARED_INFO = _CRYPT_ECC_CMS_SHARED_INFO*;

struct _CRYPT_RC2_CBC_PARAMETERS
{
    DWORD dwVersion;
    WINBOOL fIV;
    BYTE[8] rgbIV;
}

alias CRYPT_RC2_CBC_PARAMETERS = _CRYPT_RC2_CBC_PARAMETERS;
alias PCRYPT_RC2_CBC_PARAMETERS = _CRYPT_RC2_CBC_PARAMETERS*;

struct _CRYPT_SMIME_CAPABILITY
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
}

alias CRYPT_SMIME_CAPABILITY = _CRYPT_SMIME_CAPABILITY;
alias PCRYPT_SMIME_CAPABILITY = _CRYPT_SMIME_CAPABILITY*;

struct _CRYPT_SMIME_CAPABILITIES
{
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
}

alias CRYPT_SMIME_CAPABILITIES = _CRYPT_SMIME_CAPABILITIES;
alias PCRYPT_SMIME_CAPABILITIES = _CRYPT_SMIME_CAPABILITIES*;

struct _CERT_QC_STATEMENT
{
    LPSTR pszStatementId;
    CRYPT_OBJID_BLOB StatementInfo;
}

alias CERT_QC_STATEMENT = _CERT_QC_STATEMENT;
alias PCERT_QC_STATEMENT = _CERT_QC_STATEMENT*;

struct _CERT_QC_STATEMENTS_EXT_INFO
{
    DWORD cStatement;
    PCERT_QC_STATEMENT rgStatement;
}

alias CERT_QC_STATEMENTS_EXT_INFO = _CERT_QC_STATEMENTS_EXT_INFO;
alias PCERT_QC_STATEMENTS_EXT_INFO = _CERT_QC_STATEMENTS_EXT_INFO*;

struct _CRYPT_MASK_GEN_ALGORITHM
{
    LPSTR pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
}

alias CRYPT_MASK_GEN_ALGORITHM = _CRYPT_MASK_GEN_ALGORITHM;
alias PCRYPT_MASK_GEN_ALGORITHM = _CRYPT_MASK_GEN_ALGORITHM*;

struct _CRYPT_RSA_SSA_PSS_PARAMETERS
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    DWORD dwSaltLength;
    DWORD dwTrailerField;
}

alias CRYPT_RSA_SSA_PSS_PARAMETERS = _CRYPT_RSA_SSA_PSS_PARAMETERS;
alias PCRYPT_RSA_SSA_PSS_PARAMETERS = _CRYPT_RSA_SSA_PSS_PARAMETERS*;

struct _CRYPT_PSOURCE_ALGORITHM
{
    LPSTR pszObjId;
    CRYPT_DATA_BLOB EncodingParameters;
}

alias CRYPT_PSOURCE_ALGORITHM = _CRYPT_PSOURCE_ALGORITHM;
alias PCRYPT_PSOURCE_ALGORITHM = _CRYPT_PSOURCE_ALGORITHM*;

struct _CRYPT_RSAES_OAEP_PARAMETERS
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
}

alias CRYPT_RSAES_OAEP_PARAMETERS = _CRYPT_RSAES_OAEP_PARAMETERS;
alias PCRYPT_RSAES_OAEP_PARAMETERS = _CRYPT_RSAES_OAEP_PARAMETERS*;

struct _CMC_TAGGED_ATTRIBUTE
{
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
}

alias CMC_TAGGED_ATTRIBUTE = _CMC_TAGGED_ATTRIBUTE;
alias PCMC_TAGGED_ATTRIBUTE = _CMC_TAGGED_ATTRIBUTE*;

struct _CMC_TAGGED_CERT_REQUEST
{
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
}

alias CMC_TAGGED_CERT_REQUEST = _CMC_TAGGED_CERT_REQUEST;
alias PCMC_TAGGED_CERT_REQUEST = _CMC_TAGGED_CERT_REQUEST*;

struct _CMC_TAGGED_REQUEST
{
    DWORD dwTaggedRequestChoice;

    union
    {
        PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    }
}

alias CMC_TAGGED_REQUEST = _CMC_TAGGED_REQUEST;
alias PCMC_TAGGED_REQUEST = _CMC_TAGGED_REQUEST*;

struct _CMC_TAGGED_CONTENT_INFO
{
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
}

alias CMC_TAGGED_CONTENT_INFO = _CMC_TAGGED_CONTENT_INFO;
alias PCMC_TAGGED_CONTENT_INFO = _CMC_TAGGED_CONTENT_INFO*;

struct _CMC_TAGGED_OTHER_MSG
{
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}

alias CMC_TAGGED_OTHER_MSG = _CMC_TAGGED_OTHER_MSG;
alias PCMC_TAGGED_OTHER_MSG = _CMC_TAGGED_OTHER_MSG*;

struct _CMC_DATA_INFO
{
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
}

alias CMC_DATA_INFO = _CMC_DATA_INFO;
alias PCMC_DATA_INFO = _CMC_DATA_INFO*;

struct _CMC_RESPONSE_INFO
{
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
}

alias CMC_RESPONSE_INFO = _CMC_RESPONSE_INFO;
alias PCMC_RESPONSE_INFO = _CMC_RESPONSE_INFO*;

struct _CMC_PEND_INFO
{
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
}

alias CMC_PEND_INFO = _CMC_PEND_INFO;
alias PCMC_PEND_INFO = _CMC_PEND_INFO*;

struct _CMC_STATUS_INFO
{
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD* rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;

    union
    {
        DWORD dwFailInfo;
        PCMC_PEND_INFO pPendInfo;
    }
}

alias CMC_STATUS_INFO = _CMC_STATUS_INFO;
alias PCMC_STATUS_INFO = _CMC_STATUS_INFO*;

struct _CMC_ADD_EXTENSIONS_INFO
{
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD* rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias CMC_ADD_EXTENSIONS_INFO = _CMC_ADD_EXTENSIONS_INFO;
alias PCMC_ADD_EXTENSIONS_INFO = _CMC_ADD_EXTENSIONS_INFO*;

struct _CMC_ADD_ATTRIBUTES_INFO
{
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD* rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}

alias CMC_ADD_ATTRIBUTES_INFO = _CMC_ADD_ATTRIBUTES_INFO;
alias PCMC_ADD_ATTRIBUTES_INFO = _CMC_ADD_ATTRIBUTES_INFO*;

struct _CERT_TEMPLATE_EXT
{
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    WINBOOL fMinorVersion;
    DWORD dwMinorVersion;
}

alias CERT_TEMPLATE_EXT = _CERT_TEMPLATE_EXT;
alias PCERT_TEMPLATE_EXT = _CERT_TEMPLATE_EXT*;

struct _CERT_HASHED_URL
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
    LPWSTR pwszUrl;
}

alias CERT_HASHED_URL = _CERT_HASHED_URL;
alias PCERT_HASHED_URL = _CERT_HASHED_URL*;

struct _CERT_LOGOTYPE_DETAILS
{
    LPWSTR pwszMimeType;
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
}

alias CERT_LOGOTYPE_DETAILS = _CERT_LOGOTYPE_DETAILS;
alias PCERT_LOGOTYPE_DETAILS = _CERT_LOGOTYPE_DETAILS*;

struct _CERT_LOGOTYPE_REFERENCE
{
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
}

alias CERT_LOGOTYPE_REFERENCE = _CERT_LOGOTYPE_REFERENCE;
alias PCERT_LOGOTYPE_REFERENCE = _CERT_LOGOTYPE_REFERENCE*;

struct _CERT_LOGOTYPE_IMAGE_INFO
{
    DWORD dwLogotypeImageInfoChoice;
    DWORD dwFileSize;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwLogotypeImageResolutionChoice;

    union
    {
        DWORD dwNumBits;
        DWORD dwTableSize;
    }

    LPWSTR pwszLanguage;
}

alias CERT_LOGOTYPE_IMAGE_INFO = _CERT_LOGOTYPE_IMAGE_INFO;
alias PCERT_LOGOTYPE_IMAGE_INFO = _CERT_LOGOTYPE_IMAGE_INFO*;

struct _CERT_LOGOTYPE_IMAGE
{
    CERT_LOGOTYPE_DETAILS LogotypeDetails;
    PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
}

alias CERT_LOGOTYPE_IMAGE = _CERT_LOGOTYPE_IMAGE;
alias PCERT_LOGOTYPE_IMAGE = _CERT_LOGOTYPE_IMAGE*;

struct _CERT_LOGOTYPE_AUDIO_INFO
{
    DWORD dwFileSize;
    DWORD dwPlayTime;
    DWORD dwChannels;
    DWORD dwSampleRate;
    LPWSTR pwszLanguage;
}

alias CERT_LOGOTYPE_AUDIO_INFO = _CERT_LOGOTYPE_AUDIO_INFO;
alias PCERT_LOGOTYPE_AUDIO_INFO = _CERT_LOGOTYPE_AUDIO_INFO*;

struct _CERT_LOGOTYPE_AUDIO
{
    CERT_LOGOTYPE_DETAILS LogotypeDetails;
    PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
}

alias CERT_LOGOTYPE_AUDIO = _CERT_LOGOTYPE_AUDIO;
alias PCERT_LOGOTYPE_AUDIO = _CERT_LOGOTYPE_AUDIO*;

struct _CERT_LOGOTYPE_DATA
{
    DWORD cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE rgLogotypeImage;
    DWORD cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
}

alias CERT_LOGOTYPE_DATA = _CERT_LOGOTYPE_DATA;
alias PCERT_LOGOTYPE_DATA = _CERT_LOGOTYPE_DATA*;

struct _CERT_LOGOTYPE_INFO
{
    DWORD dwLogotypeInfoChoice;

    union
    {
        PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;
        PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
    }
}

alias CERT_LOGOTYPE_INFO = _CERT_LOGOTYPE_INFO;
alias PCERT_LOGOTYPE_INFO = _CERT_LOGOTYPE_INFO*;

struct _CERT_OTHER_LOGOTYPE_INFO
{
    LPSTR pszObjId;
    CERT_LOGOTYPE_INFO LogotypeInfo;
}

alias CERT_OTHER_LOGOTYPE_INFO = _CERT_OTHER_LOGOTYPE_INFO;
alias PCERT_OTHER_LOGOTYPE_INFO = _CERT_OTHER_LOGOTYPE_INFO*;

struct _CERT_LOGOTYPE_EXT_INFO
{
    DWORD cCommunityLogo;
    PCERT_LOGOTYPE_INFO rgCommunityLogo;
    PCERT_LOGOTYPE_INFO pIssuerLogo;
    PCERT_LOGOTYPE_INFO pSubjectLogo;
    DWORD cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
}

alias CERT_LOGOTYPE_EXT_INFO = _CERT_LOGOTYPE_EXT_INFO;
alias PCERT_LOGOTYPE_EXT_INFO = _CERT_LOGOTYPE_EXT_INFO*;

struct _CERT_BIOMETRIC_DATA
{
    DWORD dwTypeOfBiometricDataChoice;

    union
    {
        DWORD dwPredefined;
        LPSTR pszObjId;
    }

    CERT_HASHED_URL HashedUrl;
}

alias CERT_BIOMETRIC_DATA = _CERT_BIOMETRIC_DATA;
alias PCERT_BIOMETRIC_DATA = _CERT_BIOMETRIC_DATA*;

struct _CERT_BIOMETRIC_EXT_INFO
{
    DWORD cBiometricData;
    PCERT_BIOMETRIC_DATA rgBiometricData;
}

alias CERT_BIOMETRIC_EXT_INFO = _CERT_BIOMETRIC_EXT_INFO;
alias PCERT_BIOMETRIC_EXT_INFO = _CERT_BIOMETRIC_EXT_INFO*;

struct _OCSP_SIGNATURE_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
}

alias OCSP_SIGNATURE_INFO = _OCSP_SIGNATURE_INFO;
alias POCSP_SIGNATURE_INFO = _OCSP_SIGNATURE_INFO*;

struct _OCSP_SIGNED_REQUEST_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
}

alias OCSP_SIGNED_REQUEST_INFO = _OCSP_SIGNED_REQUEST_INFO;
alias POCSP_SIGNED_REQUEST_INFO = _OCSP_SIGNED_REQUEST_INFO*;

struct _OCSP_CERT_ID
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB IssuerNameHash;
    CRYPT_HASH_BLOB IssuerKeyHash;
    CRYPT_INTEGER_BLOB SerialNumber;
}

alias OCSP_CERT_ID = _OCSP_CERT_ID;
alias POCSP_CERT_ID = _OCSP_CERT_ID*;

struct _OCSP_REQUEST_ENTRY
{
    OCSP_CERT_ID CertId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias OCSP_REQUEST_ENTRY = _OCSP_REQUEST_ENTRY;
alias POCSP_REQUEST_ENTRY = _OCSP_REQUEST_ENTRY*;

struct _OCSP_REQUEST_INFO
{
    DWORD dwVersion;
    PCERT_ALT_NAME_ENTRY pRequestorName;
    DWORD cRequestEntry;
    POCSP_REQUEST_ENTRY rgRequestEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias OCSP_REQUEST_INFO = _OCSP_REQUEST_INFO;
alias POCSP_REQUEST_INFO = _OCSP_REQUEST_INFO*;

struct _OCSP_RESPONSE_INFO
{
    DWORD dwStatus;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}

alias OCSP_RESPONSE_INFO = _OCSP_RESPONSE_INFO;
alias POCSP_RESPONSE_INFO = _OCSP_RESPONSE_INFO*;

struct _OCSP_BASIC_SIGNED_RESPONSE_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    OCSP_SIGNATURE_INFO SignatureInfo;
}

alias OCSP_BASIC_SIGNED_RESPONSE_INFO = _OCSP_BASIC_SIGNED_RESPONSE_INFO;
alias POCSP_BASIC_SIGNED_RESPONSE_INFO = _OCSP_BASIC_SIGNED_RESPONSE_INFO*;

struct _OCSP_BASIC_REVOKED_INFO
{
    FILETIME RevocationDate;
    DWORD dwCrlReasonCode;
}

alias OCSP_BASIC_REVOKED_INFO = _OCSP_BASIC_REVOKED_INFO;
alias POCSP_BASIC_REVOKED_INFO = _OCSP_BASIC_REVOKED_INFO*;

struct _OCSP_BASIC_RESPONSE_ENTRY
{
    OCSP_CERT_ID CertId;
    DWORD dwCertStatus;

    union
    {
        POCSP_BASIC_REVOKED_INFO pRevokedInfo;
    }

    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias OCSP_BASIC_RESPONSE_ENTRY = _OCSP_BASIC_RESPONSE_ENTRY;
alias POCSP_BASIC_RESPONSE_ENTRY = _OCSP_BASIC_RESPONSE_ENTRY*;

struct _OCSP_BASIC_RESPONSE_INFO
{
    DWORD dwVersion;
    DWORD dwResponderIdChoice;

    union
    {
        CERT_NAME_BLOB ByNameResponderId;
        CRYPT_HASH_BLOB ByKeyResponderId;
    }

    FILETIME ProducedAt;
    DWORD cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}

alias OCSP_BASIC_RESPONSE_INFO = _OCSP_BASIC_RESPONSE_INFO;
alias POCSP_BASIC_RESPONSE_INFO = _OCSP_BASIC_RESPONSE_INFO*;

alias HCRYPTOIDFUNCSET = void*;
alias HCRYPTOIDFUNCADDR = void*;

struct _CRYPT_OID_FUNC_ENTRY
{
    LPCSTR pszOID;
    void* pvFuncAddr;
}

alias CRYPT_OID_FUNC_ENTRY = _CRYPT_OID_FUNC_ENTRY;
alias PCRYPT_OID_FUNC_ENTRY = _CRYPT_OID_FUNC_ENTRY*;

WINBOOL CryptInstallOIDFunctionAddress (HMODULE hModule, DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, const(CRYPT_OID_FUNC_ENTRY)* rgFuncEntry, DWORD dwFlags);
HCRYPTOIDFUNCSET CryptInitOIDFunctionSet (LPCSTR pszFuncName, DWORD dwFlags);
WINBOOL CryptGetOIDFunctionAddress (HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void** ppvFuncAddr, HCRYPTOIDFUNCADDR* phFuncAddr);
WINBOOL CryptGetDefaultOIDDllList (HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, WCHAR* pwszDllList, DWORD* pcchDllList);
WINBOOL CryptGetDefaultOIDFunctionAddress (HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void** ppvFuncAddr, HCRYPTOIDFUNCADDR* phFuncAddr);
WINBOOL CryptFreeOIDFunctionAddress (HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags);
WINBOOL CryptRegisterOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName);
WINBOOL CryptUnregisterOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID);
WINBOOL CryptRegisterDefaultOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll);
WINBOOL CryptUnregisterDefaultOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll);
WINBOOL CryptSetOIDFunctionValue (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, const(BYTE)* pbValueData, DWORD cbValueData);
WINBOOL CryptGetOIDFunctionValue (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD* pdwValueType, BYTE* pbValueData, DWORD* pcbValueData);

alias PFN_CRYPT_ENUM_OID_FUNC = int function (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, const(DWORD)[] rgdwValueType, const(LPCWSTR)[] rgpwszValueName, const(BYTE*)[] rgpbValueData, const(DWORD)[] rgcbValueData, void* pvArg);

WINBOOL CryptEnumOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void* pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);

struct _CRYPT_OID_INFO
{
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;

    union
    {
        DWORD dwValue;
        ALG_ID Algid;
        DWORD dwLength;
    }

    CRYPT_DATA_BLOB ExtraInfo;
}

alias CRYPT_OID_INFO = _CRYPT_OID_INFO;
alias PCRYPT_OID_INFO = _CRYPT_OID_INFO*;

alias CCRYPT_OID_INFO = const _CRYPT_OID_INFO;
alias PCCRYPT_OID_INFO = const(_CRYPT_OID_INFO)*;

PCCRYPT_OID_INFO CryptFindOIDInfo (DWORD dwKeyType, void* pvKey, DWORD dwGroupId);

alias PFN_CRYPT_ENUM_OID_INFO = int function (PCCRYPT_OID_INFO pInfo, void* pvArg);

WINBOOL CryptRegisterOIDInfo (PCCRYPT_OID_INFO pInfo, DWORD dwFlags);
WINBOOL CryptUnregisterOIDInfo (PCCRYPT_OID_INFO pInfo);
WINBOOL CryptEnumOIDInfo (DWORD dwGroupId, DWORD dwFlags, void* pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
LPCWSTR CryptFindLocalizedName (LPCWSTR pwszCryptName);

struct _CERT_STRONG_SIGN_SERIALIZED_INFO
{
    DWORD dwFlags;
    LPWSTR pwszCNGSignHashAlgids;
    LPWSTR pwszCNGPubKeyMinBitLengths;
}

alias CERT_STRONG_SIGN_SERIALIZED_INFO = _CERT_STRONG_SIGN_SERIALIZED_INFO;
alias PCERT_STRONG_SIGN_SERIALIZED_INFO = _CERT_STRONG_SIGN_SERIALIZED_INFO*;

struct _CERT_STRONG_SIGN_PARA
{
    DWORD cbSize;
    DWORD dwInfoChoice;

    union
    {
        void* pvInfo;
        PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo;
        LPSTR pszOID;
    }
}

alias CERT_STRONG_SIGN_PARA = _CERT_STRONG_SIGN_PARA;
alias PCERT_STRONG_SIGN_PARA = _CERT_STRONG_SIGN_PARA*;

alias PCCERT_STRONG_SIGN_PARA = const(_CERT_STRONG_SIGN_PARA)*;

alias HCRYPTMSG = void*;

struct _CERT_ISSUER_SERIAL_NUMBER
{
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
}

alias CERT_ISSUER_SERIAL_NUMBER = _CERT_ISSUER_SERIAL_NUMBER;
alias PCERT_ISSUER_SERIAL_NUMBER = _CERT_ISSUER_SERIAL_NUMBER*;

struct _CERT_ID
{
    DWORD dwIdChoice;

    union
    {
        CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
        CRYPT_HASH_BLOB KeyId;
        CRYPT_HASH_BLOB HashId;
    }
}

alias CERT_ID = _CERT_ID;
alias PCERT_ID = _CERT_ID*;

struct _CMSG_SIGNER_ENCODE_INFO
{
    DWORD cbSize;
    PCERT_INFO pCertInfo;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    }

    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void* pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
}

alias CMSG_SIGNER_ENCODE_INFO = _CMSG_SIGNER_ENCODE_INFO;
alias PCMSG_SIGNER_ENCODE_INFO = _CMSG_SIGNER_ENCODE_INFO*;

struct _CMSG_SIGNED_ENCODE_INFO
{
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;
}

alias CMSG_SIGNED_ENCODE_INFO = _CMSG_SIGNED_ENCODE_INFO;
alias PCMSG_SIGNED_ENCODE_INFO = _CMSG_SIGNED_ENCODE_INFO*;

alias CMSG_RECIPIENT_ENCODE_INFO = _CMSG_RECIPIENT_ENCODE_INFO;
alias PCMSG_RECIPIENT_ENCODE_INFO = _CMSG_RECIPIENT_ENCODE_INFO*;

struct _CMSG_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void* pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCERT_INFO* rgpRecipients;
}

alias CMSG_ENVELOPED_ENCODE_INFO = _CMSG_ENVELOPED_ENCODE_INFO;
alias PCMSG_ENVELOPED_ENCODE_INFO = _CMSG_ENVELOPED_ENCODE_INFO*;

struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void* pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
}

alias CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
alias PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*;

struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}

alias CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
alias PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO*;

struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void* pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void* pvKeyWrapAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;
    DWORD dwKeyChoice;

    union
    {
        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
        PCERT_ID pSenderId;
    }

    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO* rgpRecipientEncryptedKeys;
}

alias CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
alias PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*;

struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void* pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;

    union
    {
        HCRYPTKEY hKeyEncryptionKey;
        void* pvKeyEncryptionKey;
    }

    CRYPT_DATA_BLOB KeyId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}

alias CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
alias PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*;

struct _CMSG_RECIPIENT_ENCODE_INFO
{
    DWORD dwRecipientChoice;

    union
    {
        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    }
}

struct _CMSG_RC2_AUX_INFO
{
    DWORD cbSize;
    DWORD dwBitLen;
}

alias CMSG_RC2_AUX_INFO = _CMSG_RC2_AUX_INFO;
alias PCMSG_RC2_AUX_INFO = _CMSG_RC2_AUX_INFO*;

struct _CMSG_SP3_COMPATIBLE_AUX_INFO
{
    DWORD cbSize;
    DWORD dwFlags;
}

alias CMSG_SP3_COMPATIBLE_AUX_INFO = _CMSG_SP3_COMPATIBLE_AUX_INFO;
alias PCMSG_SP3_COMPATIBLE_AUX_INFO = _CMSG_SP3_COMPATIBLE_AUX_INFO*;

struct _CMSG_RC4_AUX_INFO
{
    DWORD cbSize;
    DWORD dwBitLen;
}

alias CMSG_RC4_AUX_INFO = _CMSG_RC4_AUX_INFO;
alias PCMSG_RC4_AUX_INFO = _CMSG_RC4_AUX_INFO*;

struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
}

alias CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
alias PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO*;

struct _CMSG_HASHED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void* pvHashAuxInfo;
}

alias CMSG_HASHED_ENCODE_INFO = _CMSG_HASHED_ENCODE_INFO;
alias PCMSG_HASHED_ENCODE_INFO = _CMSG_HASHED_ENCODE_INFO*;

struct _CMSG_ENCRYPTED_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void* pvEncryptionAuxInfo;
}

alias CMSG_ENCRYPTED_ENCODE_INFO = _CMSG_ENCRYPTED_ENCODE_INFO;
alias PCMSG_ENCRYPTED_ENCODE_INFO = _CMSG_ENCRYPTED_ENCODE_INFO*;

alias PFN_CMSG_STREAM_OUTPUT = int function (const(void)* pvArg, BYTE* pbData, DWORD cbData, WINBOOL fFinal);

struct _CMSG_STREAM_INFO
{
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void* pvArg;
}

alias CMSG_STREAM_INFO = _CMSG_STREAM_INFO;
alias PCMSG_STREAM_INFO = _CMSG_STREAM_INFO*;

HCRYPTMSG CryptMsgOpenToEncode (DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, const(void)* pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo);
DWORD CryptMsgCalculateEncodedLength (DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, const(void)* pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData);
HCRYPTMSG CryptMsgOpenToDecode (DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo);
HCRYPTMSG CryptMsgDuplicate (HCRYPTMSG hCryptMsg);
WINBOOL CryptMsgClose (HCRYPTMSG hCryptMsg);
WINBOOL CryptMsgUpdate (HCRYPTMSG hCryptMsg, const(BYTE)* pbData, DWORD cbData, WINBOOL fFinal);
WINBOOL CryptMsgGetParam (HCRYPTMSG hCryptMsg, DWORD dwParamType, DWORD dwIndex, void* pvData, DWORD* pcbData);

struct _CMSG_SIGNER_INFO
{
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
}

alias CMSG_SIGNER_INFO = _CMSG_SIGNER_INFO;
alias PCMSG_SIGNER_INFO = _CMSG_SIGNER_INFO*;

struct _CMSG_CMS_SIGNER_INFO
{
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
}

alias CMSG_CMS_SIGNER_INFO = _CMSG_CMS_SIGNER_INFO;
alias PCMSG_CMS_SIGNER_INFO = _CMSG_CMS_SIGNER_INFO*;

alias CMSG_ATTR = _CRYPT_ATTRIBUTES;
alias PCMSG_ATTR = _CRYPT_ATTRIBUTES*;

struct _CMSG_KEY_TRANS_RECIPIENT_INFO
{
    DWORD dwVersion;
    CERT_ID RecipientId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
}

alias CMSG_KEY_TRANS_RECIPIENT_INFO = _CMSG_KEY_TRANS_RECIPIENT_INFO;
alias PCMSG_KEY_TRANS_RECIPIENT_INFO = _CMSG_KEY_TRANS_RECIPIENT_INFO*;

struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
{
    CERT_ID RecipientId;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}

alias CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
alias PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO*;

struct _CMSG_KEY_AGREE_RECIPIENT_INFO
{
    DWORD dwVersion;
    DWORD dwOriginatorChoice;

    union
    {
        CERT_ID OriginatorCertId;
        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    }

    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO* rgpRecipientEncryptedKeys;
}

alias CMSG_KEY_AGREE_RECIPIENT_INFO = _CMSG_KEY_AGREE_RECIPIENT_INFO;
alias PCMSG_KEY_AGREE_RECIPIENT_INFO = _CMSG_KEY_AGREE_RECIPIENT_INFO*;

struct _CMSG_MAIL_LIST_RECIPIENT_INFO
{
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}

alias CMSG_MAIL_LIST_RECIPIENT_INFO = _CMSG_MAIL_LIST_RECIPIENT_INFO;
alias PCMSG_MAIL_LIST_RECIPIENT_INFO = _CMSG_MAIL_LIST_RECIPIENT_INFO*;

struct _CMSG_CMS_RECIPIENT_INFO
{
    DWORD dwRecipientChoice;

    union
    {
        PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
        PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
        PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    }
}

alias CMSG_CMS_RECIPIENT_INFO = _CMSG_CMS_RECIPIENT_INFO;
alias PCMSG_CMS_RECIPIENT_INFO = _CMSG_CMS_RECIPIENT_INFO*;

WINBOOL CryptMsgControl (HCRYPTMSG hCryptMsg, DWORD dwFlags, DWORD dwCtrlType, const(void)* pvCtrlPara);

struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void* pvSigner;
}

alias CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
alias PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA*;

struct _CMSG_CTRL_DECRYPT_PARA
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    }

    DWORD dwKeySpec;
    DWORD dwRecipientIndex;
}

alias CMSG_CTRL_DECRYPT_PARA = _CMSG_CTRL_DECRYPT_PARA;
alias PCMSG_CTRL_DECRYPT_PARA = _CMSG_CTRL_DECRYPT_PARA*;

struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    }

    DWORD dwKeySpec;
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
}

alias CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
alias PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*;

struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    }

    DWORD dwKeySpec;
    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
}

alias CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
alias PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*;

struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;

    union
    {
        HCRYPTKEY hKeyEncryptionKey;
        void* pvKeyEncryptionKey;
    }
}

alias CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
alias PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA*;

struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
}

alias CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
alias PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA*;

struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
}

alias CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
alias PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA*;

WINBOOL CryptMsgVerifyCountersignatureEncoded (HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner);
WINBOOL CryptMsgVerifyCountersignatureEncodedEx (HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, DWORD dwSignerType, void* pvSigner, DWORD dwFlags, void* pvExtra);
WINBOOL CryptMsgCountersign (HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
WINBOOL CryptMsgCountersignEncoded (DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature);

alias PFN_CMSG_ALLOC = void* function (size_t cb);
alias PFN_CMSG_FREE = void function (void* pv);

alias PFN_CMSG_GEN_ENCRYPT_KEY = int function (HCRYPTPROV* phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY* phEncryptKey, PBYTE* ppbEncryptParameters, PDWORD pcbEncryptParameters);
alias PFN_CMSG_EXPORT_ENCRYPT_KEY = int function (HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData);
alias PFN_CMSG_IMPORT_ENCRYPT_KEY = int function (HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY* phEncryptKey);

struct _CMSG_CONTENT_ENCRYPT_INFO
{
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void* pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;

    union
    {
        HCRYPTKEY hContentEncryptKey;
        BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    }

    DWORD dwFlags;
    WINBOOL fCNG;
    BYTE* pbCNGContentEncryptKeyObject;
    BYTE* pbContentEncryptKey;
    DWORD cbContentEncryptKey;
}

alias CMSG_CONTENT_ENCRYPT_INFO = _CMSG_CONTENT_ENCRYPT_INFO;
alias PCMSG_CONTENT_ENCRYPT_INFO = _CMSG_CONTENT_ENCRYPT_INFO*;

alias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = int function (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void* pvReserved);

struct _CMSG_KEY_TRANS_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
}

alias CMSG_KEY_TRANS_ENCRYPT_INFO = _CMSG_KEY_TRANS_ENCRYPT_INFO;
alias PCMSG_KEY_TRANS_ENCRYPT_INFO = _CMSG_KEY_TRANS_ENCRYPT_INFO*;

alias PFN_CMSG_EXPORT_KEY_TRANS = int function (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void* pvReserved);

struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
{
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
}

alias CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
alias PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO*;

struct _CMSG_KEY_AGREE_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;

    union
    {
        CERT_ID OriginatorCertId;
        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    }

    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO* rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
}

alias CMSG_KEY_AGREE_ENCRYPT_INFO = _CMSG_KEY_AGREE_ENCRYPT_INFO;
alias PCMSG_KEY_AGREE_ENCRYPT_INFO = _CMSG_KEY_AGREE_ENCRYPT_INFO*;

alias PFN_CMSG_EXPORT_KEY_AGREE = int function (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void* pvReserved);

struct _CMSG_MAIL_LIST_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
}

alias CMSG_MAIL_LIST_ENCRYPT_INFO = _CMSG_MAIL_LIST_ENCRYPT_INFO;
alias PCMSG_MAIL_LIST_ENCRYPT_INFO = _CMSG_MAIL_LIST_ENCRYPT_INFO*;

alias PFN_CMSG_EXPORT_MAIL_LIST = int function (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void* pvReserved);
alias PFN_CMSG_IMPORT_KEY_TRANS = int function (PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void* pvReserved, HCRYPTKEY* phContentEncryptKey);
alias PFN_CMSG_IMPORT_KEY_AGREE = int function (PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void* pvReserved, HCRYPTKEY* phContentEncryptKey);
alias PFN_CMSG_IMPORT_MAIL_LIST = int function (PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void* pvReserved, HCRYPTKEY* phContentEncryptKey);

struct _CMSG_CNG_CONTENT_DECRYPT_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    NCRYPT_KEY_HANDLE hNCryptKey;
    BYTE* pbContentEncryptKey;
    DWORD cbContentEncryptKey;
    BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    BYTE* pbCNGContentEncryptKeyObject;
}

alias CMSG_CNG_CONTENT_DECRYPT_INFO = _CMSG_CNG_CONTENT_DECRYPT_INFO;
alias PCMSG_CNG_CONTENT_DECRYPT_INFO = _CMSG_CNG_CONTENT_DECRYPT_INFO*;

alias PFN_CMSG_CNG_IMPORT_KEY_TRANS = int function (PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void* pvReserved);
alias PFN_CMSG_CNG_IMPORT_KEY_AGREE = int function (PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void* pvReserved);
alias PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = int function (PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, DWORD dwFlags, void* pvReserved);

alias HCERTSTORE = void*;

struct _CERT_CONTEXT
{
    DWORD dwCertEncodingType;
    BYTE* pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
}

alias CERT_CONTEXT = _CERT_CONTEXT;
alias PCERT_CONTEXT = _CERT_CONTEXT*;

alias PCCERT_CONTEXT = const(_CERT_CONTEXT)*;

struct _CRL_CONTEXT
{
    DWORD dwCertEncodingType;
    BYTE* pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
}

alias CRL_CONTEXT = _CRL_CONTEXT;
alias PCRL_CONTEXT = _CRL_CONTEXT*;

alias PCCRL_CONTEXT = const(_CRL_CONTEXT)*;

struct _CTL_CONTEXT
{
    DWORD dwMsgAndCertEncodingType;
    BYTE* pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE* pbCtlContent;
    DWORD cbCtlContent;
}

alias CTL_CONTEXT = _CTL_CONTEXT;
alias PCTL_CONTEXT = _CTL_CONTEXT*;

alias PCCTL_CONTEXT = const(_CTL_CONTEXT)*;

struct _CRYPT_KEY_PROV_PARAM
{
    DWORD dwParam;
    BYTE* pbData;
    DWORD cbData;
    DWORD dwFlags;
}

alias CRYPT_KEY_PROV_PARAM = _CRYPT_KEY_PROV_PARAM;
alias PCRYPT_KEY_PROV_PARAM = _CRYPT_KEY_PROV_PARAM*;

struct _CRYPT_KEY_PROV_INFO
{
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
}

alias CRYPT_KEY_PROV_INFO = _CRYPT_KEY_PROV_INFO;
alias PCRYPT_KEY_PROV_INFO = _CRYPT_KEY_PROV_INFO*;

struct _CERT_KEY_CONTEXT
{
    DWORD cbSize;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    }

    DWORD dwKeySpec;
}

alias CERT_KEY_CONTEXT = _CERT_KEY_CONTEXT;
alias PCERT_KEY_CONTEXT = _CERT_KEY_CONTEXT*;

struct _ROOT_INFO_LUID
{
    DWORD LowPart;
    LONG HighPart;
}

alias ROOT_INFO_LUID = _ROOT_INFO_LUID;
alias PROOT_INFO_LUID = _ROOT_INFO_LUID*;

struct _CRYPT_SMART_CARD_ROOT_INFO
{
    BYTE[16] rgbCardID;
    ROOT_INFO_LUID luid;
}

alias CRYPT_SMART_CARD_ROOT_INFO = _CRYPT_SMART_CARD_ROOT_INFO;
alias PCRYPT_SMART_CARD_ROOT_INFO = _CRYPT_SMART_CARD_ROOT_INFO*;

struct _CERT_SYSTEM_STORE_RELOCATE_PARA
{
    union
    {
        HKEY hKeyBase;
        void* pvBase;
    }

    union
    {
        void* pvSystemStore;
        LPCSTR pszSystemStore;
        LPCWSTR pwszSystemStore;
    }
}

alias CERT_SYSTEM_STORE_RELOCATE_PARA = _CERT_SYSTEM_STORE_RELOCATE_PARA;
alias PCERT_SYSTEM_STORE_RELOCATE_PARA = _CERT_SYSTEM_STORE_RELOCATE_PARA*;

struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA
{
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
}

alias CERT_REGISTRY_STORE_CLIENT_GPT_PARA = _CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
alias PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = _CERT_REGISTRY_STORE_CLIENT_GPT_PARA*;

struct _CERT_REGISTRY_STORE_ROAMING_PARA
{
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
}

alias CERT_REGISTRY_STORE_ROAMING_PARA = _CERT_REGISTRY_STORE_ROAMING_PARA;
alias PCERT_REGISTRY_STORE_ROAMING_PARA = _CERT_REGISTRY_STORE_ROAMING_PARA*;

struct _CERT_LDAP_STORE_OPENED_PARA
{
    void* pvLdapSessionHandle;
    LPCWSTR pwszLdapUrl;
}

alias CERT_LDAP_STORE_OPENED_PARA = _CERT_LDAP_STORE_OPENED_PARA;
alias PCERT_LDAP_STORE_OPENED_PARA = _CERT_LDAP_STORE_OPENED_PARA*;

HCERTSTORE CertOpenStore (LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const(void)* pvPara);

alias HCERTSTOREPROV = void*;

struct _CERT_STORE_PROV_INFO
{
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void** rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
}

alias CERT_STORE_PROV_INFO = _CERT_STORE_PROV_INFO;
alias PCERT_STORE_PROV_INFO = _CERT_STORE_PROV_INFO*;

alias PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = int function (LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const(void)* pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo);

alias PFN_CERT_STORE_PROV_CLOSE = void function (HCERTSTOREPROV hStoreProv, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_READ_CERT = int function (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT* ppProvCertContext);
alias PFN_CERT_STORE_PROV_WRITE_CERT = int function (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_DELETE_CERT = int function (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = int function (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);
alias PFN_CERT_STORE_PROV_READ_CRL = int function (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT* ppProvCrlContext);
alias PFN_CERT_STORE_PROV_WRITE_CRL = int function (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_DELETE_CRL = int function (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = int function (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);
alias PFN_CERT_STORE_PROV_READ_CTL = int function (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT* ppProvCtlContext);
alias PFN_CERT_STORE_PROV_WRITE_CTL = int function (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_DELETE_CTL = int function (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = int function (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);
alias PFN_CERT_STORE_PROV_CONTROL = int function (HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType, const(void)* pvCtrlPara);

struct _CERT_STORE_PROV_FIND_INFO
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const(void)* pvFindPara;
}

alias CERT_STORE_PROV_FIND_INFO = _CERT_STORE_PROV_FIND_INFO;
alias PCERT_STORE_PROV_FIND_INFO = _CERT_STORE_PROV_FIND_INFO*;

alias CCERT_STORE_PROV_FIND_INFO = const _CERT_STORE_PROV_FIND_INFO;
alias PCCERT_STORE_PROV_FIND_INFO = const(_CERT_STORE_PROV_FIND_INFO)*;

alias PFN_CERT_STORE_PROV_FIND_CERT = int function (HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void** ppvStoreProvFindInfo, PCCERT_CONTEXT* ppProvCertContext);
alias PFN_CERT_STORE_PROV_FREE_FIND_CERT = int function (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void* pvStoreProvFindInfo, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = int function (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void* pvData, DWORD* pcbData);
alias PFN_CERT_STORE_PROV_FIND_CRL = int function (HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void** ppvStoreProvFindInfo, PCCRL_CONTEXT* ppProvCrlContext);
alias PFN_CERT_STORE_PROV_FREE_FIND_CRL = int function (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void* pvStoreProvFindInfo, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = int function (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void* pvData, DWORD* pcbData);
alias PFN_CERT_STORE_PROV_FIND_CTL = int function (HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void** ppvStoreProvFindInfo, PCCTL_CONTEXT* ppProvCtlContext);
alias PFN_CERT_STORE_PROV_FREE_FIND_CTL = int function (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void* pvStoreProvFindInfo, DWORD dwFlags);
alias PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = int function (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void* pvData, DWORD* pcbData);

HCERTSTORE CertDuplicateStore (HCERTSTORE hCertStore);

WINBOOL CertSaveStore (HCERTSTORE hCertStore, DWORD dwEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void* pvSaveToPara, DWORD dwFlags);
WINBOOL CertCloseStore (HCERTSTORE hCertStore, DWORD dwFlags);
PCCERT_CONTEXT CertGetSubjectCertificateFromStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, PCERT_INFO pCertId);
PCCERT_CONTEXT CertEnumCertificatesInStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext);
PCCERT_CONTEXT CertFindCertificateInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const(void)* pvFindPara, PCCERT_CONTEXT pPrevCertContext);

PCCERT_CONTEXT CertGetIssuerCertificateFromStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD* pdwFlags);
WINBOOL CertVerifySubjectCertificateContext (PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD* pdwFlags);
PCCERT_CONTEXT CertDuplicateCertificateContext (PCCERT_CONTEXT pCertContext);
PCCERT_CONTEXT CertCreateCertificateContext (DWORD dwCertEncodingType, const(BYTE)* pbCertEncoded, DWORD cbCertEncoded);
WINBOOL CertFreeCertificateContext (PCCERT_CONTEXT pCertContext);
WINBOOL CertSetCertificateContextProperty (PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);

struct _CRL_FIND_ISSUED_FOR_PARA
{
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
}

alias CRL_FIND_ISSUED_FOR_PARA = _CRL_FIND_ISSUED_FOR_PARA;
alias PCRL_FIND_ISSUED_FOR_PARA = _CRL_FIND_ISSUED_FOR_PARA*;

struct _CTL_ANY_SUBJECT_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
}

alias CTL_ANY_SUBJECT_INFO = _CTL_ANY_SUBJECT_INFO;
alias PCTL_ANY_SUBJECT_INFO = _CTL_ANY_SUBJECT_INFO*;

PCCRL_CONTEXT CertEnumCRLsInStore (HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext);
WINBOOL CertDeleteCRLFromStore (PCCRL_CONTEXT pCrlContext);
PCCRL_CONTEXT CertDuplicateCRLContext (PCCRL_CONTEXT pCrlContext);
PCCRL_CONTEXT CertFindCRLInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const(void)* pvFindPara, PCCRL_CONTEXT pPrevCrlContext);
WINBOOL CertFreeCRLContext (PCCRL_CONTEXT pCrlContext);

WINBOOL CertGetCertificateContextProperty (PCCERT_CONTEXT pCertContext, DWORD dwPropId, void* pvData, DWORD* pcbData);
DWORD CertEnumCertificateContextProperties (PCCERT_CONTEXT pCertContext, DWORD dwPropId);
WINBOOL CertDeleteCertificateFromStore (PCCERT_CONTEXT pCertContext);

WINBOOL CertCreateCTLEntryFromCertificateContextProperties (PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void* pvReserved, PCTL_ENTRY pCtlEntry, DWORD* pcbCtlEntry);
WINBOOL CertSetCertificateContextPropertiesFromCTLEntry (PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags);
PCCRL_CONTEXT CertGetCRLFromStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD* pdwFlags);
PCCRL_CONTEXT CertCreateCRLContext (DWORD dwCertEncodingType, const(BYTE)* pbCrlEncoded, DWORD cbCrlEncoded);
WINBOOL CertSetCRLContextProperty (PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);
WINBOOL CertGetCRLContextProperty (PCCRL_CONTEXT pCrlContext, DWORD dwPropId, void* pvData, DWORD* pcbData);
DWORD CertEnumCRLContextProperties (PCCRL_CONTEXT pCrlContext, DWORD dwPropId);
WINBOOL CertFindCertificateInCRL (PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void* pvReserved, PCRL_ENTRY* ppCrlEntry);
WINBOOL CertIsValidCRLForCertificate (PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrl, DWORD dwFlags, void* pvReserved);
WINBOOL CertAddEncodedCertificateToStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, const(BYTE)* pbCertEncoded, DWORD cbCertEncoded, DWORD dwAddDisposition, PCCERT_CONTEXT* ppCertContext);
WINBOOL CertAddCertificateContextToStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT* ppStoreContext);
WINBOOL CertAddSerializedElementToStore (HCERTSTORE hCertStore, const(BYTE)* pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, DWORD* pdwContextType, const(void*)* ppvContext);
WINBOOL CertAddEncodedCRLToStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, const(BYTE)* pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT* ppCrlContext);
WINBOOL CertAddCRLContextToStore (HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT* ppStoreContext);
WINBOOL CertSerializeCertificateStoreElement (PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
WINBOOL CertSerializeCRLStoreElement (PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
PCCTL_CONTEXT CertDuplicateCTLContext (PCCTL_CONTEXT pCtlContext);
PCCTL_CONTEXT CertCreateCTLContext (DWORD dwMsgAndCertEncodingType, const(BYTE)* pbCtlEncoded, DWORD cbCtlEncoded);
WINBOOL CertFreeCTLContext (PCCTL_CONTEXT pCtlContext);
WINBOOL CertSetCTLContextProperty (PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);
WINBOOL CertGetCTLContextProperty (PCCTL_CONTEXT pCtlContext, DWORD dwPropId, void* pvData, DWORD* pcbData);
DWORD CertEnumCTLContextProperties (PCCTL_CONTEXT pCtlContext, DWORD dwPropId);
PCCTL_CONTEXT CertEnumCTLsInStore (HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext);
PCTL_ENTRY CertFindSubjectInCTL (DWORD dwEncodingType, DWORD dwSubjectType, void* pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
PCCTL_CONTEXT CertFindCTLInStore (HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const(void)* pvFindPara, PCCTL_CONTEXT pPrevCtlContext);

struct _CTL_FIND_USAGE_PARA
{
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
}

alias CTL_FIND_USAGE_PARA = _CTL_FIND_USAGE_PARA;
alias PCTL_FIND_USAGE_PARA = _CTL_FIND_USAGE_PARA*;

struct _CTL_FIND_SUBJECT_PARA
{
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void* pvSubject;
}

alias CTL_FIND_SUBJECT_PARA = _CTL_FIND_SUBJECT_PARA;
alias PCTL_FIND_SUBJECT_PARA = _CTL_FIND_SUBJECT_PARA*;

alias PFN_CERT_CREATE_CONTEXT_SORT_FUNC = int function (DWORD cbTotalEncoded, DWORD cbRemainEncoded, DWORD cEntry, void* pvSort);

struct _CERT_CREATE_CONTEXT_PARA
{
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void* pvFree;
    PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
    void* pvSort;
}

alias CERT_CREATE_CONTEXT_PARA = _CERT_CREATE_CONTEXT_PARA;
alias PCERT_CREATE_CONTEXT_PARA = _CERT_CREATE_CONTEXT_PARA*;

struct _CERT_SYSTEM_STORE_INFO
{
    DWORD cbSize;
}

alias CERT_SYSTEM_STORE_INFO = _CERT_SYSTEM_STORE_INFO;
alias PCERT_SYSTEM_STORE_INFO = _CERT_SYSTEM_STORE_INFO*;

struct _CERT_PHYSICAL_STORE_INFO
{
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
}

alias CERT_PHYSICAL_STORE_INFO = _CERT_PHYSICAL_STORE_INFO;
alias PCERT_PHYSICAL_STORE_INFO = _CERT_PHYSICAL_STORE_INFO*;

WINBOOL CertAddEncodedCTLToStore (HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, const(BYTE)* pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT* ppCtlContext);
WINBOOL CertAddCTLContextToStore (HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT* ppStoreContext);
WINBOOL CertSerializeCTLStoreElement (PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
WINBOOL CertDeleteCTLFromStore (PCCTL_CONTEXT pCtlContext);
WINBOOL CertAddCertificateLinkToStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT* ppStoreContext);
WINBOOL CertAddCRLLinkToStore (HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT* ppStoreContext);
WINBOOL CertAddCTLLinkToStore (HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT* ppStoreContext);
WINBOOL CertAddStoreToCollection (HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority);
void CertRemoveStoreFromCollection (HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore);
WINBOOL CertControlStore (HCERTSTORE hCertStore, DWORD dwFlags, DWORD dwCtrlType, const(void)* pvCtrlPara);
WINBOOL CertSetStoreProperty (HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, const(void)* pvData);
WINBOOL CertGetStoreProperty (HCERTSTORE hCertStore, DWORD dwPropId, void* pvData, DWORD* pcbData);
const(void)* CertCreateContext (DWORD dwContextType, DWORD dwEncodingType, const(BYTE)* pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara);
WINBOOL CertRegisterSystemStore (const(void)* pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void* pvReserved);
WINBOOL CertRegisterPhysicalStore (const(void)* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void* pvReserved);
WINBOOL CertUnregisterSystemStore (const(void)* pvSystemStore, DWORD dwFlags);
WINBOOL CertUnregisterPhysicalStore (const(void)* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName);

alias PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = int function (LPCWSTR pwszStoreLocation, DWORD dwFlags, void* pvReserved, void* pvArg);
alias PFN_CERT_ENUM_SYSTEM_STORE = int function (const(void)* pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void* pvReserved, void* pvArg);
alias PFN_CERT_ENUM_PHYSICAL_STORE = int function (const(void)* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void* pvReserved, void* pvArg);

WINBOOL CertEnumSystemStoreLocation (DWORD dwFlags, void* pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
WINBOOL CertEnumSystemStore (DWORD dwFlags, void* pvSystemStoreLocationPara, void* pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
WINBOOL CertEnumPhysicalStore (const(void)* pvSystemStore, DWORD dwFlags, void* pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);

WINBOOL CertGetEnhancedKeyUsage (PCCERT_CONTEXT pCertContext, DWORD dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD* pcbUsage);
WINBOOL CertSetEnhancedKeyUsage (PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage);
WINBOOL CertAddEnhancedKeyUsageIdentifier (PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
WINBOOL CertRemoveEnhancedKeyUsageIdentifier (PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
WINBOOL CertGetValidUsages (DWORD cCerts, PCCERT_CONTEXT* rghCerts, int* cNumOIDs, LPSTR* rghOIDs, DWORD* pcbOIDs);
WINBOOL CryptMsgGetAndVerifySigner (HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE* rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT* ppSigner, DWORD* pdwSignerIndex);
WINBOOL CryptMsgSignCTL (DWORD dwMsgEncodingType, BYTE* pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE* pbEncoded, DWORD* pcbEncoded);
WINBOOL CryptMsgEncodeAndSignCTL (DWORD dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE* pbEncoded, DWORD* pcbEncoded);
WINBOOL CertFindSubjectInSortedCTL (PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void* pvReserved, PCRYPT_DER_BLOB pEncodedAttributes);
WINBOOL CertEnumSubjectInSortedCTL (PCCTL_CONTEXT pCtlContext, void** ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes);

struct _CTL_VERIFY_USAGE_PARA
{
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE* rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE* rghSignerStore;
}

alias CTL_VERIFY_USAGE_PARA = _CTL_VERIFY_USAGE_PARA;
alias PCTL_VERIFY_USAGE_PARA = _CTL_VERIFY_USAGE_PARA*;

struct _CTL_VERIFY_USAGE_STATUS
{
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT* ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT* ppSigner;
    DWORD dwSignerIndex;
}

alias CTL_VERIFY_USAGE_STATUS = _CTL_VERIFY_USAGE_STATUS;
alias PCTL_VERIFY_USAGE_STATUS = _CTL_VERIFY_USAGE_STATUS*;

WINBOOL CertVerifyCTLUsage (DWORD dwEncodingType, DWORD dwSubjectType, void* pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);

struct _CERT_REVOCATION_CRL_INFO
{
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;
    PCRL_ENTRY pCrlEntry;
    WINBOOL fDeltaCrlEntry;
}

alias CERT_REVOCATION_CRL_INFO = _CERT_REVOCATION_CRL_INFO;
alias PCERT_REVOCATION_CRL_INFO = _CERT_REVOCATION_CRL_INFO*;

alias CERT_REVOCATION_CHAIN_PARA = _CERT_REVOCATION_CHAIN_PARA;
alias PCERT_REVOCATION_CHAIN_PARA = _CERT_REVOCATION_CHAIN_PARA*;

struct _CERT_REVOCATION_PARA
{
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE* rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
}

alias CERT_REVOCATION_PARA = _CERT_REVOCATION_PARA;
alias PCERT_REVOCATION_PARA = _CERT_REVOCATION_PARA*;

struct _CERT_REVOCATION_STATUS
{
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
}

alias CERT_REVOCATION_STATUS = _CERT_REVOCATION_STATUS;
alias PCERT_REVOCATION_STATUS = _CERT_REVOCATION_STATUS*;

struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
{
    CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;
    CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
}

alias CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
alias PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO*;

alias PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = int function (DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void** ppvDecodedSignPara, LPWSTR* ppwszCNGHashAlgid);
alias PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = int function (NCRYPT_KEY_HANDLE hKey, DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void* pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE* pbComputedHash, DWORD cbComputedHash, BYTE* pbSignature, DWORD* pcbSignature);
alias PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = int function (DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPubKeyInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void* pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE* pbComputedHash, DWORD cbComputedHash, BYTE* pbSignature, DWORD cbSignature);

alias HCRYPTDEFAULTCONTEXT = void*;

struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
{
    DWORD cOID;
    LPSTR* rgpszOID;
}

alias CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
alias PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA*;

WINBOOL CertVerifyRevocation (DWORD dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID* rgpvContext, DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus);
WINBOOL CertCompareIntegerBlob (PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2);
WINBOOL CertCompareCertificate (DWORD dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2);
WINBOOL CertCompareCertificateName (DWORD dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2);
WINBOOL CertIsRDNAttrsInCertificateName (DWORD dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN);
WINBOOL CertComparePublicKeyInfo (DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2);
DWORD CertGetPublicKeyLength (DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey);
WINBOOL CryptVerifyCertificateSignature (HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const(BYTE)* pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey);
WINBOOL CryptVerifyCertificateSignatureEx (HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, DWORD dwSubjectType, void* pvSubject, DWORD dwIssuerType, void* pvIssuer, DWORD dwFlags, void* pvExtra);
WINBOOL CertIsStrongHashToSign (PCCERT_STRONG_SIGN_PARA pStrongSignPara, LPCWSTR pwszCNGHashAlgid, PCCERT_CONTEXT pSigningCert);
WINBOOL CryptHashToBeSigned (HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const(BYTE)* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
WINBOOL CryptHashCertificate (HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, const(BYTE)* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);

WINBOOL CryptSignCertificate (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, const(BYTE)* pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const(void)* pvHashAuxInfo, BYTE* pbSignature, DWORD* pcbSignature);
WINBOOL CryptSignAndEncodeCertificate (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType, const(void)* pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const(void)* pvHashAuxInfo, BYTE* pbEncoded, DWORD* pcbEncoded);
LONG CertVerifyTimeValidity (LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo);
LONG CertVerifyCRLTimeValidity (LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo);
WINBOOL CertVerifyValidityNesting (PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo);
WINBOOL CertVerifyCRLRevocation (DWORD dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO* rgpCrlInfo);
LPCSTR CertAlgIdToOID (DWORD dwAlgId);
DWORD CertOIDToAlgId (LPCSTR pszObjId);
PCERT_EXTENSION CertFindExtension (LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION* rgExtensions);
PCRYPT_ATTRIBUTE CertFindAttribute (LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE* rgAttr);
PCERT_RDN_ATTR CertFindRDNAttr (LPCSTR pszObjId, PCERT_NAME_INFO pName);
WINBOOL CertGetIntendedKeyUsage (DWORD dwCertEncodingType, PCERT_INFO pCertInfo, BYTE* pbKeyUsage, DWORD cbKeyUsage);
WINBOOL CryptInstallDefaultContext (HCRYPTPROV hCryptProv, DWORD dwDefaultType, const(void)* pvDefaultPara, DWORD dwFlags, void* pvReserved, HCRYPTDEFAULTCONTEXT* phDefaultContext);
WINBOOL CryptUninstallDefaultContext (HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void* pvReserved);
WINBOOL CryptExportPublicKeyInfo (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);
WINBOOL CryptExportPublicKeyInfoEx (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void* pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);

alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = int function (NCRYPT_KEY_HANDLE hNCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void* pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);

alias PFN_IMPORT_PRIV_KEY_FUNC = int function (HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo, DWORD dwFlags, void* pvAuxInfo);
alias PFN_EXPORT_PRIV_KEY_FUNC = int function (HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void* pvAuxInfo, CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo, DWORD* pcbPrivateKeyInfo);

WINBOOL CryptImportPublicKeyInfo (HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY* phKey);
WINBOOL CryptImportPublicKeyInfoEx (HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void* pvAuxInfo, HCRYPTKEY* phKey);

WINBOOL CryptAcquireCertificatePrivateKey (PCCERT_CONTEXT pCert, DWORD dwFlags, void* pvParameters, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE* phCryptProvOrNCryptKey, DWORD* pdwKeySpec, WINBOOL* pfCallerFreeProvOrNCryptKey);
WINBOOL CryptFindCertificateKeyProvInfo (PCCERT_CONTEXT pCert, DWORD dwFlags, void* pvReserved);
WINBOOL CryptImportPKCS8 (CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, DWORD dwFlags, HCRYPTPROV* phCryptProv, void* pvAuxInfo);
WINBOOL CryptExportPKCS8 (HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob);
WINBOOL CryptExportPKCS8Ex (CRYPT_PKCS8_EXPORT_PARAMS* psExportParams, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob);
WINBOOL CryptHashPublicKeyInfo (HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE* pbComputedHash, DWORD* pcbComputedHash);
DWORD CertRDNValueToStrA (DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz);
DWORD CertRDNValueToStrW (DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz);
DWORD CertNameToStrA (DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPSTR psz, DWORD csz);
DWORD CertNameToStrW (DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz);

WINBOOL CertStrToNameA (DWORD dwCertEncodingType, LPCSTR pszX500, DWORD dwStrType, void* pvReserved, BYTE* pbEncoded, DWORD* pcbEncoded, LPCSTR* ppszError);
WINBOOL CertStrToNameW (DWORD dwCertEncodingType, LPCWSTR pszX500, DWORD dwStrType, void* pvReserved, BYTE* pbEncoded, DWORD* pcbEncoded, LPCWSTR* ppszError);
DWORD CertGetNameStringA (PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void* pvTypePara, LPSTR pszNameString, DWORD cchNameString);
DWORD CertGetNameStringW (PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void* pvTypePara, LPWSTR pszNameString, DWORD cchNameString);

alias PFN_CRYPT_GET_SIGNER_CERTIFICATE = const(_CERT_CONTEXT)* function (void* pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);

struct _CRYPT_SIGN_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void* pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT* rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT* rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;
}

alias CRYPT_SIGN_MESSAGE_PARA = _CRYPT_SIGN_MESSAGE_PARA;
alias PCRYPT_SIGN_MESSAGE_PARA = _CRYPT_SIGN_MESSAGE_PARA*;

struct _CRYPT_VERIFY_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void* pvGetArg;
}

alias CRYPT_VERIFY_MESSAGE_PARA = _CRYPT_VERIFY_MESSAGE_PARA;
alias PCRYPT_VERIFY_MESSAGE_PARA = _CRYPT_VERIFY_MESSAGE_PARA*;

struct _CRYPT_ENCRYPT_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void* pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
}

alias CRYPT_ENCRYPT_MESSAGE_PARA = _CRYPT_ENCRYPT_MESSAGE_PARA;
alias PCRYPT_ENCRYPT_MESSAGE_PARA = _CRYPT_ENCRYPT_MESSAGE_PARA*;

struct _CRYPT_DECRYPT_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE* rghCertStore;
}

alias CRYPT_DECRYPT_MESSAGE_PARA = _CRYPT_DECRYPT_MESSAGE_PARA;
alias PCRYPT_DECRYPT_MESSAGE_PARA = _CRYPT_DECRYPT_MESSAGE_PARA*;

struct _CRYPT_HASH_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void* pvHashAuxInfo;
}

alias CRYPT_HASH_MESSAGE_PARA = _CRYPT_HASH_MESSAGE_PARA;
alias PCRYPT_HASH_MESSAGE_PARA = _CRYPT_HASH_MESSAGE_PARA*;

struct _CRYPT_KEY_SIGN_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;

    union
    {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    }

    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void* pvHashAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
}

alias CRYPT_KEY_SIGN_MESSAGE_PARA = _CRYPT_KEY_SIGN_MESSAGE_PARA;
alias PCRYPT_KEY_SIGN_MESSAGE_PARA = _CRYPT_KEY_SIGN_MESSAGE_PARA*;

struct _CRYPT_KEY_VERIFY_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
}

alias CRYPT_KEY_VERIFY_MESSAGE_PARA = _CRYPT_KEY_VERIFY_MESSAGE_PARA;
alias PCRYPT_KEY_VERIFY_MESSAGE_PARA = _CRYPT_KEY_VERIFY_MESSAGE_PARA*;

struct _CERT_CHAIN
{
    DWORD cCerts;
    PCERT_BLOB certs;
    CRYPT_KEY_PROV_INFO keyLocatorInfo;
}

alias CERT_CHAIN = _CERT_CHAIN;
alias PCERT_CHAIN = _CERT_CHAIN*;

WINBOOL CryptSignMessage (PCRYPT_SIGN_MESSAGE_PARA pSignPara, WINBOOL fDetachedSignature, DWORD cToBeSigned, const(BYTE)** rgpbToBeSigned, DWORD* rgcbToBeSigned, BYTE* pbSignedBlob, DWORD* pcbSignedBlob);
WINBOOL CryptVerifyMessageSignature (PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const(BYTE)* pbSignedBlob, DWORD cbSignedBlob, BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppSignerCert);
LONG CryptGetMessageSignerCount (DWORD dwMsgEncodingType, const(BYTE)* pbSignedBlob, DWORD cbSignedBlob);
HCERTSTORE CryptGetMessageCertificates (DWORD dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const(BYTE)* pbSignedBlob, DWORD cbSignedBlob);
WINBOOL CryptVerifyDetachedMessageSignature (PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const(BYTE)* pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, const(BYTE)** rgpbToBeSigned, DWORD* rgcbToBeSigned, PCCERT_CONTEXT* ppSignerCert);
WINBOOL CryptEncryptMessage (PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT* rgpRecipientCert, const(BYTE)* pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE* pbEncryptedBlob, DWORD* pcbEncryptedBlob);
WINBOOL CryptDecryptMessage (PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, const(BYTE)* pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE* pbDecrypted, DWORD* pcbDecrypted, PCCERT_CONTEXT* ppXchgCert);
WINBOOL CryptSignAndEncryptMessage (PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT* rgpRecipientCert, const(BYTE)* pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE* pbSignedAndEncryptedBlob, DWORD* pcbSignedAndEncryptedBlob);
WINBOOL CryptDecryptAndVerifyMessageSignature (PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const(BYTE)* pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE* pbDecrypted, DWORD* pcbDecrypted, PCCERT_CONTEXT* ppXchgCert, PCCERT_CONTEXT* ppSignerCert);
WINBOOL CryptDecodeMessage (DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const(BYTE)* pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, DWORD* pdwMsgType, DWORD* pdwInnerContentType, BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppXchgCert, PCCERT_CONTEXT* ppSignerCert);
WINBOOL CryptHashMessage (PCRYPT_HASH_MESSAGE_PARA pHashPara, WINBOOL fDetachedHash, DWORD cToBeHashed, const(BYTE)** rgpbToBeHashed, DWORD* rgcbToBeHashed, BYTE* pbHashedBlob, DWORD* pcbHashedBlob, BYTE* pbComputedHash, DWORD* pcbComputedHash);
WINBOOL CryptVerifyMessageHash (PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE* pbHashedBlob, DWORD cbHashedBlob, BYTE* pbToBeHashed, DWORD* pcbToBeHashed, BYTE* pbComputedHash, DWORD* pcbComputedHash);
WINBOOL CryptVerifyDetachedMessageHash (PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE* pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, const(BYTE)** rgpbToBeHashed, DWORD* rgcbToBeHashed, BYTE* pbComputedHash, DWORD* pcbComputedHash);
WINBOOL CryptSignMessageWithKey (PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, const(BYTE)* pbToBeSigned, DWORD cbToBeSigned, BYTE* pbSignedBlob, DWORD* pcbSignedBlob);
WINBOOL CryptVerifyMessageSignatureWithKey (PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const(BYTE)* pbSignedBlob, DWORD cbSignedBlob, BYTE* pbDecoded, DWORD* pcbDecoded);
HCERTSTORE CertOpenSystemStoreA (HCRYPTPROV_LEGACY hProv, LPCSTR szSubsystemProtocol);
HCERTSTORE CertOpenSystemStoreW (HCRYPTPROV_LEGACY hProv, LPCWSTR szSubsystemProtocol);
WINBOOL CertAddEncodedCertificateToSystemStoreA (LPCSTR szCertStoreName, const(BYTE)* pbCertEncoded, DWORD cbCertEncoded);
WINBOOL CertAddEncodedCertificateToSystemStoreW (LPCWSTR szCertStoreName, const(BYTE)* pbCertEncoded, DWORD cbCertEncoded);
HRESULT FindCertsByIssuer (PCERT_CHAIN pCertChains, DWORD* pcbCertChains, DWORD* pcCertChains, BYTE* pbEncodedIssuerName, DWORD cbEncodedIssuerName, LPCWSTR pwszPurpose, DWORD dwKeySpec);
WINBOOL CryptQueryObject (DWORD dwObjectType, const(void)* pvObject, DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags, DWORD dwFlags, DWORD* pdwMsgAndCertEncodingType, DWORD* pdwContentType, DWORD* pdwFormatType, HCERTSTORE* phCertStore, HCRYPTMSG* phMsg, const(void*)* ppvContext);

alias HCRYPTASYNC = void*;
alias PHCRYPTASYNC = void**;
alias PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = void function (LPSTR pszParamOid, LPVOID pvParam);

LPVOID CryptMemAlloc (ULONG cbSize);
LPVOID CryptMemRealloc (LPVOID pv, ULONG cbSize);
void CryptMemFree (LPVOID pv);
WINBOOL CryptCreateAsyncHandle (DWORD dwFlags, PHCRYPTASYNC phAsync);
WINBOOL CryptSetAsyncParam (HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID pvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
WINBOOL CryptGetAsyncParam (HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID* ppvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree);
WINBOOL CryptCloseAsyncHandle (HCRYPTASYNC hAsync);

struct _CRYPT_BLOB_ARRAY
{
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
}

alias CRYPT_BLOB_ARRAY = _CRYPT_BLOB_ARRAY;
alias PCRYPT_BLOB_ARRAY = _CRYPT_BLOB_ARRAY*;

struct _CRYPT_CREDENTIALS
{
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
}

alias CRYPT_CREDENTIALS = _CRYPT_CREDENTIALS;
alias PCRYPT_CREDENTIALS = _CRYPT_CREDENTIALS*;

struct _CRYPT_PASSWORD_CREDENTIALSA
{
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
}

alias CRYPT_PASSWORD_CREDENTIALSA = _CRYPT_PASSWORD_CREDENTIALSA;
alias PCRYPT_PASSWORD_CREDENTIALSA = _CRYPT_PASSWORD_CREDENTIALSA*;

struct _CRYPT_PASSWORD_CREDENTIALSW
{
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
}

alias CRYPT_PASSWORD_CREDENTIALSW = _CRYPT_PASSWORD_CREDENTIALSW;
alias PCRYPT_PASSWORD_CREDENTIALSW = _CRYPT_PASSWORD_CREDENTIALSW*;

alias CRYPT_PASSWORD_CREDENTIALS = _CRYPT_PASSWORD_CREDENTIALSA;
alias PCRYPT_PASSWORD_CREDENTIALS = _CRYPT_PASSWORD_CREDENTIALSA*;

alias PFN_FREE_ENCODED_OBJECT_FUNC = void function (LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext);

struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO
{
    DWORD cbSize;
    DWORD dwObjectType;
    DWORD dwError;
    DWORD dwReserved;
    FILETIME ThisUpdateTime;
    FILETIME NextUpdateTime;
    FILETIME PublishTime;
}

alias CRYPTNET_URL_CACHE_PRE_FETCH_INFO = _CRYPTNET_URL_CACHE_PRE_FETCH_INFO;
alias PCRYPTNET_URL_CACHE_PRE_FETCH_INFO = _CRYPTNET_URL_CACHE_PRE_FETCH_INFO*;

struct _CRYPTNET_URL_CACHE_FLUSH_INFO
{
    DWORD cbSize;
    DWORD dwExemptSeconds;
    FILETIME ExpireTime;
}

alias CRYPTNET_URL_CACHE_FLUSH_INFO = _CRYPTNET_URL_CACHE_FLUSH_INFO;
alias PCRYPTNET_URL_CACHE_FLUSH_INFO = _CRYPTNET_URL_CACHE_FLUSH_INFO*;

struct _CRYPTNET_URL_CACHE_RESPONSE_INFO
{
    DWORD cbSize;
    WORD wResponseType;
    WORD wResponseFlags;
    FILETIME LastModifiedTime;
    DWORD dwMaxAge;
    LPCWSTR pwszETag;
    DWORD dwProxyId;
}

alias CRYPTNET_URL_CACHE_RESPONSE_INFO = _CRYPTNET_URL_CACHE_RESPONSE_INFO;
alias PCRYPTNET_URL_CACHE_RESPONSE_INFO = _CRYPTNET_URL_CACHE_RESPONSE_INFO*;

struct _CRYPT_RETRIEVE_AUX_INFO
{
    DWORD cbSize;
    FILETIME* pLastSyncTime;
    DWORD dwMaxUrlRetrievalByteCount;
    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;
    PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;
    PCRYPTNET_URL_CACHE_RESPONSE_INFO* ppResponseInfo;
    LPWSTR pwszCacheFileNamePrefix;
    LPFILETIME pftCacheResync;
    WINBOOL fProxyCacheRetrieval;
    DWORD dwHttpStatusCode;
}

alias CRYPT_RETRIEVE_AUX_INFO = _CRYPT_RETRIEVE_AUX_INFO;
alias PCRYPT_RETRIEVE_AUX_INFO = _CRYPT_RETRIEVE_AUX_INFO*;

WINBOOL CryptRetrieveObjectByUrlA (LPCSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID* ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
WINBOOL CryptRetrieveObjectByUrlW (LPCWSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID* ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);

alias PFN_CRYPT_CANCEL_RETRIEVAL = int function (DWORD dwFlags, void* pvArg);

WINBOOL CryptInstallCancelRetrieval (PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel, const(void)* pvArg, DWORD dwFlags, void* pvReserved);
WINBOOL CryptUninstallCancelRetrieval (DWORD dwFlags, void* pvReserved);
WINBOOL CryptCancelAsyncRetrieval (HCRYPTASYNC hAsyncRetrieval);

alias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = void function (LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject);

struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION
{
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    LPVOID pvCompletion;
}

alias CRYPT_ASYNC_RETRIEVAL_COMPLETION = _CRYPT_ASYNC_RETRIEVAL_COMPLETION;
alias PCRYPT_ASYNC_RETRIEVAL_COMPLETION = _CRYPT_ASYNC_RETRIEVAL_COMPLETION*;

alias PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = int function (HCRYPTASYNC hAsyncRetrieve);

struct _CRYPT_URL_ARRAY
{
    DWORD cUrl;
    LPWSTR* rgwszUrl;
}

alias CRYPT_URL_ARRAY = _CRYPT_URL_ARRAY;
alias PCRYPT_URL_ARRAY = _CRYPT_URL_ARRAY*;

struct _CRYPT_URL_INFO
{
    DWORD cbSize;
    DWORD dwSyncDeltaTime;
    DWORD cGroup;
    DWORD* rgcGroupEntry;
}

alias CRYPT_URL_INFO = _CRYPT_URL_INFO;
alias PCRYPT_URL_INFO = _CRYPT_URL_INFO*;

WINBOOL CryptGetObjectUrl (LPCSTR pszUrlOid, LPVOID pvPara, DWORD dwFlags, PCRYPT_URL_ARRAY pUrlArray, DWORD* pcbUrlArray, PCRYPT_URL_INFO pUrlInfo, DWORD* pcbUrlInfo, LPVOID pvReserved);

struct _CERT_CRL_CONTEXT_PAIR
{
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
}

alias CERT_CRL_CONTEXT_PAIR = _CERT_CRL_CONTEXT_PAIR;
alias PCERT_CRL_CONTEXT_PAIR = _CERT_CRL_CONTEXT_PAIR*;

alias PCCERT_CRL_CONTEXT_PAIR = const(_CERT_CRL_CONTEXT_PAIR)*;

struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
{
    DWORD cbSize;
    int iDeltaCrlIndicator;
    LPFILETIME pftCacheResync;
    LPFILETIME pLastSyncTime;
    LPFILETIME pMaxAgeTime;
    PCERT_REVOCATION_CHAIN_PARA pChainPara;
    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;
}

alias CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
alias PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO*;

alias PFN_CRYPT_ENUM_KEYID_PROP = int function (const(CRYPT_HASH_BLOB)* pKeyIdentifier, DWORD dwFlags, void* pvReserved, void* pvArg, DWORD cProp, DWORD* rgdwPropId, void** rgpvData, DWORD* rgcbData);

WINBOOL CryptGetTimeValidObject (LPCSTR pszTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, LPFILETIME pftValidFor, DWORD dwFlags, DWORD dwTimeout, LPVOID* ppvObject, PCRYPT_CREDENTIALS pCredentials, PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo);
WINBOOL CryptFlushTimeValidObject (LPCSTR pszFlushTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, DWORD dwFlags, LPVOID pvReserved);
PCCERT_CONTEXT CertCreateSelfSignCertificate (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags, PCRYPT_KEY_PROV_INFO pKeyProvInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime, PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions);
WINBOOL CryptGetKeyIdentifierProperty (const(CRYPT_HASH_BLOB)* pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void* pvReserved, void* pvData, DWORD* pcbData);
WINBOOL CryptSetKeyIdentifierProperty (const(CRYPT_HASH_BLOB)* pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void* pvReserved, const(void)* pvData);
WINBOOL CryptEnumKeyIdentifierProperties (const(CRYPT_HASH_BLOB)* pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void* pvReserved, void* pvArg, PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
WINBOOL CryptCreateKeyIdentifierFromCSP (DWORD dwCertEncodingType, LPCSTR pszPubKeyOID, const(PUBLICKEYSTRUC)* pPubKeyStruc, DWORD cbPubKeyStruc, DWORD dwFlags, void* pvReserved, BYTE* pbHash, DWORD* pcbHash);

alias HCERTCHAINENGINE = void*;

struct _CERT_CHAIN_ENGINE_CONFIG
{
    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;
}

alias CERT_CHAIN_ENGINE_CONFIG = _CERT_CHAIN_ENGINE_CONFIG;
alias PCERT_CHAIN_ENGINE_CONFIG = _CERT_CHAIN_ENGINE_CONFIG*;

WINBOOL CertCreateCertificateChainEngine (PCERT_CHAIN_ENGINE_CONFIG pConfig, HCERTCHAINENGINE* phChainEngine);
void CertFreeCertificateChainEngine (HCERTCHAINENGINE hChainEngine);
WINBOOL CertResyncCertificateChainEngine (HCERTCHAINENGINE hChainEngine);

struct _CERT_TRUST_STATUS
{
    DWORD dwErrorStatus;
    DWORD dwInfoStatus;
}

alias CERT_TRUST_STATUS = _CERT_TRUST_STATUS;
alias PCERT_TRUST_STATUS = _CERT_TRUST_STATUS*;

struct _CERT_REVOCATION_INFO
{
    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
    PCERT_REVOCATION_CRL_INFO pCrlInfo;
}

alias CERT_REVOCATION_INFO = _CERT_REVOCATION_INFO;
alias PCERT_REVOCATION_INFO = _CERT_REVOCATION_INFO*;

struct _CERT_TRUST_LIST_INFO
{
    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;
}

alias CERT_TRUST_LIST_INFO = _CERT_TRUST_LIST_INFO;
alias PCERT_TRUST_LIST_INFO = _CERT_TRUST_LIST_INFO*;

struct _CERT_CHAIN_ELEMENT
{
    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;
    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;
    LPCWSTR pwszExtendedErrorInfo;
}

alias CERT_CHAIN_ELEMENT = _CERT_CHAIN_ELEMENT;
alias PCERT_CHAIN_ELEMENT = _CERT_CHAIN_ELEMENT*;

alias PCCERT_CHAIN_ELEMENT = const(_CERT_CHAIN_ELEMENT)*;

struct _CERT_SIMPLE_CHAIN
{
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT* rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
}

alias CERT_SIMPLE_CHAIN = _CERT_SIMPLE_CHAIN;
alias PCERT_SIMPLE_CHAIN = _CERT_SIMPLE_CHAIN*;

alias PCCERT_SIMPLE_CHAIN = const(_CERT_SIMPLE_CHAIN)*;

alias CERT_CHAIN_CONTEXT = _CERT_CHAIN_CONTEXT;
alias PCERT_CHAIN_CONTEXT = _CERT_CHAIN_CONTEXT*;
alias PCCERT_CHAIN_CONTEXT = const(_CERT_CHAIN_CONTEXT)*;

struct _CERT_CHAIN_CONTEXT
{
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN* rgpChain;
    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT* rgpLowerQualityChainContext;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
    DWORD dwCreateFlags;
    GUID ChainId;
}

struct _CERT_USAGE_MATCH
{
    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;
}

alias CERT_USAGE_MATCH = _CERT_USAGE_MATCH;
alias PCERT_USAGE_MATCH = _CERT_USAGE_MATCH*;

struct _CTL_USAGE_MATCH
{
    DWORD dwType;
    CTL_USAGE Usage;
}

alias CTL_USAGE_MATCH = _CTL_USAGE_MATCH;
alias PCTL_USAGE_MATCH = _CTL_USAGE_MATCH*;

struct _CERT_CHAIN_PARA
{
    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
}

alias CERT_CHAIN_PARA = _CERT_CHAIN_PARA;
alias PCERT_CHAIN_PARA = _CERT_CHAIN_PARA*;

WINBOOL CertGetCertificateChain (HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT* ppChainContext);
void CertFreeCertificateChain (PCCERT_CHAIN_CONTEXT pChainContext);
PCCERT_CHAIN_CONTEXT CertDuplicateCertificateChain (PCCERT_CHAIN_CONTEXT pChainContext);

struct _CERT_REVOCATION_CHAIN_PARA
{
    DWORD cbSize;
    HCERTCHAINENGINE hChainEngine;
    HCERTSTORE hAdditionalStore;
    DWORD dwChainFlags;
    DWORD dwUrlRetrievalTimeout;
    LPFILETIME pftCurrentTime;
    LPFILETIME pftCacheResync;
    DWORD cbMaxUrlRetrievalByteCount;
}

struct _CRL_REVOCATION_INFO
{
    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
}

alias CRL_REVOCATION_INFO = _CRL_REVOCATION_INFO;
alias PCRL_REVOCATION_INFO = _CRL_REVOCATION_INFO*;

PCCERT_CHAIN_CONTEXT CertFindChainInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const(void)* pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext);

alias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = int function (PCCERT_CONTEXT pCert, void* pvFindArg);

struct _CERT_CHAIN_FIND_BY_ISSUER_PARA
{
    DWORD cbSize;
    LPCSTR pszUsageIdentifier;
    DWORD dwKeySpec;
    DWORD dwAcquirePrivateKeyFlags;
    DWORD cIssuer;
    CERT_NAME_BLOB* rgIssuer;
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void* pvFindArg;
}

alias CERT_CHAIN_FIND_ISSUER_PARA = _CERT_CHAIN_FIND_BY_ISSUER_PARA;
alias PCERT_CHAIN_FIND_ISSUER_PARA = _CERT_CHAIN_FIND_BY_ISSUER_PARA*;
alias CERT_CHAIN_FIND_BY_ISSUER_PARA = _CERT_CHAIN_FIND_BY_ISSUER_PARA;
alias PCERT_CHAIN_FIND_BY_ISSUER_PARA = _CERT_CHAIN_FIND_BY_ISSUER_PARA*;

struct _CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwFlags;
    void* pvExtraPolicyPara;
}

alias CERT_CHAIN_POLICY_PARA = _CERT_CHAIN_POLICY_PARA;
alias PCERT_CHAIN_POLICY_PARA = _CERT_CHAIN_POLICY_PARA*;

struct _CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void* pvExtraPolicyStatus;
}

alias CERT_CHAIN_POLICY_STATUS = _CERT_CHAIN_POLICY_STATUS;
alias PCERT_CHAIN_POLICY_STATUS = _CERT_CHAIN_POLICY_STATUS*;

WINBOOL CertVerifyCertificateChainPolicy (LPCSTR pszPolicyOID, PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara, PCERT_CHAIN_POLICY_STATUS pPolicyStatus);

struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
}

alias AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
alias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA*;

struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    WINBOOL fCommercial;
}

alias AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
alias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS*;

struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    WINBOOL fCommercial;
}

alias AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
alias PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA*;

struct _HTTPSPolicyCallbackData
{
    union
    {
        DWORD cbStruct;
        DWORD cbSize;
    }

    DWORD dwAuthType;
    DWORD fdwChecks;
    WCHAR* pwszServerName;
}

alias HTTPSPolicyCallbackData = _HTTPSPolicyCallbackData;
alias PHTTPSPolicyCallbackData = _HTTPSPolicyCallbackData*;
alias SSL_EXTRA_CERT_CHAIN_POLICY_PARA = _HTTPSPolicyCallbackData;
alias PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = _HTTPSPolicyCallbackData*;

struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRootProgramQualifierFlags;
}

alias EV_EXTRA_CERT_CHAIN_POLICY_PARA = _EV_EXTRA_CERT_CHAIN_POLICY_PARA;
alias PEV_EXTRA_CERT_CHAIN_POLICY_PARA = _EV_EXTRA_CERT_CHAIN_POLICY_PARA*;

struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    DWORD dwQualifiers;
    DWORD dwIssuanceUsageIndex;
}

alias EV_EXTRA_CERT_CHAIN_POLICY_STATUS = _EV_EXTRA_CERT_CHAIN_POLICY_STATUS;
alias PEV_EXTRA_CERT_CHAIN_POLICY_STATUS = _EV_EXTRA_CERT_CHAIN_POLICY_STATUS*;

WINBOOL CryptStringToBinaryA (LPCSTR pszString, DWORD cchString, DWORD dwFlags, BYTE* pbBinary, DWORD* pcbBinary, DWORD* pdwSkip, DWORD* pdwFlags);
WINBOOL CryptStringToBinaryW (LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE* pbBinary, DWORD* pcbBinary, DWORD* pdwSkip, DWORD* pdwFlags);
WINBOOL CryptBinaryToStringA (const(BYTE)* pbBinary, DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD* pcchString);
WINBOOL CryptBinaryToStringW (const(BYTE)* pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD* pcchString);

struct _CRYPT_PKCS12_PBE_PARAMS
{
    int iIterations;
    ULONG cbSalt;
}

alias CRYPT_PKCS12_PBE_PARAMS = _CRYPT_PKCS12_PBE_PARAMS;

HCERTSTORE PFXImportCertStore (CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);

WINBOOL PFXIsPFXBlob (CRYPT_DATA_BLOB* pPFX);
WINBOOL PFXVerifyPassword (CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);
WINBOOL PFXExportCertStoreEx (HCERTSTORE hStore, CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, void* pvPara, DWORD dwFlags);

WINBOOL PFXExportCertStore (HCERTSTORE hStore, CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);

WINBOOL CertRetrieveLogoOrBiometricInfo (PCCERT_CONTEXT pCertContext, LPCSTR lpszLogoOrBiometricType, DWORD dwRetrievalFlags, DWORD dwTimeout, DWORD dwFlags, void* pvReserved, BYTE** ppbData, DWORD* pcbData, LPWSTR* ppwszMimeType);

struct _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
}

alias CRYPTPROTECT_PROMPTSTRUCT = _CRYPTPROTECT_PROMPTSTRUCT;
alias PCRYPTPROTECT_PROMPTSTRUCT = _CRYPTPROTECT_PROMPTSTRUCT*;

WINBOOL CryptProtectData (DATA_BLOB* pDataIn, LPCWSTR szDataDescr, DATA_BLOB* pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, DWORD dwFlags, DATA_BLOB* pDataOut);
WINBOOL CryptUnprotectData (DATA_BLOB* pDataIn, LPWSTR* ppszDataDescr, DATA_BLOB* pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, DWORD dwFlags, DATA_BLOB* pDataOut);

WINBOOL CryptProtectMemory (LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags);
WINBOOL CryptUnprotectMemory (LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags);

struct _CERTIFICATE_BLOB
{
    DWORD dwCertEncodingType;
    DWORD cbData;
    PBYTE pbData;
}

alias EFS_CERTIFICATE_BLOB = _CERTIFICATE_BLOB;
alias PEFS_CERTIFICATE_BLOB = _CERTIFICATE_BLOB*;

struct _EFS_HASH_BLOB
{
    DWORD cbData;
    PBYTE pbData;
}

alias EFS_HASH_BLOB = _EFS_HASH_BLOB;
alias PEFS_HASH_BLOB = _EFS_HASH_BLOB*;

struct _EFS_RPC_BLOB
{
    DWORD cbData;
    PBYTE pbData;
}

alias EFS_RPC_BLOB = _EFS_RPC_BLOB;
alias PEFS_RPC_BLOB = _EFS_RPC_BLOB*;

struct _EFS_KEY_INFO
{
    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;
}

alias EFS_KEY_INFO = _EFS_KEY_INFO;
alias PEFS_KEY_INFO = _EFS_KEY_INFO*;

struct _ENCRYPTION_CERTIFICATE
{
    DWORD cbTotalLength;
    SID* pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
}

alias ENCRYPTION_CERTIFICATE = _ENCRYPTION_CERTIFICATE;
alias PENCRYPTION_CERTIFICATE = _ENCRYPTION_CERTIFICATE*;

struct _ENCRYPTION_CERTIFICATE_HASH
{
    DWORD cbTotalLength;
    SID* pUserSid;
    PEFS_HASH_BLOB pHash;
    LPWSTR lpDisplayInformation;
}

alias ENCRYPTION_CERTIFICATE_HASH = _ENCRYPTION_CERTIFICATE_HASH;
alias PENCRYPTION_CERTIFICATE_HASH = _ENCRYPTION_CERTIFICATE_HASH*;

struct _ENCRYPTION_CERTIFICATE_HASH_LIST
{
    DWORD nCert_Hash;
    PENCRYPTION_CERTIFICATE_HASH* pUsers;
}

alias ENCRYPTION_CERTIFICATE_HASH_LIST = _ENCRYPTION_CERTIFICATE_HASH_LIST;
alias PENCRYPTION_CERTIFICATE_HASH_LIST = _ENCRYPTION_CERTIFICATE_HASH_LIST*;

struct _ENCRYPTION_CERTIFICATE_LIST
{
    DWORD nUsers;
    PENCRYPTION_CERTIFICATE* pUsers;
}

alias ENCRYPTION_CERTIFICATE_LIST = _ENCRYPTION_CERTIFICATE_LIST;
alias PENCRYPTION_CERTIFICATE_LIST = _ENCRYPTION_CERTIFICATE_LIST*;

DWORD QueryUsersOnEncryptedFile (LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST* pUsers);
DWORD QueryRecoveryAgentsOnEncryptedFile (LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST* pRecoveryAgents);
DWORD RemoveUsersFromEncryptedFile (LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
DWORD AddUsersToEncryptedFile (LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_LIST pUsers);
DWORD SetUserFileEncryptionKey (PENCRYPTION_CERTIFICATE pEncryptionCertificate);
void FreeEncryptionCertificateHashList (PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
WINBOOL EncryptionDisable (LPCWSTR DirPath, WINBOOL Disable);
DWORD DuplicateEncryptionInfoFile (LPCWSTR SrcFileName, LPCWSTR DstFileName, DWORD dwCreationDistribution, DWORD dwAttributes, const LPSECURITY_ATTRIBUTES lpSecurityAttributes);

struct RPC_IMPORT_CONTEXT_P
{
    RPC_NS_HANDLE LookupContext;
    RPC_BINDING_HANDLE ProposedHandle;
    RPC_BINDING_VECTOR* Bindings;
}

alias PRPC_IMPORT_CONTEXT_P = RPC_IMPORT_CONTEXT_P*;

RPC_STATUS I_RpcNsGetBuffer (PRPC_MESSAGE Message);
RPC_STATUS I_RpcNsSendReceive (PRPC_MESSAGE Message, RPC_BINDING_HANDLE* Handle);
void I_RpcNsRaiseException (PRPC_MESSAGE Message, RPC_STATUS Status);
RPC_STATUS I_RpcReBindBuffer (PRPC_MESSAGE Message);
RPC_STATUS I_NsServerBindSearch ();
RPC_STATUS I_NsClientBindSearch ();
void I_NsClientBindDone ();

alias cs_byte = ubyte;
alias boolean = ubyte;

void* MIDL_user_allocate (SIZE_T);
void MIDL_user_free (void*);

alias NDR_CCONTEXT = void*;

struct _NDR_SCONTEXT
{
    void*[2] pad;
    void* userContext;
}

alias NDR_SCONTEXT = _NDR_SCONTEXT*;

alias NDR_RUNDOWN = void function (void* context);
alias NDR_NOTIFY_ROUTINE = void function ();
alias NDR_NOTIFY2_ROUTINE = void function (boolean flag);

struct _SCONTEXT_QUEUE
{
    c_ulong NumberOfObjects;
    NDR_SCONTEXT* ArrayOfObjects;
}

alias SCONTEXT_QUEUE = _SCONTEXT_QUEUE;
alias PSCONTEXT_QUEUE = _SCONTEXT_QUEUE*;

RPC_BINDING_HANDLE NDRCContextBinding (NDR_CCONTEXT CContext);
void NDRCContextMarshall (NDR_CCONTEXT CContext, void* pBuff);
void NDRCContextUnmarshall (NDR_CCONTEXT* pCContext, RPC_BINDING_HANDLE hBinding, void* pBuff, c_ulong DataRepresentation);
void NDRSContextMarshall (NDR_SCONTEXT CContext, void* pBuff, NDR_RUNDOWN userRunDownIn);
NDR_SCONTEXT NDRSContextUnmarshall (void* pBuff, c_ulong DataRepresentation);
void NDRSContextMarshallEx (RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void* pBuff, NDR_RUNDOWN userRunDownIn);
void NDRSContextMarshall2 (RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void* pBuff, NDR_RUNDOWN userRunDownIn, void* CtxGuard, c_ulong Flags);
NDR_SCONTEXT NDRSContextUnmarshallEx (RPC_BINDING_HANDLE BindingHandle, void* pBuff, c_ulong DataRepresentation);
NDR_SCONTEXT NDRSContextUnmarshall2 (RPC_BINDING_HANDLE BindingHandle, void* pBuff, c_ulong DataRepresentation, void* CtxGuard, c_ulong Flags);
void RpcSsDestroyClientContext (void** ContextHandle);

alias error_status_t = c_ulong;

alias RPC_BUFPTR = ubyte*;
alias RPC_LENGTH = c_ulong;
alias EXPR_EVAL = void function (_MIDL_STUB_MESSAGE*);
alias PFORMAT_STRING = const(ubyte)*;

struct ARRAY_INFO
{
    c_long Dimension;
    c_ulong* BufferConformanceMark;
    c_ulong* BufferVarianceMark;
    c_ulong* MaxCountArray;
    c_ulong* OffsetArray;
    c_ulong* ActualCountArray;
}

alias PARRAY_INFO = ARRAY_INFO*;

struct _NDR_ASYNC_MESSAGE;
alias PNDR_ASYNC_MESSAGE = _NDR_ASYNC_MESSAGE*;
struct _NDR_CORRELATION_INFO;
alias PNDR_CORRELATION_INFO = _NDR_CORRELATION_INFO*;

struct CS_STUB_INFO
{
    c_ulong WireCodeset;
    c_ulong DesiredReceivingCodeset;
    void* CSArrayInfo;
}

alias MIDL_SYNTAX_INFO = _MIDL_SYNTAX_INFO;
alias PMIDL_SYNTAX_INFO = _MIDL_SYNTAX_INFO*;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

struct _MIDL_STUB_MESSAGE
{
    

    PRPC_MESSAGE RpcMsg;
    ubyte* Buffer;
    ubyte* BufferStart;
    ubyte* BufferEnd;
    ubyte* BufferMark;
    c_ulong BufferLength;
    c_ulong MemorySize;
    ubyte* Memory;
    ubyte IsClient;
    ubyte Pad;
    ushort uFlags2;
    int ReuseBuffer;
    NDR_ALLOC_ALL_NODES_CONTEXT* pAllocAllNodesContext;
    NDR_POINTER_QUEUE_STATE* pPointerQueueState;
    int IgnoreEmbeddedPointers;
    ubyte* PointerBufferMark;
    ubyte fBufferValid;
    ubyte uFlags;
    ushort UniquePtrCount;
    ULONG_PTR MaxCount;
    c_ulong Offset;
    c_ulong ActualCount;
    void* function (size_t) pfnAllocate;
    void function (void*) pfnFree;
    ubyte* StackTop;
    ubyte* pPresentedType;
    ubyte* pTransmitType;
    handle_t SavedHandle;
    const(_MIDL_STUB_DESC)* StubDesc;
    _FULL_PTR_XLAT_TABLES* FullPtrXlatTables;
    c_ulong FullPtrRefId;
    c_ulong PointerLength;

    mixin(bitfields!(
        int, "fInDontFree", 1,
        int, "fDontCallFreeInst", 1,
        int, "fInOnlyParam", 1,
        int, "fHasReturn", 1,
        int, "fHasExtensions", 1,
        int, "fHasNewCorrDesc", 1,
        int, "fIsOicfServer", 1,
        int, "fHasMemoryValidateCallback", 1,
        int, "fUnused", 8,
        int, "fUnused2", 16));

    c_ulong dwDestContext;
    void* pvDestContext;
    NDR_SCONTEXT* SavedContextHandles;
    c_long ParamNumber;
    IRpcChannelBuffer* pRpcChannelBuffer;
    PARRAY_INFO pArrayInfo;
    c_ulong* SizePtrCountArray;
    c_ulong* SizePtrOffsetArray;
    c_ulong* SizePtrLengthArray;
    void* pArgQueue;
    c_ulong dwStubPhase;
    void* LowStackMark;
    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    ubyte* pCorrMemory;
    void* pMemoryList;
    CS_STUB_INFO* pCSInfo;
    ubyte* ConformanceMark;
    ubyte* VarianceMark;

    INT_PTR Unused;

    _NDR_PROC_CONTEXT* pContext;
    void* pUserMarshalList;
    INT_PTR Reserved51_2;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;
}

alias MIDL_STUB_MESSAGE = _MIDL_STUB_MESSAGE;
alias PMIDL_STUB_MESSAGE = _MIDL_STUB_MESSAGE*;

alias GENERIC_BINDING_ROUTINE = void* function (void*);
alias GENERIC_UNBIND_ROUTINE = void function (void*, ubyte*);

struct _GENERIC_BINDING_ROUTINE_PAIR
{
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
}

alias GENERIC_BINDING_ROUTINE_PAIR = _GENERIC_BINDING_ROUTINE_PAIR;
alias PGENERIC_BINDING_ROUTINE_PAIR = _GENERIC_BINDING_ROUTINE_PAIR*;

struct __GENERIC_BINDING_INFO
{
    void* pObj;
    uint Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
}

alias GENERIC_BINDING_INFO = __GENERIC_BINDING_INFO;
alias PGENERIC_BINDING_INFO = __GENERIC_BINDING_INFO*;

alias XMIT_HELPER_ROUTINE = void function (PMIDL_STUB_MESSAGE);

struct _XMIT_ROUTINE_QUINTUPLE
{
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
}

alias XMIT_ROUTINE_QUINTUPLE = _XMIT_ROUTINE_QUINTUPLE;
alias PXMIT_ROUTINE_QUINTUPLE = _XMIT_ROUTINE_QUINTUPLE*;

alias USER_MARSHAL_SIZING_ROUTINE = c_ulong function (ULONG*, ULONG, void*);
alias USER_MARSHAL_MARSHALLING_ROUTINE = ubyte* function (ULONG*, ubyte*, void*);
alias USER_MARSHAL_UNMARSHALLING_ROUTINE = ubyte* function (ULONG*, ubyte*, void*);
alias USER_MARSHAL_FREEING_ROUTINE = void function (ULONG*, void*);

struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
}

alias USER_MARSHAL_ROUTINE_QUADRUPLE = _USER_MARSHAL_ROUTINE_QUADRUPLE;

enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE = 0,
    USER_MARSHAL_CB_MARSHALL = 1,
    USER_MARSHAL_CB_UNMARSHALL = 2,
    USER_MARSHAL_CB_FREE = 3
}

alias USER_MARSHAL_CB_TYPE = _USER_MARSHAL_CB_TYPE;

struct _USER_MARSHAL_CB
{
    c_ulong Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    c_ulong Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
}

alias USER_MARSHAL_CB = _USER_MARSHAL_CB;

struct _MALLOC_FREE_STRUCT
{
    void* function (size_t) pfnAllocate;
    void function (void*) pfnFree;
}

alias MALLOC_FREE_STRUCT = _MALLOC_FREE_STRUCT;

struct _COMM_FAULT_OFFSETS
{
    short CommOffset;
    short FaultOffset;
}

alias COMM_FAULT_OFFSETS = _COMM_FAULT_OFFSETS;

enum _IDL_CS_CONVERT
{
    IDL_CS_NO_CONVERT = 0,
    IDL_CS_IN_PLACE_CONVERT = 1,
    IDL_CS_NEW_BUFFER_CONVERT = 2
}

alias IDL_CS_CONVERT = _IDL_CS_CONVERT;

alias CS_TYPE_NET_SIZE_ROUTINE = void function (RPC_BINDING_HANDLE hBinding, c_ulong ulNetworkCodeSet, c_ulong ulLocalBufferSize, IDL_CS_CONVERT* conversionType, c_ulong* pulNetworkBufferSize, error_status_t* pStatus);
alias CS_TYPE_LOCAL_SIZE_ROUTINE = void function (RPC_BINDING_HANDLE hBinding, c_ulong ulNetworkCodeSet, c_ulong ulNetworkBufferSize, IDL_CS_CONVERT* conversionType, c_ulong* pulLocalBufferSize, error_status_t* pStatus);
alias CS_TYPE_TO_NETCS_ROUTINE = void function (RPC_BINDING_HANDLE hBinding, c_ulong ulNetworkCodeSet, void* pLocalData, c_ulong ulLocalDataLength, ubyte* pNetworkData, c_ulong* pulNetworkDataLength, error_status_t* pStatus);
alias CS_TYPE_FROM_NETCS_ROUTINE = void function (RPC_BINDING_HANDLE hBinding, c_ulong ulNetworkCodeSet, ubyte* pNetworkData, c_ulong ulNetworkDataLength, c_ulong ulLocalBufferSize, void* pLocalData, c_ulong* pulLocalDataLength, error_status_t* pStatus);
alias CS_TAG_GETTING_ROUTINE = void function (RPC_BINDING_HANDLE hBinding, int fServerSide, c_ulong* pulSendingTag, c_ulong* pulDesiredReceivingTag, c_ulong* pulReceivingTag, error_status_t* pStatus);

void RpcCsGetTags (RPC_BINDING_HANDLE hBinding, int fServerSide, c_ulong* pulSendingTag, c_ulong* pulDesiredReceivingTag, c_ulong* pulReceivingTag, error_status_t* pStatus);

struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
}

alias NDR_CS_SIZE_CONVERT_ROUTINES = _NDR_CS_SIZE_CONVERT_ROUTINES;

struct _NDR_CS_ROUTINES
{
    NDR_CS_SIZE_CONVERT_ROUTINES* pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE* pTagGettingRoutines;
}

alias NDR_CS_ROUTINES = _NDR_CS_ROUTINES;

struct _MIDL_STUB_DESC
{
    void* RpcInterfaceInformation;
    void* function (size_t) pfnAllocate;
    void function (void*) pfnFree;

    union _Anonymous_78
    {
        handle_t* pAutoHandle;
        handle_t* pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
    }

    _Anonymous_78 IMPLICIT_HANDLE_INFO;
    const(NDR_RUNDOWN)* apfnNdrRundownRoutines;
    const(GENERIC_BINDING_ROUTINE_PAIR)* aGenericBindingRoutinePairs;
    const(EXPR_EVAL)* apfnExprEval;
    const(XMIT_ROUTINE_QUINTUPLE)* aXmitQuintuple;
    const(ubyte)* pFormatTypes;
    int fCheckBounds;
    c_ulong Version;
    MALLOC_FREE_STRUCT* pMallocFreeStruct;
    c_long MIDLVersion;
    const(COMM_FAULT_OFFSETS)* CommFaultOffsets;
    const(USER_MARSHAL_ROUTINE_QUADRUPLE)* aUserMarshalQuadruple;
    const(NDR_NOTIFY_ROUTINE)* NotifyRoutineTable;
    ULONG_PTR mFlags;
    const(NDR_CS_ROUTINES)* CsRoutineTables;
    void* Reserved4;
    ULONG_PTR Reserved5;
}

alias MIDL_STUB_DESC = _MIDL_STUB_DESC;

alias PMIDL_STUB_DESC = const(_MIDL_STUB_DESC)*;
alias PMIDL_XMIT_TYPE = void*;

struct _MIDL_FORMAT_STRING
{
    short Pad;
    ubyte[] Format;
}

alias MIDL_FORMAT_STRING = _MIDL_FORMAT_STRING;

alias STUB_THUNK = void function (PMIDL_STUB_MESSAGE);
alias SERVER_ROUTINE = void*;

struct _MIDL_SERVER_INFO_
{
    PMIDL_STUB_DESC pStubDesc;
    const(SERVER_ROUTINE)* DispatchTable;
    PFORMAT_STRING ProcString;
    const(ushort)* FmtStringOffset;
    const(STUB_THUNK)* ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
}

alias MIDL_SERVER_INFO = _MIDL_SERVER_INFO_;
alias PMIDL_SERVER_INFO = _MIDL_SERVER_INFO_*;

struct _MIDL_STUBLESS_PROXY_INFO
{
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const(ushort)* FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
}

alias MIDL_STUBLESS_PROXY_INFO = _MIDL_STUBLESS_PROXY_INFO;

alias PMIDL_STUBLESS_PROXY_INFO = _MIDL_STUBLESS_PROXY_INFO*;

struct _MIDL_SYNTAX_INFO
{
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    RPC_DISPATCH_TABLE* DispatchTable;
    PFORMAT_STRING ProcString;
    const(ushort)* FmtStringOffset;
    PFORMAT_STRING TypeString;
    const(void)* aUserMarshalQuadruple;
    ULONG_PTR pReserved1;
    ULONG_PTR pReserved2;
}

alias PARAM_OFFSETTABLE = ushort*;
alias PPARAM_OFFSETTABLE = ushort*;

union _CLIENT_CALL_RETURN
{
    void* Pointer;
    LONG_PTR Simple;
}

alias CLIENT_CALL_RETURN = _CLIENT_CALL_RETURN;

enum XLAT_SIDE
{
    XLAT_SERVER = 1,
    XLAT_CLIENT = 2
}

struct _FULL_PTR_TO_REFID_ELEMENT
{
    _FULL_PTR_TO_REFID_ELEMENT* Next;
    void* Pointer;
    c_ulong RefId;
    ubyte State;
}

alias FULL_PTR_TO_REFID_ELEMENT = _FULL_PTR_TO_REFID_ELEMENT;
alias PFULL_PTR_TO_REFID_ELEMENT = _FULL_PTR_TO_REFID_ELEMENT*;

struct _FULL_PTR_XLAT_TABLES
{
    struct _Anonymous_79
    {
        void** XlatTable;
        ubyte* StateTable;
        c_ulong NumberOfEntries;
    }

    _Anonymous_79 RefIdToPointer;

    struct _Anonymous_80
    {
        PFULL_PTR_TO_REFID_ELEMENT* XlatTable;
        c_ulong NumberOfBuckets;
        c_ulong HashMask;
    }

    _Anonymous_80 PointerToRefId;
    c_ulong NextRefId;
    XLAT_SIDE XlatSide;
}

alias FULL_PTR_XLAT_TABLES = _FULL_PTR_XLAT_TABLES;
alias PFULL_PTR_XLAT_TABLES = _FULL_PTR_XLAT_TABLES*;

RPC_STATUS NdrClientGetSupportedSyntaxes (RPC_CLIENT_INTERFACE* pInf, c_ulong* pCount, MIDL_SYNTAX_INFO** pArr);
RPC_STATUS NdrServerGetSupportedSyntaxes (RPC_SERVER_INTERFACE* pInf, c_ulong* pCount, MIDL_SYNTAX_INFO** pArr, c_ulong* pPreferSyntaxIndex);
void NdrSimpleTypeMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, ubyte FormatChar);
ubyte* NdrPointerMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrCsArrayMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrCsTagMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrSimpleStructMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrConformantStructMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrConformantVaryingStructMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrComplexStructMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrFixedArrayMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrConformantArrayMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrConformantVaryingArrayMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrVaryingArrayMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrComplexArrayMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrNonConformantStringMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrConformantStringMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrEncapsulatedUnionMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrNonEncapsulatedUnionMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrByteCountPointerMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrXmitOrRepAsMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrUserMarshalMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
ubyte* NdrInterfacePointerMarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrClientContextMarshall (PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck);
void NdrServerContextMarshall (PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine);
void NdrServerContextNewMarshall (PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat);
void NdrSimpleTypeUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, ubyte FormatChar);
ubyte* NdrCsArrayUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrCsTagUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrRangeUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
void NdrCorrelationInitialize (PMIDL_STUB_MESSAGE pStubMsg, void* pMemory, c_ulong CacheSize, c_ulong flags);
void NdrCorrelationPass (PMIDL_STUB_MESSAGE pStubMsg);
void NdrCorrelationFree (PMIDL_STUB_MESSAGE pStubMsg);
ubyte* NdrPointerUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrSimpleStructUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrConformantStructUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrConformantVaryingStructUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrComplexStructUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrFixedArrayUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrConformantArrayUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrConformantVaryingArrayUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrVaryingArrayUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrComplexArrayUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrNonConformantStringUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrConformantStringUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrEncapsulatedUnionUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrNonEncapsulatedUnionUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrByteCountPointerUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrXmitOrRepAsUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrUserMarshalUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
ubyte* NdrInterfacePointerUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, ubyte** ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
void NdrClientContextUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT* pContextHandle, RPC_BINDING_HANDLE BindHandle);
NDR_SCONTEXT NdrServerContextUnmarshall (PMIDL_STUB_MESSAGE pStubMsg);
NDR_SCONTEXT NdrContextHandleInitialize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
NDR_SCONTEXT NdrServerContextNewUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
void NdrPointerBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrCsArrayBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrCsTagBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrSimpleStructBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantStructBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantVaryingStructBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrComplexStructBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrFixedArrayBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantArrayBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantVaryingArrayBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrVaryingArrayBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrComplexArrayBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantStringBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrNonConformantStringBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrEncapsulatedUnionBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrNonEncapsulatedUnionBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrByteCountPointerBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrXmitOrRepAsBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrUserMarshalBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrInterfacePointerBufferSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrContextHandleSize (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
c_ulong NdrPointerMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrCsArrayMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrCsTagMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrSimpleStructMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrConformantStructMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrConformantVaryingStructMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrComplexStructMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrFixedArrayMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrConformantArrayMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrConformantVaryingArrayMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrVaryingArrayMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrComplexArrayMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrConformantStringMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrNonConformantStringMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrEncapsulatedUnionMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrNonEncapsulatedUnionMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrXmitOrRepAsMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrUserMarshalMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
c_ulong NdrInterfacePointerMemorySize (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
void NdrPointerFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrCsArrayFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrSimpleStructFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantStructFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantVaryingStructFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrComplexStructFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrFixedArrayFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantArrayFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConformantVaryingArrayFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrVaryingArrayFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrComplexArrayFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrEncapsulatedUnionFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrNonEncapsulatedUnionFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrByteCountPointerFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrXmitOrRepAsFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrUserMarshalFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrInterfacePointerFree (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pMemory, PFORMAT_STRING pFormat);
void NdrConvert2 (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, c_long NumberParams);
void NdrConvert (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);

ubyte* NdrUserMarshalSimpleTypeConvert (c_ulong* pFlags, ubyte* pBuffer, ubyte FormatChar);
void NdrClientInitializeNew (PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint ProcNum);
ubyte* NdrServerInitializeNew (PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor);
void NdrServerInitializePartial (PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, c_ulong RequestedBufferSize);
void NdrClientInitialize (PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint ProcNum);
ubyte* NdrServerInitialize (PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor);
ubyte* NdrServerInitializeUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg);
void NdrServerInitializeMarshall (PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg);
ubyte* NdrGetBuffer (PMIDL_STUB_MESSAGE pStubMsg, c_ulong BufferLength, RPC_BINDING_HANDLE Handle);
ubyte* NdrNsGetBuffer (PMIDL_STUB_MESSAGE pStubMsg, c_ulong BufferLength, RPC_BINDING_HANDLE Handle);
ubyte* NdrSendReceive (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pBufferEnd);
ubyte* NdrNsSendReceive (PMIDL_STUB_MESSAGE pStubMsg, ubyte* pBufferEnd, RPC_BINDING_HANDLE* pAutoHandle);
void NdrFreeBuffer (PMIDL_STUB_MESSAGE pStubMsg);
RPC_STATUS NdrGetDcomProtocolVersion (PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION* pVersion);
CLIENT_CALL_RETURN NdrClientCall2 (PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);

CLIENT_CALL_RETURN NdrClientCall (PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);
CLIENT_CALL_RETURN NdrAsyncClientCall (PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);
CLIENT_CALL_RETURN NdrDcomAsyncClientCall (PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);

enum STUB_PHASE
{
    STUB_UNMARSHAL = 0,
    STUB_CALL_SERVER = 1,
    STUB_MARSHAL = 2,
    STUB_CALL_SERVER_NO_HRESULT = 3
}

enum PROXY_PHASE
{
    PROXY_CALCSIZE = 0,
    PROXY_GETBUFFER = 1,
    PROXY_MARSHAL = 2,
    PROXY_SENDRECEIVE = 3,
    PROXY_UNMARSHAL = 4
}

void NdrAsyncServerCall (PRPC_MESSAGE pRpcMsg);
c_long NdrAsyncStubCall (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
c_long NdrDcomAsyncStubCall (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
c_long NdrStubCall2 (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
void NdrServerCall2 (PRPC_MESSAGE pRpcMsg);
c_long NdrStubCall (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
void NdrServerCall (PRPC_MESSAGE pRpcMsg);
int NdrServerUnmarshall (IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void* pParamList);
void NdrServerMarshall (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
RPC_STATUS NdrMapCommAndFaultStatus (PMIDL_STUB_MESSAGE pStubMsg, c_ulong* pCommStatus, c_ulong* pFaultStatus, RPC_STATUS Status);
int NdrSH_UPDecision (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem, RPC_BUFPTR pBuffer);
int NdrSH_TLUPDecision (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem);
int NdrSH_TLUPDecisionBuffer (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem);
int NdrSH_IfAlloc (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem, c_ulong Count);
int NdrSH_IfAllocRef (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem, c_ulong Count);
int NdrSH_IfAllocSet (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem, c_ulong Count);
RPC_BUFPTR NdrSH_IfCopy (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem, c_ulong Count);
RPC_BUFPTR NdrSH_IfAllocCopy (PMIDL_STUB_MESSAGE pStubMsg, ubyte** pPtrInMem, c_ulong Count);
c_ulong NdrSH_Copy (ubyte* pStubMsg, ubyte* pPtrInMem, c_ulong Count);
void NdrSH_IfFree (PMIDL_STUB_MESSAGE pMessage, ubyte* pPtr);
RPC_BUFPTR NdrSH_StringMarshall (PMIDL_STUB_MESSAGE pMessage, ubyte* pMemory, c_ulong Count, int Size);
RPC_BUFPTR NdrSH_StringUnMarshall (PMIDL_STUB_MESSAGE pMessage, ubyte** pMemory, int Size);

alias RPC_SS_THREAD_HANDLE = void*;

alias RPC_CLIENT_ALLOC = void* function (size_t Size);
alias RPC_CLIENT_FREE = void function (void* Ptr);

void* RpcSsAllocate (size_t Size);
void RpcSsDisableAllocate ();
void RpcSsEnableAllocate ();
void RpcSsFree (void* NodeToFree);
RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle ();
void RpcSsSetClientAllocFree (void* function () ClientAlloc, void function () ClientFree);
void RpcSsSetThreadHandle (RPC_SS_THREAD_HANDLE Id);
void RpcSsSwapClientAllocFree (void* function () ClientAlloc, void function () ClientFree, void* function ()* OldClientAlloc, void function ()* OldClientFree);
void* RpcSmAllocate (size_t Size, RPC_STATUS* pStatus);
RPC_STATUS RpcSmClientFree (void* pNodeToFree);
RPC_STATUS RpcSmDestroyClientContext (void** ContextHandle);
RPC_STATUS RpcSmDisableAllocate ();
RPC_STATUS RpcSmEnableAllocate ();
RPC_STATUS RpcSmFree (void* NodeToFree);
RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle (RPC_STATUS* pStatus);
RPC_STATUS RpcSmSetClientAllocFree (void* function () ClientAlloc, void function () ClientFree);
RPC_STATUS RpcSmSetThreadHandle (RPC_SS_THREAD_HANDLE Id);
RPC_STATUS RpcSmSwapClientAllocFree (void* function () ClientAlloc, void function () ClientFree, void* function ()* OldClientAlloc, void function ()* OldClientFree);
void NdrRpcSsEnableAllocate (PMIDL_STUB_MESSAGE pMessage);
void NdrRpcSsDisableAllocate (PMIDL_STUB_MESSAGE pMessage);
void NdrRpcSmSetClientToOsf (PMIDL_STUB_MESSAGE pMessage);
void* NdrRpcSmClientAllocate (size_t Size);
void NdrRpcSmClientFree (void* NodeToFree);
void* NdrRpcSsDefaultAllocate (size_t Size);
void NdrRpcSsDefaultFree (void* NodeToFree);
PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit (c_ulong NumberOfPointers, XLAT_SIDE XlatSide);
void NdrFullPointerXlatFree (PFULL_PTR_XLAT_TABLES pXlatTables);
int NdrFullPointerQueryPointer (PFULL_PTR_XLAT_TABLES pXlatTables, void* pPointer, ubyte QueryType, c_ulong* pRefId);
int NdrFullPointerQueryRefId (PFULL_PTR_XLAT_TABLES pXlatTables, c_ulong RefId, ubyte QueryType, void** ppPointer);
void NdrFullPointerInsertRefId (PFULL_PTR_XLAT_TABLES pXlatTables, c_ulong RefId, void* pPointer);
int NdrFullPointerFree (PFULL_PTR_XLAT_TABLES pXlatTables, void* Pointer);
void* NdrAllocate (PMIDL_STUB_MESSAGE pStubMsg, size_t Len);
void NdrClearOutParameters (PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void* ArgAddr);
void* NdrOleAllocate (size_t Size);
void NdrOleFree (void* NodeToFree);

struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void* Buffer;
    c_ulong BufferSize;
    void* function (size_t) pfnAllocate;
    void function (void*) pfnFree;
    IRpcChannelBuffer* pRpcChannelBuffer;
    ULONG_PTR[5] Reserved;
}

alias NDR_USER_MARSHAL_INFO_LEVEL1 = _NDR_USER_MARSHAL_INFO_LEVEL1;

struct _NDR_USER_MARSHAL_INFO
{
    c_ulong InformationLevel;

    union
    {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    }
}

alias NDR_USER_MARSHAL_INFO = _NDR_USER_MARSHAL_INFO;

RPC_STATUS NdrGetUserMarshalInfo (c_ulong* pFlags, c_ulong InformationLevel, NDR_USER_MARSHAL_INFO* pMarshalInfo);
RPC_STATUS NdrCreateServerInterfaceFromStub (IRpcStubBuffer* pStub, RPC_SERVER_INTERFACE* pServerIf);
CLIENT_CALL_RETURN NdrClientCall3 (MIDL_STUBLESS_PROXY_INFO* pProxyInfo, c_ulong nProcNum, void* pReturnValue, ...);
CLIENT_CALL_RETURN Ndr64AsyncClientCall (MIDL_STUBLESS_PROXY_INFO* pProxyInfo, c_ulong nProcNum, void* pReturnValue, ...);
CLIENT_CALL_RETURN Ndr64DcomAsyncClientCall (MIDL_STUBLESS_PROXY_INFO* pProxyInfo, c_ulong nProcNum, void* pReturnValue, ...);

void Ndr64AsyncServerCall (PRPC_MESSAGE pRpcMsg);
void Ndr64AsyncServerCall64 (PRPC_MESSAGE pRpcMsg);
void Ndr64AsyncServerCallAll (PRPC_MESSAGE pRpcMsg);
c_long Ndr64AsyncStubCall (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
c_long Ndr64DcomAsyncStubCall (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
c_long NdrStubCall3 (IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, c_ulong* pdwStubPhase);
void NdrServerCallAll (PRPC_MESSAGE pRpcMsg);
void NdrServerCallNdr64 (PRPC_MESSAGE pRpcMsg);
void NdrServerCall3 (PRPC_MESSAGE pRpcMsg);
void NdrPartialIgnoreClientMarshall (PMIDL_STUB_MESSAGE pStubMsg, void* pMemory);
void NdrPartialIgnoreServerUnmarshall (PMIDL_STUB_MESSAGE pStubMsg, void** ppMemory);
void NdrPartialIgnoreClientBufferSize (PMIDL_STUB_MESSAGE pStubMsg, void* pMemory);
void NdrPartialIgnoreServerInitialize (PMIDL_STUB_MESSAGE pStubMsg, void** ppMemory, PFORMAT_STRING pFormat);
void RpcUserFree (handle_t AsyncHandle, void* pBuffer);

enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,
    REGCLS_MULTI_SEPARATE = 2,
    REGCLS_SUSPENDED = 4,
    REGCLS_SURROGATE = 8
}

alias REGCLS = tagREGCLS;

enum tagCOINITBASE
{
    COINITBASE_MULTITHREADED = 0x0
}

alias COINITBASE = tagCOINITBASE;

extern __gshared RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern __gshared RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;

alias OLECHAR = ushort;
alias LPOLESTR = ushort*;
alias LPCOLESTR = const(ushort)*;

struct _COAUTHIDENTITY
{
    USHORT* User;
    ULONG UserLength;
    USHORT* Domain;
    ULONG DomainLength;
    USHORT* Password;
    ULONG PasswordLength;
    ULONG Flags;
}

alias COAUTHIDENTITY = _COAUTHIDENTITY;

struct _COAUTHINFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY* pAuthIdentityData;
    DWORD dwCapabilities;
}

alias COAUTHINFO = _COAUTHINFO;

alias SCODE = c_long;
alias PSCODE = c_long*;

enum tagMEMCTX
{
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2
}

alias MEMCTX = tagMEMCTX;

enum tagCLSCTX
{
    CLSCTX_INPROC_SERVER = 0x1,
    CLSCTX_INPROC_HANDLER = 0x2,
    CLSCTX_LOCAL_SERVER = 0x4,
    CLSCTX_INPROC_SERVER16 = 0x8,
    CLSCTX_REMOTE_SERVER = 0x10,
    CLSCTX_INPROC_HANDLER16 = 0x20,
    CLSCTX_RESERVED1 = 0x40,
    CLSCTX_RESERVED2 = 0x80,
    CLSCTX_RESERVED3 = 0x100,
    CLSCTX_RESERVED4 = 0x200,
    CLSCTX_NO_CODE_DOWNLOAD = 0x400,
    CLSCTX_RESERVED5 = 0x800,
    CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
    CLSCTX_NO_FAILURE_LOG = 0x4000,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
    CLSCTX_ENABLE_CLOAKING = 0x100000,
    CLSCTX_APPCONTAINER = 0x400000,
    CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
    CLSCTX_PS_DLL = cast(int) 0x80000000
}

alias CLSCTX = tagCLSCTX;

enum tagMSHLFLAGS
{
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4,
    MSHLFLAGS_RESERVED1 = 8,
    MSHLFLAGS_RESERVED2 = 16,
    MSHLFLAGS_RESERVED3 = 32,
    MSHLFLAGS_RESERVED4 = 64
}

alias MSHLFLAGS = tagMSHLFLAGS;

enum tagMSHCTX
{
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4
}

alias MSHCTX = tagMSHCTX;

struct _BYTE_BLOB
{
    ULONG clSize;
    ubyte[1] abData;
}

alias BYTE_BLOB = _BYTE_BLOB;

alias UP_BYTE_BLOB = _BYTE_BLOB*;

struct _WORD_BLOB
{
    ULONG clSize;
    ushort[1] asData;
}

alias WORD_BLOB = _WORD_BLOB;

alias UP_WORD_BLOB = _WORD_BLOB*;

struct _DWORD_BLOB
{
    ULONG clSize;
    ULONG[1] alData;
}

alias DWORD_BLOB = _DWORD_BLOB;

alias UP_DWORD_BLOB = _DWORD_BLOB*;

struct _FLAGGED_BYTE_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    ubyte[1] abData;
}

alias FLAGGED_BYTE_BLOB = _FLAGGED_BYTE_BLOB;

alias UP_FLAGGED_BYTE_BLOB = _FLAGGED_BYTE_BLOB*;

struct _FLAGGED_WORD_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    ushort[1] asData;
}

alias FLAGGED_WORD_BLOB = _FLAGGED_WORD_BLOB;

alias UP_FLAGGED_WORD_BLOB = _FLAGGED_WORD_BLOB*;

struct _BYTE_SIZEDARR
{
    ULONG clSize;
    ubyte* pData;
}

alias BYTE_SIZEDARR = _BYTE_SIZEDARR;

struct _SHORT_SIZEDARR
{
    ULONG clSize;
    ushort* pData;
}

alias WORD_SIZEDARR = _SHORT_SIZEDARR;

struct _LONG_SIZEDARR
{
    ULONG clSize;
    ULONG* pData;
}

alias DWORD_SIZEDARR = _LONG_SIZEDARR;

struct _HYPER_SIZEDARR
{
    ULONG clSize;
    long* pData;
}

alias HYPER_SIZEDARR = _HYPER_SIZEDARR;


struct tagBLOB
{
    ULONG cbSize;
    BYTE* pBlobData;
}

alias BLOB = tagBLOB;
alias LPBLOB = tagBLOB*;

alias LPUNKNOWN = IUnknown*;

extern __gshared const GUID IID_IUnknown;

struct IUnknownVtbl
{
    HRESULT function (IUnknown* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IUnknown* This) AddRef;

    ULONG function (IUnknown* This) Release;
}

struct IUnknown
{
    IUnknownVtbl* lpVtbl;
}

HRESULT IUnknown_QueryInterface_Proxy (IUnknown* This, const IID* riid, void** ppvObject);
void IUnknown_QueryInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG IUnknown_AddRef_Proxy (IUnknown* This);
void IUnknown_AddRef_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG IUnknown_Release_Proxy (IUnknown* This);
void IUnknown_Release_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_AsyncIUnknown;

struct AsyncIUnknownVtbl
{
    HRESULT function (AsyncIUnknown* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (AsyncIUnknown* This) AddRef;

    ULONG function (AsyncIUnknown* This) Release;

    HRESULT function (AsyncIUnknown* This, const IID* riid) Begin_QueryInterface;

    HRESULT function (AsyncIUnknown* This, void** ppvObject) Finish_QueryInterface;

    HRESULT function (AsyncIUnknown* This) Begin_AddRef;

    ULONG function (AsyncIUnknown* This) Finish_AddRef;

    HRESULT function (AsyncIUnknown* This) Begin_Release;

    ULONG function (AsyncIUnknown* This) Finish_Release;
}

struct AsyncIUnknown
{
    AsyncIUnknownVtbl* lpVtbl;
}

HRESULT AsyncIUnknown_Begin_QueryInterface_Proxy (AsyncIUnknown* This, const IID* riid);
void AsyncIUnknown_Begin_QueryInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIUnknown_Finish_QueryInterface_Proxy (AsyncIUnknown* This, void** ppvObject);
void AsyncIUnknown_Finish_QueryInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIUnknown_Begin_AddRef_Proxy (AsyncIUnknown* This);
void AsyncIUnknown_Begin_AddRef_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG AsyncIUnknown_Finish_AddRef_Proxy (AsyncIUnknown* This);
void AsyncIUnknown_Finish_AddRef_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIUnknown_Begin_Release_Proxy (AsyncIUnknown* This);
void AsyncIUnknown_Begin_Release_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG AsyncIUnknown_Finish_Release_Proxy (AsyncIUnknown* This);
void AsyncIUnknown_Finish_Release_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCLASSFACTORY = IClassFactory*;

extern __gshared const GUID IID_IClassFactory;

struct IClassFactoryVtbl
{
    HRESULT function (IClassFactory* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IClassFactory* This) AddRef;

    ULONG function (IClassFactory* This) Release;

    HRESULT function (IClassFactory* This, IUnknown* pUnkOuter, const IID* riid, void** ppvObject) CreateInstance;

    HRESULT function (IClassFactory* This, WINBOOL fLock) LockServer;
}

struct IClassFactory
{
    IClassFactoryVtbl* lpVtbl;
}

HRESULT IClassFactory_RemoteCreateInstance_Proxy (IClassFactory* This, const IID* riid, IUnknown** ppvObject);
void IClassFactory_RemoteCreateInstance_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IClassFactory_RemoteLockServer_Proxy (IClassFactory* This, WINBOOL fLock);
void IClassFactory_RemoteLockServer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IClassFactory_CreateInstance_Proxy (IClassFactory* This, IUnknown* pUnkOuter, const IID* riid, void** ppvObject);
HRESULT IClassFactory_CreateInstance_Stub (IClassFactory* This, const IID* riid, IUnknown** ppvObject);
HRESULT IClassFactory_LockServer_Proxy (IClassFactory* This, WINBOOL fLock);
HRESULT IClassFactory_LockServer_Stub (IClassFactory* This, WINBOOL fLock);

struct IEnumContextProps;

struct IContext;

struct _COSERVERINFO
{
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO* pAuthInfo;
    DWORD dwReserved2;
}

alias COSERVERINFO = _COSERVERINFO;

alias LPMARSHAL = IMarshal*;
extern __gshared const GUID IID_IMarshal;

struct IMarshalVtbl
{
    HRESULT function (IMarshal* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMarshal* This) AddRef;

    ULONG function (IMarshal* This) Release;

    HRESULT function (IMarshal* This, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags, CLSID* pCid) GetUnmarshalClass;

    HRESULT function (IMarshal* This, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags, DWORD* pSize) GetMarshalSizeMax;

    HRESULT function (IMarshal* This, IStream* pStm, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags) MarshalInterface;

    HRESULT function (IMarshal* This, IStream* pStm, const IID* riid, void** ppv) UnmarshalInterface;

    HRESULT function (IMarshal* This, IStream* pStm) ReleaseMarshalData;

    HRESULT function (IMarshal* This, DWORD dwReserved) DisconnectObject;
}

struct IMarshal
{
    IMarshalVtbl* lpVtbl;
}

HRESULT IMarshal_GetUnmarshalClass_Proxy (IMarshal* This, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags, CLSID* pCid);
void IMarshal_GetUnmarshalClass_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMarshal_GetMarshalSizeMax_Proxy (IMarshal* This, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags, DWORD* pSize);
void IMarshal_GetMarshalSizeMax_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMarshal_MarshalInterface_Proxy (IMarshal* This, IStream* pStm, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags);
void IMarshal_MarshalInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMarshal_UnmarshalInterface_Proxy (IMarshal* This, IStream* pStm, const IID* riid, void** ppv);
void IMarshal_UnmarshalInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMarshal_ReleaseMarshalData_Proxy (IMarshal* This, IStream* pStm);
void IMarshal_ReleaseMarshalData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMarshal_DisconnectObject_Proxy (IMarshal* This, DWORD dwReserved);
void IMarshal_DisconnectObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_INoMarshal;

struct INoMarshalVtbl
{
    HRESULT function (INoMarshal* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (INoMarshal* This) AddRef;

    ULONG function (INoMarshal* This) Release;
}

struct INoMarshal
{
    INoMarshalVtbl* lpVtbl;
}

extern __gshared const GUID IID_IAgileObject;

struct IAgileObjectVtbl
{
    HRESULT function (IAgileObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAgileObject* This) AddRef;

    ULONG function (IAgileObject* This) Release;
}

struct IAgileObject
{
    IAgileObjectVtbl* lpVtbl;
}

extern __gshared const GUID IID_IAgileReference;

struct IAgileReferenceVtbl
{
    HRESULT function (IAgileReference* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAgileReference* This) AddRef;

    ULONG function (IAgileReference* This) Release;

    HRESULT function (IAgileReference* This, const IID* riid, void** ppv) Resolve;
}

struct IAgileReference
{
    IAgileReferenceVtbl* lpVtbl;
}

HRESULT IAgileReference_Resolve_Proxy (IAgileReference* This, const IID* riid, void** ppv);
void IAgileReference_Resolve_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPMARSHAL2 = IMarshal2*;
extern __gshared const GUID IID_IMarshal2;

struct IMarshal2Vtbl
{
    HRESULT function (IMarshal2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMarshal2* This) AddRef;

    ULONG function (IMarshal2* This) Release;

    HRESULT function (IMarshal2* This, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags, CLSID* pCid) GetUnmarshalClass;

    HRESULT function (IMarshal2* This, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags, DWORD* pSize) GetMarshalSizeMax;

    HRESULT function (IMarshal2* This, IStream* pStm, const IID* riid, void* pv, DWORD dwDestContext, void* pvDestContext, DWORD mshlflags) MarshalInterface;

    HRESULT function (IMarshal2* This, IStream* pStm, const IID* riid, void** ppv) UnmarshalInterface;

    HRESULT function (IMarshal2* This, IStream* pStm) ReleaseMarshalData;

    HRESULT function (IMarshal2* This, DWORD dwReserved) DisconnectObject;
}

struct IMarshal2
{
    IMarshal2Vtbl* lpVtbl;
}

alias LPMALLOC = IMalloc*;

extern __gshared const GUID IID_IMalloc;

struct IMallocVtbl
{
    HRESULT function (IMalloc* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMalloc* This) AddRef;

    ULONG function (IMalloc* This) Release;

    void* function (IMalloc* This, SIZE_T cb) Alloc;

    void* function (IMalloc* This, void* pv, SIZE_T cb) Realloc;

    void function (IMalloc* This, void* pv) Free;

    SIZE_T function (IMalloc* This, void* pv) GetSize;

    int function (IMalloc* This, void* pv) DidAlloc;

    void function (IMalloc* This) HeapMinimize;
}

struct IMalloc
{
    IMallocVtbl* lpVtbl;
}

void* IMalloc_Alloc_Proxy (IMalloc* This, SIZE_T cb);
void IMalloc_Alloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void* IMalloc_Realloc_Proxy (IMalloc* This, void* pv, SIZE_T cb);
void IMalloc_Realloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IMalloc_Free_Proxy (IMalloc* This, void* pv);
void IMalloc_Free_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
SIZE_T IMalloc_GetSize_Proxy (IMalloc* This, void* pv);
void IMalloc_GetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
int IMalloc_DidAlloc_Proxy (IMalloc* This, void* pv);
void IMalloc_DidAlloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IMalloc_HeapMinimize_Proxy (IMalloc* This);
void IMalloc_HeapMinimize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPSTDMARSHALINFO = IStdMarshalInfo*;

extern __gshared const GUID IID_IStdMarshalInfo;

struct IStdMarshalInfoVtbl
{
    HRESULT function (IStdMarshalInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IStdMarshalInfo* This) AddRef;

    ULONG function (IStdMarshalInfo* This) Release;

    HRESULT function (IStdMarshalInfo* This, DWORD dwDestContext, void* pvDestContext, CLSID* pClsid) GetClassForHandler;
}

struct IStdMarshalInfo
{
    IStdMarshalInfoVtbl* lpVtbl;
}

HRESULT IStdMarshalInfo_GetClassForHandler_Proxy (IStdMarshalInfo* This, DWORD dwDestContext, void* pvDestContext, CLSID* pClsid);
void IStdMarshalInfo_GetClassForHandler_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPEXTERNALCONNECTION = IExternalConnection*;

enum tagEXTCONN
{
    EXTCONN_STRONG = 0x1,
    EXTCONN_WEAK = 0x2,
    EXTCONN_CALLABLE = 0x4
}

alias EXTCONN = tagEXTCONN;

extern __gshared const GUID IID_IExternalConnection;

struct IExternalConnectionVtbl
{
    HRESULT function (IExternalConnection* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IExternalConnection* This) AddRef;

    ULONG function (IExternalConnection* This) Release;

    DWORD function (IExternalConnection* This, DWORD extconn, DWORD reserved) AddConnection;

    DWORD function (IExternalConnection* This, DWORD extconn, DWORD reserved, WINBOOL fLastReleaseCloses) ReleaseConnection;
}

struct IExternalConnection
{
    IExternalConnectionVtbl* lpVtbl;
}

DWORD IExternalConnection_AddConnection_Proxy (IExternalConnection* This, DWORD extconn, DWORD reserved);
void IExternalConnection_AddConnection_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
DWORD IExternalConnection_ReleaseConnection_Proxy (IExternalConnection* This, DWORD extconn, DWORD reserved, WINBOOL fLastReleaseCloses);
void IExternalConnection_ReleaseConnection_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPMULTIQI = IMultiQI*;

struct tagMULTI_QI
{
    const(IID)* pIID;
    IUnknown* pItf;
    HRESULT hr;
}

alias MULTI_QI = tagMULTI_QI;

extern __gshared const GUID IID_IMultiQI;

struct IMultiQIVtbl
{
    HRESULT function (IMultiQI* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMultiQI* This) AddRef;

    ULONG function (IMultiQI* This) Release;

    HRESULT function (IMultiQI* This, ULONG cMQIs, MULTI_QI* pMQIs) QueryMultipleInterfaces;
}

struct IMultiQI
{
    IMultiQIVtbl* lpVtbl;
}

HRESULT IMultiQI_QueryMultipleInterfaces_Proxy (IMultiQI* This, ULONG cMQIs, MULTI_QI* pMQIs);
void IMultiQI_QueryMultipleInterfaces_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_AsyncIMultiQI;

struct AsyncIMultiQIVtbl
{
    HRESULT function (AsyncIMultiQI* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (AsyncIMultiQI* This) AddRef;

    ULONG function (AsyncIMultiQI* This) Release;

    void function (AsyncIMultiQI* This, ULONG cMQIs, MULTI_QI* pMQIs) Begin_QueryMultipleInterfaces;

    HRESULT function (AsyncIMultiQI* This, MULTI_QI* pMQIs) Finish_QueryMultipleInterfaces;
}

struct AsyncIMultiQI
{
    AsyncIMultiQIVtbl* lpVtbl;
}

HRESULT AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy (IMultiQI* This, ULONG cMQIs, MULTI_QI* pMQIs);
void AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy (IMultiQI* This, ULONG cMQIs, MULTI_QI* pMQIs);
void AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IInternalUnknown;

struct IInternalUnknownVtbl
{
    HRESULT function (IInternalUnknown* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternalUnknown* This) AddRef;

    ULONG function (IInternalUnknown* This) Release;

    HRESULT function (IInternalUnknown* This, const IID* riid, void** ppv) QueryInternalInterface;
}

struct IInternalUnknown
{
    IInternalUnknownVtbl* lpVtbl;
}

HRESULT IInternalUnknown_QueryInternalInterface_Proxy (IInternalUnknown* This, const IID* riid, void** ppv);
void IInternalUnknown_QueryInternalInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPENUMUNKNOWN = IEnumUnknown*;

extern __gshared const GUID IID_IEnumUnknown;

struct IEnumUnknownVtbl
{
    HRESULT function (IEnumUnknown* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumUnknown* This) AddRef;

    ULONG function (IEnumUnknown* This) Release;

    HRESULT function (IEnumUnknown* This, ULONG celt, IUnknown** rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumUnknown* This, ULONG celt) Skip;

    HRESULT function (IEnumUnknown* This) Reset;

    HRESULT function (IEnumUnknown* This, IEnumUnknown** ppenum) Clone;
}

struct IEnumUnknown
{
    IEnumUnknownVtbl* lpVtbl;
}

HRESULT IEnumUnknown_RemoteNext_Proxy (IEnumUnknown* This, ULONG celt, IUnknown** rgelt, ULONG* pceltFetched);
void IEnumUnknown_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Skip_Proxy (IEnumUnknown* This, ULONG celt);
void IEnumUnknown_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Reset_Proxy (IEnumUnknown* This);
void IEnumUnknown_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Clone_Proxy (IEnumUnknown* This, IEnumUnknown** ppenum);
void IEnumUnknown_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumUnknown_Next_Proxy (IEnumUnknown* This, ULONG celt, IUnknown** rgelt, ULONG* pceltFetched);
HRESULT IEnumUnknown_Next_Stub (IEnumUnknown* This, ULONG celt, IUnknown** rgelt, ULONG* pceltFetched);

alias LPENUMSTRING = IEnumString*;

extern __gshared const GUID IID_IEnumString;

struct IEnumStringVtbl
{
    HRESULT function (IEnumString* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumString* This) AddRef;

    ULONG function (IEnumString* This) Release;

    HRESULT function (IEnumString* This, ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumString* This, ULONG celt) Skip;

    HRESULT function (IEnumString* This) Reset;

    HRESULT function (IEnumString* This, IEnumString** ppenum) Clone;
}

struct IEnumString
{
    IEnumStringVtbl* lpVtbl;
}

HRESULT IEnumString_RemoteNext_Proxy (IEnumString* This, ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched);
void IEnumString_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumString_Skip_Proxy (IEnumString* This, ULONG celt);
void IEnumString_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumString_Reset_Proxy (IEnumString* This);
void IEnumString_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumString_Clone_Proxy (IEnumString* This, IEnumString** ppenum);
void IEnumString_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumString_Next_Proxy (IEnumString* This, ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched);
HRESULT IEnumString_Next_Stub (IEnumString* This, ULONG celt, LPOLESTR* rgelt, ULONG* pceltFetched);

extern __gshared const GUID IID_ISequentialStream;

struct ISequentialStreamVtbl
{
    HRESULT function (ISequentialStream* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISequentialStream* This) AddRef;

    ULONG function (ISequentialStream* This) Release;

    HRESULT function (ISequentialStream* This, void* pv, ULONG cb, ULONG* pcbRead) Read;

    HRESULT function (ISequentialStream* This, const(void)* pv, ULONG cb, ULONG* pcbWritten) Write;
}

struct ISequentialStream
{
    ISequentialStreamVtbl* lpVtbl;
}

HRESULT ISequentialStream_RemoteRead_Proxy (ISequentialStream* This, ubyte* pv, ULONG cb, ULONG* pcbRead);
void ISequentialStream_RemoteRead_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISequentialStream_RemoteWrite_Proxy (ISequentialStream* This, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);
void ISequentialStream_RemoteWrite_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISequentialStream_Read_Proxy (ISequentialStream* This, void* pv, ULONG cb, ULONG* pcbRead);
HRESULT ISequentialStream_Read_Stub (ISequentialStream* This, ubyte* pv, ULONG cb, ULONG* pcbRead);
HRESULT ISequentialStream_Write_Proxy (ISequentialStream* This, const(void)* pv, ULONG cb, ULONG* pcbWritten);
HRESULT ISequentialStream_Write_Stub (ISequentialStream* This, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);

alias LPSTREAM = IStream*;

struct tagSTATSTG
{
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
}

alias STATSTG = tagSTATSTG;

enum tagSTGTY
{
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
}

alias STGTY = tagSTGTY;

enum tagSTREAM_SEEK
{
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
}

alias STREAM_SEEK = tagSTREAM_SEEK;

enum tagLOCKTYPE
{
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
}

alias LOCKTYPE = tagLOCKTYPE;

extern __gshared const GUID IID_IStream;

struct IStreamVtbl
{
    HRESULT function (IStream* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IStream* This) AddRef;

    ULONG function (IStream* This) Release;

    HRESULT function (IStream* This, void* pv, ULONG cb, ULONG* pcbRead) Read;

    HRESULT function (IStream* This, const(void)* pv, ULONG cb, ULONG* pcbWritten) Write;

    HRESULT function (IStream* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition) Seek;

    HRESULT function (IStream* This, ULARGE_INTEGER libNewSize) SetSize;

    HRESULT function (IStream* This, IStream* pstm, ULARGE_INTEGER cb, ULARGE_INTEGER* pcbRead, ULARGE_INTEGER* pcbWritten) CopyTo;

    HRESULT function (IStream* This, DWORD grfCommitFlags) Commit;

    HRESULT function (IStream* This) Revert;

    HRESULT function (IStream* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) LockRegion;

    HRESULT function (IStream* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) UnlockRegion;

    HRESULT function (IStream* This, STATSTG* pstatstg, DWORD grfStatFlag) Stat;

    HRESULT function (IStream* This, IStream** ppstm) Clone;
}

struct IStream
{
    IStreamVtbl* lpVtbl;
}

HRESULT IStream_RemoteSeek_Proxy (IStream* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition);
void IStream_RemoteSeek_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_SetSize_Proxy (IStream* This, ULARGE_INTEGER libNewSize);
void IStream_SetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_RemoteCopyTo_Proxy (IStream* This, IStream* pstm, ULARGE_INTEGER cb, ULARGE_INTEGER* pcbRead, ULARGE_INTEGER* pcbWritten);
void IStream_RemoteCopyTo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_Commit_Proxy (IStream* This, DWORD grfCommitFlags);
void IStream_Commit_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_Revert_Proxy (IStream* This);
void IStream_Revert_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_LockRegion_Proxy (IStream* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
void IStream_LockRegion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_UnlockRegion_Proxy (IStream* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
void IStream_UnlockRegion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_Stat_Proxy (IStream* This, STATSTG* pstatstg, DWORD grfStatFlag);
void IStream_Stat_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_Clone_Proxy (IStream* This, IStream** ppstm);
void IStream_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStream_Seek_Proxy (IStream* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition);
HRESULT IStream_Seek_Stub (IStream* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition);
HRESULT IStream_CopyTo_Proxy (IStream* This, IStream* pstm, ULARGE_INTEGER cb, ULARGE_INTEGER* pcbRead, ULARGE_INTEGER* pcbWritten);
HRESULT IStream_CopyTo_Stub (IStream* This, IStream* pstm, ULARGE_INTEGER cb, ULARGE_INTEGER* pcbRead, ULARGE_INTEGER* pcbWritten);

alias RPCOLEDATAREP = c_ulong;

struct tagRPCOLEMESSAGE
{
    void* reserved1;
    RPCOLEDATAREP dataRepresentation;
    void* Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void*[5] reserved2;
    ULONG rpcFlags;
}

alias RPCOLEMESSAGE = tagRPCOLEMESSAGE;

alias PRPCOLEMESSAGE = tagRPCOLEMESSAGE*;

extern __gshared const GUID IID_IRpcChannelBuffer;

struct IRpcChannelBufferVtbl
{
    HRESULT function (IRpcChannelBuffer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcChannelBuffer* This) AddRef;

    ULONG function (IRpcChannelBuffer* This) Release;

    HRESULT function (IRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage, const IID* riid) GetBuffer;

    HRESULT function (IRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage, ULONG* pStatus) SendReceive;

    HRESULT function (IRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage) FreeBuffer;

    HRESULT function (IRpcChannelBuffer* This, DWORD* pdwDestContext, void** ppvDestContext) GetDestCtx;

    HRESULT function (IRpcChannelBuffer* This) IsConnected;
}

struct IRpcChannelBuffer
{
    IRpcChannelBufferVtbl* lpVtbl;
}

HRESULT IRpcChannelBuffer_GetBuffer_Proxy (IRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage, const IID* riid);
void IRpcChannelBuffer_GetBuffer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_SendReceive_Proxy (IRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage, ULONG* pStatus);
void IRpcChannelBuffer_SendReceive_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_FreeBuffer_Proxy (IRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage);
void IRpcChannelBuffer_FreeBuffer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_GetDestCtx_Proxy (IRpcChannelBuffer* This, DWORD* pdwDestContext, void** ppvDestContext);
void IRpcChannelBuffer_GetDestCtx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer_IsConnected_Proxy (IRpcChannelBuffer* This);
void IRpcChannelBuffer_IsConnected_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IRpcChannelBuffer2;

struct IRpcChannelBuffer2Vtbl
{
    HRESULT function (IRpcChannelBuffer2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcChannelBuffer2* This) AddRef;

    ULONG function (IRpcChannelBuffer2* This) Release;

    HRESULT function (IRpcChannelBuffer2* This, RPCOLEMESSAGE* pMessage, const IID* riid) GetBuffer;

    HRESULT function (IRpcChannelBuffer2* This, RPCOLEMESSAGE* pMessage, ULONG* pStatus) SendReceive;

    HRESULT function (IRpcChannelBuffer2* This, RPCOLEMESSAGE* pMessage) FreeBuffer;

    HRESULT function (IRpcChannelBuffer2* This, DWORD* pdwDestContext, void** ppvDestContext) GetDestCtx;

    HRESULT function (IRpcChannelBuffer2* This) IsConnected;

    HRESULT function (IRpcChannelBuffer2* This, DWORD* pdwVersion) GetProtocolVersion;
}

struct IRpcChannelBuffer2
{
    IRpcChannelBuffer2Vtbl* lpVtbl;
}

HRESULT IRpcChannelBuffer2_GetProtocolVersion_Proxy (IRpcChannelBuffer2* This, DWORD* pdwVersion);
void IRpcChannelBuffer2_GetProtocolVersion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IAsyncRpcChannelBuffer;

struct IAsyncRpcChannelBufferVtbl
{
    HRESULT function (IAsyncRpcChannelBuffer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAsyncRpcChannelBuffer* This) AddRef;

    ULONG function (IAsyncRpcChannelBuffer* This) Release;

    HRESULT function (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage, const IID* riid) GetBuffer;

    HRESULT function (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage, ULONG* pStatus) SendReceive;

    HRESULT function (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMessage) FreeBuffer;

    HRESULT function (IAsyncRpcChannelBuffer* This, DWORD* pdwDestContext, void** ppvDestContext) GetDestCtx;

    HRESULT function (IAsyncRpcChannelBuffer* This) IsConnected;

    HRESULT function (IAsyncRpcChannelBuffer* This, DWORD* pdwVersion) GetProtocolVersion;

    HRESULT function (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMsg, ISynchronize* pSync, ULONG* pulStatus) Send;

    HRESULT function (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMsg, ULONG* pulStatus) Receive;

    HRESULT function (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMsg, DWORD* pdwDestContext, void** ppvDestContext) GetDestCtxEx;
}

struct IAsyncRpcChannelBuffer
{
    IAsyncRpcChannelBufferVtbl* lpVtbl;
}

HRESULT IAsyncRpcChannelBuffer_Send_Proxy (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMsg, ISynchronize* pSync, ULONG* pulStatus);
void IAsyncRpcChannelBuffer_Send_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAsyncRpcChannelBuffer_Receive_Proxy (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMsg, ULONG* pulStatus);
void IAsyncRpcChannelBuffer_Receive_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy (IAsyncRpcChannelBuffer* This, RPCOLEMESSAGE* pMsg, DWORD* pdwDestContext, void** ppvDestContext);
void IAsyncRpcChannelBuffer_GetDestCtxEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IRpcChannelBuffer3;

struct IRpcChannelBuffer3Vtbl
{
    HRESULT function (IRpcChannelBuffer3* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcChannelBuffer3* This) AddRef;

    ULONG function (IRpcChannelBuffer3* This) Release;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMessage, const IID* riid) GetBuffer;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMessage, ULONG* pStatus) SendReceive;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMessage) FreeBuffer;

    HRESULT function (IRpcChannelBuffer3* This, DWORD* pdwDestContext, void** ppvDestContext) GetDestCtx;

    HRESULT function (IRpcChannelBuffer3* This) IsConnected;

    HRESULT function (IRpcChannelBuffer3* This, DWORD* pdwVersion) GetProtocolVersion;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, ULONG* pulStatus) Send;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, ULONG ulSize, ULONG* pulStatus) Receive;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg) Cancel;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, const IID* riid, void** pInterface) GetCallContext;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, DWORD* pdwDestContext, void** ppvDestContext) GetDestCtxEx;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, DWORD* pState) GetState;

    HRESULT function (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, IAsyncManager* pAsyncMgr) RegisterAsync;
}

struct IRpcChannelBuffer3
{
    IRpcChannelBuffer3Vtbl* lpVtbl;
}

HRESULT IRpcChannelBuffer3_Send_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, ULONG* pulStatus);
void IRpcChannelBuffer3_Send_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_Receive_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, ULONG ulSize, ULONG* pulStatus);
void IRpcChannelBuffer3_Receive_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_Cancel_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg);
void IRpcChannelBuffer3_Cancel_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_GetCallContext_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, const IID* riid, void** pInterface);
void IRpcChannelBuffer3_GetCallContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_GetDestCtxEx_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, DWORD* pdwDestContext, void** ppvDestContext);
void IRpcChannelBuffer3_GetDestCtxEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_GetState_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, DWORD* pState);
void IRpcChannelBuffer3_GetState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcChannelBuffer3_RegisterAsync_Proxy (IRpcChannelBuffer3* This, RPCOLEMESSAGE* pMsg, IAsyncManager* pAsyncMgr);
void IRpcChannelBuffer3_RegisterAsync_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IRpcSyntaxNegotiate;

struct IRpcSyntaxNegotiateVtbl
{
    HRESULT function (IRpcSyntaxNegotiate* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcSyntaxNegotiate* This) AddRef;

    ULONG function (IRpcSyntaxNegotiate* This) Release;

    HRESULT function (IRpcSyntaxNegotiate* This, RPCOLEMESSAGE* pMsg) NegotiateSyntax;
}

struct IRpcSyntaxNegotiate
{
    IRpcSyntaxNegotiateVtbl* lpVtbl;
}

HRESULT IRpcSyntaxNegotiate_NegotiateSyntax_Proxy (IRpcSyntaxNegotiate* This, RPCOLEMESSAGE* pMsg);
void IRpcSyntaxNegotiate_NegotiateSyntax_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IRpcProxyBuffer;

struct IRpcProxyBufferVtbl
{
    HRESULT function (IRpcProxyBuffer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcProxyBuffer* This) AddRef;

    ULONG function (IRpcProxyBuffer* This) Release;

    HRESULT function (IRpcProxyBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer) Connect;

    void function (IRpcProxyBuffer* This) Disconnect;
}

struct IRpcProxyBuffer
{
    IRpcProxyBufferVtbl* lpVtbl;
}

HRESULT IRpcProxyBuffer_Connect_Proxy (IRpcProxyBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer);
void IRpcProxyBuffer_Connect_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IRpcProxyBuffer_Disconnect_Proxy (IRpcProxyBuffer* This);
void IRpcProxyBuffer_Disconnect_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IRpcStubBuffer;

struct IRpcStubBufferVtbl
{
    HRESULT function (IRpcStubBuffer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcStubBuffer* This) AddRef;

    ULONG function (IRpcStubBuffer* This) Release;

    HRESULT function (IRpcStubBuffer* This, IUnknown* pUnkServer) Connect;

    void function (IRpcStubBuffer* This) Disconnect;

    HRESULT function (IRpcStubBuffer* This, RPCOLEMESSAGE* _prpcmsg, IRpcChannelBuffer* _pRpcChannelBuffer) Invoke;

    IRpcStubBuffer* function (IRpcStubBuffer* This, const IID* riid) IsIIDSupported;

    ULONG function (IRpcStubBuffer* This) CountRefs;

    HRESULT function (IRpcStubBuffer* This, void** ppv) DebugServerQueryInterface;

    void function (IRpcStubBuffer* This, void* pv) DebugServerRelease;
}

struct IRpcStubBuffer
{
    IRpcStubBufferVtbl* lpVtbl;
}

HRESULT IRpcStubBuffer_Connect_Proxy (IRpcStubBuffer* This, IUnknown* pUnkServer);
void IRpcStubBuffer_Connect_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IRpcStubBuffer_Disconnect_Proxy (IRpcStubBuffer* This);
void IRpcStubBuffer_Disconnect_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcStubBuffer_Invoke_Proxy (IRpcStubBuffer* This, RPCOLEMESSAGE* _prpcmsg, IRpcChannelBuffer* _pRpcChannelBuffer);
void IRpcStubBuffer_Invoke_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
IRpcStubBuffer* IRpcStubBuffer_IsIIDSupported_Proxy (IRpcStubBuffer* This, const IID* riid);
void IRpcStubBuffer_IsIIDSupported_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG IRpcStubBuffer_CountRefs_Proxy (IRpcStubBuffer* This);
void IRpcStubBuffer_CountRefs_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcStubBuffer_DebugServerQueryInterface_Proxy (IRpcStubBuffer* This, void** ppv);
void IRpcStubBuffer_DebugServerQueryInterface_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IRpcStubBuffer_DebugServerRelease_Proxy (IRpcStubBuffer* This, void* pv);
void IRpcStubBuffer_DebugServerRelease_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IPSFactoryBuffer;

struct IPSFactoryBufferVtbl
{
    HRESULT function (IPSFactoryBuffer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPSFactoryBuffer* This) AddRef;

    ULONG function (IPSFactoryBuffer* This) Release;

    HRESULT function (IPSFactoryBuffer* This, IUnknown* pUnkOuter, const IID* riid, IRpcProxyBuffer** ppProxy, void** ppv) CreateProxy;

    HRESULT function (IPSFactoryBuffer* This, const IID* riid, IUnknown* pUnkServer, IRpcStubBuffer** ppStub) CreateStub;
}

struct IPSFactoryBuffer
{
    IPSFactoryBufferVtbl* lpVtbl;
}

HRESULT IPSFactoryBuffer_CreateProxy_Proxy (IPSFactoryBuffer* This, IUnknown* pUnkOuter, const IID* riid, IRpcProxyBuffer** ppProxy, void** ppv);
void IPSFactoryBuffer_CreateProxy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPSFactoryBuffer_CreateStub_Proxy (IPSFactoryBuffer* This, const IID* riid, IUnknown* pUnkServer, IRpcStubBuffer** ppStub);
void IPSFactoryBuffer_CreateStub_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

struct SChannelHookCallInfo
{
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void* pObject;
}

extern __gshared const GUID IID_IChannelHook;

struct IChannelHookVtbl
{
    HRESULT function (IChannelHook* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IChannelHook* This) AddRef;

    ULONG function (IChannelHook* This) Release;

    void function (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG* pDataSize) ClientGetSize;

    void function (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG* pDataSize, void* pDataBuffer) ClientFillBuffer;

    void function (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG cbDataSize, void* pDataBuffer, DWORD lDataRep, HRESULT hrFault) ClientNotify;

    void function (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG cbDataSize, void* pDataBuffer, DWORD lDataRep) ServerNotify;

    void function (IChannelHook* This, const GUID* uExtent, const IID* riid, HRESULT hrFault, ULONG* pDataSize) ServerGetSize;

    void function (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG* pDataSize, void* pDataBuffer, HRESULT hrFault) ServerFillBuffer;
}

struct IChannelHook
{
    IChannelHookVtbl* lpVtbl;
}

void IChannelHook_ClientGetSize_Proxy (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG* pDataSize);
void IChannelHook_ClientGetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IChannelHook_ClientFillBuffer_Proxy (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG* pDataSize, void* pDataBuffer);
void IChannelHook_ClientFillBuffer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IChannelHook_ClientNotify_Proxy (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG cbDataSize, void* pDataBuffer, DWORD lDataRep, HRESULT hrFault);
void IChannelHook_ClientNotify_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IChannelHook_ServerNotify_Proxy (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG cbDataSize, void* pDataBuffer, DWORD lDataRep);
void IChannelHook_ServerNotify_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IChannelHook_ServerGetSize_Proxy (IChannelHook* This, const GUID* uExtent, const IID* riid, HRESULT hrFault, ULONG* pDataSize);
void IChannelHook_ServerGetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IChannelHook_ServerFillBuffer_Proxy (IChannelHook* This, const GUID* uExtent, const IID* riid, ULONG* pDataSize, void* pDataBuffer, HRESULT hrFault);
void IChannelHook_ServerFillBuffer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

struct tagSOLE_AUTHENTICATION_SERVICE
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR* pPrincipalName;
    HRESULT hr;
}

alias SOLE_AUTHENTICATION_SERVICE = tagSOLE_AUTHENTICATION_SERVICE;

alias PSOLE_AUTHENTICATION_SERVICE = tagSOLE_AUTHENTICATION_SERVICE*;

enum tagEOLE_AUTHENTICATION_CAPABILITIES
{
    EOAC_NONE = 0x0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_DEFAULT = 0x800,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000,
    EOAC_DISABLE_AAA = 0x1000
}

alias EOLE_AUTHENTICATION_CAPABILITIES = tagEOLE_AUTHENTICATION_CAPABILITIES;

struct tagSOLE_AUTHENTICATION_INFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void* pAuthInfo;
}

alias SOLE_AUTHENTICATION_INFO = tagSOLE_AUTHENTICATION_INFO;
alias PSOLE_AUTHENTICATION_INFO = tagSOLE_AUTHENTICATION_INFO*;

struct tagSOLE_AUTHENTICATION_LIST
{
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO* aAuthInfo;
}

alias SOLE_AUTHENTICATION_LIST = tagSOLE_AUTHENTICATION_LIST;
alias PSOLE_AUTHENTICATION_LIST = tagSOLE_AUTHENTICATION_LIST*;

extern __gshared const GUID IID_IClientSecurity;

struct IClientSecurityVtbl
{
    HRESULT function (IClientSecurity* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IClientSecurity* This) AddRef;

    ULONG function (IClientSecurity* This) Release;

    HRESULT function (IClientSecurity* This, IUnknown* pProxy, DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, void** pAuthInfo, DWORD* pCapabilites) QueryBlanket;

    HRESULT function (IClientSecurity* This, IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pAuthInfo, DWORD dwCapabilities) SetBlanket;

    HRESULT function (IClientSecurity* This, IUnknown* pProxy, IUnknown** ppCopy) CopyProxy;
}

struct IClientSecurity
{
    IClientSecurityVtbl* lpVtbl;
}

HRESULT IClientSecurity_QueryBlanket_Proxy (IClientSecurity* This, IUnknown* pProxy, DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, void** pAuthInfo, DWORD* pCapabilites);
void IClientSecurity_QueryBlanket_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IClientSecurity_SetBlanket_Proxy (IClientSecurity* This, IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pAuthInfo, DWORD dwCapabilities);
void IClientSecurity_SetBlanket_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IClientSecurity_CopyProxy_Proxy (IClientSecurity* This, IUnknown* pProxy, IUnknown** ppCopy);
void IClientSecurity_CopyProxy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IServerSecurity;

struct IServerSecurityVtbl
{
    HRESULT function (IServerSecurity* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IServerSecurity* This) AddRef;

    ULONG function (IServerSecurity* This) Release;

    HRESULT function (IServerSecurity* This, DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, void** pPrivs, DWORD* pCapabilities) QueryBlanket;

    HRESULT function (IServerSecurity* This) ImpersonateClient;

    HRESULT function (IServerSecurity* This) RevertToSelf;

    WINBOOL function (IServerSecurity* This) IsImpersonating;
}

struct IServerSecurity
{
    IServerSecurityVtbl* lpVtbl;
}

HRESULT IServerSecurity_QueryBlanket_Proxy (IServerSecurity* This, DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, void** pPrivs, DWORD* pCapabilities);
void IServerSecurity_QueryBlanket_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IServerSecurity_ImpersonateClient_Proxy (IServerSecurity* This);
void IServerSecurity_ImpersonateClient_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IServerSecurity_RevertToSelf_Proxy (IServerSecurity* This);
void IServerSecurity_RevertToSelf_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
WINBOOL IServerSecurity_IsImpersonating_Proxy (IServerSecurity* This);
void IServerSecurity_IsImpersonating_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

enum tagRPCOPT_PROPERTIES
{
    COMBND_RPCTIMEOUT = 0x1,
    COMBND_SERVER_LOCALITY = 0x2,
    COMBND_RESERVED1 = 0x4
}

alias RPCOPT_PROPERTIES = tagRPCOPT_PROPERTIES;

enum tagRPCOPT_SERVER_LOCALITY_VALUES
{
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2
}

alias RPCOPT_SERVER_LOCALITY_VALUES = tagRPCOPT_SERVER_LOCALITY_VALUES;

extern __gshared const GUID IID_IRpcOptions;

struct IRpcOptionsVtbl
{
    HRESULT function (IRpcOptions* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcOptions* This) AddRef;

    ULONG function (IRpcOptions* This) Release;

    HRESULT function (IRpcOptions* This, IUnknown* pPrx, RPCOPT_PROPERTIES dwProperty, ULONG_PTR dwValue) Set;

    HRESULT function (IRpcOptions* This, IUnknown* pPrx, RPCOPT_PROPERTIES dwProperty, ULONG_PTR* pdwValue) Query;
}

struct IRpcOptions
{
    IRpcOptionsVtbl* lpVtbl;
}

HRESULT IRpcOptions_Set_Proxy (IRpcOptions* This, IUnknown* pPrx, RPCOPT_PROPERTIES dwProperty, ULONG_PTR dwValue);
void IRpcOptions_Set_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcOptions_Query_Proxy (IRpcOptions* This, IUnknown* pPrx, RPCOPT_PROPERTIES dwProperty, ULONG_PTR* pdwValue);
void IRpcOptions_Query_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

enum tagGLOBALOPT_PROPERTIES
{
    COMGLB_EXCEPTION_HANDLING = 1,
    COMGLB_APPID = 2,
    COMGLB_RPC_THREADPOOL_SETTING = 3,
    COMGLB_RO_SETTINGS = 4,
    COMGLB_UNMARSHALING_POLICY = 5
}

alias GLOBALOPT_PROPERTIES = tagGLOBALOPT_PROPERTIES;

enum tagGLOBALOPT_EH_VALUES
{
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
}

alias GLOBALOPT_EH_VALUES = tagGLOBALOPT_EH_VALUES;

enum tagGLOBALOPT_RPCTP_VALUES
{
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
}

alias GLOBALOPT_RPCTP_VALUES = tagGLOBALOPT_RPCTP_VALUES;

enum tagGLOBALOPT_RO_FLAGS
{
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
    COMGLB_FAST_RUNDOWN = 0x8,
    COMGLB_RESERVED1 = 0x10,
    COMGLB_RESERVED2 = 0x20,
    COMGLB_RESERVED3 = 0x40,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80
}

alias GLOBALOPT_RO_FLAGS = tagGLOBALOPT_RO_FLAGS;

enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
{
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
    COMGLB_UNMARSHALING_POLICY_STRONG = 1,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2
}

alias GLOBALOPT_UNMARSHALING_POLICY_VALUES = tagGLOBALOPT_UNMARSHALING_POLICY_VALUES;

extern __gshared const GUID IID_IGlobalOptions;

struct IGlobalOptionsVtbl
{
    HRESULT function (IGlobalOptions* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IGlobalOptions* This) AddRef;

    ULONG function (IGlobalOptions* This) Release;

    HRESULT function (IGlobalOptions* This, GLOBALOPT_PROPERTIES dwProperty, ULONG_PTR dwValue) Set;

    HRESULT function (IGlobalOptions* This, GLOBALOPT_PROPERTIES dwProperty, ULONG_PTR* pdwValue) Query;
}

struct IGlobalOptions
{
    IGlobalOptionsVtbl* lpVtbl;
}

HRESULT IGlobalOptions_Set_Proxy (IGlobalOptions* This, GLOBALOPT_PROPERTIES dwProperty, ULONG_PTR dwValue);
void IGlobalOptions_Set_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IGlobalOptions_Query_Proxy (IGlobalOptions* This, GLOBALOPT_PROPERTIES dwProperty, ULONG_PTR* pdwValue);
void IGlobalOptions_Query_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPSURROGATE = ISurrogate*;

extern __gshared const GUID IID_ISurrogate;

struct ISurrogateVtbl
{
    HRESULT function (ISurrogate* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISurrogate* This) AddRef;

    ULONG function (ISurrogate* This) Release;

    HRESULT function (ISurrogate* This, const IID* Clsid) LoadDllServer;

    HRESULT function (ISurrogate* This) FreeSurrogate;
}

struct ISurrogate
{
    ISurrogateVtbl* lpVtbl;
}

HRESULT ISurrogate_LoadDllServer_Proxy (ISurrogate* This, const IID* Clsid);
void ISurrogate_LoadDllServer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISurrogate_FreeSurrogate_Proxy (ISurrogate* This);
void ISurrogate_FreeSurrogate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPGLOBALINTERFACETABLE = IGlobalInterfaceTable*;

extern __gshared const GUID IID_IGlobalInterfaceTable;

struct IGlobalInterfaceTableVtbl
{
    HRESULT function (IGlobalInterfaceTable* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IGlobalInterfaceTable* This) AddRef;

    ULONG function (IGlobalInterfaceTable* This) Release;

    HRESULT function (IGlobalInterfaceTable* This, IUnknown* pUnk, const IID* riid, DWORD* pdwCookie) RegisterInterfaceInGlobal;

    HRESULT function (IGlobalInterfaceTable* This, DWORD dwCookie) RevokeInterfaceFromGlobal;

    HRESULT function (IGlobalInterfaceTable* This, DWORD dwCookie, const IID* riid, void** ppv) GetInterfaceFromGlobal;
}

struct IGlobalInterfaceTable
{
    IGlobalInterfaceTableVtbl* lpVtbl;
}

HRESULT IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy (IGlobalInterfaceTable* This, IUnknown* pUnk, const IID* riid, DWORD* pdwCookie);
void IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy (IGlobalInterfaceTable* This, DWORD dwCookie);
void IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy (IGlobalInterfaceTable* This, DWORD dwCookie, const IID* riid, void** ppv);
void IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ISynchronize;

struct ISynchronizeVtbl
{
    HRESULT function (ISynchronize* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISynchronize* This) AddRef;

    ULONG function (ISynchronize* This) Release;

    HRESULT function (ISynchronize* This, DWORD dwFlags, DWORD dwMilliseconds) Wait;

    HRESULT function (ISynchronize* This) Signal;

    HRESULT function (ISynchronize* This) Reset;
}

struct ISynchronize
{
    ISynchronizeVtbl* lpVtbl;
}

HRESULT ISynchronize_Wait_Proxy (ISynchronize* This, DWORD dwFlags, DWORD dwMilliseconds);
void ISynchronize_Wait_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISynchronize_Signal_Proxy (ISynchronize* This);
void ISynchronize_Signal_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISynchronize_Reset_Proxy (ISynchronize* This);
void ISynchronize_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ISynchronizeHandle;

struct ISynchronizeHandleVtbl
{
    HRESULT function (ISynchronizeHandle* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISynchronizeHandle* This) AddRef;

    ULONG function (ISynchronizeHandle* This) Release;

    HRESULT function (ISynchronizeHandle* This, HANDLE* ph) GetHandle;
}

struct ISynchronizeHandle
{
    ISynchronizeHandleVtbl* lpVtbl;
}

HRESULT ISynchronizeHandle_GetHandle_Proxy (ISynchronizeHandle* This, HANDLE* ph);
void ISynchronizeHandle_GetHandle_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ISynchronizeEvent;

struct ISynchronizeEventVtbl
{
    HRESULT function (ISynchronizeEvent* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISynchronizeEvent* This) AddRef;

    ULONG function (ISynchronizeEvent* This) Release;

    HRESULT function (ISynchronizeEvent* This, HANDLE* ph) GetHandle;

    HRESULT function (ISynchronizeEvent* This, HANDLE* ph) SetEventHandle;
}

struct ISynchronizeEvent
{
    ISynchronizeEventVtbl* lpVtbl;
}

HRESULT ISynchronizeEvent_SetEventHandle_Proxy (ISynchronizeEvent* This, HANDLE* ph);
void ISynchronizeEvent_SetEventHandle_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ISynchronizeContainer;

struct ISynchronizeContainerVtbl
{
    HRESULT function (ISynchronizeContainer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISynchronizeContainer* This) AddRef;

    ULONG function (ISynchronizeContainer* This) Release;

    HRESULT function (ISynchronizeContainer* This, ISynchronize* pSync) AddSynchronize;

    HRESULT function (ISynchronizeContainer* This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize** ppSync) WaitMultiple;
}

struct ISynchronizeContainer
{
    ISynchronizeContainerVtbl* lpVtbl;
}

HRESULT ISynchronizeContainer_AddSynchronize_Proxy (ISynchronizeContainer* This, ISynchronize* pSync);
void ISynchronizeContainer_AddSynchronize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISynchronizeContainer_WaitMultiple_Proxy (ISynchronizeContainer* This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize** ppSync);
void ISynchronizeContainer_WaitMultiple_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ISynchronizeMutex;

struct ISynchronizeMutexVtbl
{
    HRESULT function (ISynchronizeMutex* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISynchronizeMutex* This) AddRef;

    ULONG function (ISynchronizeMutex* This) Release;

    HRESULT function (ISynchronizeMutex* This, DWORD dwFlags, DWORD dwMilliseconds) Wait;

    HRESULT function (ISynchronizeMutex* This) Signal;

    HRESULT function (ISynchronizeMutex* This) Reset;

    HRESULT function (ISynchronizeMutex* This) ReleaseMutex;
}

struct ISynchronizeMutex
{
    ISynchronizeMutexVtbl* lpVtbl;
}

HRESULT ISynchronizeMutex_ReleaseMutex_Proxy (ISynchronizeMutex* This);
void ISynchronizeMutex_ReleaseMutex_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCANCELMETHODCALLS = ICancelMethodCalls*;

extern __gshared const GUID IID_ICancelMethodCalls;

struct ICancelMethodCallsVtbl
{
    HRESULT function (ICancelMethodCalls* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICancelMethodCalls* This) AddRef;

    ULONG function (ICancelMethodCalls* This) Release;

    HRESULT function (ICancelMethodCalls* This, ULONG ulSeconds) Cancel;

    HRESULT function (ICancelMethodCalls* This) TestCancel;
}

struct ICancelMethodCalls
{
    ICancelMethodCallsVtbl* lpVtbl;
}

HRESULT ICancelMethodCalls_Cancel_Proxy (ICancelMethodCalls* This, ULONG ulSeconds);
void ICancelMethodCalls_Cancel_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICancelMethodCalls_TestCancel_Proxy (ICancelMethodCalls* This);
void ICancelMethodCalls_TestCancel_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

enum tagDCOM_CALL_STATE
{
    DCOM_NONE = 0x0,
    DCOM_CALL_COMPLETE = 0x1,
    DCOM_CALL_CANCELED = 0x2
}

alias DCOM_CALL_STATE = tagDCOM_CALL_STATE;

extern __gshared const GUID IID_IAsyncManager;

struct IAsyncManagerVtbl
{
    HRESULT function (IAsyncManager* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAsyncManager* This) AddRef;

    ULONG function (IAsyncManager* This) Release;

    HRESULT function (IAsyncManager* This, HRESULT Result) CompleteCall;

    HRESULT function (IAsyncManager* This, const IID* riid, void** pInterface) GetCallContext;

    HRESULT function (IAsyncManager* This, ULONG* pulStateFlags) GetState;
}

struct IAsyncManager
{
    IAsyncManagerVtbl* lpVtbl;
}

HRESULT IAsyncManager_CompleteCall_Proxy (IAsyncManager* This, HRESULT Result);
void IAsyncManager_CompleteCall_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAsyncManager_GetCallContext_Proxy (IAsyncManager* This, const IID* riid, void** pInterface);
void IAsyncManager_GetCallContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAsyncManager_GetState_Proxy (IAsyncManager* This, ULONG* pulStateFlags);
void IAsyncManager_GetState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ICallFactory;

struct ICallFactoryVtbl
{
    HRESULT function (ICallFactory* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICallFactory* This) AddRef;

    ULONG function (ICallFactory* This) Release;

    HRESULT function (ICallFactory* This, const IID* riid, IUnknown* pCtrlUnk, const IID* riid2, IUnknown** ppv) CreateCall;
}

struct ICallFactory
{
    ICallFactoryVtbl* lpVtbl;
}

HRESULT ICallFactory_CreateCall_Proxy (ICallFactory* This, const IID* riid, IUnknown* pCtrlUnk, const IID* riid2, IUnknown** ppv);
void ICallFactory_CreateCall_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IRpcHelper;

struct IRpcHelperVtbl
{
    HRESULT function (IRpcHelper* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRpcHelper* This) AddRef;

    ULONG function (IRpcHelper* This) Release;

    HRESULT function (IRpcHelper* This, DWORD* pComVersion) GetDCOMProtocolVersion;

    HRESULT function (IRpcHelper* This, void* pObjRef, IID** piid) GetIIDFromOBJREF;
}

struct IRpcHelper
{
    IRpcHelperVtbl* lpVtbl;
}

HRESULT IRpcHelper_GetDCOMProtocolVersion_Proxy (IRpcHelper* This, DWORD* pComVersion);
void IRpcHelper_GetDCOMProtocolVersion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRpcHelper_GetIIDFromOBJREF_Proxy (IRpcHelper* This, void* pObjRef, IID** piid);
void IRpcHelper_GetIIDFromOBJREF_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IReleaseMarshalBuffers;

struct IReleaseMarshalBuffersVtbl
{
    HRESULT function (IReleaseMarshalBuffers* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IReleaseMarshalBuffers* This) AddRef;

    ULONG function (IReleaseMarshalBuffers* This) Release;

    HRESULT function (IReleaseMarshalBuffers* This, RPCOLEMESSAGE* pMsg, DWORD dwFlags, IUnknown* pChnl) ReleaseMarshalBuffer;
}

struct IReleaseMarshalBuffers
{
    IReleaseMarshalBuffersVtbl* lpVtbl;
}

HRESULT IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy (IReleaseMarshalBuffers* This, RPCOLEMESSAGE* pMsg, DWORD dwFlags, IUnknown* pChnl);
void IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IWaitMultiple;

struct IWaitMultipleVtbl
{
    HRESULT function (IWaitMultiple* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWaitMultiple* This) AddRef;

    ULONG function (IWaitMultiple* This) Release;

    HRESULT function (IWaitMultiple* This, DWORD timeout, ISynchronize** pSync) WaitMultiple;

    HRESULT function (IWaitMultiple* This, ISynchronize* pSync) AddSynchronize;
}

struct IWaitMultiple
{
    IWaitMultipleVtbl* lpVtbl;
}

HRESULT IWaitMultiple_WaitMultiple_Proxy (IWaitMultiple* This, DWORD timeout, ISynchronize** pSync);
void IWaitMultiple_WaitMultiple_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IWaitMultiple_AddSynchronize_Proxy (IWaitMultiple* This, ISynchronize* pSync);
void IWaitMultiple_AddSynchronize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPADDRTRACKINGCONTROL = IAddrTrackingControl*;
extern __gshared const GUID IID_IAddrTrackingControl;

struct IAddrTrackingControlVtbl
{
    HRESULT function (IAddrTrackingControl* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAddrTrackingControl* This) AddRef;

    ULONG function (IAddrTrackingControl* This) Release;

    HRESULT function (IAddrTrackingControl* This) EnableCOMDynamicAddrTracking;

    HRESULT function (IAddrTrackingControl* This) DisableCOMDynamicAddrTracking;
}

struct IAddrTrackingControl
{
    IAddrTrackingControlVtbl* lpVtbl;
}

HRESULT IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy (IAddrTrackingControl* This);
void IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy (IAddrTrackingControl* This);
void IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPADDREXCLUSIONCONTROL = IAddrExclusionControl*;
extern __gshared const GUID IID_IAddrExclusionControl;

struct IAddrExclusionControlVtbl
{
    HRESULT function (IAddrExclusionControl* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAddrExclusionControl* This) AddRef;

    ULONG function (IAddrExclusionControl* This) Release;

    HRESULT function (IAddrExclusionControl* This, const IID* riid, void** ppEnumerator) GetCurrentAddrExclusionList;

    HRESULT function (IAddrExclusionControl* This, IUnknown* pEnumerator) UpdateAddrExclusionList;
}

struct IAddrExclusionControl
{
    IAddrExclusionControlVtbl* lpVtbl;
}

HRESULT IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy (IAddrExclusionControl* This, const IID* riid, void** ppEnumerator);
void IAddrExclusionControl_GetCurrentAddrExclusionList_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAddrExclusionControl_UpdateAddrExclusionList_Proxy (IAddrExclusionControl* This, IUnknown* pEnumerator);
void IAddrExclusionControl_UpdateAddrExclusionList_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IPipeByte;

struct IPipeByteVtbl
{
    HRESULT function (IPipeByte* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPipeByte* This) AddRef;

    ULONG function (IPipeByte* This) Release;

    HRESULT function (IPipeByte* This, BYTE* buf, ULONG cRequest, ULONG* pcReturned) Pull;

    HRESULT function (IPipeByte* This, BYTE* buf, ULONG cSent) Push;
}

struct IPipeByte
{
    IPipeByteVtbl* lpVtbl;
}

HRESULT IPipeByte_Pull_Proxy (IPipeByte* This, BYTE* buf, ULONG cRequest, ULONG* pcReturned);
void IPipeByte_Pull_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPipeByte_Push_Proxy (IPipeByte* This, BYTE* buf, ULONG cSent);
void IPipeByte_Push_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IPipeLong;

struct IPipeLongVtbl
{
    HRESULT function (IPipeLong* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPipeLong* This) AddRef;

    ULONG function (IPipeLong* This) Release;

    HRESULT function (IPipeLong* This, LONG* buf, ULONG cRequest, ULONG* pcReturned) Pull;

    HRESULT function (IPipeLong* This, LONG* buf, ULONG cSent) Push;
}

struct IPipeLong
{
    IPipeLongVtbl* lpVtbl;
}

HRESULT IPipeLong_Pull_Proxy (IPipeLong* This, LONG* buf, ULONG cRequest, ULONG* pcReturned);
void IPipeLong_Pull_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPipeLong_Push_Proxy (IPipeLong* This, LONG* buf, ULONG cSent);
void IPipeLong_Push_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IPipeDouble;

struct IPipeDoubleVtbl
{
    HRESULT function (IPipeDouble* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPipeDouble* This) AddRef;

    ULONG function (IPipeDouble* This) Release;

    HRESULT function (IPipeDouble* This, DOUBLE* buf, ULONG cRequest, ULONG* pcReturned) Pull;

    HRESULT function (IPipeDouble* This, DOUBLE* buf, ULONG cSent) Push;
}

struct IPipeDouble
{
    IPipeDoubleVtbl* lpVtbl;
}

HRESULT IPipeDouble_Pull_Proxy (IPipeDouble* This, DOUBLE* buf, ULONG cRequest, ULONG* pcReturned);
void IPipeDouble_Pull_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPipeDouble_Push_Proxy (IPipeDouble* This, DOUBLE* buf, ULONG cSent);
void IPipeDouble_Push_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

enum _APTTYPEQUALIFIER
{
    APTTYPEQUALIFIER_NONE = 0,
    APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
    APTTYPEQUALIFIER_NA_ON_MTA = 2,
    APTTYPEQUALIFIER_NA_ON_STA = 3,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
    APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
    APTTYPEQUALIFIER_APPLICATION_STA = 6
}

alias APTTYPEQUALIFIER = _APTTYPEQUALIFIER;

enum _APTTYPE
{
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3
}

alias APTTYPE = _APTTYPE;

enum _THDTYPE
{
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1
}

alias THDTYPE = _THDTYPE;

alias APARTMENTID = c_ulong;

extern __gshared const GUID IID_IComThreadingInfo;

struct IComThreadingInfoVtbl
{
    HRESULT function (IComThreadingInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IComThreadingInfo* This) AddRef;

    ULONG function (IComThreadingInfo* This) Release;

    HRESULT function (IComThreadingInfo* This, APTTYPE* pAptType) GetCurrentApartmentType;

    HRESULT function (IComThreadingInfo* This, THDTYPE* pThreadType) GetCurrentThreadType;

    HRESULT function (IComThreadingInfo* This, GUID* pguidLogicalThreadId) GetCurrentLogicalThreadId;

    HRESULT function (IComThreadingInfo* This, const GUID* rguid) SetCurrentLogicalThreadId;
}

struct IComThreadingInfo
{
    IComThreadingInfoVtbl* lpVtbl;
}

HRESULT IComThreadingInfo_GetCurrentApartmentType_Proxy (IComThreadingInfo* This, APTTYPE* pAptType);
void IComThreadingInfo_GetCurrentApartmentType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IComThreadingInfo_GetCurrentThreadType_Proxy (IComThreadingInfo* This, THDTYPE* pThreadType);
void IComThreadingInfo_GetCurrentThreadType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IComThreadingInfo_GetCurrentLogicalThreadId_Proxy (IComThreadingInfo* This, GUID* pguidLogicalThreadId);
void IComThreadingInfo_GetCurrentLogicalThreadId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IComThreadingInfo_SetCurrentLogicalThreadId_Proxy (IComThreadingInfo* This, const GUID* rguid);
void IComThreadingInfo_SetCurrentLogicalThreadId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IProcessInitControl;

struct IProcessInitControlVtbl
{
    HRESULT function (IProcessInitControl* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IProcessInitControl* This) AddRef;

    ULONG function (IProcessInitControl* This) Release;

    HRESULT function (IProcessInitControl* This, DWORD dwSecondsRemaining) ResetInitializerTimeout;
}

struct IProcessInitControl
{
    IProcessInitControlVtbl* lpVtbl;
}

HRESULT IProcessInitControl_ResetInitializerTimeout_Proxy (IProcessInitControl* This, DWORD dwSecondsRemaining);
void IProcessInitControl_ResetInitializerTimeout_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IFastRundown;

struct IFastRundownVtbl
{
    HRESULT function (IFastRundown* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IFastRundown* This) AddRef;

    ULONG function (IFastRundown* This) Release;
}

struct IFastRundown
{
    IFastRundownVtbl* lpVtbl;
}

enum CO_MARSHALING_CONTEXT_ATTRIBUTES
{
    CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
}

extern __gshared const GUID IID_IMarshalingStream;

struct IMarshalingStreamVtbl
{
    HRESULT function (IMarshalingStream* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMarshalingStream* This) AddRef;

    ULONG function (IMarshalingStream* This) Release;

    HRESULT function (IMarshalingStream* This, void* pv, ULONG cb, ULONG* pcbRead) Read;

    HRESULT function (IMarshalingStream* This, const(void)* pv, ULONG cb, ULONG* pcbWritten) Write;

    HRESULT function (IMarshalingStream* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition) Seek;

    HRESULT function (IMarshalingStream* This, ULARGE_INTEGER libNewSize) SetSize;

    HRESULT function (IMarshalingStream* This, IStream* pstm, ULARGE_INTEGER cb, ULARGE_INTEGER* pcbRead, ULARGE_INTEGER* pcbWritten) CopyTo;

    HRESULT function (IMarshalingStream* This, DWORD grfCommitFlags) Commit;

    HRESULT function (IMarshalingStream* This) Revert;

    HRESULT function (IMarshalingStream* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) LockRegion;

    HRESULT function (IMarshalingStream* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) UnlockRegion;

    HRESULT function (IMarshalingStream* This, STATSTG* pstatstg, DWORD grfStatFlag) Stat;

    HRESULT function (IMarshalingStream* This, IStream** ppstm) Clone;

    HRESULT function (IMarshalingStream* This, CO_MARSHALING_CONTEXT_ATTRIBUTES attribute, ULONG_PTR* pAttributeValue) GetMarshalingContextAttribute;
}

struct IMarshalingStream
{
    IMarshalingStreamVtbl* lpVtbl;
}

HRESULT IMarshalingStream_GetMarshalingContextAttribute_Proxy (IMarshalingStream* This, CO_MARSHALING_CONTEXT_ATTRIBUTES attribute, ULONG_PTR* pAttributeValue);
void IMarshalingStream_GetMarshalingContextAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;

extern __gshared const IID GUID_NULL;
extern __gshared const IID CATID_MARSHALER;
extern __gshared const IID IID_IRpcChannel;
extern __gshared const IID IID_IRpcStub;
extern __gshared const IID IID_IStubManager;
extern __gshared const IID IID_IRpcProxy;
extern __gshared const IID IID_IProxyManager;
extern __gshared const IID IID_IPSFactory;
extern __gshared const IID IID_IInternalMoniker;
extern __gshared const IID IID_IDfReserved1;
extern __gshared const IID IID_IDfReserved2;
extern __gshared const IID IID_IDfReserved3;
extern __gshared const CLSID CLSID_StdMarshal;
extern __gshared const CLSID CLSID_AggStdMarshal;
extern __gshared const CLSID CLSID_StdAsyncActManager;
extern __gshared const IID IID_IStub;
extern __gshared const IID IID_IProxy;
extern __gshared const IID IID_IEnumGeneric;
extern __gshared const IID IID_IEnumHolder;
extern __gshared const IID IID_IEnumCallback;
extern __gshared const IID IID_IOleManager;
extern __gshared const IID IID_IOlePresObj;
extern __gshared const IID IID_IDebug;
extern __gshared const IID IID_IDebugStream;
extern __gshared const CLSID CLSID_PSGenObject;
extern __gshared const CLSID CLSID_PSClientSite;
extern __gshared const CLSID CLSID_PSClassObject;
extern __gshared const CLSID CLSID_PSInPlaceActive;
extern __gshared const CLSID CLSID_PSInPlaceFrame;
extern __gshared const CLSID CLSID_PSDragDrop;
extern __gshared const CLSID CLSID_PSBindCtx;
extern __gshared const CLSID CLSID_PSEnumerators;
extern __gshared const CLSID CLSID_StaticMetafile;
extern __gshared const CLSID CLSID_StaticDib;
extern __gshared const CLSID CID_CDfsVolume;
extern __gshared const CLSID CLSID_DCOMAccessControl;
extern __gshared const CLSID CLSID_GlobalOptions;
extern __gshared const CLSID CLSID_StdGlobalInterfaceTable;
extern __gshared const CLSID CLSID_ComBinding;
extern __gshared const CLSID CLSID_StdEvent;
extern __gshared const CLSID CLSID_ManualResetEvent;
extern __gshared const CLSID CLSID_SynchronizeContainer;
extern __gshared const CLSID CLSID_AddrControl;
extern __gshared const CLSID CLSID_CCDFormKrnl;
extern __gshared const CLSID CLSID_CCDPropertyPage;
extern __gshared const CLSID CLSID_CCDFormDialog;
extern __gshared const CLSID CLSID_CCDCommandButton;
extern __gshared const CLSID CLSID_CCDComboBox;
extern __gshared const CLSID CLSID_CCDTextBox;
extern __gshared const CLSID CLSID_CCDCheckBox;
extern __gshared const CLSID CLSID_CCDLabel;
extern __gshared const CLSID CLSID_CCDOptionButton;
extern __gshared const CLSID CLSID_CCDListBox;
extern __gshared const CLSID CLSID_CCDScrollBar;
extern __gshared const CLSID CLSID_CCDGroupBox;
extern __gshared const CLSID CLSID_CCDGeneralPropertyPage;
extern __gshared const CLSID CLSID_CCDGenericPropertyPage;
extern __gshared const CLSID CLSID_CCDFontPropertyPage;
extern __gshared const CLSID CLSID_CCDColorPropertyPage;
extern __gshared const CLSID CLSID_CCDLabelPropertyPage;
extern __gshared const CLSID CLSID_CCDCheckBoxPropertyPage;
extern __gshared const CLSID CLSID_CCDTextBoxPropertyPage;
extern __gshared const CLSID CLSID_CCDOptionButtonPropertyPage;
extern __gshared const CLSID CLSID_CCDListBoxPropertyPage;
extern __gshared const CLSID CLSID_CCDCommandButtonPropertyPage;
extern __gshared const CLSID CLSID_CCDComboBoxPropertyPage;
extern __gshared const CLSID CLSID_CCDScrollBarPropertyPage;
extern __gshared const CLSID CLSID_CCDGroupBoxPropertyPage;
extern __gshared const CLSID CLSID_CCDXObjectPropertyPage;
extern __gshared const CLSID CLSID_CStdPropertyFrame;
extern __gshared const CLSID CLSID_CFormPropertyPage;
extern __gshared const CLSID CLSID_CGridPropertyPage;
extern __gshared const CLSID CLSID_CWSJArticlePage;
extern __gshared const CLSID CLSID_CSystemPage;
extern __gshared const CLSID CLSID_IdentityUnmarshal;
extern __gshared const CLSID CLSID_InProcFreeMarshaler;
extern __gshared const CLSID CLSID_Picture_Metafile;
extern __gshared const CLSID CLSID_Picture_EnhMetafile;
extern __gshared const CLSID CLSID_Picture_Dib;
extern __gshared const GUID GUID_TRISTATE;

HRESULT CreateStreamOnHGlobal (HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPSTREAM* ppstm);
HRESULT GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL* phglobal);
void CoUninitialize ();
HRESULT CoInitializeEx (LPVOID pvReserved, DWORD dwCoInit);
HRESULT CoGetCurrentLogicalThreadId (GUID* pguid);
HRESULT CoGetContextToken (ULONG_PTR* pToken);

HRESULT CoGetObjectContext (const IID* riid, LPVOID* ppv);
HRESULT CoRegisterClassObject (const IID* rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
HRESULT CoRevokeClassObject (DWORD dwRegister);
HRESULT CoResumeClassObjects ();
HRESULT CoSuspendClassObjects ();

HRESULT CoGetMalloc (DWORD dwMemContext, LPMALLOC* ppMalloc);
DWORD CoGetCurrentProcess ();
HRESULT CoGetCallerTID (LPDWORD lpdwTID);
HRESULT CoGetDefaultContext (APTTYPE aptType, const IID* riid, void** ppv);

HRESULT CoGetClassObject (const IID* rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID* riid, LPVOID* ppv);
ULONG CoAddRefServerProcess ();
ULONG CoReleaseServerProcess ();
HRESULT CoGetPSClsid (const IID* riid, CLSID* pClsid);
HRESULT CoRegisterPSClsid (const IID* riid, const IID* rclsid);
HRESULT CoRegisterSurrogate (LPSURROGATE pSurrogate);
HRESULT CoMarshalHresult (LPSTREAM pstm, HRESULT hresult);
HRESULT CoUnmarshalHresult (LPSTREAM pstm, HRESULT* phresult);
HRESULT CoLockObjectExternal (LPUNKNOWN pUnk, WINBOOL fLock, WINBOOL fLastUnlockReleases);
HRESULT CoGetStdMarshalEx (LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN* ppUnkInner);

enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 0x01,
    SMEXF_HANDLER = 0x02
}

alias STDMSHLFLAGS = tagSTDMSHLFLAGS;

HRESULT CoGetMarshalSizeMax (ULONG* pulSize, const IID* riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
HRESULT CoMarshalInterface (LPSTREAM pStm, const IID* riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
HRESULT CoUnmarshalInterface (LPSTREAM pStm, const IID* riid, LPVOID* ppv);
HRESULT CoReleaseMarshalData (LPSTREAM pStm);
HRESULT CoDisconnectObject (LPUNKNOWN pUnk, DWORD dwReserved);
HRESULT CoGetStandardMarshal (const IID* riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL* ppMarshal);
HRESULT CoMarshalInterThreadInterfaceInStream (const IID* riid, LPUNKNOWN pUnk, LPSTREAM* ppStm);
HRESULT CoGetInterfaceAndReleaseStream (LPSTREAM pStm, const IID* iid, LPVOID* ppv);
HRESULT CoCreateFreeThreadedMarshaler (LPUNKNOWN punkOuter, LPUNKNOWN* ppunkMarshal);
void CoFreeUnusedLibraries ();
void CoFreeUnusedLibrariesEx (DWORD dwUnloadDelay, DWORD dwReserved);
HRESULT CoInitializeSecurity (PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pAuthList, DWORD dwCapabilities, void* pReserved3);
HRESULT CoSwitchCallContext (IUnknown* pNewObject, IUnknown** ppOldObject);

HRESULT CoCreateInstanceFromApp (const IID* Clsid, IUnknown* punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI* pResults);

WINBOOL CoIsHandlerConnected (LPUNKNOWN pUnk);

HRESULT CoGetCallContext (const IID* riid, void** ppInterface);
HRESULT CoQueryProxyBlanket (IUnknown* pProxy, DWORD* pwAuthnSvc, DWORD* pAuthzSvc, LPOLESTR* pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTH_IDENTITY_HANDLE* pAuthInfo, DWORD* pCapabilites);
HRESULT CoSetProxyBlanket (IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
HRESULT CoCopyProxy (IUnknown* pProxy, IUnknown** ppCopy);
HRESULT CoQueryClientBlanket (DWORD* pAuthnSvc, DWORD* pAuthzSvc, LPOLESTR* pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTHZ_HANDLE* pPrivs, DWORD* pCapabilities);
HRESULT CoImpersonateClient ();
HRESULT CoRevertToSelf ();
HRESULT CoQueryAuthenticationServices (DWORD* pcAuthSvc, SOLE_AUTHENTICATION_SERVICE** asAuthSvc);
HRESULT CoCreateInstance (const IID* rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID* riid, LPVOID* ppv);
HRESULT CoCreateInstanceEx (const IID* Clsid, IUnknown* punkOuter, DWORD dwClsCtx, COSERVERINFO* pServerInfo, DWORD dwCount, MULTI_QI* pResults);

HRESULT CoGetCancelObject (DWORD dwThreadId, const IID* iid, void** ppUnk);
HRESULT CoSetCancelObject (IUnknown* pUnk);
HRESULT CoCancelCall (DWORD dwThreadId, ULONG ulTimeout);
HRESULT CoTestCancel ();
HRESULT CoEnableCallCancellation (LPVOID pReserved);
HRESULT CoDisableCallCancellation (LPVOID pReserved);

HRESULT StringFromCLSID (const IID* rclsid, LPOLESTR* lplpsz);
HRESULT CLSIDFromString (LPCOLESTR lpsz, LPCLSID pclsid);
HRESULT StringFromIID (const IID* rclsid, LPOLESTR* lplpsz);
HRESULT IIDFromString (LPCOLESTR lpsz, LPIID lpiid);

HRESULT ProgIDFromCLSID (const IID* clsid, LPOLESTR* lplpszProgID);
HRESULT CLSIDFromProgID (LPCOLESTR lpszProgID, LPCLSID lpclsid);

int StringFromGUID2 (const GUID* rguid, LPOLESTR lpsz, int cchMax);
HRESULT CoCreateGuid (GUID* pguid);

alias PROPVARIANT = tagPROPVARIANT;

HRESULT PropVariantCopy (PROPVARIANT* pvarDest, const(PROPVARIANT)* pvarSrc);
HRESULT PropVariantClear (PROPVARIANT* pvar);
HRESULT FreePropVariantArray (ULONG cVariants, PROPVARIANT* rgvars);

HRESULT CoWaitForMultipleHandles (DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex);

enum tagCOWAIT_FLAGS
{
    COWAIT_DEFAULT = 0,
    COWAIT_WAITALL = 1,
    COWAIT_ALERTABLE = 2,
    COWAIT_INPUTAVAILABLE = 4,

    COWAIT_DISPATCH_CALLS = 8,
    COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10
}

alias COWAIT_FLAGS = tagCOWAIT_FLAGS;

HRESULT CoGetTreatAsClass (const IID* clsidOld, LPCLSID pClsidNew);
HRESULT CoInvalidateRemoteMachineBindings (LPOLESTR pszMachineName);

alias LPFNGETCLASSOBJECT = c_long function (const IID*, const IID*, LPVOID*);
alias LPFNCANUNLOADNOW = c_long function ();

HRESULT DllGetClassObject (const IID* rclsid, const IID* riid, LPVOID* ppv);
HRESULT DllCanUnloadNow ();
LPVOID CoTaskMemAlloc (SIZE_T cb);
LPVOID CoTaskMemRealloc (LPVOID pv, SIZE_T cb);
void CoTaskMemFree (LPVOID pv);

enum tagCOINIT
{
    COINIT_APARTMENTTHREADED = 0x2,
    COINIT_MULTITHREADED = COINITBASE.COINITBASE_MULTITHREADED,
    COINIT_DISABLE_OLE1DDE = 0x4,
    COINIT_SPEED_OVER_MEMORY = 0x8
}

alias COINIT = tagCOINIT;

alias STGFMT = c_ulong;

extern __gshared RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern __gshared RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;

struct tagRemHGLOBAL
{
    LONG fNullHGlobal;
    ULONG cbData;
    ubyte[1] data;
}

alias RemHGLOBAL = tagRemHGLOBAL;

struct tagRemHMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    ubyte[1] data;
}

alias RemHMETAFILEPICT = tagRemHMETAFILEPICT;

struct tagRemHENHMETAFILE
{
    ULONG cbData;
    ubyte[1] data;
}

alias RemHENHMETAFILE = tagRemHENHMETAFILE;

struct tagRemHBITMAP
{
    ULONG cbData;
    ubyte[1] data;
}

alias RemHBITMAP = tagRemHBITMAP;

struct tagRemHPALETTE
{
    ULONG cbData;
    ubyte[1] data;
}

alias RemHPALETTE = tagRemHPALETTE;

struct tagRemBRUSH
{
    ULONG cbData;
    ubyte[1] data;
}

alias RemHBRUSH = tagRemBRUSH;

enum tagDVASPECT
{
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
}

alias DVASPECT = tagDVASPECT;

enum tagSTGC
{
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
}

alias STGC = tagSTGC;

enum tagSTGMOVE
{
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2
}

alias STGMOVE = tagSTGMOVE;

enum tagSTATFLAG
{
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2
}

alias STATFLAG = tagSTATFLAG;
alias HCONTEXT = void*;

struct _userCLIPFORMAT
{
    LONG fContext;

    union _Anonymous_81
    {
        DWORD dwValue;
        wchar* pwszName;
    }

    _Anonymous_81 u;
}

alias userCLIPFORMAT = _userCLIPFORMAT;

alias wireCLIPFORMAT = _userCLIPFORMAT*;
alias CLIPFORMAT = ushort;

struct _GDI_NONREMOTE
{
    LONG fContext;

    union _Anonymous_82
    {
        LONG hInproc;
        DWORD_BLOB* hRemote;
    }

    _Anonymous_82 u;
}

alias GDI_NONREMOTE = _GDI_NONREMOTE;

struct _userHGLOBAL
{
    LONG fContext;

    union _Anonymous_83
    {
        LONG hInproc;
        FLAGGED_BYTE_BLOB* hRemote;
        INT64 hInproc64;
    }

    _Anonymous_83 u;
}

alias userHGLOBAL = _userHGLOBAL;

alias wireHGLOBAL = _userHGLOBAL*;

struct _userHMETAFILE
{
    LONG fContext;

    union _Anonymous_84
    {
        LONG hInproc;
        BYTE_BLOB* hRemote;
        INT64 hInproc64;
    }

    _Anonymous_84 u;
}

alias userHMETAFILE = _userHMETAFILE;

struct _remoteMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE* hMF;
}

alias remoteMETAFILEPICT = _remoteMETAFILEPICT;

struct _userHMETAFILEPICT
{
    LONG fContext;

    union _Anonymous_85
    {
        LONG hInproc;
        remoteMETAFILEPICT* hRemote;
        INT64 hInproc64;
    }

    _Anonymous_85 u;
}

alias userHMETAFILEPICT = _userHMETAFILEPICT;

struct _userHENHMETAFILE
{
    LONG fContext;

    union _Anonymous_86
    {
        LONG hInproc;
        BYTE_BLOB* hRemote;
        INT64 hInproc64;
    }

    _Anonymous_86 u;
}

alias userHENHMETAFILE = _userHENHMETAFILE;

struct _userBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    ubyte[1] pBuffer;
}

alias userBITMAP = _userBITMAP;

struct _userHBITMAP
{
    LONG fContext;

    union _Anonymous_87
    {
        LONG hInproc;
        userBITMAP* hRemote;
        INT64 hInproc64;
    }

    _Anonymous_87 u;
}

alias userHBITMAP = _userHBITMAP;

struct _userHPALETTE
{
    LONG fContext;

    union _Anonymous_88
    {
        LONG hInproc;
        LOGPALETTE* hRemote;
        INT64 hInproc64;
    }

    _Anonymous_88 u;
}

alias userHPALETTE = _userHPALETTE;

struct _RemotableHandle
{
    LONG fContext;

    union _Anonymous_89
    {
        LONG hInproc;
        LONG hRemote;
    }

    _Anonymous_89 u;
}

alias RemotableHandle = _RemotableHandle;

alias wireHWND = _RemotableHandle*;
alias wireHMENU = _RemotableHandle*;
alias wireHACCEL = _RemotableHandle*;
alias wireHBRUSH = _RemotableHandle*;
alias wireHFONT = _RemotableHandle*;
alias wireHDC = _RemotableHandle*;
alias wireHICON = _RemotableHandle*;
alias wireHRGN = _RemotableHandle*;
alias wireHMONITOR = _RemotableHandle*;

alias wireHBITMAP = _userHBITMAP*;
alias wireHPALETTE = _userHPALETTE*;
alias wireHENHMETAFILE = _userHENHMETAFILE*;
alias wireHMETAFILE = _userHMETAFILE*;
alias wireHMETAFILEPICT = _userHMETAFILEPICT*;

alias HMETAFILEPICT = void*;

alias DATE = double;

union tagCY
{
    struct
    {
        c_ulong Lo;
        c_long Hi;
    }

    LONGLONG int64;
}

alias CY = tagCY;

alias LPCY = tagCY*;

struct tagDEC
{
    USHORT wReserved;

    union
    {
        struct
        {
            BYTE scale;
            BYTE sign;
        }

        USHORT signscale;
    }

    ULONG Hi32;

    union
    {
        struct
        {
            ULONG Lo32;
            ULONG Mid32;
        }

        ULONGLONG Lo64;
    }
}

alias DECIMAL = tagDEC;

alias LPDECIMAL = tagDEC*;

alias wireBSTR = _FLAGGED_WORD_BLOB*;
alias BSTR = ushort*;

alias LPBSTR = ushort**;

alias VARIANT_BOOL = short;

struct tagBSTRBLOB
{
    ULONG cbSize;
    BYTE* pData;
}

alias BSTRBLOB = tagBSTRBLOB;
alias LPBSTRBLOB = tagBSTRBLOB*;

struct tagCLIPDATA
{
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE* pClipData;
}

alias CLIPDATA = tagCLIPDATA;

alias VARTYPE = ushort;

enum VARENUM
{
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 0xfff,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
}

alias PROPID = c_ulong;

struct _tagpropertykey
{
    GUID fmtid;
    DWORD pid;
}

alias PROPERTYKEY = _tagpropertykey;

struct tagCSPLATFORM
{
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
}

alias CSPLATFORM = tagCSPLATFORM;

struct tagQUERYCONTEXT
{
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
}

alias QUERYCONTEXT = tagQUERYCONTEXT;

enum tagTYSPEC
{
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_FILENAME = 3,
    TYSPEC_PROGID = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6
}

alias TYSPEC = tagTYSPEC;

struct __WIDL_wtypes_generated_name_00000001
{
    DWORD tyspec;

    union _Anonymous_90
    {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;

        struct _Anonymous_91
        {
            LPOLESTR pPackageName;
            GUID PolicyId;
        }

        _Anonymous_91 ByName;

        struct _Anonymous_92
        {
            GUID ObjectId;
            GUID PolicyId;
        }

        _Anonymous_92 ByObjectId;
    }

    _Anonymous_90 tagged_union;
}

alias uCLSSPEC = __WIDL_wtypes_generated_name_00000001;

alias LPMALLOCSPY = IMallocSpy*;
extern __gshared const GUID IID_IMallocSpy;

struct IMallocSpyVtbl
{
    HRESULT function (IMallocSpy* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMallocSpy* This) AddRef;

    ULONG function (IMallocSpy* This) Release;

    SIZE_T function (IMallocSpy* This, SIZE_T cbRequest) PreAlloc;

    void* function (IMallocSpy* This, void* pActual) PostAlloc;

    void* function (IMallocSpy* This, void* pRequest, WINBOOL fSpyed) PreFree;

    void function (IMallocSpy* This, WINBOOL fSpyed) PostFree;

    SIZE_T function (IMallocSpy* This, void* pRequest, SIZE_T cbRequest, void** ppNewRequest, WINBOOL fSpyed) PreRealloc;

    void* function (IMallocSpy* This, void* pActual, WINBOOL fSpyed) PostRealloc;

    void* function (IMallocSpy* This, void* pRequest, WINBOOL fSpyed) PreGetSize;

    SIZE_T function (IMallocSpy* This, SIZE_T cbActual, WINBOOL fSpyed) PostGetSize;

    void* function (IMallocSpy* This, void* pRequest, WINBOOL fSpyed) PreDidAlloc;

    int function (IMallocSpy* This, void* pRequest, WINBOOL fSpyed, int fActual) PostDidAlloc;

    void function (IMallocSpy* This) PreHeapMinimize;

    void function (IMallocSpy* This) PostHeapMinimize;
}

struct IMallocSpy
{
    IMallocSpyVtbl* lpVtbl;
}

SIZE_T IMallocSpy_PreAlloc_Proxy (IMallocSpy* This, SIZE_T cbRequest);
void IMallocSpy_PreAlloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void* IMallocSpy_PostAlloc_Proxy (IMallocSpy* This, void* pActual);
void IMallocSpy_PostAlloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void* IMallocSpy_PreFree_Proxy (IMallocSpy* This, void* pRequest, WINBOOL fSpyed);
void IMallocSpy_PreFree_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IMallocSpy_PostFree_Proxy (IMallocSpy* This, WINBOOL fSpyed);
void IMallocSpy_PostFree_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
SIZE_T IMallocSpy_PreRealloc_Proxy (IMallocSpy* This, void* pRequest, SIZE_T cbRequest, void** ppNewRequest, WINBOOL fSpyed);
void IMallocSpy_PreRealloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void* IMallocSpy_PostRealloc_Proxy (IMallocSpy* This, void* pActual, WINBOOL fSpyed);
void IMallocSpy_PostRealloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void* IMallocSpy_PreGetSize_Proxy (IMallocSpy* This, void* pRequest, WINBOOL fSpyed);
void IMallocSpy_PreGetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
SIZE_T IMallocSpy_PostGetSize_Proxy (IMallocSpy* This, SIZE_T cbActual, WINBOOL fSpyed);
void IMallocSpy_PostGetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void* IMallocSpy_PreDidAlloc_Proxy (IMallocSpy* This, void* pRequest, WINBOOL fSpyed);
void IMallocSpy_PreDidAlloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
int IMallocSpy_PostDidAlloc_Proxy (IMallocSpy* This, void* pRequest, WINBOOL fSpyed, int fActual);
void IMallocSpy_PostDidAlloc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IMallocSpy_PreHeapMinimize_Proxy (IMallocSpy* This);
void IMallocSpy_PreHeapMinimize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IMallocSpy_PostHeapMinimize_Proxy (IMallocSpy* This);
void IMallocSpy_PostHeapMinimize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPBC = IBindCtx*;
alias LPBINDCTX = IBindCtx*;

struct tagBIND_OPTS
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
}

alias BIND_OPTS = tagBIND_OPTS;
alias LPBIND_OPTS = tagBIND_OPTS*;

struct tagBIND_OPTS2
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO* pServerInfo;
}

alias BIND_OPTS2 = tagBIND_OPTS2;
alias LPBIND_OPTS2 = tagBIND_OPTS2*;

struct tagBIND_OPTS3
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO* pServerInfo;
    HWND hwnd;
}

alias BIND_OPTS3 = tagBIND_OPTS3;
alias LPBIND_OPTS3 = tagBIND_OPTS3*;

enum tagBIND_FLAGS
{
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
}

alias BIND_FLAGS = tagBIND_FLAGS;
extern __gshared const GUID IID_IBindCtx;

struct IBindCtxVtbl
{
    HRESULT function (IBindCtx* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBindCtx* This) AddRef;

    ULONG function (IBindCtx* This) Release;

    HRESULT function (IBindCtx* This, IUnknown* punk) RegisterObjectBound;

    HRESULT function (IBindCtx* This, IUnknown* punk) RevokeObjectBound;

    HRESULT function (IBindCtx* This) ReleaseBoundObjects;

    HRESULT function (IBindCtx* This, BIND_OPTS* pbindopts) SetBindOptions;

    HRESULT function (IBindCtx* This, BIND_OPTS* pbindopts) GetBindOptions;

    HRESULT function (IBindCtx* This, IRunningObjectTable** pprot) GetRunningObjectTable;

    HRESULT function (IBindCtx* This, LPOLESTR pszKey, IUnknown* punk) RegisterObjectParam;

    HRESULT function (IBindCtx* This, LPOLESTR pszKey, IUnknown** ppunk) GetObjectParam;

    HRESULT function (IBindCtx* This, IEnumString** ppenum) EnumObjectParam;

    HRESULT function (IBindCtx* This, LPOLESTR pszKey) RevokeObjectParam;
}

struct IBindCtx
{
    IBindCtxVtbl* lpVtbl;
}

HRESULT IBindCtx_RegisterObjectBound_Proxy (IBindCtx* This, IUnknown* punk);
void IBindCtx_RegisterObjectBound_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_RevokeObjectBound_Proxy (IBindCtx* This, IUnknown* punk);
void IBindCtx_RevokeObjectBound_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_ReleaseBoundObjects_Proxy (IBindCtx* This);
void IBindCtx_ReleaseBoundObjects_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_RemoteSetBindOptions_Proxy (IBindCtx* This, BIND_OPTS2* pbindopts);
void IBindCtx_RemoteSetBindOptions_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_RemoteGetBindOptions_Proxy (IBindCtx* This, BIND_OPTS2* pbindopts);
void IBindCtx_RemoteGetBindOptions_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_GetRunningObjectTable_Proxy (IBindCtx* This, IRunningObjectTable** pprot);
void IBindCtx_GetRunningObjectTable_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_RegisterObjectParam_Proxy (IBindCtx* This, LPOLESTR pszKey, IUnknown* punk);
void IBindCtx_RegisterObjectParam_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_GetObjectParam_Proxy (IBindCtx* This, LPOLESTR pszKey, IUnknown** ppunk);
void IBindCtx_GetObjectParam_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_EnumObjectParam_Proxy (IBindCtx* This, IEnumString** ppenum);
void IBindCtx_EnumObjectParam_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_RevokeObjectParam_Proxy (IBindCtx* This, LPOLESTR pszKey);
void IBindCtx_RevokeObjectParam_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindCtx_SetBindOptions_Proxy (IBindCtx* This, BIND_OPTS* pbindopts);
HRESULT IBindCtx_SetBindOptions_Stub (IBindCtx* This, BIND_OPTS2* pbindopts);
HRESULT IBindCtx_GetBindOptions_Proxy (IBindCtx* This, BIND_OPTS* pbindopts);
HRESULT IBindCtx_GetBindOptions_Stub (IBindCtx* This, BIND_OPTS2* pbindopts);

alias LPENUMMONIKER = IEnumMoniker*;
extern __gshared const GUID IID_IEnumMoniker;

struct IEnumMonikerVtbl
{
    HRESULT function (IEnumMoniker* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumMoniker* This) AddRef;

    ULONG function (IEnumMoniker* This) Release;

    HRESULT function (IEnumMoniker* This, ULONG celt, IMoniker** rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumMoniker* This, ULONG celt) Skip;

    HRESULT function (IEnumMoniker* This) Reset;

    HRESULT function (IEnumMoniker* This, IEnumMoniker** ppenum) Clone;
}

struct IEnumMoniker
{
    IEnumMonikerVtbl* lpVtbl;
}

HRESULT IEnumMoniker_RemoteNext_Proxy (IEnumMoniker* This, ULONG celt, IMoniker** rgelt, ULONG* pceltFetched);
void IEnumMoniker_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Skip_Proxy (IEnumMoniker* This, ULONG celt);
void IEnumMoniker_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Reset_Proxy (IEnumMoniker* This);
void IEnumMoniker_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Clone_Proxy (IEnumMoniker* This, IEnumMoniker** ppenum);
void IEnumMoniker_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumMoniker_Next_Proxy (IEnumMoniker* This, ULONG celt, IMoniker** rgelt, ULONG* pceltFetched);
HRESULT IEnumMoniker_Next_Stub (IEnumMoniker* This, ULONG celt, IMoniker** rgelt, ULONG* pceltFetched);

alias LPRUNNABLEOBJECT = IRunnableObject*;
extern __gshared const GUID IID_IRunnableObject;

struct IRunnableObjectVtbl
{
    HRESULT function (IRunnableObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRunnableObject* This) AddRef;

    ULONG function (IRunnableObject* This) Release;

    HRESULT function (IRunnableObject* This, LPCLSID lpClsid) GetRunningClass;

    HRESULT function (IRunnableObject* This, LPBINDCTX pbc) Run;

    WINBOOL function (IRunnableObject* This) IsRunning;

    HRESULT function (IRunnableObject* This, WINBOOL fLock, WINBOOL fLastUnlockCloses) LockRunning;

    HRESULT function (IRunnableObject* This, WINBOOL fContained) SetContainedObject;
}

struct IRunnableObject
{
    IRunnableObjectVtbl* lpVtbl;
}

HRESULT IRunnableObject_GetRunningClass_Proxy (IRunnableObject* This, LPCLSID lpClsid);
void IRunnableObject_GetRunningClass_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunnableObject_Run_Proxy (IRunnableObject* This, LPBINDCTX pbc);
void IRunnableObject_Run_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunnableObject_RemoteIsRunning_Proxy (IRunnableObject* This);
void IRunnableObject_RemoteIsRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunnableObject_LockRunning_Proxy (IRunnableObject* This, WINBOOL fLock, WINBOOL fLastUnlockCloses);
void IRunnableObject_LockRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunnableObject_SetContainedObject_Proxy (IRunnableObject* This, WINBOOL fContained);
void IRunnableObject_SetContainedObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
WINBOOL IRunnableObject_IsRunning_Proxy (IRunnableObject* This);
HRESULT IRunnableObject_IsRunning_Stub (IRunnableObject* This);

alias LPRUNNINGOBJECTTABLE = IRunningObjectTable*;
extern __gshared const GUID IID_IRunningObjectTable;

struct IRunningObjectTableVtbl
{
    HRESULT function (IRunningObjectTable* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRunningObjectTable* This) AddRef;

    ULONG function (IRunningObjectTable* This) Release;

    HRESULT function (IRunningObjectTable* This, DWORD grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, DWORD* pdwRegister) Register;

    HRESULT function (IRunningObjectTable* This, DWORD dwRegister) Revoke;

    HRESULT function (IRunningObjectTable* This, IMoniker* pmkObjectName) IsRunning;

    HRESULT function (IRunningObjectTable* This, IMoniker* pmkObjectName, IUnknown** ppunkObject) GetObjectA;

    HRESULT function (IRunningObjectTable* This, DWORD dwRegister, FILETIME* pfiletime) NoteChangeTime;

    HRESULT function (IRunningObjectTable* This, IMoniker* pmkObjectName, FILETIME* pfiletime) GetTimeOfLastChange;

    HRESULT function (IRunningObjectTable* This, IEnumMoniker** ppenumMoniker) EnumRunning;
}

struct IRunningObjectTable
{
    IRunningObjectTableVtbl* lpVtbl;
}

HRESULT IRunningObjectTable_Register_Proxy (IRunningObjectTable* This, DWORD grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, DWORD* pdwRegister);
void IRunningObjectTable_Register_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_Revoke_Proxy (IRunningObjectTable* This, DWORD dwRegister);
void IRunningObjectTable_Revoke_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_IsRunning_Proxy (IRunningObjectTable* This, IMoniker* pmkObjectName);
void IRunningObjectTable_IsRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_GetObject_Proxy (IRunningObjectTable* This, IMoniker* pmkObjectName, IUnknown** ppunkObject);
void IRunningObjectTable_GetObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_NoteChangeTime_Proxy (IRunningObjectTable* This, DWORD dwRegister, FILETIME* pfiletime);
void IRunningObjectTable_NoteChangeTime_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_GetTimeOfLastChange_Proxy (IRunningObjectTable* This, IMoniker* pmkObjectName, FILETIME* pfiletime);
void IRunningObjectTable_GetTimeOfLastChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRunningObjectTable_EnumRunning_Proxy (IRunningObjectTable* This, IEnumMoniker** ppenumMoniker);
void IRunningObjectTable_EnumRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPPERSIST = IPersist*;
extern __gshared const GUID IID_IPersist;

struct IPersistVtbl
{
    HRESULT function (IPersist* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPersist* This) AddRef;

    ULONG function (IPersist* This) Release;

    HRESULT function (IPersist* This, CLSID* pClassID) GetClassID;
}

struct IPersist
{
    IPersistVtbl* lpVtbl;
}

HRESULT IPersist_GetClassID_Proxy (IPersist* This, CLSID* pClassID);
void IPersist_GetClassID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPPERSISTSTREAM = IPersistStream*;
extern __gshared const GUID IID_IPersistStream;

struct IPersistStreamVtbl
{
    HRESULT function (IPersistStream* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPersistStream* This) AddRef;

    ULONG function (IPersistStream* This) Release;

    HRESULT function (IPersistStream* This, CLSID* pClassID) GetClassID;

    HRESULT function (IPersistStream* This) IsDirty;

    HRESULT function (IPersistStream* This, IStream* pStm) Load;

    HRESULT function (IPersistStream* This, IStream* pStm, WINBOOL fClearDirty) Save;

    HRESULT function (IPersistStream* This, ULARGE_INTEGER* pcbSize) GetSizeMax;
}

struct IPersistStream
{
    IPersistStreamVtbl* lpVtbl;
}

HRESULT IPersistStream_IsDirty_Proxy (IPersistStream* This);
void IPersistStream_IsDirty_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStream_Load_Proxy (IPersistStream* This, IStream* pStm);
void IPersistStream_Load_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStream_Save_Proxy (IPersistStream* This, IStream* pStm, WINBOOL fClearDirty);
void IPersistStream_Save_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStream_GetSizeMax_Proxy (IPersistStream* This, ULARGE_INTEGER* pcbSize);
void IPersistStream_GetSizeMax_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPMONIKER = IMoniker*;

enum tagMKSYS
{
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10
}

alias MKSYS = tagMKSYS;

enum tagMKREDUCE
{
    MKRREDUCE_ONE = 3 << 16,
    MKRREDUCE_TOUSER = 2 << 16,
    MKRREDUCE_THROUGHUSER = 1 << 16,
    MKRREDUCE_ALL = 0
}

alias MKRREDUCE = tagMKREDUCE;
extern __gshared const GUID IID_IMoniker;

struct IMonikerVtbl
{
    HRESULT function (IMoniker* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMoniker* This) AddRef;

    ULONG function (IMoniker* This) Release;

    HRESULT function (IMoniker* This, CLSID* pClassID) GetClassID;

    HRESULT function (IMoniker* This) IsDirty;

    HRESULT function (IMoniker* This, IStream* pStm) Load;

    HRESULT function (IMoniker* This, IStream* pStm, WINBOOL fClearDirty) Save;

    HRESULT function (IMoniker* This, ULARGE_INTEGER* pcbSize) GetSizeMax;

    HRESULT function (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riidResult, void** ppvResult) BindToObject;

    HRESULT function (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riid, void** ppvObj) BindToStorage;

    HRESULT function (IMoniker* This, IBindCtx* pbc, DWORD dwReduceHowFar, IMoniker** ppmkToLeft, IMoniker** ppmkReduced) Reduce;

    HRESULT function (IMoniker* This, IMoniker* pmkRight, WINBOOL fOnlyIfNotGeneric, IMoniker** ppmkComposite) ComposeWith;

    HRESULT function (IMoniker* This, WINBOOL fForward, IEnumMoniker** ppenumMoniker) Enum;

    HRESULT function (IMoniker* This, IMoniker* pmkOtherMoniker) IsEqual;

    HRESULT function (IMoniker* This, DWORD* pdwHash) Hash;

    HRESULT function (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning) IsRunning;

    HRESULT function (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME* pFileTime) GetTimeOfLastChange;

    HRESULT function (IMoniker* This, IMoniker** ppmk) Inverse;

    HRESULT function (IMoniker* This, IMoniker* pmkOther, IMoniker** ppmkPrefix) CommonPrefixWith;

    HRESULT function (IMoniker* This, IMoniker* pmkOther, IMoniker** ppmkRelPath) RelativePathTo;

    HRESULT function (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, LPOLESTR* ppszDisplayName) GetDisplayName;

    HRESULT function (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, LPOLESTR pszDisplayName, ULONG* pchEaten, IMoniker** ppmkOut) ParseDisplayName;

    HRESULT function (IMoniker* This, DWORD* pdwMksys) IsSystemMoniker;
}

struct IMoniker
{
    IMonikerVtbl* lpVtbl;
}

HRESULT IMoniker_RemoteBindToObject_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riidResult, IUnknown** ppvResult);
void IMoniker_RemoteBindToObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_RemoteBindToStorage_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riid, IUnknown** ppvObj);
void IMoniker_RemoteBindToStorage_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_Reduce_Proxy (IMoniker* This, IBindCtx* pbc, DWORD dwReduceHowFar, IMoniker** ppmkToLeft, IMoniker** ppmkReduced);
void IMoniker_Reduce_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_ComposeWith_Proxy (IMoniker* This, IMoniker* pmkRight, WINBOOL fOnlyIfNotGeneric, IMoniker** ppmkComposite);
void IMoniker_ComposeWith_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_Enum_Proxy (IMoniker* This, WINBOOL fForward, IEnumMoniker** ppenumMoniker);
void IMoniker_Enum_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_IsEqual_Proxy (IMoniker* This, IMoniker* pmkOtherMoniker);
void IMoniker_IsEqual_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_Hash_Proxy (IMoniker* This, DWORD* pdwHash);
void IMoniker_Hash_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_IsRunning_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning);
void IMoniker_IsRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_GetTimeOfLastChange_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME* pFileTime);
void IMoniker_GetTimeOfLastChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_Inverse_Proxy (IMoniker* This, IMoniker** ppmk);
void IMoniker_Inverse_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_CommonPrefixWith_Proxy (IMoniker* This, IMoniker* pmkOther, IMoniker** ppmkPrefix);
void IMoniker_CommonPrefixWith_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_RelativePathTo_Proxy (IMoniker* This, IMoniker* pmkOther, IMoniker** ppmkRelPath);
void IMoniker_RelativePathTo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_GetDisplayName_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, LPOLESTR* ppszDisplayName);
void IMoniker_GetDisplayName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_ParseDisplayName_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, LPOLESTR pszDisplayName, ULONG* pchEaten, IMoniker** ppmkOut);
void IMoniker_ParseDisplayName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_IsSystemMoniker_Proxy (IMoniker* This, DWORD* pdwMksys);
void IMoniker_IsSystemMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IMoniker_BindToObject_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riidResult, void** ppvResult);
HRESULT IMoniker_BindToObject_Stub (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riidResult, IUnknown** ppvResult);
HRESULT IMoniker_BindToStorage_Proxy (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riid, void** ppvObj);
HRESULT IMoniker_BindToStorage_Stub (IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, const IID* riid, IUnknown** ppvObj);

extern __gshared const GUID IID_IROTData;

struct IROTDataVtbl
{
    HRESULT function (IROTData* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IROTData* This) AddRef;

    ULONG function (IROTData* This) Release;

    HRESULT function (IROTData* This, ubyte* pbData, ULONG cbMax, ULONG* pcbData) GetComparisonData;
}

struct IROTData
{
    IROTDataVtbl* lpVtbl;
}

HRESULT IROTData_GetComparisonData_Proxy (IROTData* This, ubyte* pbData, ULONG cbMax, ULONG* pcbData);
void IROTData_GetComparisonData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPENUMSTATSTG = IEnumSTATSTG*;
extern __gshared const GUID IID_IEnumSTATSTG;

struct IEnumSTATSTGVtbl
{
    HRESULT function (IEnumSTATSTG* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumSTATSTG* This) AddRef;

    ULONG function (IEnumSTATSTG* This) Release;

    HRESULT function (IEnumSTATSTG* This, ULONG celt, STATSTG* rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumSTATSTG* This, ULONG celt) Skip;

    HRESULT function (IEnumSTATSTG* This) Reset;

    HRESULT function (IEnumSTATSTG* This, IEnumSTATSTG** ppenum) Clone;
}

struct IEnumSTATSTG
{
    IEnumSTATSTGVtbl* lpVtbl;
}

HRESULT IEnumSTATSTG_RemoteNext_Proxy (IEnumSTATSTG* This, ULONG celt, STATSTG* rgelt, ULONG* pceltFetched);
void IEnumSTATSTG_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Skip_Proxy (IEnumSTATSTG* This, ULONG celt);
void IEnumSTATSTG_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Reset_Proxy (IEnumSTATSTG* This);
void IEnumSTATSTG_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Clone_Proxy (IEnumSTATSTG* This, IEnumSTATSTG** ppenum);
void IEnumSTATSTG_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATSTG_Next_Proxy (IEnumSTATSTG* This, ULONG celt, STATSTG* rgelt, ULONG* pceltFetched);
HRESULT IEnumSTATSTG_Next_Stub (IEnumSTATSTG* This, ULONG celt, STATSTG* rgelt, ULONG* pceltFetched);

alias LPSTORAGE = IStorage*;

struct tagRemSNB
{
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR[1] rgString;
}

alias RemSNB = tagRemSNB;
alias wireSNB = tagRemSNB*;
alias SNB = ushort**;
extern __gshared const GUID IID_IStorage;

struct IStorageVtbl
{
    HRESULT function (IStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IStorage* This) AddRef;

    ULONG function (IStorage* This) Release;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream** ppstm) CreateStream;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName, void* reserved1, DWORD grfMode, DWORD reserved2, IStream** ppstm) OpenStream;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage** ppstg) CreateStorage;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstg) OpenStorage;

    HRESULT function (IStorage* This, DWORD ciidExclude, const(IID)* rgiidExclude, SNB snbExclude, IStorage* pstgDest) CopyTo;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName, IStorage* pstgDest, const(OLECHAR)* pwcsNewName, DWORD grfFlags) MoveElementTo;

    HRESULT function (IStorage* This, DWORD grfCommitFlags) Commit;

    HRESULT function (IStorage* This) Revert;

    HRESULT function (IStorage* This, DWORD reserved1, void* reserved2, DWORD reserved3, IEnumSTATSTG** ppenum) EnumElements;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName) DestroyElement;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsOldName, const(OLECHAR)* pwcsNewName) RenameElement;

    HRESULT function (IStorage* This, const(OLECHAR)* pwcsName, const(FILETIME)* pctime, const(FILETIME)* patime, const(FILETIME)* pmtime) SetElementTimes;

    HRESULT function (IStorage* This, const IID* clsid) SetClass;

    HRESULT function (IStorage* This, DWORD grfStateBits, DWORD grfMask) SetStateBits;

    HRESULT function (IStorage* This, STATSTG* pstatstg, DWORD grfStatFlag) Stat;
}

struct IStorage
{
    IStorageVtbl* lpVtbl;
}

HRESULT IStorage_CreateStream_Proxy (IStorage* This, const(OLECHAR)* pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream** ppstm);
void IStorage_CreateStream_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_RemoteOpenStream_Proxy (IStorage* This, const(OLECHAR)* pwcsName, ULONG cbReserved1, ubyte* reserved1, DWORD grfMode, DWORD reserved2, IStream** ppstm);
void IStorage_RemoteOpenStream_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_CreateStorage_Proxy (IStorage* This, const(OLECHAR)* pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage** ppstg);
void IStorage_CreateStorage_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_OpenStorage_Proxy (IStorage* This, const(OLECHAR)* pwcsName, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstg);
void IStorage_OpenStorage_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_RemoteCopyTo_Proxy (IStorage* This, DWORD ciidExclude, const(IID)* rgiidExclude, SNB snbExclude, IStorage* pstgDest);
void IStorage_RemoteCopyTo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_MoveElementTo_Proxy (IStorage* This, const(OLECHAR)* pwcsName, IStorage* pstgDest, const(OLECHAR)* pwcsNewName, DWORD grfFlags);
void IStorage_MoveElementTo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_Commit_Proxy (IStorage* This, DWORD grfCommitFlags);
void IStorage_Commit_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_Revert_Proxy (IStorage* This);
void IStorage_Revert_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_RemoteEnumElements_Proxy (IStorage* This, DWORD reserved1, ULONG cbReserved2, ubyte* reserved2, DWORD reserved3, IEnumSTATSTG** ppenum);
void IStorage_RemoteEnumElements_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_DestroyElement_Proxy (IStorage* This, const(OLECHAR)* pwcsName);
void IStorage_DestroyElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_RenameElement_Proxy (IStorage* This, const(OLECHAR)* pwcsOldName, const(OLECHAR)* pwcsNewName);
void IStorage_RenameElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_SetElementTimes_Proxy (IStorage* This, const(OLECHAR)* pwcsName, const(FILETIME)* pctime, const(FILETIME)* patime, const(FILETIME)* pmtime);
void IStorage_SetElementTimes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_SetClass_Proxy (IStorage* This, const IID* clsid);
void IStorage_SetClass_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_SetStateBits_Proxy (IStorage* This, DWORD grfStateBits, DWORD grfMask);
void IStorage_SetStateBits_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_Stat_Proxy (IStorage* This, STATSTG* pstatstg, DWORD grfStatFlag);
void IStorage_Stat_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IStorage_OpenStream_Proxy (IStorage* This, const(OLECHAR)* pwcsName, void* reserved1, DWORD grfMode, DWORD reserved2, IStream** ppstm);
HRESULT IStorage_OpenStream_Stub (IStorage* This, const(OLECHAR)* pwcsName, ULONG cbReserved1, ubyte* reserved1, DWORD grfMode, DWORD reserved2, IStream** ppstm);
HRESULT IStorage_CopyTo_Proxy (IStorage* This, DWORD ciidExclude, const(IID)* rgiidExclude, SNB snbExclude, IStorage* pstgDest);
HRESULT IStorage_CopyTo_Stub (IStorage* This, DWORD ciidExclude, const(IID)* rgiidExclude, SNB snbExclude, IStorage* pstgDest);
HRESULT IStorage_EnumElements_Proxy (IStorage* This, DWORD reserved1, void* reserved2, DWORD reserved3, IEnumSTATSTG** ppenum);
HRESULT IStorage_EnumElements_Stub (IStorage* This, DWORD reserved1, ULONG cbReserved2, ubyte* reserved2, DWORD reserved3, IEnumSTATSTG** ppenum);

alias LPPERSISTFILE = IPersistFile*;
extern __gshared const GUID IID_IPersistFile;

struct IPersistFileVtbl
{
    HRESULT function (IPersistFile* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPersistFile* This) AddRef;

    ULONG function (IPersistFile* This) Release;

    HRESULT function (IPersistFile* This, CLSID* pClassID) GetClassID;

    HRESULT function (IPersistFile* This) IsDirty;

    HRESULT function (IPersistFile* This, LPCOLESTR pszFileName, DWORD dwMode) Load;

    HRESULT function (IPersistFile* This, LPCOLESTR pszFileName, WINBOOL fRemember) Save;

    HRESULT function (IPersistFile* This, LPCOLESTR pszFileName) SaveCompleted;

    HRESULT function (IPersistFile* This, LPOLESTR* ppszFileName) GetCurFile;
}

struct IPersistFile
{
    IPersistFileVtbl* lpVtbl;
}

HRESULT IPersistFile_IsDirty_Proxy (IPersistFile* This);
void IPersistFile_IsDirty_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistFile_Load_Proxy (IPersistFile* This, LPCOLESTR pszFileName, DWORD dwMode);
void IPersistFile_Load_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistFile_Save_Proxy (IPersistFile* This, LPCOLESTR pszFileName, WINBOOL fRemember);
void IPersistFile_Save_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistFile_SaveCompleted_Proxy (IPersistFile* This, LPCOLESTR pszFileName);
void IPersistFile_SaveCompleted_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistFile_GetCurFile_Proxy (IPersistFile* This, LPOLESTR* ppszFileName);
void IPersistFile_GetCurFile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPPERSISTSTORAGE = IPersistStorage*;
extern __gshared const GUID IID_IPersistStorage;

struct IPersistStorageVtbl
{
    HRESULT function (IPersistStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPersistStorage* This) AddRef;

    ULONG function (IPersistStorage* This) Release;

    HRESULT function (IPersistStorage* This, CLSID* pClassID) GetClassID;

    HRESULT function (IPersistStorage* This) IsDirty;

    HRESULT function (IPersistStorage* This, IStorage* pStg) InitNew;

    HRESULT function (IPersistStorage* This, IStorage* pStg) Load;

    HRESULT function (IPersistStorage* This, IStorage* pStgSave, WINBOOL fSameAsLoad) Save;

    HRESULT function (IPersistStorage* This, IStorage* pStgNew) SaveCompleted;

    HRESULT function (IPersistStorage* This) HandsOffStorage;
}

struct IPersistStorage
{
    IPersistStorageVtbl* lpVtbl;
}

HRESULT IPersistStorage_IsDirty_Proxy (IPersistStorage* This);
void IPersistStorage_IsDirty_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStorage_InitNew_Proxy (IPersistStorage* This, IStorage* pStg);
void IPersistStorage_InitNew_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStorage_Load_Proxy (IPersistStorage* This, IStorage* pStg);
void IPersistStorage_Load_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStorage_Save_Proxy (IPersistStorage* This, IStorage* pStgSave, WINBOOL fSameAsLoad);
void IPersistStorage_Save_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStorage_SaveCompleted_Proxy (IPersistStorage* This, IStorage* pStgNew);
void IPersistStorage_SaveCompleted_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistStorage_HandsOffStorage_Proxy (IPersistStorage* This);
void IPersistStorage_HandsOffStorage_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPLOCKBYTES = ILockBytes*;
extern __gshared const GUID IID_ILockBytes;

struct ILockBytesVtbl
{
    HRESULT function (ILockBytes* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ILockBytes* This) AddRef;

    ULONG function (ILockBytes* This) Release;

    HRESULT function (ILockBytes* This, ULARGE_INTEGER ulOffset, void* pv, ULONG cb, ULONG* pcbRead) ReadAt;

    HRESULT function (ILockBytes* This, ULARGE_INTEGER ulOffset, const(void)* pv, ULONG cb, ULONG* pcbWritten) WriteAt;

    HRESULT function (ILockBytes* This) Flush;

    HRESULT function (ILockBytes* This, ULARGE_INTEGER cb) SetSize;

    HRESULT function (ILockBytes* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) LockRegion;

    HRESULT function (ILockBytes* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType) UnlockRegion;

    HRESULT function (ILockBytes* This, STATSTG* pstatstg, DWORD grfStatFlag) Stat;
}

struct ILockBytes
{
    ILockBytesVtbl* lpVtbl;
}

HRESULT ILockBytes_RemoteReadAt_Proxy (ILockBytes* This, ULARGE_INTEGER ulOffset, ubyte* pv, ULONG cb, ULONG* pcbRead);
void ILockBytes_RemoteReadAt_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_RemoteWriteAt_Proxy (ILockBytes* This, ULARGE_INTEGER ulOffset, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);
void ILockBytes_RemoteWriteAt_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_Flush_Proxy (ILockBytes* This);
void ILockBytes_Flush_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_SetSize_Proxy (ILockBytes* This, ULARGE_INTEGER cb);
void ILockBytes_SetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_LockRegion_Proxy (ILockBytes* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
void ILockBytes_LockRegion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_UnlockRegion_Proxy (ILockBytes* This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
void ILockBytes_UnlockRegion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_Stat_Proxy (ILockBytes* This, STATSTG* pstatstg, DWORD grfStatFlag);
void ILockBytes_Stat_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILockBytes_ReadAt_Proxy (ILockBytes* This, ULARGE_INTEGER ulOffset, void* pv, ULONG cb, ULONG* pcbRead);
HRESULT ILockBytes_ReadAt_Stub (ILockBytes* This, ULARGE_INTEGER ulOffset, ubyte* pv, ULONG cb, ULONG* pcbRead);
HRESULT ILockBytes_WriteAt_Proxy (ILockBytes* This, ULARGE_INTEGER ulOffset, const(void)* pv, ULONG cb, ULONG* pcbWritten);
HRESULT ILockBytes_WriteAt_Stub (ILockBytes* This, ULARGE_INTEGER ulOffset, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);

alias LPENUMFORMATETC = IEnumFORMATETC*;

struct tagDVTARGETDEVICE
{
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE[1] tdData;
}

alias DVTARGETDEVICE = tagDVTARGETDEVICE;
alias LPCLIPFORMAT = ushort*;

struct tagFORMATETC
{
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE* ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
}

alias FORMATETC = tagFORMATETC;
alias LPFORMATETC = tagFORMATETC*;
extern __gshared const GUID IID_IEnumFORMATETC;

struct IEnumFORMATETCVtbl
{
    HRESULT function (IEnumFORMATETC* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumFORMATETC* This) AddRef;

    ULONG function (IEnumFORMATETC* This) Release;

    HRESULT function (IEnumFORMATETC* This, ULONG celt, FORMATETC* rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumFORMATETC* This, ULONG celt) Skip;

    HRESULT function (IEnumFORMATETC* This) Reset;

    HRESULT function (IEnumFORMATETC* This, IEnumFORMATETC** ppenum) Clone;
}

struct IEnumFORMATETC
{
    IEnumFORMATETCVtbl* lpVtbl;
}

HRESULT IEnumFORMATETC_RemoteNext_Proxy (IEnumFORMATETC* This, ULONG celt, FORMATETC* rgelt, ULONG* pceltFetched);
void IEnumFORMATETC_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Skip_Proxy (IEnumFORMATETC* This, ULONG celt);
void IEnumFORMATETC_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Reset_Proxy (IEnumFORMATETC* This);
void IEnumFORMATETC_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Clone_Proxy (IEnumFORMATETC* This, IEnumFORMATETC** ppenum);
void IEnumFORMATETC_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumFORMATETC_Next_Proxy (IEnumFORMATETC* This, ULONG celt, FORMATETC* rgelt, ULONG* pceltFetched);
HRESULT IEnumFORMATETC_Next_Stub (IEnumFORMATETC* This, ULONG celt, FORMATETC* rgelt, ULONG* pceltFetched);

alias LPENUMSTATDATA = IEnumSTATDATA*;

enum tagADVF
{
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
}

alias ADVF = tagADVF;

struct tagSTATDATA
{
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink* pAdvSink;
    DWORD dwConnection;
}

alias STATDATA = tagSTATDATA;
alias LPSTATDATA = tagSTATDATA*;
extern __gshared const GUID IID_IEnumSTATDATA;

struct IEnumSTATDATAVtbl
{
    HRESULT function (IEnumSTATDATA* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumSTATDATA* This) AddRef;

    ULONG function (IEnumSTATDATA* This) Release;

    HRESULT function (IEnumSTATDATA* This, ULONG celt, STATDATA* rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumSTATDATA* This, ULONG celt) Skip;

    HRESULT function (IEnumSTATDATA* This) Reset;

    HRESULT function (IEnumSTATDATA* This, IEnumSTATDATA** ppenum) Clone;
}

struct IEnumSTATDATA
{
    IEnumSTATDATAVtbl* lpVtbl;
}

HRESULT IEnumSTATDATA_RemoteNext_Proxy (IEnumSTATDATA* This, ULONG celt, STATDATA* rgelt, ULONG* pceltFetched);
void IEnumSTATDATA_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Skip_Proxy (IEnumSTATDATA* This, ULONG celt);
void IEnumSTATDATA_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Reset_Proxy (IEnumSTATDATA* This);
void IEnumSTATDATA_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Clone_Proxy (IEnumSTATDATA* This, IEnumSTATDATA** ppenum);
void IEnumSTATDATA_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATDATA_Next_Proxy (IEnumSTATDATA* This, ULONG celt, STATDATA* rgelt, ULONG* pceltFetched);
HRESULT IEnumSTATDATA_Next_Stub (IEnumSTATDATA* This, ULONG celt, STATDATA* rgelt, ULONG* pceltFetched);

alias LPROOTSTORAGE = IRootStorage*;
extern __gshared const GUID IID_IRootStorage;

struct IRootStorageVtbl
{
    HRESULT function (IRootStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRootStorage* This) AddRef;

    ULONG function (IRootStorage* This) Release;

    HRESULT function (IRootStorage* This, LPOLESTR pszFile) SwitchToFile;
}

struct IRootStorage
{
    IRootStorageVtbl* lpVtbl;
}

HRESULT IRootStorage_SwitchToFile_Proxy (IRootStorage* This, LPOLESTR pszFile);
void IRootStorage_SwitchToFile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPADVISESINK = IAdviseSink*;

enum tagTYMED
{
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
}

alias TYMED = tagTYMED;

struct tagRemSTGMEDIUM
{
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    ubyte[1] data;
}

alias RemSTGMEDIUM = tagRemSTGMEDIUM;

struct tagSTGMEDIUM
{
    DWORD tymed;

    union
    {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream* pstm;
        IStorage* pstg;
    }

    IUnknown* pUnkForRelease;
}

alias uSTGMEDIUM = tagSTGMEDIUM;

struct _GDI_OBJECT
{
    DWORD ObjectType;

    union _Anonymous_93
    {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
    }

    _Anonymous_93 u;
}

alias GDI_OBJECT = _GDI_OBJECT;

struct _userSTGMEDIUM
{
    IUnknown* pUnkForRelease;
}

alias userSTGMEDIUM = _userSTGMEDIUM;
alias wireSTGMEDIUM = _userSTGMEDIUM*;
alias STGMEDIUM = tagSTGMEDIUM;
alias wireASYNC_STGMEDIUM = _userSTGMEDIUM*;
alias ASYNC_STGMEDIUM = tagSTGMEDIUM;
alias LPSTGMEDIUM = tagSTGMEDIUM*;

struct _userFLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
}

alias userFLAG_STGMEDIUM = _userFLAG_STGMEDIUM;
alias wireFLAG_STGMEDIUM = _userFLAG_STGMEDIUM*;

struct _FLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
}

alias FLAG_STGMEDIUM = _FLAG_STGMEDIUM;
extern __gshared const GUID IID_IAdviseSink;

struct IAdviseSinkVtbl
{
    HRESULT function (IAdviseSink* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAdviseSink* This) AddRef;

    ULONG function (IAdviseSink* This) Release;

    void function (IAdviseSink* This, FORMATETC* pFormatetc, STGMEDIUM* pStgmed) OnDataChange;

    void function (IAdviseSink* This, DWORD dwAspect, LONG lindex) OnViewChange;

    void function (IAdviseSink* This, IMoniker* pmk) OnRename;

    void function (IAdviseSink* This) OnSave;

    void function (IAdviseSink* This) OnClose;
}

struct IAdviseSink
{
    IAdviseSinkVtbl* lpVtbl;
}

HRESULT IAdviseSink_RemoteOnDataChange_Proxy (IAdviseSink* This, FORMATETC* pFormatetc, ASYNC_STGMEDIUM* pStgmed);
void IAdviseSink_RemoteOnDataChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnViewChange_Proxy (IAdviseSink* This, DWORD dwAspect, LONG lindex);
void IAdviseSink_RemoteOnViewChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnRename_Proxy (IAdviseSink* This, IMoniker* pmk);
void IAdviseSink_RemoteOnRename_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnSave_Proxy (IAdviseSink* This);
void IAdviseSink_RemoteOnSave_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IAdviseSink_RemoteOnClose_Proxy (IAdviseSink* This);
void IAdviseSink_RemoteOnClose_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IAdviseSink_OnDataChange_Proxy (IAdviseSink* This, FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
HRESULT IAdviseSink_OnDataChange_Stub (IAdviseSink* This, FORMATETC* pFormatetc, ASYNC_STGMEDIUM* pStgmed);
void IAdviseSink_OnViewChange_Proxy (IAdviseSink* This, DWORD dwAspect, LONG lindex);
HRESULT IAdviseSink_OnViewChange_Stub (IAdviseSink* This, DWORD dwAspect, LONG lindex);
void IAdviseSink_OnRename_Proxy (IAdviseSink* This, IMoniker* pmk);
HRESULT IAdviseSink_OnRename_Stub (IAdviseSink* This, IMoniker* pmk);
void IAdviseSink_OnSave_Proxy (IAdviseSink* This);
HRESULT IAdviseSink_OnSave_Stub (IAdviseSink* This);
void IAdviseSink_OnClose_Proxy (IAdviseSink* This);
HRESULT IAdviseSink_OnClose_Stub (IAdviseSink* This);

extern __gshared const GUID IID_AsyncIAdviseSink;

struct AsyncIAdviseSinkVtbl
{
    HRESULT function (AsyncIAdviseSink* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (AsyncIAdviseSink* This) AddRef;

    ULONG function (AsyncIAdviseSink* This) Release;

    void function (AsyncIAdviseSink* This, FORMATETC* pFormatetc, STGMEDIUM* pStgmed) Begin_OnDataChange;

    void function (AsyncIAdviseSink* This) Finish_OnDataChange;

    void function (AsyncIAdviseSink* This, DWORD dwAspect, LONG lindex) Begin_OnViewChange;

    void function (AsyncIAdviseSink* This) Finish_OnViewChange;

    void function (AsyncIAdviseSink* This, IMoniker* pmk) Begin_OnRename;

    void function (AsyncIAdviseSink* This) Finish_OnRename;

    void function (AsyncIAdviseSink* This) Begin_OnSave;

    void function (AsyncIAdviseSink* This) Finish_OnSave;

    void function (AsyncIAdviseSink* This) Begin_OnClose;

    void function (AsyncIAdviseSink* This) Finish_OnClose;
}

struct AsyncIAdviseSink
{
    AsyncIAdviseSinkVtbl* lpVtbl;
}

HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy (IAdviseSink* This, FORMATETC* pFormatetc, ASYNC_STGMEDIUM* pStgmed);
void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy (IAdviseSink* This, FORMATETC* pFormatetc, ASYNC_STGMEDIUM* pStgmed);
void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy (IAdviseSink* This, DWORD dwAspect, LONG lindex);
void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy (IAdviseSink* This, DWORD dwAspect, LONG lindex);
void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy (IAdviseSink* This, IMoniker* pmk);
void AsyncIAdviseSink_Begin_RemoteOnRename_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy (IAdviseSink* This, IMoniker* pmk);
void AsyncIAdviseSink_Finish_RemoteOnRename_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy (IAdviseSink* This);
void AsyncIAdviseSink_Begin_RemoteOnSave_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy (IAdviseSink* This);
void AsyncIAdviseSink_Finish_RemoteOnSave_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy (IAdviseSink* This);
void AsyncIAdviseSink_Begin_RemoteOnClose_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy (IAdviseSink* This);
void AsyncIAdviseSink_Finish_RemoteOnClose_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void AsyncIAdviseSink_Begin_OnDataChange_Proxy (IAdviseSink* This, FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub (IAdviseSink* This, FORMATETC* pFormatetc, ASYNC_STGMEDIUM* pStgmed);
void AsyncIAdviseSink_Finish_OnDataChange_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub (IAdviseSink* This, FORMATETC* pFormatetc, ASYNC_STGMEDIUM* pStgmed);
void AsyncIAdviseSink_Begin_OnViewChange_Proxy (IAdviseSink* This, DWORD dwAspect, LONG lindex);
HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub (IAdviseSink* This, DWORD dwAspect, LONG lindex);
void AsyncIAdviseSink_Finish_OnViewChange_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub (IAdviseSink* This, DWORD dwAspect, LONG lindex);
void AsyncIAdviseSink_Begin_OnRename_Proxy (IAdviseSink* This, IMoniker* pmk);
HRESULT AsyncIAdviseSink_Begin_OnRename_Stub (IAdviseSink* This, IMoniker* pmk);
void AsyncIAdviseSink_Finish_OnRename_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnRename_Stub (IAdviseSink* This, IMoniker* pmk);
void AsyncIAdviseSink_Begin_OnSave_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Begin_OnSave_Stub (IAdviseSink* This);
void AsyncIAdviseSink_Finish_OnSave_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnSave_Stub (IAdviseSink* This);
void AsyncIAdviseSink_Begin_OnClose_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Begin_OnClose_Stub (IAdviseSink* This);
void AsyncIAdviseSink_Finish_OnClose_Proxy (IAdviseSink* This);
HRESULT AsyncIAdviseSink_Finish_OnClose_Stub (IAdviseSink* This);

alias LPADVISESINK2 = IAdviseSink2*;
extern __gshared const GUID IID_IAdviseSink2;

struct IAdviseSink2Vtbl
{
    HRESULT function (IAdviseSink2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAdviseSink2* This) AddRef;

    ULONG function (IAdviseSink2* This) Release;

    void function (IAdviseSink2* This, FORMATETC* pFormatetc, STGMEDIUM* pStgmed) OnDataChange;

    void function (IAdviseSink2* This, DWORD dwAspect, LONG lindex) OnViewChange;

    void function (IAdviseSink2* This, IMoniker* pmk) OnRename;

    void function (IAdviseSink2* This) OnSave;

    void function (IAdviseSink2* This) OnClose;

    void function (IAdviseSink2* This, IMoniker* pmk) OnLinkSrcChange;
}

struct IAdviseSink2
{
    IAdviseSink2Vtbl* lpVtbl;
}

HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy (IAdviseSink2* This, IMoniker* pmk);
void IAdviseSink2_RemoteOnLinkSrcChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void IAdviseSink2_OnLinkSrcChange_Proxy (IAdviseSink2* This, IMoniker* pmk);
HRESULT IAdviseSink2_OnLinkSrcChange_Stub (IAdviseSink2* This, IMoniker* pmk);

extern __gshared const GUID IID_AsyncIAdviseSink2;

struct AsyncIAdviseSink2Vtbl
{
    HRESULT function (AsyncIAdviseSink2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (AsyncIAdviseSink2* This) AddRef;

    ULONG function (AsyncIAdviseSink2* This) Release;

    void function (AsyncIAdviseSink2* This, FORMATETC* pFormatetc, STGMEDIUM* pStgmed) Begin_OnDataChange;

    void function (AsyncIAdviseSink2* This) Finish_OnDataChange;

    void function (AsyncIAdviseSink2* This, DWORD dwAspect, LONG lindex) Begin_OnViewChange;

    void function (AsyncIAdviseSink2* This) Finish_OnViewChange;

    void function (AsyncIAdviseSink2* This, IMoniker* pmk) Begin_OnRename;

    void function (AsyncIAdviseSink2* This) Finish_OnRename;

    void function (AsyncIAdviseSink2* This) Begin_OnSave;

    void function (AsyncIAdviseSink2* This) Finish_OnSave;

    void function (AsyncIAdviseSink2* This) Begin_OnClose;

    void function (AsyncIAdviseSink2* This) Finish_OnClose;

    void function (AsyncIAdviseSink2* This, IMoniker* pmk) Begin_OnLinkSrcChange;

    void function (AsyncIAdviseSink2* This) Finish_OnLinkSrcChange;
}

struct AsyncIAdviseSink2
{
    AsyncIAdviseSink2Vtbl* lpVtbl;
}

HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy (IAdviseSink2* This, IMoniker* pmk);
void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy (IAdviseSink2* This, IMoniker* pmk);
void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy (IAdviseSink2* This, IMoniker* pmk);
HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub (IAdviseSink2* This, IMoniker* pmk);
void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy (IAdviseSink2* This);
HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub (IAdviseSink2* This, IMoniker* pmk);

alias LPDATAOBJECT = IDataObject*;

enum tagDATADIR
{
    DATADIR_GET = 1,
    DATADIR_SET = 2
}

alias DATADIR = tagDATADIR;
extern __gshared const GUID IID_IDataObject;

struct IDataObjectVtbl
{
    HRESULT function (IDataObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDataObject* This) AddRef;

    ULONG function (IDataObject* This) Release;

    HRESULT function (IDataObject* This, FORMATETC* pformatetcIn, STGMEDIUM* pmedium) GetData;

    HRESULT function (IDataObject* This, FORMATETC* pformatetc, STGMEDIUM* pmedium) GetDataHere;

    HRESULT function (IDataObject* This, FORMATETC* pformatetc) QueryGetData;

    HRESULT function (IDataObject* This, FORMATETC* pformatectIn, FORMATETC* pformatetcOut) GetCanonicalFormatEtc;

    HRESULT function (IDataObject* This, FORMATETC* pformatetc, STGMEDIUM* pmedium, WINBOOL fRelease) SetData;

    HRESULT function (IDataObject* This, DWORD dwDirection, IEnumFORMATETC** ppenumFormatEtc) EnumFormatEtc;

    HRESULT function (IDataObject* This, FORMATETC* pformatetc, DWORD advf, IAdviseSink* pAdvSink, DWORD* pdwConnection) DAdvise;

    HRESULT function (IDataObject* This, DWORD dwConnection) DUnadvise;

    HRESULT function (IDataObject* This, IEnumSTATDATA** ppenumAdvise) EnumDAdvise;
}

struct IDataObject
{
    IDataObjectVtbl* lpVtbl;
}

HRESULT IDataObject_RemoteGetData_Proxy (IDataObject* This, FORMATETC* pformatetcIn, STGMEDIUM* pRemoteMedium);
void IDataObject_RemoteGetData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_RemoteGetDataHere_Proxy (IDataObject* This, FORMATETC* pformatetc, STGMEDIUM* pRemoteMedium);
void IDataObject_RemoteGetDataHere_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_QueryGetData_Proxy (IDataObject* This, FORMATETC* pformatetc);
void IDataObject_QueryGetData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_GetCanonicalFormatEtc_Proxy (IDataObject* This, FORMATETC* pformatectIn, FORMATETC* pformatetcOut);
void IDataObject_GetCanonicalFormatEtc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_RemoteSetData_Proxy (IDataObject* This, FORMATETC* pformatetc, FLAG_STGMEDIUM* pmedium, WINBOOL fRelease);
void IDataObject_RemoteSetData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_EnumFormatEtc_Proxy (IDataObject* This, DWORD dwDirection, IEnumFORMATETC** ppenumFormatEtc);
void IDataObject_EnumFormatEtc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_DAdvise_Proxy (IDataObject* This, FORMATETC* pformatetc, DWORD advf, IAdviseSink* pAdvSink, DWORD* pdwConnection);
void IDataObject_DAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_DUnadvise_Proxy (IDataObject* This, DWORD dwConnection);
void IDataObject_DUnadvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_EnumDAdvise_Proxy (IDataObject* This, IEnumSTATDATA** ppenumAdvise);
void IDataObject_EnumDAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataObject_GetData_Proxy (IDataObject* This, FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
HRESULT IDataObject_GetData_Stub (IDataObject* This, FORMATETC* pformatetcIn, STGMEDIUM* pRemoteMedium);
HRESULT IDataObject_GetDataHere_Proxy (IDataObject* This, FORMATETC* pformatetc, STGMEDIUM* pmedium);
HRESULT IDataObject_GetDataHere_Stub (IDataObject* This, FORMATETC* pformatetc, STGMEDIUM* pRemoteMedium);
HRESULT IDataObject_SetData_Proxy (IDataObject* This, FORMATETC* pformatetc, STGMEDIUM* pmedium, WINBOOL fRelease);
HRESULT IDataObject_SetData_Stub (IDataObject* This, FORMATETC* pformatetc, FLAG_STGMEDIUM* pmedium, WINBOOL fRelease);

alias LPDATAADVISEHOLDER = IDataAdviseHolder*;
extern __gshared const GUID IID_IDataAdviseHolder;

struct IDataAdviseHolderVtbl
{
    HRESULT function (IDataAdviseHolder* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDataAdviseHolder* This) AddRef;

    ULONG function (IDataAdviseHolder* This) Release;

    HRESULT function (IDataAdviseHolder* This, IDataObject* pDataObject, FORMATETC* pFetc, DWORD advf, IAdviseSink* pAdvise, DWORD* pdwConnection) Advise;

    HRESULT function (IDataAdviseHolder* This, DWORD dwConnection) Unadvise;

    HRESULT function (IDataAdviseHolder* This, IEnumSTATDATA** ppenumAdvise) EnumAdvise;

    HRESULT function (IDataAdviseHolder* This, IDataObject* pDataObject, DWORD dwReserved, DWORD advf) SendOnDataChange;
}

struct IDataAdviseHolder
{
    IDataAdviseHolderVtbl* lpVtbl;
}

HRESULT IDataAdviseHolder_Advise_Proxy (IDataAdviseHolder* This, IDataObject* pDataObject, FORMATETC* pFetc, DWORD advf, IAdviseSink* pAdvise, DWORD* pdwConnection);
void IDataAdviseHolder_Advise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataAdviseHolder_Unadvise_Proxy (IDataAdviseHolder* This, DWORD dwConnection);
void IDataAdviseHolder_Unadvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataAdviseHolder_EnumAdvise_Proxy (IDataAdviseHolder* This, IEnumSTATDATA** ppenumAdvise);
void IDataAdviseHolder_EnumAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataAdviseHolder_SendOnDataChange_Proxy (IDataAdviseHolder* This, IDataObject* pDataObject, DWORD dwReserved, DWORD advf);
void IDataAdviseHolder_SendOnDataChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPMESSAGEFILTER = IMessageFilter*;

enum tagCALLTYPE
{
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
}

alias CALLTYPE = tagCALLTYPE;

enum tagSERVERCALL
{
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
}

alias SERVERCALL = tagSERVERCALL;

enum tagPENDINGTYPE
{
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
}

alias PENDINGTYPE = tagPENDINGTYPE;

enum tagPENDINGMSG
{
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
}

alias PENDINGMSG = tagPENDINGMSG;

struct tagINTERFACEINFO
{
    IUnknown* pUnk;
    IID iid;
    WORD wMethod;
}

alias INTERFACEINFO = tagINTERFACEINFO;
alias LPINTERFACEINFO = tagINTERFACEINFO*;
extern __gshared const GUID IID_IMessageFilter;

struct IMessageFilterVtbl
{
    HRESULT function (IMessageFilter* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMessageFilter* This) AddRef;

    ULONG function (IMessageFilter* This) Release;

    DWORD function (IMessageFilter* This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo) HandleInComingCall;

    DWORD function (IMessageFilter* This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType) RetryRejectedCall;

    DWORD function (IMessageFilter* This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType) MessagePending;
}

struct IMessageFilter
{
    IMessageFilterVtbl* lpVtbl;
}

DWORD IMessageFilter_HandleInComingCall_Proxy (IMessageFilter* This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);
void IMessageFilter_HandleInComingCall_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
DWORD IMessageFilter_RetryRejectedCall_Proxy (IMessageFilter* This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);
void IMessageFilter_RetryRejectedCall_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
DWORD IMessageFilter_MessagePending_Proxy (IMessageFilter* This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);
void IMessageFilter_MessagePending_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const FMTID FMTID_SummaryInformation;

extern __gshared const FMTID FMTID_DocSummaryInformation;

extern __gshared const FMTID FMTID_UserDefinedProperties;

extern __gshared const FMTID FMTID_DiscardableInformation;

extern __gshared const FMTID FMTID_ImageSummaryInformation;

extern __gshared const FMTID FMTID_AudioSummaryInformation;

extern __gshared const FMTID FMTID_VideoSummaryInformation;

extern __gshared const FMTID FMTID_MediaFileSummaryInformation;

extern __gshared const GUID IID_IClassActivator;

struct IClassActivatorVtbl
{
    HRESULT function (IClassActivator* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IClassActivator* This) AddRef;

    ULONG function (IClassActivator* This) Release;

    HRESULT function (IClassActivator* This, const IID* rclsid, DWORD dwClassContext, LCID locale, const IID* riid, void** ppv) GetClassObject;
}

struct IClassActivator
{
    IClassActivatorVtbl* lpVtbl;
}

HRESULT IClassActivator_GetClassObject_Proxy (IClassActivator* This, const IID* rclsid, DWORD dwClassContext, LCID locale, const IID* riid, void** ppv);
void IClassActivator_GetClassObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IFillLockBytes;

struct IFillLockBytesVtbl
{
    HRESULT function (IFillLockBytes* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IFillLockBytes* This) AddRef;

    ULONG function (IFillLockBytes* This) Release;

    HRESULT function (IFillLockBytes* This, const(void)* pv, ULONG cb, ULONG* pcbWritten) FillAppend;

    HRESULT function (IFillLockBytes* This, ULARGE_INTEGER ulOffset, const(void)* pv, ULONG cb, ULONG* pcbWritten) FillAt;

    HRESULT function (IFillLockBytes* This, ULARGE_INTEGER ulSize) SetFillSize;

    HRESULT function (IFillLockBytes* This, WINBOOL bCanceled) Terminate;
}

struct IFillLockBytes
{
    IFillLockBytesVtbl* lpVtbl;
}

HRESULT IFillLockBytes_RemoteFillAppend_Proxy (IFillLockBytes* This, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);
void IFillLockBytes_RemoteFillAppend_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IFillLockBytes_RemoteFillAt_Proxy (IFillLockBytes* This, ULARGE_INTEGER ulOffset, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);
void IFillLockBytes_RemoteFillAt_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IFillLockBytes_SetFillSize_Proxy (IFillLockBytes* This, ULARGE_INTEGER ulSize);
void IFillLockBytes_SetFillSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IFillLockBytes_Terminate_Proxy (IFillLockBytes* This, WINBOOL bCanceled);
void IFillLockBytes_Terminate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IFillLockBytes_FillAppend_Proxy (IFillLockBytes* This, const(void)* pv, ULONG cb, ULONG* pcbWritten);
HRESULT IFillLockBytes_FillAppend_Stub (IFillLockBytes* This, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);
HRESULT IFillLockBytes_FillAt_Proxy (IFillLockBytes* This, ULARGE_INTEGER ulOffset, const(void)* pv, ULONG cb, ULONG* pcbWritten);
HRESULT IFillLockBytes_FillAt_Stub (IFillLockBytes* This, ULARGE_INTEGER ulOffset, const(ubyte)* pv, ULONG cb, ULONG* pcbWritten);

extern __gshared const GUID IID_IProgressNotify;

struct IProgressNotifyVtbl
{
    HRESULT function (IProgressNotify* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IProgressNotify* This) AddRef;

    ULONG function (IProgressNotify* This) Release;

    HRESULT function (IProgressNotify* This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, WINBOOL fAccurate, WINBOOL fOwner) OnProgress;
}

struct IProgressNotify
{
    IProgressNotifyVtbl* lpVtbl;
}

HRESULT IProgressNotify_OnProgress_Proxy (IProgressNotify* This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, WINBOOL fAccurate, WINBOOL fOwner);
void IProgressNotify_OnProgress_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

struct tagStorageLayout
{
    DWORD LayoutType;
    OLECHAR* pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
}

alias StorageLayout = tagStorageLayout;
extern __gshared const GUID IID_ILayoutStorage;

struct ILayoutStorageVtbl
{
    HRESULT function (ILayoutStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ILayoutStorage* This) AddRef;

    ULONG function (ILayoutStorage* This) Release;

    HRESULT function (ILayoutStorage* This, StorageLayout* pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag) LayoutScript;

    HRESULT function (ILayoutStorage* This) BeginMonitor;

    HRESULT function (ILayoutStorage* This) EndMonitor;

    HRESULT function (ILayoutStorage* This, OLECHAR* pwcsNewDfName) ReLayoutDocfile;

    HRESULT function (ILayoutStorage* This, ILockBytes* pILockBytes) ReLayoutDocfileOnILockBytes;
}

struct ILayoutStorage
{
    ILayoutStorageVtbl* lpVtbl;
}

HRESULT ILayoutStorage_LayoutScript_Proxy (ILayoutStorage* This, StorageLayout* pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);
void ILayoutStorage_LayoutScript_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILayoutStorage_BeginMonitor_Proxy (ILayoutStorage* This);
void ILayoutStorage_BeginMonitor_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILayoutStorage_EndMonitor_Proxy (ILayoutStorage* This);
void ILayoutStorage_EndMonitor_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILayoutStorage_ReLayoutDocfile_Proxy (ILayoutStorage* This, OLECHAR* pwcsNewDfName);
void ILayoutStorage_ReLayoutDocfile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy (ILayoutStorage* This, ILockBytes* pILockBytes);
void ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IBlockingLock;

struct IBlockingLockVtbl
{
    HRESULT function (IBlockingLock* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBlockingLock* This) AddRef;

    ULONG function (IBlockingLock* This) Release;

    HRESULT function (IBlockingLock* This, DWORD dwTimeout) Lock;

    HRESULT function (IBlockingLock* This) Unlock;
}

struct IBlockingLock
{
    IBlockingLockVtbl* lpVtbl;
}

HRESULT IBlockingLock_Lock_Proxy (IBlockingLock* This, DWORD dwTimeout);
void IBlockingLock_Lock_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBlockingLock_Unlock_Proxy (IBlockingLock* This);
void IBlockingLock_Unlock_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ITimeAndNoticeControl;

struct ITimeAndNoticeControlVtbl
{
    HRESULT function (ITimeAndNoticeControl* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITimeAndNoticeControl* This) AddRef;

    ULONG function (ITimeAndNoticeControl* This) Release;

    HRESULT function (ITimeAndNoticeControl* This, DWORD res1, DWORD res2) SuppressChanges;
}

struct ITimeAndNoticeControl
{
    ITimeAndNoticeControlVtbl* lpVtbl;
}

HRESULT ITimeAndNoticeControl_SuppressChanges_Proxy (ITimeAndNoticeControl* This, DWORD res1, DWORD res2);
void ITimeAndNoticeControl_SuppressChanges_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IOplockStorage;

struct IOplockStorageVtbl
{
    HRESULT function (IOplockStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOplockStorage* This) AddRef;

    ULONG function (IOplockStorage* This) Release;

    HRESULT function (IOplockStorage* This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID* riid, void** ppstgOpen) CreateStorageEx;

    HRESULT function (IOplockStorage* This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID* riid, void** ppstgOpen) OpenStorageEx;
}

struct IOplockStorage
{
    IOplockStorageVtbl* lpVtbl;
}

HRESULT IOplockStorage_CreateStorageEx_Proxy (IOplockStorage* This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID* riid, void** ppstgOpen);
void IOplockStorage_CreateStorageEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOplockStorage_OpenStorageEx_Proxy (IOplockStorage* This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID* riid, void** ppstgOpen);
void IOplockStorage_OpenStorageEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IDirectWriterLock;

struct IDirectWriterLockVtbl
{
    HRESULT function (IDirectWriterLock* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDirectWriterLock* This) AddRef;

    ULONG function (IDirectWriterLock* This) Release;

    HRESULT function (IDirectWriterLock* This, DWORD dwTimeout) WaitForWriteAccess;

    HRESULT function (IDirectWriterLock* This) ReleaseWriteAccess;

    HRESULT function (IDirectWriterLock* This) HaveWriteAccess;
}

struct IDirectWriterLock
{
    IDirectWriterLockVtbl* lpVtbl;
}

HRESULT IDirectWriterLock_WaitForWriteAccess_Proxy (IDirectWriterLock* This, DWORD dwTimeout);
void IDirectWriterLock_WaitForWriteAccess_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDirectWriterLock_ReleaseWriteAccess_Proxy (IDirectWriterLock* This);
void IDirectWriterLock_ReleaseWriteAccess_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDirectWriterLock_HaveWriteAccess_Proxy (IDirectWriterLock* This);
void IDirectWriterLock_HaveWriteAccess_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IUrlMon;

struct IUrlMonVtbl
{
    HRESULT function (IUrlMon* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IUrlMon* This) AddRef;

    ULONG function (IUrlMon* This) Release;

    HRESULT function (IUrlMon* This, const IID* rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx* pbc, DWORD dwClassContext, const IID* riid, DWORD flags) AsyncGetClassBits;
}

struct IUrlMon
{
    IUrlMonVtbl* lpVtbl;
}

HRESULT IUrlMon_AsyncGetClassBits_Proxy (IUrlMon* This, const IID* rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx* pbc, DWORD dwClassContext, const IID* riid, DWORD flags);
void IUrlMon_AsyncGetClassBits_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IForegroundTransfer;

struct IForegroundTransferVtbl
{
    HRESULT function (IForegroundTransfer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IForegroundTransfer* This) AddRef;

    ULONG function (IForegroundTransfer* This) Release;

    HRESULT function (IForegroundTransfer* This, void* lpvReserved) AllowForegroundTransfer;
}

struct IForegroundTransfer
{
    IForegroundTransferVtbl* lpVtbl;
}

HRESULT IForegroundTransfer_AllowForegroundTransfer_Proxy (IForegroundTransfer* This, void* lpvReserved);
void IForegroundTransfer_AllowForegroundTransfer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IThumbnailExtractor;

struct IThumbnailExtractorVtbl
{
    HRESULT function (IThumbnailExtractor* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IThumbnailExtractor* This) AddRef;

    ULONG function (IThumbnailExtractor* This) Release;

    HRESULT function (IThumbnailExtractor* This, IStorage* pStg, ULONG ulLength, ULONG ulHeight, ULONG* pulOutputLength, ULONG* pulOutputHeight, HBITMAP* phOutputBitmap) ExtractThumbnail;

    HRESULT function (IThumbnailExtractor* This, IStorage* pStg) OnFileUpdated;
}

struct IThumbnailExtractor
{
    IThumbnailExtractorVtbl* lpVtbl;
}

HRESULT IThumbnailExtractor_ExtractThumbnail_Proxy (IThumbnailExtractor* This, IStorage* pStg, ULONG ulLength, ULONG ulHeight, ULONG* pulOutputLength, ULONG* pulOutputHeight, HBITMAP* phOutputBitmap);
void IThumbnailExtractor_ExtractThumbnail_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IThumbnailExtractor_OnFileUpdated_Proxy (IThumbnailExtractor* This, IStorage* pStg);
void IThumbnailExtractor_OnFileUpdated_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IDummyHICONIncluder;

struct IDummyHICONIncluderVtbl
{
    HRESULT function (IDummyHICONIncluder* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDummyHICONIncluder* This) AddRef;

    ULONG function (IDummyHICONIncluder* This) Release;

    HRESULT function (IDummyHICONIncluder* This, HICON h1, HDC h2) Dummy;
}

struct IDummyHICONIncluder
{
    IDummyHICONIncluderVtbl* lpVtbl;
}

HRESULT IDummyHICONIncluder_Dummy_Proxy (IDummyHICONIncluder* This, HICON h1, HDC h2);
void IDummyHICONIncluder_Dummy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

enum tagApplicationType
{
    ServerApplication = 0,
    LibraryApplication = 1
}

alias ApplicationType = tagApplicationType;

enum tagShutdownType
{
    IdleShutdown = 0,
    ForcedShutdown = 1
}

alias ShutdownType = tagShutdownType;

extern __gshared const GUID IID_IProcessLock;

struct IProcessLockVtbl
{
    HRESULT function (IProcessLock* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IProcessLock* This) AddRef;

    ULONG function (IProcessLock* This) Release;

    ULONG function (IProcessLock* This) AddRefOnProcess;

    ULONG function (IProcessLock* This) ReleaseRefOnProcess;
}

struct IProcessLock
{
    IProcessLockVtbl* lpVtbl;
}

ULONG IProcessLock_AddRefOnProcess_Proxy (IProcessLock* This);
void IProcessLock_AddRefOnProcess_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG IProcessLock_ReleaseRefOnProcess_Proxy (IProcessLock* This);
void IProcessLock_ReleaseRefOnProcess_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ISurrogateService;

struct ISurrogateServiceVtbl
{
    HRESULT function (ISurrogateService* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISurrogateService* This) AddRef;

    ULONG function (ISurrogateService* This) Release;

    HRESULT function (ISurrogateService* This, const GUID* rguidProcessID, IProcessLock* pProcessLock, WINBOOL* pfApplicationAware) Init;

    HRESULT function (ISurrogateService* This, const GUID* rguidApplID, ApplicationType appType) ApplicationLaunch;

    HRESULT function (ISurrogateService* This, const GUID* rguidApplID) ApplicationFree;

    HRESULT function (ISurrogateService* This, ULONG ulReserved) CatalogRefresh;

    HRESULT function (ISurrogateService* This, ShutdownType shutdownType) ProcessShutdown;
}

struct ISurrogateService
{
    ISurrogateServiceVtbl* lpVtbl;
}

HRESULT ISurrogateService_Init_Proxy (ISurrogateService* This, const GUID* rguidProcessID, IProcessLock* pProcessLock, WINBOOL* pfApplicationAware);
void ISurrogateService_Init_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISurrogateService_ApplicationLaunch_Proxy (ISurrogateService* This, const GUID* rguidApplID, ApplicationType appType);
void ISurrogateService_ApplicationLaunch_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISurrogateService_ApplicationFree_Proxy (ISurrogateService* This, const GUID* rguidApplID);
void ISurrogateService_ApplicationFree_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISurrogateService_CatalogRefresh_Proxy (ISurrogateService* This, ULONG ulReserved);
void ISurrogateService_CatalogRefresh_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISurrogateService_ProcessShutdown_Proxy (ISurrogateService* This, ShutdownType shutdownType);
void ISurrogateService_ProcessShutdown_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPINITIALIZESPY = IInitializeSpy*;
extern __gshared const GUID IID_IInitializeSpy;

struct IInitializeSpyVtbl
{
    HRESULT function (IInitializeSpy* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInitializeSpy* This) AddRef;

    ULONG function (IInitializeSpy* This) Release;

    HRESULT function (IInitializeSpy* This, DWORD dwCoInit, DWORD dwCurThreadAptRefs) PreInitialize;

    HRESULT function (IInitializeSpy* This, HRESULT hrCoInit, DWORD dwCoInit, DWORD dwNewThreadAptRefs) PostInitialize;

    HRESULT function (IInitializeSpy* This, DWORD dwCurThreadAptRefs) PreUninitialize;

    HRESULT function (IInitializeSpy* This, DWORD dwNewThreadAptRefs) PostUninitialize;
}

struct IInitializeSpy
{
    IInitializeSpyVtbl* lpVtbl;
}

HRESULT IInitializeSpy_PreInitialize_Proxy (IInitializeSpy* This, DWORD dwCoInit, DWORD dwCurThreadAptRefs);
void IInitializeSpy_PreInitialize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInitializeSpy_PostInitialize_Proxy (IInitializeSpy* This, HRESULT hrCoInit, DWORD dwCoInit, DWORD dwNewThreadAptRefs);
void IInitializeSpy_PostInitialize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInitializeSpy_PreUninitialize_Proxy (IInitializeSpy* This, DWORD dwCurThreadAptRefs);
void IInitializeSpy_PreUninitialize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInitializeSpy_PostUninitialize_Proxy (IInitializeSpy* This, DWORD dwNewThreadAptRefs);
void IInitializeSpy_PostUninitialize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IApartmentShutdown;

struct IApartmentShutdownVtbl
{
    HRESULT function (IApartmentShutdown* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IApartmentShutdown* This) AddRef;

    ULONG function (IApartmentShutdown* This) Release;

    void function (IApartmentShutdown* This, UINT64 ui64ApartmentIdentifier) OnUninitialize;
}

struct IApartmentShutdown
{
    IApartmentShutdownVtbl* lpVtbl;
}

void IApartmentShutdown_OnUninitialize_Proxy (IApartmentShutdown* This, UINT64 ui64ApartmentIdentifier);
void IApartmentShutdown_OnUninitialize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

ULONG SNB_UserSize (ULONG*, ULONG, SNB*);
ubyte* SNB_UserMarshal (ULONG*, ubyte*, SNB*);
ubyte* SNB_UserUnmarshal (ULONG*, ubyte*, SNB*);
void SNB_UserFree (ULONG*, SNB*);
ULONG CLIPFORMAT_UserSize (ULONG*, ULONG, CLIPFORMAT*);
ubyte* CLIPFORMAT_UserMarshal (ULONG*, ubyte*, CLIPFORMAT*);
ubyte* CLIPFORMAT_UserUnmarshal (ULONG*, ubyte*, CLIPFORMAT*);
void CLIPFORMAT_UserFree (ULONG*, CLIPFORMAT*);
ULONG STGMEDIUM_UserSize (ULONG*, ULONG, STGMEDIUM*);
ubyte* STGMEDIUM_UserMarshal (ULONG*, ubyte*, STGMEDIUM*);
ubyte* STGMEDIUM_UserUnmarshal (ULONG*, ubyte*, STGMEDIUM*);
void STGMEDIUM_UserFree (ULONG*, STGMEDIUM*);
ULONG ASYNC_STGMEDIUM_UserSize (ULONG*, ULONG, ASYNC_STGMEDIUM*);
ubyte* ASYNC_STGMEDIUM_UserMarshal (ULONG*, ubyte*, ASYNC_STGMEDIUM*);
ubyte* ASYNC_STGMEDIUM_UserUnmarshal (ULONG*, ubyte*, ASYNC_STGMEDIUM*);
void ASYNC_STGMEDIUM_UserFree (ULONG*, ASYNC_STGMEDIUM*);
ULONG FLAG_STGMEDIUM_UserSize (ULONG*, ULONG, FLAG_STGMEDIUM*);
ubyte* FLAG_STGMEDIUM_UserMarshal (ULONG*, ubyte*, FLAG_STGMEDIUM*);
ubyte* FLAG_STGMEDIUM_UserUnmarshal (ULONG*, ubyte*, FLAG_STGMEDIUM*);
void FLAG_STGMEDIUM_UserFree (ULONG*, FLAG_STGMEDIUM*);
ULONG HBITMAP_UserSize (ULONG*, ULONG, HBITMAP*);
ubyte* HBITMAP_UserMarshal (ULONG*, ubyte*, HBITMAP*);
ubyte* HBITMAP_UserUnmarshal (ULONG*, ubyte*, HBITMAP*);
void HBITMAP_UserFree (ULONG*, HBITMAP*);
ULONG HICON_UserSize (ULONG*, ULONG, HICON*);
ubyte* HICON_UserMarshal (ULONG*, ubyte*, HICON*);
ubyte* HICON_UserUnmarshal (ULONG*, ubyte*, HICON*);
void HICON_UserFree (ULONG*, HICON*);
ULONG HDC_UserSize (ULONG*, ULONG, HDC*);
ubyte* HDC_UserMarshal (ULONG*, ubyte*, HDC*);
ubyte* HDC_UserUnmarshal (ULONG*, ubyte*, HDC*);
void HDC_UserFree (ULONG*, HDC*);

DWORD CoBuildVersion ();
HRESULT CoInitialize (LPVOID pvReserved);
HRESULT CoRegisterMallocSpy (LPMALLOCSPY pMallocSpy);
HRESULT CoRevokeMallocSpy ();
HRESULT CoCreateStandardMalloc (DWORD memctx, IMalloc** ppMalloc);
HRESULT CoRegisterInitializeSpy (LPINITIALIZESPY pSpy, ULARGE_INTEGER* puliCookie);
HRESULT CoRevokeInitializeSpy (ULARGE_INTEGER uliCookie);

enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3
}

alias COMSD = tagCOMSD;

HRESULT CoGetSystemSecurityPermissions (COMSD comSDType, PSECURITY_DESCRIPTOR* ppSD);
HINSTANCE CoLoadLibrary (LPOLESTR lpszLibName, WINBOOL bAutoFree);
void CoFreeLibrary (HINSTANCE hInst);
void CoFreeAllLibraries ();
HRESULT CoGetInstanceFromFile (COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR* pwszName, DWORD dwCount, MULTI_QI* pResults);
HRESULT CoGetInstanceFromIStorage (COSERVERINFO* pServerInfo, CLSID* pClsid, IUnknown* punkOuter, DWORD dwClsCtx, IStorage* pstg, DWORD dwCount, MULTI_QI* pResults);
HRESULT CoAllowSetForegroundWindow (IUnknown* pUnk, LPVOID lpvReserved);
HRESULT DcomChannelSetHResult (LPVOID pvReserved, ULONG* pulReserved, HRESULT appsHR);
WINBOOL CoIsOle1Class (const IID* rclsid);
HRESULT CLSIDFromProgIDEx (LPCOLESTR lpszProgID, LPCLSID lpclsid);
WINBOOL CoFileTimeToDosDateTime (FILETIME* lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
WINBOOL CoDosDateTimeToFileTime (WORD nDosDate, WORD nDosTime, FILETIME* lpFileTime);
HRESULT CoFileTimeNow (FILETIME* lpFileTime);
HRESULT CoRegisterMessageFilter (LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER* lplpMessageFilter);
HRESULT CoRegisterChannelHook (const GUID* ExtensionUuid, IChannelHook* pChannelHook);
HRESULT CoTreatAsClass (const IID* clsidOld, const IID* clsidNew);
HRESULT CreateDataAdviseHolder (LPDATAADVISEHOLDER* ppDAHolder);
HRESULT CreateDataCache (LPUNKNOWN pUnkOuter, const IID* rclsid, const IID* iid, LPVOID* ppv);
HRESULT StgOpenLayoutDocfile (const(OLECHAR)* pwcsDfName, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);

HRESULT StgCreateDocfile (const(WCHAR)* pwcsName, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
HRESULT StgCreateDocfileOnILockBytes (ILockBytes* plkbyt, DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
HRESULT StgOpenStorage (const(WCHAR)* pwcsName, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen);
HRESULT StgOpenStorageOnILockBytes (ILockBytes* plkbyt, IStorage* pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage** ppstgOpen);
HRESULT StgIsStorageFile (const(WCHAR)* pwcsName);
HRESULT StgIsStorageILockBytes (ILockBytes* plkbyt);
HRESULT StgSetTimes (const(WCHAR)* lpszName, const(FILETIME)* pctime, const(FILETIME)* patime, const(FILETIME)* pmtime);
HRESULT StgOpenAsyncDocfileOnIFillLockBytes (IFillLockBytes* pflb, DWORD grfMode, DWORD asyncFlags, IStorage** ppstgOpen);
HRESULT StgGetIFillLockBytesOnILockBytes (ILockBytes* pilb, IFillLockBytes** ppflb);
HRESULT StgGetIFillLockBytesOnFile (const(OLECHAR)* pwcsName, IFillLockBytes** ppflb);

struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;

    const(WCHAR)* pwcsTemplateFile;
}

alias STGOPTIONS = tagSTGOPTIONS;

HRESULT StgCreateStorageEx (const(WCHAR)* pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID* riid, void** ppObjectOpen);
HRESULT StgOpenStorageEx (const(WCHAR)* pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS* pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID* riid, void** ppObjectOpen);
HRESULT BindMoniker (LPMONIKER pmk, DWORD grfOpt, const IID* iidResult, LPVOID* ppvResult);
HRESULT CoGetObject (LPCWSTR pszName, BIND_OPTS* pBindOptions, const IID* riid, void** ppv);
HRESULT MkParseDisplayName (LPBC pbc, LPCOLESTR szUserName, ULONG* pchEaten, LPMONIKER* ppmk);
HRESULT MonikerRelativePathTo (LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER* ppmkRelPath, WINBOOL dwReserved);
HRESULT MonikerCommonPrefixWith (LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER* ppmkCommon);
HRESULT CreateBindCtx (DWORD reserved, LPBC* ppbc);
HRESULT CreateGenericComposite (LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER* ppmkComposite);
HRESULT GetClassFile (LPCOLESTR szFilename, CLSID* pclsid);
HRESULT CreateClassMoniker (const IID* rclsid, LPMONIKER* ppmk);
HRESULT CreateFileMoniker (LPCOLESTR lpszPathName, LPMONIKER* ppmk);
HRESULT CreateItemMoniker (LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER* ppmk);
HRESULT CreateAntiMoniker (LPMONIKER* ppmk);
HRESULT CreatePointerMoniker (LPUNKNOWN punk, LPMONIKER* ppmk);
HRESULT CreateObjrefMoniker (LPUNKNOWN punk, LPMONIKER* ppmk);

HRESULT CoInstall (IBindCtx* pbc, DWORD dwFlags, uCLSSPEC* pClassSpec, QUERYCONTEXT* pQuery, LPWSTR pszCodeBase);
HRESULT GetRunningObjectTable (DWORD reserved, LPRUNNINGOBJECTTABLE* pprot);

struct IUri;

struct IUriContainer;

struct IUriBuilder;

struct IUriBuilderFactory;

struct IWinInetCacheHints;

struct IWinInetCacheHints2;

struct IInternetProtocolEx;

struct IInternetSecurityManagerEx;

struct IInternetSecurityManagerEx2;

struct IZoneIdentifier;

struct IInternetZoneManagerEx;

struct IInternetZoneManagerEx2;

alias LPOLEADVISEHOLDER = IOleAdviseHolder*;

extern __gshared const GUID IID_IOleAdviseHolder;

struct IOleAdviseHolderVtbl
{
    HRESULT function (IOleAdviseHolder* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleAdviseHolder* This) AddRef;

    ULONG function (IOleAdviseHolder* This) Release;

    HRESULT function (IOleAdviseHolder* This, IAdviseSink* pAdvise, DWORD* pdwConnection) Advise;

    HRESULT function (IOleAdviseHolder* This, DWORD dwConnection) Unadvise;

    HRESULT function (IOleAdviseHolder* This, IEnumSTATDATA** ppenumAdvise) EnumAdvise;

    HRESULT function (IOleAdviseHolder* This, IMoniker* pmk) SendOnRename;

    HRESULT function (IOleAdviseHolder* This) SendOnSave;

    HRESULT function (IOleAdviseHolder* This) SendOnClose;
}

struct IOleAdviseHolder
{
    IOleAdviseHolderVtbl* lpVtbl;
}

HRESULT IOleAdviseHolder_Advise_Proxy (IOleAdviseHolder* This, IAdviseSink* pAdvise, DWORD* pdwConnection);
void IOleAdviseHolder_Advise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_Unadvise_Proxy (IOleAdviseHolder* This, DWORD dwConnection);
void IOleAdviseHolder_Unadvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_EnumAdvise_Proxy (IOleAdviseHolder* This, IEnumSTATDATA** ppenumAdvise);
void IOleAdviseHolder_EnumAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_SendOnRename_Proxy (IOleAdviseHolder* This, IMoniker* pmk);
void IOleAdviseHolder_SendOnRename_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_SendOnSave_Proxy (IOleAdviseHolder* This);
void IOleAdviseHolder_SendOnSave_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleAdviseHolder_SendOnClose_Proxy (IOleAdviseHolder* This);
void IOleAdviseHolder_SendOnClose_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLECACHE = IOleCache*;

extern __gshared const GUID IID_IOleCache;

struct IOleCacheVtbl
{
    HRESULT function (IOleCache* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleCache* This) AddRef;

    ULONG function (IOleCache* This) Release;

    HRESULT function (IOleCache* This, FORMATETC* pformatetc, DWORD advf, DWORD* pdwConnection) Cache;

    HRESULT function (IOleCache* This, DWORD dwConnection) Uncache;

    HRESULT function (IOleCache* This, IEnumSTATDATA** ppenumSTATDATA) EnumCache;

    HRESULT function (IOleCache* This, IDataObject* pDataObject) InitCache;

    HRESULT function (IOleCache* This, FORMATETC* pformatetc, STGMEDIUM* pmedium, WINBOOL fRelease) SetData;
}

struct IOleCache
{
    IOleCacheVtbl* lpVtbl;
}

HRESULT IOleCache_Cache_Proxy (IOleCache* This, FORMATETC* pformatetc, DWORD advf, DWORD* pdwConnection);
void IOleCache_Cache_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCache_Uncache_Proxy (IOleCache* This, DWORD dwConnection);
void IOleCache_Uncache_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCache_EnumCache_Proxy (IOleCache* This, IEnumSTATDATA** ppenumSTATDATA);
void IOleCache_EnumCache_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCache_InitCache_Proxy (IOleCache* This, IDataObject* pDataObject);
void IOleCache_InitCache_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCache_SetData_Proxy (IOleCache* This, FORMATETC* pformatetc, STGMEDIUM* pmedium, WINBOOL fRelease);
void IOleCache_SetData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLECACHE2 = IOleCache2*;

enum tagDISCARDCACHE
{
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1
}

alias DISCARDCACHE = tagDISCARDCACHE;

extern __gshared const GUID IID_IOleCache2;

struct IOleCache2Vtbl
{
    HRESULT function (IOleCache2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleCache2* This) AddRef;

    ULONG function (IOleCache2* This) Release;

    HRESULT function (IOleCache2* This, FORMATETC* pformatetc, DWORD advf, DWORD* pdwConnection) Cache;

    HRESULT function (IOleCache2* This, DWORD dwConnection) Uncache;

    HRESULT function (IOleCache2* This, IEnumSTATDATA** ppenumSTATDATA) EnumCache;

    HRESULT function (IOleCache2* This, IDataObject* pDataObject) InitCache;

    HRESULT function (IOleCache2* This, FORMATETC* pformatetc, STGMEDIUM* pmedium, WINBOOL fRelease) SetData;

    HRESULT function (IOleCache2* This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved) UpdateCache;

    HRESULT function (IOleCache2* This, DWORD dwDiscardOptions) DiscardCache;
}

struct IOleCache2
{
    IOleCache2Vtbl* lpVtbl;
}

HRESULT IOleCache2_RemoteUpdateCache_Proxy (IOleCache2* This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved);
void IOleCache2_RemoteUpdateCache_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCache2_DiscardCache_Proxy (IOleCache2* This, DWORD dwDiscardOptions);
void IOleCache2_DiscardCache_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCache2_UpdateCache_Proxy (IOleCache2* This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);
HRESULT IOleCache2_UpdateCache_Stub (IOleCache2* This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved);

alias LPOLECACHECONTROL = IOleCacheControl*;

extern __gshared const GUID IID_IOleCacheControl;

struct IOleCacheControlVtbl
{
    HRESULT function (IOleCacheControl* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleCacheControl* This) AddRef;

    ULONG function (IOleCacheControl* This) Release;

    HRESULT function (IOleCacheControl* This, LPDATAOBJECT pDataObject) OnRun;

    HRESULT function (IOleCacheControl* This) OnStop;
}

struct IOleCacheControl
{
    IOleCacheControlVtbl* lpVtbl;
}

HRESULT IOleCacheControl_OnRun_Proxy (IOleCacheControl* This, LPDATAOBJECT pDataObject);
void IOleCacheControl_OnRun_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleCacheControl_OnStop_Proxy (IOleCacheControl* This);
void IOleCacheControl_OnStop_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPPARSEDISPLAYNAME = IParseDisplayName*;

extern __gshared const GUID IID_IParseDisplayName;

struct IParseDisplayNameVtbl
{
    HRESULT function (IParseDisplayName* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IParseDisplayName* This) AddRef;

    ULONG function (IParseDisplayName* This) Release;

    HRESULT function (IParseDisplayName* This, IBindCtx* pbc, LPOLESTR pszDisplayName, ULONG* pchEaten, IMoniker** ppmkOut) ParseDisplayName;
}

struct IParseDisplayName
{
    IParseDisplayNameVtbl* lpVtbl;
}

HRESULT IParseDisplayName_ParseDisplayName_Proxy (IParseDisplayName* This, IBindCtx* pbc, LPOLESTR pszDisplayName, ULONG* pchEaten, IMoniker** ppmkOut);
void IParseDisplayName_ParseDisplayName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLECONTAINER = IOleContainer*;

extern __gshared const GUID IID_IOleContainer;

struct IOleContainerVtbl
{
    HRESULT function (IOleContainer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleContainer* This) AddRef;

    ULONG function (IOleContainer* This) Release;

    HRESULT function (IOleContainer* This, IBindCtx* pbc, LPOLESTR pszDisplayName, ULONG* pchEaten, IMoniker** ppmkOut) ParseDisplayName;

    HRESULT function (IOleContainer* This, DWORD grfFlags, IEnumUnknown** ppenum) EnumObjects;

    HRESULT function (IOleContainer* This, WINBOOL fLock) LockContainer;
}

struct IOleContainer
{
    IOleContainerVtbl* lpVtbl;
}

HRESULT IOleContainer_EnumObjects_Proxy (IOleContainer* This, DWORD grfFlags, IEnumUnknown** ppenum);
void IOleContainer_EnumObjects_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleContainer_LockContainer_Proxy (IOleContainer* This, WINBOOL fLock);
void IOleContainer_LockContainer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLECLIENTSITE = IOleClientSite*;

extern __gshared const GUID IID_IOleClientSite;

struct IOleClientSiteVtbl
{
    HRESULT function (IOleClientSite* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleClientSite* This) AddRef;

    ULONG function (IOleClientSite* This) Release;

    HRESULT function (IOleClientSite* This) SaveObject;

    HRESULT function (IOleClientSite* This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker** ppmk) GetMoniker;

    HRESULT function (IOleClientSite* This, IOleContainer** ppContainer) GetContainer;

    HRESULT function (IOleClientSite* This) ShowObject;

    HRESULT function (IOleClientSite* This, WINBOOL fShow) OnShowWindow;

    HRESULT function (IOleClientSite* This) RequestNewObjectLayout;
}

struct IOleClientSite
{
    IOleClientSiteVtbl* lpVtbl;
}

HRESULT IOleClientSite_SaveObject_Proxy (IOleClientSite* This);
void IOleClientSite_SaveObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleClientSite_GetMoniker_Proxy (IOleClientSite* This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker** ppmk);
void IOleClientSite_GetMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleClientSite_GetContainer_Proxy (IOleClientSite* This, IOleContainer** ppContainer);
void IOleClientSite_GetContainer_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleClientSite_ShowObject_Proxy (IOleClientSite* This);
void IOleClientSite_ShowObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleClientSite_OnShowWindow_Proxy (IOleClientSite* This, WINBOOL fShow);
void IOleClientSite_OnShowWindow_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleClientSite_RequestNewObjectLayout_Proxy (IOleClientSite* This);
void IOleClientSite_RequestNewObjectLayout_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLEOBJECT = IOleObject*;

enum tagOLEGETMONIKER
{
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4
}

alias OLEGETMONIKER = tagOLEGETMONIKER;

enum tagOLEWHICHMK
{
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3
}

alias OLEWHICHMK = tagOLEWHICHMK;

enum tagUSERCLASSTYPE
{
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3
}

alias USERCLASSTYPE = tagUSERCLASSTYPE;

enum tagOLEMISC
{
    OLEMISC_RECOMPOSEONRESIZE = 0x1,
    OLEMISC_ONLYICONIC = 0x2,
    OLEMISC_INSERTNOTREPLACE = 0x4,
    OLEMISC_STATIC = 0x8,
    OLEMISC_CANTLINKINSIDE = 0x10,
    OLEMISC_CANLINKBYOLE1 = 0x20,
    OLEMISC_ISLINKOBJECT = 0x40,
    OLEMISC_INSIDEOUT = 0x80,
    OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
    OLEMISC_INVISIBLEATRUNTIME = 0x400,
    OLEMISC_ALWAYSRUN = 0x800,
    OLEMISC_ACTSLIKEBUTTON = 0x1000,
    OLEMISC_ACTSLIKELABEL = 0x2000,
    OLEMISC_NOUIACTIVATE = 0x4000,
    OLEMISC_ALIGNABLE = 0x8000,
    OLEMISC_SIMPLEFRAME = 0x10000,
    OLEMISC_SETCLIENTSITEFIRST = 0x20000,
    OLEMISC_IMEMODE = 0x40000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
    OLEMISC_WANTSTOMENUMERGE = 0x100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
}

alias OLEMISC = tagOLEMISC;

enum tagOLECLOSE
{
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2
}

alias OLECLOSE = tagOLECLOSE;

extern __gshared const GUID IID_IOleObject;

struct IOleObjectVtbl
{
    HRESULT function (IOleObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleObject* This) AddRef;

    ULONG function (IOleObject* This) Release;

    HRESULT function (IOleObject* This, IOleClientSite* pClientSite) SetClientSite;

    HRESULT function (IOleObject* This, IOleClientSite** ppClientSite) GetClientSite;

    HRESULT function (IOleObject* This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj) SetHostNames;

    HRESULT function (IOleObject* This, DWORD dwSaveOption) Close;

    HRESULT function (IOleObject* This, DWORD dwWhichMoniker, IMoniker* pmk) SetMoniker;

    HRESULT function (IOleObject* This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker** ppmk) GetMoniker;

    HRESULT function (IOleObject* This, IDataObject* pDataObject, WINBOOL fCreation, DWORD dwReserved) InitFromData;

    HRESULT function (IOleObject* This, DWORD dwReserved, IDataObject** ppDataObject) GetClipboardData;

    HRESULT function (IOleObject* This, LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect) DoVerb;

    HRESULT function (IOleObject* This, IEnumOLEVERB** ppEnumOleVerb) EnumVerbs;

    HRESULT function (IOleObject* This) Update;

    HRESULT function (IOleObject* This) IsUpToDate;

    HRESULT function (IOleObject* This, CLSID* pClsid) GetUserClassID;

    HRESULT function (IOleObject* This, DWORD dwFormOfType, LPOLESTR* pszUserType) GetUserType;

    HRESULT function (IOleObject* This, DWORD dwDrawAspect, SIZEL* psizel) SetExtent;

    HRESULT function (IOleObject* This, DWORD dwDrawAspect, SIZEL* psizel) GetExtent;

    HRESULT function (IOleObject* This, IAdviseSink* pAdvSink, DWORD* pdwConnection) Advise;

    HRESULT function (IOleObject* This, DWORD dwConnection) Unadvise;

    HRESULT function (IOleObject* This, IEnumSTATDATA** ppenumAdvise) EnumAdvise;

    HRESULT function (IOleObject* This, DWORD dwAspect, DWORD* pdwStatus) GetMiscStatus;

    HRESULT function (IOleObject* This, LOGPALETTE* pLogpal) SetColorScheme;
}

struct IOleObject
{
    IOleObjectVtbl* lpVtbl;
}

HRESULT IOleObject_SetClientSite_Proxy (IOleObject* This, IOleClientSite* pClientSite);
void IOleObject_SetClientSite_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetClientSite_Proxy (IOleObject* This, IOleClientSite** ppClientSite);
void IOleObject_GetClientSite_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_SetHostNames_Proxy (IOleObject* This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);
void IOleObject_SetHostNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_Close_Proxy (IOleObject* This, DWORD dwSaveOption);
void IOleObject_Close_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_SetMoniker_Proxy (IOleObject* This, DWORD dwWhichMoniker, IMoniker* pmk);
void IOleObject_SetMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetMoniker_Proxy (IOleObject* This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker** ppmk);
void IOleObject_GetMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_InitFromData_Proxy (IOleObject* This, IDataObject* pDataObject, WINBOOL fCreation, DWORD dwReserved);
void IOleObject_InitFromData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetClipboardData_Proxy (IOleObject* This, DWORD dwReserved, IDataObject** ppDataObject);
void IOleObject_GetClipboardData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_DoVerb_Proxy (IOleObject* This, LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);
void IOleObject_DoVerb_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_EnumVerbs_Proxy (IOleObject* This, IEnumOLEVERB** ppEnumOleVerb);
void IOleObject_EnumVerbs_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_Update_Proxy (IOleObject* This);
void IOleObject_Update_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_IsUpToDate_Proxy (IOleObject* This);
void IOleObject_IsUpToDate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetUserClassID_Proxy (IOleObject* This, CLSID* pClsid);
void IOleObject_GetUserClassID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetUserType_Proxy (IOleObject* This, DWORD dwFormOfType, LPOLESTR* pszUserType);
void IOleObject_GetUserType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_SetExtent_Proxy (IOleObject* This, DWORD dwDrawAspect, SIZEL* psizel);
void IOleObject_SetExtent_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetExtent_Proxy (IOleObject* This, DWORD dwDrawAspect, SIZEL* psizel);
void IOleObject_GetExtent_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_Advise_Proxy (IOleObject* This, IAdviseSink* pAdvSink, DWORD* pdwConnection);
void IOleObject_Advise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_Unadvise_Proxy (IOleObject* This, DWORD dwConnection);
void IOleObject_Unadvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_EnumAdvise_Proxy (IOleObject* This, IEnumSTATDATA** ppenumAdvise);
void IOleObject_EnumAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_GetMiscStatus_Proxy (IOleObject* This, DWORD dwAspect, DWORD* pdwStatus);
void IOleObject_GetMiscStatus_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleObject_SetColorScheme_Proxy (IOleObject* This, LOGPALETTE* pLogpal);
void IOleObject_SetColorScheme_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern __gshared RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;

enum tagOLERENDER
{
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3
}

alias OLERENDER = tagOLERENDER;

alias LPOLERENDER = tagOLERENDER*;

struct tagOBJECTDESCRIPTOR
{
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
}

alias OBJECTDESCRIPTOR = tagOBJECTDESCRIPTOR;
alias POBJECTDESCRIPTOR = tagOBJECTDESCRIPTOR*;
alias LPOBJECTDESCRIPTOR = tagOBJECTDESCRIPTOR*;
alias LINKSRCDESCRIPTOR = tagOBJECTDESCRIPTOR;
alias PLINKSRCDESCRIPTOR = tagOBJECTDESCRIPTOR*;
alias LPLINKSRCDESCRIPTOR = tagOBJECTDESCRIPTOR*;

alias LPOLEWINDOW = IOleWindow*;

extern __gshared const GUID IID_IOleWindow;

struct IOleWindowVtbl
{
    HRESULT function (IOleWindow* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleWindow* This) AddRef;

    ULONG function (IOleWindow* This) Release;

    HRESULT function (IOleWindow* This, HWND* phwnd) GetWindow;

    HRESULT function (IOleWindow* This, WINBOOL fEnterMode) ContextSensitiveHelp;
}

struct IOleWindow
{
    IOleWindowVtbl* lpVtbl;
}

HRESULT IOleWindow_GetWindow_Proxy (IOleWindow* This, HWND* phwnd);
void IOleWindow_GetWindow_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleWindow_ContextSensitiveHelp_Proxy (IOleWindow* This, WINBOOL fEnterMode);
void IOleWindow_ContextSensitiveHelp_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLELINK = IOleLink*;

enum tagOLEUPDATE
{
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3
}

alias OLEUPDATE = tagOLEUPDATE;

alias LPOLEUPDATE = tagOLEUPDATE*;
alias POLEUPDATE = tagOLEUPDATE*;

enum tagOLELINKBIND
{
    OLELINKBIND_EVENIFCLASSDIFF = 1
}

alias OLELINKBIND = tagOLELINKBIND;

extern __gshared const GUID IID_IOleLink;

struct IOleLinkVtbl
{
    HRESULT function (IOleLink* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleLink* This) AddRef;

    ULONG function (IOleLink* This) Release;

    HRESULT function (IOleLink* This, DWORD dwUpdateOpt) SetUpdateOptions;

    HRESULT function (IOleLink* This, DWORD* pdwUpdateOpt) GetUpdateOptions;

    HRESULT function (IOleLink* This, IMoniker* pmk, const IID* rclsid) SetSourceMoniker;

    HRESULT function (IOleLink* This, IMoniker** ppmk) GetSourceMoniker;

    HRESULT function (IOleLink* This, LPCOLESTR pszStatusText) SetSourceDisplayName;

    HRESULT function (IOleLink* This, LPOLESTR* ppszDisplayName) GetSourceDisplayName;

    HRESULT function (IOleLink* This, DWORD bindflags, IBindCtx* pbc) BindToSource;

    HRESULT function (IOleLink* This) BindIfRunning;

    HRESULT function (IOleLink* This, IUnknown** ppunk) GetBoundSource;

    HRESULT function (IOleLink* This) UnbindSource;

    HRESULT function (IOleLink* This, IBindCtx* pbc) Update;
}

struct IOleLink
{
    IOleLinkVtbl* lpVtbl;
}

HRESULT IOleLink_SetUpdateOptions_Proxy (IOleLink* This, DWORD dwUpdateOpt);
void IOleLink_SetUpdateOptions_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_GetUpdateOptions_Proxy (IOleLink* This, DWORD* pdwUpdateOpt);
void IOleLink_GetUpdateOptions_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_SetSourceMoniker_Proxy (IOleLink* This, IMoniker* pmk, const IID* rclsid);
void IOleLink_SetSourceMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_GetSourceMoniker_Proxy (IOleLink* This, IMoniker** ppmk);
void IOleLink_GetSourceMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_SetSourceDisplayName_Proxy (IOleLink* This, LPCOLESTR pszStatusText);
void IOleLink_SetSourceDisplayName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_GetSourceDisplayName_Proxy (IOleLink* This, LPOLESTR* ppszDisplayName);
void IOleLink_GetSourceDisplayName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_BindToSource_Proxy (IOleLink* This, DWORD bindflags, IBindCtx* pbc);
void IOleLink_BindToSource_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_BindIfRunning_Proxy (IOleLink* This);
void IOleLink_BindIfRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_GetBoundSource_Proxy (IOleLink* This, IUnknown** ppunk);
void IOleLink_GetBoundSource_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_UnbindSource_Proxy (IOleLink* This);
void IOleLink_UnbindSource_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleLink_Update_Proxy (IOleLink* This, IBindCtx* pbc);
void IOleLink_Update_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLEITEMCONTAINER = IOleItemContainer*;

enum tagBINDSPEED
{
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3
}

alias BINDSPEED = tagBINDSPEED;

enum tagOLECONTF
{
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16
}

alias OLECONTF = tagOLECONTF;

extern __gshared const GUID IID_IOleItemContainer;

struct IOleItemContainerVtbl
{
    HRESULT function (IOleItemContainer* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleItemContainer* This) AddRef;

    ULONG function (IOleItemContainer* This) Release;

    HRESULT function (IOleItemContainer* This, IBindCtx* pbc, LPOLESTR pszDisplayName, ULONG* pchEaten, IMoniker** ppmkOut) ParseDisplayName;

    HRESULT function (IOleItemContainer* This, DWORD grfFlags, IEnumUnknown** ppenum) EnumObjects;

    HRESULT function (IOleItemContainer* This, WINBOOL fLock) LockContainer;

    HRESULT function (IOleItemContainer* This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx* pbc, const IID* riid, void** ppvObject) GetObjectA;

    HRESULT function (IOleItemContainer* This, LPOLESTR pszItem, IBindCtx* pbc, const IID* riid, void** ppvStorage) GetObjectStorage;

    HRESULT function (IOleItemContainer* This, LPOLESTR pszItem) IsRunning;
}

struct IOleItemContainer
{
    IOleItemContainerVtbl* lpVtbl;
}

HRESULT IOleItemContainer_GetObject_Proxy (IOleItemContainer* This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx* pbc, const IID* riid, void** ppvObject);
void IOleItemContainer_GetObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleItemContainer_GetObjectStorage_Proxy (IOleItemContainer* This, LPOLESTR pszItem, IBindCtx* pbc, const IID* riid, void** ppvStorage);
void IOleItemContainer_GetObjectStorage_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleItemContainer_IsRunning_Proxy (IOleItemContainer* This, LPOLESTR pszItem);
void IOleItemContainer_IsRunning_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLEINPLACEUIWINDOW = IOleInPlaceUIWindow*;
alias BORDERWIDTHS = tagRECT;
alias LPBORDERWIDTHS = tagRECT*;
alias LPCBORDERWIDTHS = const(tagRECT)*;

extern __gshared const GUID IID_IOleInPlaceUIWindow;

struct IOleInPlaceUIWindowVtbl
{
    HRESULT function (IOleInPlaceUIWindow* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleInPlaceUIWindow* This) AddRef;

    ULONG function (IOleInPlaceUIWindow* This) Release;

    HRESULT function (IOleInPlaceUIWindow* This, HWND* phwnd) GetWindow;

    HRESULT function (IOleInPlaceUIWindow* This, WINBOOL fEnterMode) ContextSensitiveHelp;

    HRESULT function (IOleInPlaceUIWindow* This, LPRECT lprectBorder) GetBorder;

    HRESULT function (IOleInPlaceUIWindow* This, LPCBORDERWIDTHS pborderwidths) RequestBorderSpace;

    HRESULT function (IOleInPlaceUIWindow* This, LPCBORDERWIDTHS pborderwidths) SetBorderSpace;

    HRESULT function (IOleInPlaceUIWindow* This, IOleInPlaceActiveObject* pActiveObject, LPCOLESTR pszObjName) SetActiveObject;
}

struct IOleInPlaceUIWindow
{
    IOleInPlaceUIWindowVtbl* lpVtbl;
}

HRESULT IOleInPlaceUIWindow_GetBorder_Proxy (IOleInPlaceUIWindow* This, LPRECT lprectBorder);
void IOleInPlaceUIWindow_GetBorder_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceUIWindow_RequestBorderSpace_Proxy (IOleInPlaceUIWindow* This, LPCBORDERWIDTHS pborderwidths);
void IOleInPlaceUIWindow_RequestBorderSpace_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceUIWindow_SetBorderSpace_Proxy (IOleInPlaceUIWindow* This, LPCBORDERWIDTHS pborderwidths);
void IOleInPlaceUIWindow_SetBorderSpace_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceUIWindow_SetActiveObject_Proxy (IOleInPlaceUIWindow* This, IOleInPlaceActiveObject* pActiveObject, LPCOLESTR pszObjName);
void IOleInPlaceUIWindow_SetActiveObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLEINPLACEACTIVEOBJECT = IOleInPlaceActiveObject*;

extern __gshared const GUID IID_IOleInPlaceActiveObject;

struct IOleInPlaceActiveObjectVtbl
{
    HRESULT function (IOleInPlaceActiveObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleInPlaceActiveObject* This) AddRef;

    ULONG function (IOleInPlaceActiveObject* This) Release;

    HRESULT function (IOleInPlaceActiveObject* This, HWND* phwnd) GetWindow;

    HRESULT function (IOleInPlaceActiveObject* This, WINBOOL fEnterMode) ContextSensitiveHelp;

    HRESULT function (IOleInPlaceActiveObject* This, LPMSG lpmsg) TranslateAcceleratorA;

    HRESULT function (IOleInPlaceActiveObject* This, WINBOOL fActivate) OnFrameWindowActivate;

    HRESULT function (IOleInPlaceActiveObject* This, WINBOOL fActivate) OnDocWindowActivate;

    HRESULT function (IOleInPlaceActiveObject* This, LPCRECT prcBorder, IOleInPlaceUIWindow* pUIWindow, WINBOOL fFrameWindow) ResizeBorder;

    HRESULT function (IOleInPlaceActiveObject* This, WINBOOL fEnable) EnableModeless;
}

struct IOleInPlaceActiveObject
{
    IOleInPlaceActiveObjectVtbl* lpVtbl;
}

HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy (IOleInPlaceActiveObject* This);
void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy (IOleInPlaceActiveObject* This, WINBOOL fActivate);
void IOleInPlaceActiveObject_OnFrameWindowActivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_OnDocWindowActivate_Proxy (IOleInPlaceActiveObject* This, WINBOOL fActivate);
void IOleInPlaceActiveObject_OnDocWindowActivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy (IOleInPlaceActiveObject* This, LPCRECT prcBorder, const IID* riid, IOleInPlaceUIWindow* pUIWindow, WINBOOL fFrameWindow);
void IOleInPlaceActiveObject_RemoteResizeBorder_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_EnableModeless_Proxy (IOleInPlaceActiveObject* This, WINBOOL fEnable);
void IOleInPlaceActiveObject_EnableModeless_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy (IOleInPlaceActiveObject* This, LPMSG lpmsg);
HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub (IOleInPlaceActiveObject* This);
HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy (IOleInPlaceActiveObject* This, LPCRECT prcBorder, IOleInPlaceUIWindow* pUIWindow, WINBOOL fFrameWindow);
HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub (IOleInPlaceActiveObject* This, LPCRECT prcBorder, const IID* riid, IOleInPlaceUIWindow* pUIWindow, WINBOOL fFrameWindow);

alias LPOLEINPLACEFRAME = IOleInPlaceFrame*;

struct tagOIFI
{
    UINT cb;
    WINBOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
}

alias OLEINPLACEFRAMEINFO = tagOIFI;
alias LPOLEINPLACEFRAMEINFO = tagOIFI*;

struct tagOleMenuGroupWidths
{
    LONG[6] width;
}

alias OLEMENUGROUPWIDTHS = tagOleMenuGroupWidths;
alias LPOLEMENUGROUPWIDTHS = tagOleMenuGroupWidths*;

alias HOLEMENU = void*;

extern __gshared const GUID IID_IOleInPlaceFrame;

struct IOleInPlaceFrameVtbl
{
    HRESULT function (IOleInPlaceFrame* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleInPlaceFrame* This) AddRef;

    ULONG function (IOleInPlaceFrame* This) Release;

    HRESULT function (IOleInPlaceFrame* This, HWND* phwnd) GetWindow;

    HRESULT function (IOleInPlaceFrame* This, WINBOOL fEnterMode) ContextSensitiveHelp;

    HRESULT function (IOleInPlaceFrame* This, LPRECT lprectBorder) GetBorder;

    HRESULT function (IOleInPlaceFrame* This, LPCBORDERWIDTHS pborderwidths) RequestBorderSpace;

    HRESULT function (IOleInPlaceFrame* This, LPCBORDERWIDTHS pborderwidths) SetBorderSpace;

    HRESULT function (IOleInPlaceFrame* This, IOleInPlaceActiveObject* pActiveObject, LPCOLESTR pszObjName) SetActiveObject;

    HRESULT function (IOleInPlaceFrame* This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths) InsertMenus;

    HRESULT function (IOleInPlaceFrame* This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject) SetMenu;

    HRESULT function (IOleInPlaceFrame* This, HMENU hmenuShared) RemoveMenus;

    HRESULT function (IOleInPlaceFrame* This, LPCOLESTR pszStatusText) SetStatusText;

    HRESULT function (IOleInPlaceFrame* This, WINBOOL fEnable) EnableModeless;

    HRESULT function (IOleInPlaceFrame* This, LPMSG lpmsg, WORD wID) TranslateAcceleratorA;
}

struct IOleInPlaceFrame
{
    IOleInPlaceFrameVtbl* lpVtbl;
}

HRESULT IOleInPlaceFrame_InsertMenus_Proxy (IOleInPlaceFrame* This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);
void IOleInPlaceFrame_InsertMenus_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_SetMenu_Proxy (IOleInPlaceFrame* This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);
void IOleInPlaceFrame_SetMenu_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_RemoveMenus_Proxy (IOleInPlaceFrame* This, HMENU hmenuShared);
void IOleInPlaceFrame_RemoveMenus_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_SetStatusText_Proxy (IOleInPlaceFrame* This, LPCOLESTR pszStatusText);
void IOleInPlaceFrame_SetStatusText_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_EnableModeless_Proxy (IOleInPlaceFrame* This, WINBOOL fEnable);
void IOleInPlaceFrame_EnableModeless_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceFrame_TranslateAccelerator_Proxy (IOleInPlaceFrame* This, LPMSG lpmsg, WORD wID);
void IOleInPlaceFrame_TranslateAccelerator_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLEINPLACEOBJECT = IOleInPlaceObject*;

extern __gshared const GUID IID_IOleInPlaceObject;

struct IOleInPlaceObjectVtbl
{
    HRESULT function (IOleInPlaceObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleInPlaceObject* This) AddRef;

    ULONG function (IOleInPlaceObject* This) Release;

    HRESULT function (IOleInPlaceObject* This, HWND* phwnd) GetWindow;

    HRESULT function (IOleInPlaceObject* This, WINBOOL fEnterMode) ContextSensitiveHelp;

    HRESULT function (IOleInPlaceObject* This) InPlaceDeactivate;

    HRESULT function (IOleInPlaceObject* This) UIDeactivate;

    HRESULT function (IOleInPlaceObject* This, LPCRECT lprcPosRect, LPCRECT lprcClipRect) SetObjectRects;

    HRESULT function (IOleInPlaceObject* This) ReactivateAndUndo;
}

struct IOleInPlaceObject
{
    IOleInPlaceObjectVtbl* lpVtbl;
}

HRESULT IOleInPlaceObject_InPlaceDeactivate_Proxy (IOleInPlaceObject* This);
void IOleInPlaceObject_InPlaceDeactivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceObject_UIDeactivate_Proxy (IOleInPlaceObject* This);
void IOleInPlaceObject_UIDeactivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceObject_SetObjectRects_Proxy (IOleInPlaceObject* This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);
void IOleInPlaceObject_SetObjectRects_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceObject_ReactivateAndUndo_Proxy (IOleInPlaceObject* This);
void IOleInPlaceObject_ReactivateAndUndo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPOLEINPLACESITE = IOleInPlaceSite*;

extern __gshared const GUID IID_IOleInPlaceSite;

struct IOleInPlaceSiteVtbl
{
    HRESULT function (IOleInPlaceSite* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IOleInPlaceSite* This) AddRef;

    ULONG function (IOleInPlaceSite* This) Release;

    HRESULT function (IOleInPlaceSite* This, HWND* phwnd) GetWindow;

    HRESULT function (IOleInPlaceSite* This, WINBOOL fEnterMode) ContextSensitiveHelp;

    HRESULT function (IOleInPlaceSite* This) CanInPlaceActivate;

    HRESULT function (IOleInPlaceSite* This) OnInPlaceActivate;

    HRESULT function (IOleInPlaceSite* This) OnUIActivate;

    HRESULT function (IOleInPlaceSite* This, IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo) GetWindowContext;

    HRESULT function (IOleInPlaceSite* This, SIZE scrollExtant) Scroll;

    HRESULT function (IOleInPlaceSite* This, WINBOOL fUndoable) OnUIDeactivate;

    HRESULT function (IOleInPlaceSite* This) OnInPlaceDeactivate;

    HRESULT function (IOleInPlaceSite* This) DiscardUndoState;

    HRESULT function (IOleInPlaceSite* This) DeactivateAndUndo;

    HRESULT function (IOleInPlaceSite* This, LPCRECT lprcPosRect) OnPosRectChange;
}

struct IOleInPlaceSite
{
    IOleInPlaceSiteVtbl* lpVtbl;
}

HRESULT IOleInPlaceSite_CanInPlaceActivate_Proxy (IOleInPlaceSite* This);
void IOleInPlaceSite_CanInPlaceActivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnInPlaceActivate_Proxy (IOleInPlaceSite* This);
void IOleInPlaceSite_OnInPlaceActivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnUIActivate_Proxy (IOleInPlaceSite* This);
void IOleInPlaceSite_OnUIActivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_GetWindowContext_Proxy (IOleInPlaceSite* This, IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);
void IOleInPlaceSite_GetWindowContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_Scroll_Proxy (IOleInPlaceSite* This, SIZE scrollExtant);
void IOleInPlaceSite_Scroll_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnUIDeactivate_Proxy (IOleInPlaceSite* This, WINBOOL fUndoable);
void IOleInPlaceSite_OnUIDeactivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnInPlaceDeactivate_Proxy (IOleInPlaceSite* This);
void IOleInPlaceSite_OnInPlaceDeactivate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_DiscardUndoState_Proxy (IOleInPlaceSite* This);
void IOleInPlaceSite_DiscardUndoState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_DeactivateAndUndo_Proxy (IOleInPlaceSite* This);
void IOleInPlaceSite_DeactivateAndUndo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IOleInPlaceSite_OnPosRectChange_Proxy (IOleInPlaceSite* This, LPCRECT lprcPosRect);
void IOleInPlaceSite_OnPosRectChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IContinue;

struct IContinueVtbl
{
    HRESULT function (IContinue* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IContinue* This) AddRef;

    ULONG function (IContinue* This) Release;

    HRESULT function (IContinue* This) FContinue;
}

struct IContinue
{
    IContinueVtbl* lpVtbl;
}

HRESULT IContinue_FContinue_Proxy (IContinue* This);
void IContinue_FContinue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPVIEWOBJECT = IViewObject*;

extern __gshared const GUID IID_IViewObject;

struct IViewObjectVtbl
{
    HRESULT function (IViewObject* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IViewObject* This) AddRef;

    ULONG function (IViewObject* This) Release;

    HRESULT function (IViewObject* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, WINBOOL function (ULONG_PTR dwContinue) pfnContinue, ULONG_PTR dwContinue) Draw;

    HRESULT function (IViewObject* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet) GetColorSet;

    HRESULT function (IViewObject* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DWORD* pdwFreeze) Freeze;

    HRESULT function (IViewObject* This, DWORD dwFreeze) Unfreeze;

    HRESULT function (IViewObject* This, DWORD aspects, DWORD advf, IAdviseSink* pAdvSink) SetAdvise;

    HRESULT function (IViewObject* This, DWORD* pAspects, DWORD* pAdvf, IAdviseSink** ppAdvSink) GetAdvise;
}

struct IViewObject
{
    IViewObjectVtbl* lpVtbl;
}

HRESULT IViewObject_RemoteDraw_Proxy (IViewObject* This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue* pContinue);
void IViewObject_RemoteDraw_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IViewObject_RemoteGetColorSet_Proxy (IViewObject* This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE* ptd, ULONG_PTR hicTargetDev, LOGPALETTE** ppColorSet);
void IViewObject_RemoteGetColorSet_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IViewObject_RemoteFreeze_Proxy (IViewObject* This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD* pdwFreeze);
void IViewObject_RemoteFreeze_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IViewObject_Unfreeze_Proxy (IViewObject* This, DWORD dwFreeze);
void IViewObject_Unfreeze_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IViewObject_SetAdvise_Proxy (IViewObject* This, DWORD aspects, DWORD advf, IAdviseSink* pAdvSink);
void IViewObject_SetAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IViewObject_RemoteGetAdvise_Proxy (IViewObject* This, DWORD* pAspects, DWORD* pAdvf, IAdviseSink** ppAdvSink);
void IViewObject_RemoteGetAdvise_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IViewObject_Draw_Proxy (IViewObject* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, WINBOOL function (ULONG_PTR dwContinue) pfnContinue, ULONG_PTR dwContinue);
HRESULT IViewObject_Draw_Stub (IViewObject* This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue* pContinue);
HRESULT IViewObject_GetColorSet_Proxy (IViewObject* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet);
HRESULT IViewObject_GetColorSet_Stub (IViewObject* This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE* ptd, ULONG_PTR hicTargetDev, LOGPALETTE** ppColorSet);
HRESULT IViewObject_Freeze_Proxy (IViewObject* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DWORD* pdwFreeze);
HRESULT IViewObject_Freeze_Stub (IViewObject* This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD* pdwFreeze);
HRESULT IViewObject_GetAdvise_Proxy (IViewObject* This, DWORD* pAspects, DWORD* pAdvf, IAdviseSink** ppAdvSink);
HRESULT IViewObject_GetAdvise_Stub (IViewObject* This, DWORD* pAspects, DWORD* pAdvf, IAdviseSink** ppAdvSink);

alias LPVIEWOBJECT2 = IViewObject2*;

extern __gshared const GUID IID_IViewObject2;

struct IViewObject2Vtbl
{
    HRESULT function (IViewObject2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IViewObject2* This) AddRef;

    ULONG function (IViewObject2* This) Release;

    HRESULT function (IViewObject2* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, WINBOOL function (ULONG_PTR dwContinue) pfnContinue, ULONG_PTR dwContinue) Draw;

    HRESULT function (IViewObject2* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet) GetColorSet;

    HRESULT function (IViewObject2* This, DWORD dwDrawAspect, LONG lindex, void* pvAspect, DWORD* pdwFreeze) Freeze;

    HRESULT function (IViewObject2* This, DWORD dwFreeze) Unfreeze;

    HRESULT function (IViewObject2* This, DWORD aspects, DWORD advf, IAdviseSink* pAdvSink) SetAdvise;

    HRESULT function (IViewObject2* This, DWORD* pAspects, DWORD* pAdvf, IAdviseSink** ppAdvSink) GetAdvise;

    HRESULT function (IViewObject2* This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE* ptd, LPSIZEL lpsizel) GetExtent;
}

struct IViewObject2
{
    IViewObject2Vtbl* lpVtbl;
}

HRESULT IViewObject2_GetExtent_Proxy (IViewObject2* This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE* ptd, LPSIZEL lpsizel);
void IViewObject2_GetExtent_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPDROPSOURCE = IDropSource*;

extern __gshared const GUID IID_IDropSource;

struct IDropSourceVtbl
{
    HRESULT function (IDropSource* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDropSource* This) AddRef;

    ULONG function (IDropSource* This) Release;

    HRESULT function (IDropSource* This, WINBOOL fEscapePressed, DWORD grfKeyState) QueryContinueDrag;

    HRESULT function (IDropSource* This, DWORD dwEffect) GiveFeedback;
}

struct IDropSource
{
    IDropSourceVtbl* lpVtbl;
}

HRESULT IDropSource_QueryContinueDrag_Proxy (IDropSource* This, WINBOOL fEscapePressed, DWORD grfKeyState);
void IDropSource_QueryContinueDrag_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDropSource_GiveFeedback_Proxy (IDropSource* This, DWORD dwEffect);
void IDropSource_GiveFeedback_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPDROPTARGET = IDropTarget*;

extern __gshared const GUID IID_IDropTarget;

struct IDropTargetVtbl
{
    HRESULT function (IDropTarget* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDropTarget* This) AddRef;

    ULONG function (IDropTarget* This) Release;

    HRESULT function (IDropTarget* This, IDataObject* pDataObj, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect) DragEnter;

    HRESULT function (IDropTarget* This, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect) DragOver;

    HRESULT function (IDropTarget* This) DragLeave;

    HRESULT function (IDropTarget* This, IDataObject* pDataObj, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect) Drop;
}

struct IDropTarget
{
    IDropTargetVtbl* lpVtbl;
}

HRESULT IDropTarget_DragEnter_Proxy (IDropTarget* This, IDataObject* pDataObj, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect);
void IDropTarget_DragEnter_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDropTarget_DragOver_Proxy (IDropTarget* This, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect);
void IDropTarget_DragOver_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDropTarget_DragLeave_Proxy (IDropTarget* This);
void IDropTarget_DragLeave_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDropTarget_Drop_Proxy (IDropTarget* This, IDataObject* pDataObj, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect);
void IDropTarget_Drop_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IDropSourceNotify;

struct IDropSourceNotifyVtbl
{
    HRESULT function (IDropSourceNotify* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDropSourceNotify* This) AddRef;

    ULONG function (IDropSourceNotify* This) Release;

    HRESULT function (IDropSourceNotify* This, HWND hwndTarget) DragEnterTarget;

    HRESULT function (IDropSourceNotify* This) DragLeaveTarget;
}

struct IDropSourceNotify
{
    IDropSourceNotifyVtbl* lpVtbl;
}

HRESULT IDropSourceNotify_DragEnterTarget_Proxy (IDropSourceNotify* This, HWND hwndTarget);
void IDropSourceNotify_DragEnterTarget_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDropSourceNotify_DragLeaveTarget_Proxy (IDropSourceNotify* This);
void IDropSourceNotify_DragLeaveTarget_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPENUMOLEVERB = IEnumOLEVERB*;

struct tagOLEVERB
{
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
}

alias OLEVERB = tagOLEVERB;
alias LPOLEVERB = tagOLEVERB*;

enum tagOLEVERBATTRIB
{
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
}

alias OLEVERBATTRIB = tagOLEVERBATTRIB;

extern __gshared const GUID IID_IEnumOLEVERB;

struct IEnumOLEVERBVtbl
{
    HRESULT function (IEnumOLEVERB* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumOLEVERB* This) AddRef;

    ULONG function (IEnumOLEVERB* This) Release;

    HRESULT function (IEnumOLEVERB* This, ULONG celt, LPOLEVERB rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumOLEVERB* This, ULONG celt) Skip;

    HRESULT function (IEnumOLEVERB* This) Reset;

    HRESULT function (IEnumOLEVERB* This, IEnumOLEVERB** ppenum) Clone;
}

struct IEnumOLEVERB
{
    IEnumOLEVERBVtbl* lpVtbl;
}

HRESULT IEnumOLEVERB_RemoteNext_Proxy (IEnumOLEVERB* This, ULONG celt, LPOLEVERB rgelt, ULONG* pceltFetched);
void IEnumOLEVERB_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Skip_Proxy (IEnumOLEVERB* This, ULONG celt);
void IEnumOLEVERB_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Reset_Proxy (IEnumOLEVERB* This);
void IEnumOLEVERB_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Clone_Proxy (IEnumOLEVERB* This, IEnumOLEVERB** ppenum);
void IEnumOLEVERB_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumOLEVERB_Next_Proxy (IEnumOLEVERB* This, ULONG celt, LPOLEVERB rgelt, ULONG* pceltFetched);
HRESULT IEnumOLEVERB_Next_Stub (IEnumOLEVERB* This, ULONG celt, LPOLEVERB rgelt, ULONG* pceltFetched);

ULONG CLIPFORMAT_UserSize (ULONG*, ULONG, CLIPFORMAT*);
ubyte* CLIPFORMAT_UserMarshal (ULONG*, ubyte*, CLIPFORMAT*);
ubyte* CLIPFORMAT_UserUnmarshal (ULONG*, ubyte*, CLIPFORMAT*);
void CLIPFORMAT_UserFree (ULONG*, CLIPFORMAT*);
ULONG STGMEDIUM_UserSize (ULONG*, ULONG, STGMEDIUM*);
ubyte* STGMEDIUM_UserMarshal (ULONG*, ubyte*, STGMEDIUM*);
ubyte* STGMEDIUM_UserUnmarshal (ULONG*, ubyte*, STGMEDIUM*);
void STGMEDIUM_UserFree (ULONG*, STGMEDIUM*);
ULONG HWND_UserSize (ULONG*, ULONG, HWND*);
ubyte* HWND_UserMarshal (ULONG*, ubyte*, HWND*);
ubyte* HWND_UserUnmarshal (ULONG*, ubyte*, HWND*);
void HWND_UserFree (ULONG*, HWND*);
ULONG HMENU_UserSize (ULONG*, ULONG, HMENU*);
ubyte* HMENU_UserMarshal (ULONG*, ubyte*, HMENU*);
ubyte* HMENU_UserUnmarshal (ULONG*, ubyte*, HMENU*);
void HMENU_UserFree (ULONG*, HMENU*);
ULONG HGLOBAL_UserSize (ULONG*, ULONG, HGLOBAL*);
ubyte* HGLOBAL_UserMarshal (ULONG*, ubyte*, HGLOBAL*);
ubyte* HGLOBAL_UserUnmarshal (ULONG*, ubyte*, HGLOBAL*);
void HGLOBAL_UserFree (ULONG*, HGLOBAL*);
ULONG HACCEL_UserSize (ULONG*, ULONG, HACCEL*);
ubyte* HACCEL_UserMarshal (ULONG*, ubyte*, HACCEL*);
ubyte* HACCEL_UserUnmarshal (ULONG*, ubyte*, HACCEL*);
void HACCEL_UserFree (ULONG*, HACCEL*);
ULONG HDC_UserSize (ULONG*, ULONG, HDC*);
ubyte* HDC_UserMarshal (ULONG*, ubyte*, HDC*);
ubyte* HDC_UserUnmarshal (ULONG*, ubyte*, HDC*);
void HDC_UserFree (ULONG*, HDC*);

alias LPSERVICEPROVIDER = IServiceProvider*;

extern __gshared const GUID IID_IServiceProvider;

struct IServiceProviderVtbl
{
    HRESULT function (IServiceProvider* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IServiceProvider* This) AddRef;

    ULONG function (IServiceProvider* This) Release;

    HRESULT function (IServiceProvider* This, const GUID* guidService, const IID* riid, void** ppvObject) QueryService;
}

struct IServiceProvider
{
    IServiceProviderVtbl* lpVtbl;
}

HRESULT IServiceProvider_RemoteQueryService_Proxy (IServiceProvider* This, const GUID* guidService, const IID* riid, IUnknown** ppvObject);
void IServiceProvider_RemoteQueryService_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IServiceProvider_QueryService_Proxy (IServiceProvider* This, const GUID* guidService, const IID* riid, void** ppvObject);
HRESULT IServiceProvider_QueryService_Stub (IServiceProvider* This, const GUID* guidService, const IID* riid, IUnknown** ppvObject);

extern __gshared RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern __gshared RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
alias CURRENCY = tagCY;

struct tagSAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
}

alias SAFEARRAYBOUND = tagSAFEARRAYBOUND;
alias LPSAFEARRAYBOUND = tagSAFEARRAYBOUND*;

alias wireVARIANT = _wireVARIANT*;
alias wireBRECORD = _wireBRECORD*;

struct _wireSAFEARR_BSTR
{
    ULONG Size;
    wireBSTR* aBstr;
}

alias SAFEARR_BSTR = _wireSAFEARR_BSTR;

struct _wireSAFEARR_UNKNOWN
{
    ULONG Size;
    IUnknown** apUnknown;
}

alias SAFEARR_UNKNOWN = _wireSAFEARR_UNKNOWN;

struct _wireSAFEARR_DISPATCH
{
    ULONG Size;
    IDispatch** apDispatch;
}

alias SAFEARR_DISPATCH = _wireSAFEARR_DISPATCH;

struct _wireSAFEARR_VARIANT
{
    ULONG Size;
    wireVARIANT* aVariant;
}

alias SAFEARR_VARIANT = _wireSAFEARR_VARIANT;

struct _wireSAFEARR_BRECORD
{
    ULONG Size;
    wireBRECORD* aRecord;
}

alias SAFEARR_BRECORD = _wireSAFEARR_BRECORD;

struct _wireSAFEARR_HAVEIID
{
    ULONG Size;
    IUnknown** apUnknown;
    IID iid;
}

alias SAFEARR_HAVEIID = _wireSAFEARR_HAVEIID;

enum tagSF_TYPE
{
    SF_ERROR = VARENUM.VT_ERROR,
    SF_I1 = VARENUM.VT_I1,
    SF_I2 = VARENUM.VT_I2,
    SF_I4 = VARENUM.VT_I4,
    SF_I8 = VARENUM.VT_I8,
    SF_BSTR = VARENUM.VT_BSTR,
    SF_UNKNOWN = VARENUM.VT_UNKNOWN,
    SF_DISPATCH = VARENUM.VT_DISPATCH,
    SF_VARIANT = VARENUM.VT_VARIANT,
    SF_RECORD = VARENUM.VT_RECORD,
    SF_HAVEIID = VARENUM.VT_UNKNOWN | VARENUM.VT_RESERVED
}

alias SF_TYPE = tagSF_TYPE;

struct _wireSAFEARRAY_UNION
{
    ULONG sfType;

    union _Anonymous_94
    {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
    }

    _Anonymous_94 u;
}

alias SAFEARRAYUNION = _wireSAFEARRAY_UNION;

struct _wireSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND[1] rgsabound;
}

alias wireSAFEARRAY = _wireSAFEARRAY*;
alias wirePSAFEARRAY = _wireSAFEARRAY**;

struct tagSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND[1] rgsabound;
}

alias SAFEARRAY = tagSAFEARRAY;
alias LPSAFEARRAY = tagSAFEARRAY*;

alias VARIANT = tagVARIANT;

struct tagVARIANT
{
    union
    {
        struct
        {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;

            union
            {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown* punkVal;
                IDispatch* pdispVal;
                SAFEARRAY* parray;
                BYTE* pbVal;
                SHORT* piVal;
                LONG* plVal;
                LONGLONG* pllVal;
                FLOAT* pfltVal;
                DOUBLE* pdblVal;
                VARIANT_BOOL* pboolVal;
                SCODE* pscode;
                CY* pcyVal;
                DATE* pdate;
                BSTR* pbstrVal;
                IUnknown** ppunkVal;
                IDispatch** ppdispVal;
                SAFEARRAY** pparray;
                VARIANT* pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL* pdecVal;
                CHAR* pcVal;
                USHORT* puiVal;
                ULONG* pulVal;
                ULONGLONG* pullVal;
                INT* pintVal;
                UINT* puintVal;

                struct
                {
                    PVOID pvRecord;
                    IRecordInfo* pRecInfo;
                }
            }
        }

        DECIMAL decVal;
    }
}

alias LPVARIANT = tagVARIANT*;
alias VARIANTARG = tagVARIANT;
alias LPVARIANTARG = tagVARIANT*;

struct _wireBRECORD
{
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo* pRecInfo;
    ubyte* pRecord;
}

struct _wireVARIANT
{
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;

    union
    {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        wireBSTR bstrVal;
        IUnknown* punkVal;
        IDispatch* pdispVal;
        wirePSAFEARRAY parray;
        wireBRECORD brecVal;
        BYTE* pbVal;
        SHORT* piVal;
        LONG* plVal;
        LONGLONG* pllVal;
        FLOAT* pfltVal;
        DOUBLE* pdblVal;
        VARIANT_BOOL* pboolVal;
        SCODE* pscode;
        CY* pcyVal;
        DATE* pdate;
        wireBSTR* pbstrVal;
        IUnknown** ppunkVal;
        IDispatch** ppdispVal;
        wirePSAFEARRAY* pparray;
        wireVARIANT* pvarVal;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL decVal;
        DECIMAL* pdecVal;
        CHAR* pcVal;
        USHORT* puiVal;
        ULONG* pulVal;
        ULONGLONG* pullVal;
        INT* pintVal;
        UINT* puintVal;
    }
}

alias DISPID = c_long;
alias MEMBERID = c_long;
alias HREFTYPE = c_ulong;

enum tagTYPEKIND
{
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8
}

alias TYPEKIND = tagTYPEKIND;

struct tagTYPEDESC
{
    union
    {
        tagTYPEDESC* lptdesc;
        tagARRAYDESC* lpadesc;
        HREFTYPE hreftype;
    }

    VARTYPE vt;
}

alias TYPEDESC = tagTYPEDESC;

struct tagARRAYDESC
{
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND[1] rgbounds;
}

alias ARRAYDESC = tagARRAYDESC;

struct tagPARAMDESCEX
{
    ULONG cBytes;
    VARIANTARG varDefaultValue;
}

alias PARAMDESCEX = tagPARAMDESCEX;
alias LPPARAMDESCEX = tagPARAMDESCEX*;

struct tagPARAMDESC
{
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
}

alias PARAMDESC = tagPARAMDESC;
alias LPPARAMDESC = tagPARAMDESC*;

struct tagIDLDESC
{
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
}

alias IDLDESC = tagIDLDESC;
alias LPIDLDESC = tagIDLDESC*;

struct tagELEMDESC
{
    TYPEDESC tdesc;

    union
    {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    }
}

alias ELEMDESC = tagELEMDESC;
alias LPELEMDESC = tagELEMDESC*;

struct tagTYPEATTR
{
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
}

alias TYPEATTR = tagTYPEATTR;
alias LPTYPEATTR = tagTYPEATTR*;

struct tagDISPPARAMS
{
    VARIANTARG* rgvarg;
    DISPID* rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
}

alias DISPPARAMS = tagDISPPARAMS;

struct tagEXCEPINFO
{
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT function (tagEXCEPINFO*) pfnDeferredFillIn;
    SCODE scode;
}

alias EXCEPINFO = tagEXCEPINFO;
alias LPEXCEPINFO = tagEXCEPINFO*;

enum tagCALLCONV
{
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = CC_MSCPASCAL,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9
}

alias CALLCONV = tagCALLCONV;

enum tagFUNCKIND
{
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4
}

alias FUNCKIND = tagFUNCKIND;

enum tagINVOKEKIND
{
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
}

alias INVOKEKIND = tagINVOKEKIND;

struct tagFUNCDESC
{
    MEMBERID memid;
    SCODE* lprgscode;
    ELEMDESC* lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
}

alias FUNCDESC = tagFUNCDESC;
alias LPFUNCDESC = tagFUNCDESC*;

enum tagVARKIND
{
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3
}

alias VARKIND = tagVARKIND;

struct tagVARDESC
{
    MEMBERID memid;
    LPOLESTR lpstrSchema;

    union
    {
        ULONG oInst;
        VARIANT* lpvarValue;
    }

    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
}

alias VARDESC = tagVARDESC;
alias LPVARDESC = tagVARDESC*;

enum tagTYPEFLAGS
{
    TYPEFLAG_FAPPOBJECT = 0x1,
    TYPEFLAG_FCANCREATE = 0x2,
    TYPEFLAG_FLICENSED = 0x4,
    TYPEFLAG_FPREDECLID = 0x8,
    TYPEFLAG_FHIDDEN = 0x10,
    TYPEFLAG_FCONTROL = 0x20,
    TYPEFLAG_FDUAL = 0x40,
    TYPEFLAG_FNONEXTENSIBLE = 0x80,
    TYPEFLAG_FOLEAUTOMATION = 0x100,
    TYPEFLAG_FRESTRICTED = 0x200,
    TYPEFLAG_FAGGREGATABLE = 0x400,
    TYPEFLAG_FREPLACEABLE = 0x800,
    TYPEFLAG_FDISPATCHABLE = 0x1000,
    TYPEFLAG_FREVERSEBIND = 0x2000,
    TYPEFLAG_FPROXY = 0x4000
}

alias TYPEFLAGS = tagTYPEFLAGS;

enum tagFUNCFLAGS
{
    FUNCFLAG_FRESTRICTED = 0x1,
    FUNCFLAG_FSOURCE = 0x2,
    FUNCFLAG_FBINDABLE = 0x4,
    FUNCFLAG_FREQUESTEDIT = 0x8,
    FUNCFLAG_FDISPLAYBIND = 0x10,
    FUNCFLAG_FDEFAULTBIND = 0x20,
    FUNCFLAG_FHIDDEN = 0x40,
    FUNCFLAG_FUSESGETLASTERROR = 0x80,
    FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
    FUNCFLAG_FUIDEFAULT = 0x200,
    FUNCFLAG_FNONBROWSABLE = 0x400,
    FUNCFLAG_FREPLACEABLE = 0x800,
    FUNCFLAG_FIMMEDIATEBIND = 0x1000
}

alias FUNCFLAGS = tagFUNCFLAGS;

enum tagVARFLAGS
{
    VARFLAG_FREADONLY = 0x1,
    VARFLAG_FSOURCE = 0x2,
    VARFLAG_FBINDABLE = 0x4,
    VARFLAG_FREQUESTEDIT = 0x8,
    VARFLAG_FDISPLAYBIND = 0x10,
    VARFLAG_FDEFAULTBIND = 0x20,
    VARFLAG_FHIDDEN = 0x40,
    VARFLAG_FRESTRICTED = 0x80,
    VARFLAG_FDEFAULTCOLLELEM = 0x100,
    VARFLAG_FUIDEFAULT = 0x200,
    VARFLAG_FNONBROWSABLE = 0x400,
    VARFLAG_FREPLACEABLE = 0x800,
    VARFLAG_FIMMEDIATEBIND = 0x1000
}

alias VARFLAGS = tagVARFLAGS;

struct tagCLEANLOCALSTORAGE
{
    IUnknown* pInterface;
    PVOID pStorage;
    DWORD flags;
}

alias CLEANLOCALSTORAGE = tagCLEANLOCALSTORAGE;

struct tagCUSTDATAITEM
{
    GUID guid;
    VARIANTARG varValue;
}

alias CUSTDATAITEM = tagCUSTDATAITEM;
alias LPCUSTDATAITEM = tagCUSTDATAITEM*;

struct tagCUSTDATA
{
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
}

alias CUSTDATA = tagCUSTDATA;
alias LPCUSTDATA = tagCUSTDATA*;

alias LPCREATETYPEINFO = ICreateTypeInfo*;

extern __gshared const GUID IID_ICreateTypeInfo;

struct ICreateTypeInfoVtbl
{
    HRESULT function (ICreateTypeInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICreateTypeInfo* This) AddRef;

    ULONG function (ICreateTypeInfo* This) Release;

    HRESULT function (ICreateTypeInfo* This, const GUID* guid) SetGuid;

    HRESULT function (ICreateTypeInfo* This, UINT uTypeFlags) SetTypeFlags;

    HRESULT function (ICreateTypeInfo* This, LPOLESTR pStrDoc) SetDocString;

    HRESULT function (ICreateTypeInfo* This, DWORD dwHelpContext) SetHelpContext;

    HRESULT function (ICreateTypeInfo* This, WORD wMajorVerNum, WORD wMinorVerNum) SetVersion;

    HRESULT function (ICreateTypeInfo* This, ITypeInfo* pTInfo, HREFTYPE* phRefType) AddRefTypeInfo;

    HRESULT function (ICreateTypeInfo* This, UINT index, FUNCDESC* pFuncDesc) AddFuncDesc;

    HRESULT function (ICreateTypeInfo* This, UINT index, HREFTYPE hRefType) AddImplType;

    HRESULT function (ICreateTypeInfo* This, UINT index, INT implTypeFlags) SetImplTypeFlags;

    HRESULT function (ICreateTypeInfo* This, WORD cbAlignment) SetAlignment;

    HRESULT function (ICreateTypeInfo* This, LPOLESTR pStrSchema) SetSchema;

    HRESULT function (ICreateTypeInfo* This, UINT index, VARDESC* pVarDesc) AddVarDesc;

    HRESULT function (ICreateTypeInfo* This, UINT index, LPOLESTR* rgszNames, UINT cNames) SetFuncAndParamNames;

    HRESULT function (ICreateTypeInfo* This, UINT index, LPOLESTR szName) SetVarName;

    HRESULT function (ICreateTypeInfo* This, TYPEDESC* pTDescAlias) SetTypeDescAlias;

    HRESULT function (ICreateTypeInfo* This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName) DefineFuncAsDllEntry;

    HRESULT function (ICreateTypeInfo* This, UINT index, LPOLESTR szDocString) SetFuncDocString;

    HRESULT function (ICreateTypeInfo* This, UINT index, LPOLESTR szDocString) SetVarDocString;

    HRESULT function (ICreateTypeInfo* This, UINT index, DWORD dwHelpContext) SetFuncHelpContext;

    HRESULT function (ICreateTypeInfo* This, UINT index, DWORD dwHelpContext) SetVarHelpContext;

    HRESULT function (ICreateTypeInfo* This, UINT index, BSTR bstrMops) SetMops;

    HRESULT function (ICreateTypeInfo* This, IDLDESC* pIdlDesc) SetTypeIdldesc;

    HRESULT function (ICreateTypeInfo* This) LayOut;
}

struct ICreateTypeInfo
{
    ICreateTypeInfoVtbl* lpVtbl;
}

HRESULT ICreateTypeInfo_SetGuid_Proxy (ICreateTypeInfo* This, const GUID* guid);
void ICreateTypeInfo_SetGuid_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetTypeFlags_Proxy (ICreateTypeInfo* This, UINT uTypeFlags);
void ICreateTypeInfo_SetTypeFlags_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetDocString_Proxy (ICreateTypeInfo* This, LPOLESTR pStrDoc);
void ICreateTypeInfo_SetDocString_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetHelpContext_Proxy (ICreateTypeInfo* This, DWORD dwHelpContext);
void ICreateTypeInfo_SetHelpContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVersion_Proxy (ICreateTypeInfo* This, WORD wMajorVerNum, WORD wMinorVerNum);
void ICreateTypeInfo_SetVersion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddRefTypeInfo_Proxy (ICreateTypeInfo* This, ITypeInfo* pTInfo, HREFTYPE* phRefType);
void ICreateTypeInfo_AddRefTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddFuncDesc_Proxy (ICreateTypeInfo* This, UINT index, FUNCDESC* pFuncDesc);
void ICreateTypeInfo_AddFuncDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddImplType_Proxy (ICreateTypeInfo* This, UINT index, HREFTYPE hRefType);
void ICreateTypeInfo_AddImplType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetImplTypeFlags_Proxy (ICreateTypeInfo* This, UINT index, INT implTypeFlags);
void ICreateTypeInfo_SetImplTypeFlags_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetAlignment_Proxy (ICreateTypeInfo* This, WORD cbAlignment);
void ICreateTypeInfo_SetAlignment_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetSchema_Proxy (ICreateTypeInfo* This, LPOLESTR pStrSchema);
void ICreateTypeInfo_SetSchema_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_AddVarDesc_Proxy (ICreateTypeInfo* This, UINT index, VARDESC* pVarDesc);
void ICreateTypeInfo_AddVarDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetFuncAndParamNames_Proxy (ICreateTypeInfo* This, UINT index, LPOLESTR* rgszNames, UINT cNames);
void ICreateTypeInfo_SetFuncAndParamNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVarName_Proxy (ICreateTypeInfo* This, UINT index, LPOLESTR szName);
void ICreateTypeInfo_SetVarName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetTypeDescAlias_Proxy (ICreateTypeInfo* This, TYPEDESC* pTDescAlias);
void ICreateTypeInfo_SetTypeDescAlias_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_DefineFuncAsDllEntry_Proxy (ICreateTypeInfo* This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);
void ICreateTypeInfo_DefineFuncAsDllEntry_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetFuncDocString_Proxy (ICreateTypeInfo* This, UINT index, LPOLESTR szDocString);
void ICreateTypeInfo_SetFuncDocString_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVarDocString_Proxy (ICreateTypeInfo* This, UINT index, LPOLESTR szDocString);
void ICreateTypeInfo_SetVarDocString_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetFuncHelpContext_Proxy (ICreateTypeInfo* This, UINT index, DWORD dwHelpContext);
void ICreateTypeInfo_SetFuncHelpContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetVarHelpContext_Proxy (ICreateTypeInfo* This, UINT index, DWORD dwHelpContext);
void ICreateTypeInfo_SetVarHelpContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetMops_Proxy (ICreateTypeInfo* This, UINT index, BSTR bstrMops);
void ICreateTypeInfo_SetMops_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_SetTypeIdldesc_Proxy (ICreateTypeInfo* This, IDLDESC* pIdlDesc);
void ICreateTypeInfo_SetTypeIdldesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo_LayOut_Proxy (ICreateTypeInfo* This);
void ICreateTypeInfo_LayOut_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCREATETYPEINFO2 = ICreateTypeInfo2*;

extern __gshared const GUID IID_ICreateTypeInfo2;

struct ICreateTypeInfo2Vtbl
{
    HRESULT function (ICreateTypeInfo2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICreateTypeInfo2* This) AddRef;

    ULONG function (ICreateTypeInfo2* This) Release;

    HRESULT function (ICreateTypeInfo2* This, const GUID* guid) SetGuid;

    HRESULT function (ICreateTypeInfo2* This, UINT uTypeFlags) SetTypeFlags;

    HRESULT function (ICreateTypeInfo2* This, LPOLESTR pStrDoc) SetDocString;

    HRESULT function (ICreateTypeInfo2* This, DWORD dwHelpContext) SetHelpContext;

    HRESULT function (ICreateTypeInfo2* This, WORD wMajorVerNum, WORD wMinorVerNum) SetVersion;

    HRESULT function (ICreateTypeInfo2* This, ITypeInfo* pTInfo, HREFTYPE* phRefType) AddRefTypeInfo;

    HRESULT function (ICreateTypeInfo2* This, UINT index, FUNCDESC* pFuncDesc) AddFuncDesc;

    HRESULT function (ICreateTypeInfo2* This, UINT index, HREFTYPE hRefType) AddImplType;

    HRESULT function (ICreateTypeInfo2* This, UINT index, INT implTypeFlags) SetImplTypeFlags;

    HRESULT function (ICreateTypeInfo2* This, WORD cbAlignment) SetAlignment;

    HRESULT function (ICreateTypeInfo2* This, LPOLESTR pStrSchema) SetSchema;

    HRESULT function (ICreateTypeInfo2* This, UINT index, VARDESC* pVarDesc) AddVarDesc;

    HRESULT function (ICreateTypeInfo2* This, UINT index, LPOLESTR* rgszNames, UINT cNames) SetFuncAndParamNames;

    HRESULT function (ICreateTypeInfo2* This, UINT index, LPOLESTR szName) SetVarName;

    HRESULT function (ICreateTypeInfo2* This, TYPEDESC* pTDescAlias) SetTypeDescAlias;

    HRESULT function (ICreateTypeInfo2* This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName) DefineFuncAsDllEntry;

    HRESULT function (ICreateTypeInfo2* This, UINT index, LPOLESTR szDocString) SetFuncDocString;

    HRESULT function (ICreateTypeInfo2* This, UINT index, LPOLESTR szDocString) SetVarDocString;

    HRESULT function (ICreateTypeInfo2* This, UINT index, DWORD dwHelpContext) SetFuncHelpContext;

    HRESULT function (ICreateTypeInfo2* This, UINT index, DWORD dwHelpContext) SetVarHelpContext;

    HRESULT function (ICreateTypeInfo2* This, UINT index, BSTR bstrMops) SetMops;

    HRESULT function (ICreateTypeInfo2* This, IDLDESC* pIdlDesc) SetTypeIdldesc;

    HRESULT function (ICreateTypeInfo2* This) LayOut;

    HRESULT function (ICreateTypeInfo2* This, UINT index) DeleteFuncDesc;

    HRESULT function (ICreateTypeInfo2* This, MEMBERID memid, INVOKEKIND invKind) DeleteFuncDescByMemId;

    HRESULT function (ICreateTypeInfo2* This, UINT index) DeleteVarDesc;

    HRESULT function (ICreateTypeInfo2* This, MEMBERID memid) DeleteVarDescByMemId;

    HRESULT function (ICreateTypeInfo2* This, UINT index) DeleteImplType;

    HRESULT function (ICreateTypeInfo2* This, const GUID* guid, VARIANT* pVarVal) SetCustData;

    HRESULT function (ICreateTypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal) SetFuncCustData;

    HRESULT function (ICreateTypeInfo2* This, UINT indexFunc, UINT indexParam, const GUID* guid, VARIANT* pVarVal) SetParamCustData;

    HRESULT function (ICreateTypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal) SetVarCustData;

    HRESULT function (ICreateTypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal) SetImplTypeCustData;

    HRESULT function (ICreateTypeInfo2* This, ULONG dwHelpStringContext) SetHelpStringContext;

    HRESULT function (ICreateTypeInfo2* This, UINT index, ULONG dwHelpStringContext) SetFuncHelpStringContext;

    HRESULT function (ICreateTypeInfo2* This, UINT index, ULONG dwHelpStringContext) SetVarHelpStringContext;

    HRESULT function (ICreateTypeInfo2* This) Invalidate;

    HRESULT function (ICreateTypeInfo2* This, LPOLESTR szName) SetName;
}

struct ICreateTypeInfo2
{
    ICreateTypeInfo2Vtbl* lpVtbl;
}

HRESULT ICreateTypeInfo2_DeleteFuncDesc_Proxy (ICreateTypeInfo2* This, UINT index);
void ICreateTypeInfo2_DeleteFuncDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy (ICreateTypeInfo2* This, MEMBERID memid, INVOKEKIND invKind);
void ICreateTypeInfo2_DeleteFuncDescByMemId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteVarDesc_Proxy (ICreateTypeInfo2* This, UINT index);
void ICreateTypeInfo2_DeleteVarDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteVarDescByMemId_Proxy (ICreateTypeInfo2* This, MEMBERID memid);
void ICreateTypeInfo2_DeleteVarDescByMemId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_DeleteImplType_Proxy (ICreateTypeInfo2* This, UINT index);
void ICreateTypeInfo2_DeleteImplType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetCustData_Proxy (ICreateTypeInfo2* This, const GUID* guid, VARIANT* pVarVal);
void ICreateTypeInfo2_SetCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetFuncCustData_Proxy (ICreateTypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal);
void ICreateTypeInfo2_SetFuncCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetParamCustData_Proxy (ICreateTypeInfo2* This, UINT indexFunc, UINT indexParam, const GUID* guid, VARIANT* pVarVal);
void ICreateTypeInfo2_SetParamCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetVarCustData_Proxy (ICreateTypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal);
void ICreateTypeInfo2_SetVarCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetImplTypeCustData_Proxy (ICreateTypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal);
void ICreateTypeInfo2_SetImplTypeCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetHelpStringContext_Proxy (ICreateTypeInfo2* This, ULONG dwHelpStringContext);
void ICreateTypeInfo2_SetHelpStringContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetFuncHelpStringContext_Proxy (ICreateTypeInfo2* This, UINT index, ULONG dwHelpStringContext);
void ICreateTypeInfo2_SetFuncHelpStringContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetVarHelpStringContext_Proxy (ICreateTypeInfo2* This, UINT index, ULONG dwHelpStringContext);
void ICreateTypeInfo2_SetVarHelpStringContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_Invalidate_Proxy (ICreateTypeInfo2* This);
void ICreateTypeInfo2_Invalidate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeInfo2_SetName_Proxy (ICreateTypeInfo2* This, LPOLESTR szName);
void ICreateTypeInfo2_SetName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCREATETYPELIB = ICreateTypeLib*;

extern __gshared const GUID IID_ICreateTypeLib;

struct ICreateTypeLibVtbl
{
    HRESULT function (ICreateTypeLib* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICreateTypeLib* This) AddRef;

    ULONG function (ICreateTypeLib* This) Release;

    HRESULT function (ICreateTypeLib* This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo** ppCTInfo) CreateTypeInfo;

    HRESULT function (ICreateTypeLib* This, LPOLESTR szName) SetName;

    HRESULT function (ICreateTypeLib* This, WORD wMajorVerNum, WORD wMinorVerNum) SetVersion;

    HRESULT function (ICreateTypeLib* This, const GUID* guid) SetGuid;

    HRESULT function (ICreateTypeLib* This, LPOLESTR szDoc) SetDocString;

    HRESULT function (ICreateTypeLib* This, LPOLESTR szHelpFileName) SetHelpFileName;

    HRESULT function (ICreateTypeLib* This, DWORD dwHelpContext) SetHelpContext;

    HRESULT function (ICreateTypeLib* This, LCID lcid) SetLcid;

    HRESULT function (ICreateTypeLib* This, UINT uLibFlags) SetLibFlags;

    HRESULT function (ICreateTypeLib* This) SaveAllChanges;
}

struct ICreateTypeLib
{
    ICreateTypeLibVtbl* lpVtbl;
}

HRESULT ICreateTypeLib_CreateTypeInfo_Proxy (ICreateTypeLib* This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo** ppCTInfo);
void ICreateTypeLib_CreateTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetName_Proxy (ICreateTypeLib* This, LPOLESTR szName);
void ICreateTypeLib_SetName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetVersion_Proxy (ICreateTypeLib* This, WORD wMajorVerNum, WORD wMinorVerNum);
void ICreateTypeLib_SetVersion_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetGuid_Proxy (ICreateTypeLib* This, const GUID* guid);
void ICreateTypeLib_SetGuid_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetDocString_Proxy (ICreateTypeLib* This, LPOLESTR szDoc);
void ICreateTypeLib_SetDocString_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetHelpFileName_Proxy (ICreateTypeLib* This, LPOLESTR szHelpFileName);
void ICreateTypeLib_SetHelpFileName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetHelpContext_Proxy (ICreateTypeLib* This, DWORD dwHelpContext);
void ICreateTypeLib_SetHelpContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetLcid_Proxy (ICreateTypeLib* This, LCID lcid);
void ICreateTypeLib_SetLcid_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SetLibFlags_Proxy (ICreateTypeLib* This, UINT uLibFlags);
void ICreateTypeLib_SetLibFlags_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib_SaveAllChanges_Proxy (ICreateTypeLib* This);
void ICreateTypeLib_SaveAllChanges_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCREATETYPELIB2 = ICreateTypeLib2*;
extern __gshared const GUID IID_ICreateTypeLib2;

struct ICreateTypeLib2Vtbl
{
    HRESULT function (ICreateTypeLib2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICreateTypeLib2* This) AddRef;

    ULONG function (ICreateTypeLib2* This) Release;

    HRESULT function (ICreateTypeLib2* This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo** ppCTInfo) CreateTypeInfo;

    HRESULT function (ICreateTypeLib2* This, LPOLESTR szName) SetName;

    HRESULT function (ICreateTypeLib2* This, WORD wMajorVerNum, WORD wMinorVerNum) SetVersion;

    HRESULT function (ICreateTypeLib2* This, const GUID* guid) SetGuid;

    HRESULT function (ICreateTypeLib2* This, LPOLESTR szDoc) SetDocString;

    HRESULT function (ICreateTypeLib2* This, LPOLESTR szHelpFileName) SetHelpFileName;

    HRESULT function (ICreateTypeLib2* This, DWORD dwHelpContext) SetHelpContext;

    HRESULT function (ICreateTypeLib2* This, LCID lcid) SetLcid;

    HRESULT function (ICreateTypeLib2* This, UINT uLibFlags) SetLibFlags;

    HRESULT function (ICreateTypeLib2* This) SaveAllChanges;

    HRESULT function (ICreateTypeLib2* This, LPOLESTR szName) DeleteTypeInfo;

    HRESULT function (ICreateTypeLib2* This, const GUID* guid, VARIANT* pVarVal) SetCustData;

    HRESULT function (ICreateTypeLib2* This, ULONG dwHelpStringContext) SetHelpStringContext;

    HRESULT function (ICreateTypeLib2* This, LPOLESTR szFileName) SetHelpStringDll;
}

struct ICreateTypeLib2
{
    ICreateTypeLib2Vtbl* lpVtbl;
}

HRESULT ICreateTypeLib2_DeleteTypeInfo_Proxy (ICreateTypeLib2* This, LPOLESTR szName);
void ICreateTypeLib2_DeleteTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib2_SetCustData_Proxy (ICreateTypeLib2* This, const GUID* guid, VARIANT* pVarVal);
void ICreateTypeLib2_SetCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib2_SetHelpStringContext_Proxy (ICreateTypeLib2* This, ULONG dwHelpStringContext);
void ICreateTypeLib2_SetHelpStringContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateTypeLib2_SetHelpStringDll_Proxy (ICreateTypeLib2* This, LPOLESTR szFileName);
void ICreateTypeLib2_SetHelpStringDll_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPDISPATCH = IDispatch*;

extern __gshared const GUID IID_IDispatch;

struct IDispatchVtbl
{
    HRESULT function (IDispatch* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDispatch* This) AddRef;

    ULONG function (IDispatch* This) Release;

    HRESULT function (IDispatch* This, UINT* pctinfo) GetTypeInfoCount;

    HRESULT function (IDispatch* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;

    HRESULT function (IDispatch* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;

    HRESULT function (IDispatch* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
}

struct IDispatch
{
    IDispatchVtbl* lpVtbl;
}

HRESULT IDispatch_GetTypeInfoCount_Proxy (IDispatch* This, UINT* pctinfo);
void IDispatch_GetTypeInfoCount_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDispatch_GetTypeInfo_Proxy (IDispatch* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo);
void IDispatch_GetTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDispatch_GetIDsOfNames_Proxy (IDispatch* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId);
void IDispatch_GetIDsOfNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDispatch_RemoteInvoke_Proxy (IDispatch* This, DISPID dispIdMember, const IID* riid, LCID lcid, DWORD dwFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* pArgErr, UINT cVarRef, UINT* rgVarRefIdx, VARIANTARG* rgVarRef);
void IDispatch_RemoteInvoke_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDispatch_Invoke_Proxy (IDispatch* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr);
HRESULT IDispatch_Invoke_Stub (IDispatch* This, DISPID dispIdMember, const IID* riid, LCID lcid, DWORD dwFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* pArgErr, UINT cVarRef, UINT* rgVarRefIdx, VARIANTARG* rgVarRef);

alias LPENUMVARIANT = IEnumVARIANT*;

extern __gshared const GUID IID_IEnumVARIANT;

struct IEnumVARIANTVtbl
{
    HRESULT function (IEnumVARIANT* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumVARIANT* This) AddRef;

    ULONG function (IEnumVARIANT* This) Release;

    HRESULT function (IEnumVARIANT* This, ULONG celt, VARIANT* rgVar, ULONG* pCeltFetched) Next;

    HRESULT function (IEnumVARIANT* This, ULONG celt) Skip;

    HRESULT function (IEnumVARIANT* This) Reset;

    HRESULT function (IEnumVARIANT* This, IEnumVARIANT** ppEnum) Clone;
}

struct IEnumVARIANT
{
    IEnumVARIANTVtbl* lpVtbl;
}

HRESULT IEnumVARIANT_RemoteNext_Proxy (IEnumVARIANT* This, ULONG celt, VARIANT* rgVar, ULONG* pCeltFetched);
void IEnumVARIANT_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Skip_Proxy (IEnumVARIANT* This, ULONG celt);
void IEnumVARIANT_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Reset_Proxy (IEnumVARIANT* This);
void IEnumVARIANT_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Clone_Proxy (IEnumVARIANT* This, IEnumVARIANT** ppEnum);
void IEnumVARIANT_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumVARIANT_Next_Proxy (IEnumVARIANT* This, ULONG celt, VARIANT* rgVar, ULONG* pCeltFetched);
HRESULT IEnumVARIANT_Next_Stub (IEnumVARIANT* This, ULONG celt, VARIANT* rgVar, ULONG* pCeltFetched);

alias LPTYPECOMP = ITypeComp*;

enum tagDESCKIND
{
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5
}

alias DESCKIND = tagDESCKIND;

union tagBINDPTR
{
    FUNCDESC* lpfuncdesc;
    VARDESC* lpvardesc;
    ITypeComp* lptcomp;
}

alias BINDPTR = tagBINDPTR;
alias LPBINDPTR = tagBINDPTR*;

extern __gshared const GUID IID_ITypeComp;

struct ITypeCompVtbl
{
    HRESULT function (ITypeComp* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeComp* This) AddRef;

    ULONG function (ITypeComp* This) Release;

    HRESULT function (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo** ppTInfo, DESCKIND* pDescKind, BINDPTR* pBindPtr) Bind;

    HRESULT function (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp) BindType;
}

struct ITypeComp
{
    ITypeCompVtbl* lpVtbl;
}

HRESULT ITypeComp_RemoteBind_Proxy (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo** ppTInfo, DESCKIND* pDescKind, LPFUNCDESC* ppFuncDesc, LPVARDESC* ppVarDesc, ITypeComp** ppTypeComp, CLEANLOCALSTORAGE* pDummy);
void ITypeComp_RemoteBind_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeComp_RemoteBindType_Proxy (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, ITypeInfo** ppTInfo);
void ITypeComp_RemoteBindType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeComp_Bind_Proxy (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo** ppTInfo, DESCKIND* pDescKind, BINDPTR* pBindPtr);
HRESULT ITypeComp_Bind_Stub (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo** ppTInfo, DESCKIND* pDescKind, LPFUNCDESC* ppFuncDesc, LPVARDESC* ppVarDesc, ITypeComp** ppTypeComp, CLEANLOCALSTORAGE* pDummy);
HRESULT ITypeComp_BindType_Proxy (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp);
HRESULT ITypeComp_BindType_Stub (ITypeComp* This, LPOLESTR szName, ULONG lHashVal, ITypeInfo** ppTInfo);

alias LPTYPEINFO = ITypeInfo*;

extern __gshared const GUID IID_ITypeInfo;

struct ITypeInfoVtbl
{
    HRESULT function (ITypeInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeInfo* This) AddRef;

    ULONG function (ITypeInfo* This) Release;

    HRESULT function (ITypeInfo* This, TYPEATTR** ppTypeAttr) GetTypeAttr;

    HRESULT function (ITypeInfo* This, ITypeComp** ppTComp) GetTypeComp;

    HRESULT function (ITypeInfo* This, UINT index, FUNCDESC** ppFuncDesc) GetFuncDesc;

    HRESULT function (ITypeInfo* This, UINT index, VARDESC** ppVarDesc) GetVarDesc;

    HRESULT function (ITypeInfo* This, MEMBERID memid, BSTR* rgBstrNames, UINT cMaxNames, UINT* pcNames) GetNames;

    HRESULT function (ITypeInfo* This, UINT index, HREFTYPE* pRefType) GetRefTypeOfImplType;

    HRESULT function (ITypeInfo* This, UINT index, INT* pImplTypeFlags) GetImplTypeFlags;

    HRESULT function (ITypeInfo* This, LPOLESTR* rgszNames, UINT cNames, MEMBERID* pMemId) GetIDsOfNames;

    HRESULT function (ITypeInfo* This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;

    HRESULT function (ITypeInfo* This, MEMBERID memid, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile) GetDocumentation;

    HRESULT function (ITypeInfo* This, MEMBERID memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, WORD* pwOrdinal) GetDllEntry;

    HRESULT function (ITypeInfo* This, HREFTYPE hRefType, ITypeInfo** ppTInfo) GetRefTypeInfo;

    HRESULT function (ITypeInfo* This, MEMBERID memid, INVOKEKIND invKind, PVOID* ppv) AddressOfMember;

    HRESULT function (ITypeInfo* This, IUnknown* pUnkOuter, const IID* riid, PVOID* ppvObj) CreateInstance;

    HRESULT function (ITypeInfo* This, MEMBERID memid, BSTR* pBstrMops) GetMops;

    HRESULT function (ITypeInfo* This, ITypeLib** ppTLib, UINT* pIndex) GetContainingTypeLib;

    void function (ITypeInfo* This, TYPEATTR* pTypeAttr) ReleaseTypeAttr;

    void function (ITypeInfo* This, FUNCDESC* pFuncDesc) ReleaseFuncDesc;

    void function (ITypeInfo* This, VARDESC* pVarDesc) ReleaseVarDesc;
}

struct ITypeInfo
{
    ITypeInfoVtbl* lpVtbl;
}

HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy (ITypeInfo* This, LPTYPEATTR* ppTypeAttr, CLEANLOCALSTORAGE* pDummy);
void ITypeInfo_RemoteGetTypeAttr_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetTypeComp_Proxy (ITypeInfo* This, ITypeComp** ppTComp);
void ITypeInfo_GetTypeComp_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy (ITypeInfo* This, UINT index, LPFUNCDESC* ppFuncDesc, CLEANLOCALSTORAGE* pDummy);
void ITypeInfo_RemoteGetFuncDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetVarDesc_Proxy (ITypeInfo* This, UINT index, LPVARDESC* ppVarDesc, CLEANLOCALSTORAGE* pDummy);
void ITypeInfo_RemoteGetVarDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetNames_Proxy (ITypeInfo* This, MEMBERID memid, BSTR* rgBstrNames, UINT cMaxNames, UINT* pcNames);
void ITypeInfo_RemoteGetNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetRefTypeOfImplType_Proxy (ITypeInfo* This, UINT index, HREFTYPE* pRefType);
void ITypeInfo_GetRefTypeOfImplType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetImplTypeFlags_Proxy (ITypeInfo* This, UINT index, INT* pImplTypeFlags);
void ITypeInfo_GetImplTypeFlags_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy (ITypeInfo* This);
void ITypeInfo_LocalGetIDsOfNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalInvoke_Proxy (ITypeInfo* This);
void ITypeInfo_LocalInvoke_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetDocumentation_Proxy (ITypeInfo* This, MEMBERID memid, DWORD refPtrFlags, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
void ITypeInfo_RemoteGetDocumentation_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetDllEntry_Proxy (ITypeInfo* This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR* pBstrDllName, BSTR* pBstrName, WORD* pwOrdinal);
void ITypeInfo_RemoteGetDllEntry_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetRefTypeInfo_Proxy (ITypeInfo* This, HREFTYPE hRefType, ITypeInfo** ppTInfo);
void ITypeInfo_GetRefTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalAddressOfMember_Proxy (ITypeInfo* This);
void ITypeInfo_LocalAddressOfMember_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteCreateInstance_Proxy (ITypeInfo* This, const IID* riid, IUnknown** ppvObj);
void ITypeInfo_RemoteCreateInstance_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetMops_Proxy (ITypeInfo* This, MEMBERID memid, BSTR* pBstrMops);
void ITypeInfo_GetMops_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy (ITypeInfo* This, ITypeLib** ppTLib, UINT* pIndex);
void ITypeInfo_RemoteGetContainingTypeLib_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy (ITypeInfo* This);
void ITypeInfo_LocalReleaseTypeAttr_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy (ITypeInfo* This);
void ITypeInfo_LocalReleaseFuncDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy (ITypeInfo* This);
void ITypeInfo_LocalReleaseVarDesc_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo_GetTypeAttr_Proxy (ITypeInfo* This, TYPEATTR** ppTypeAttr);
HRESULT ITypeInfo_GetTypeAttr_Stub (ITypeInfo* This, LPTYPEATTR* ppTypeAttr, CLEANLOCALSTORAGE* pDummy);
HRESULT ITypeInfo_GetFuncDesc_Proxy (ITypeInfo* This, UINT index, FUNCDESC** ppFuncDesc);
HRESULT ITypeInfo_GetFuncDesc_Stub (ITypeInfo* This, UINT index, LPFUNCDESC* ppFuncDesc, CLEANLOCALSTORAGE* pDummy);
HRESULT ITypeInfo_GetVarDesc_Proxy (ITypeInfo* This, UINT index, VARDESC** ppVarDesc);
HRESULT ITypeInfo_GetVarDesc_Stub (ITypeInfo* This, UINT index, LPVARDESC* ppVarDesc, CLEANLOCALSTORAGE* pDummy);
HRESULT ITypeInfo_GetNames_Proxy (ITypeInfo* This, MEMBERID memid, BSTR* rgBstrNames, UINT cMaxNames, UINT* pcNames);
HRESULT ITypeInfo_GetNames_Stub (ITypeInfo* This, MEMBERID memid, BSTR* rgBstrNames, UINT cMaxNames, UINT* pcNames);
HRESULT ITypeInfo_GetIDsOfNames_Proxy (ITypeInfo* This, LPOLESTR* rgszNames, UINT cNames, MEMBERID* pMemId);
HRESULT ITypeInfo_GetIDsOfNames_Stub (ITypeInfo* This);
HRESULT ITypeInfo_Invoke_Proxy (ITypeInfo* This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr);
HRESULT ITypeInfo_Invoke_Stub (ITypeInfo* This);
HRESULT ITypeInfo_GetDocumentation_Proxy (ITypeInfo* This, MEMBERID memid, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
HRESULT ITypeInfo_GetDocumentation_Stub (ITypeInfo* This, MEMBERID memid, DWORD refPtrFlags, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
HRESULT ITypeInfo_GetDllEntry_Proxy (ITypeInfo* This, MEMBERID memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, WORD* pwOrdinal);
HRESULT ITypeInfo_GetDllEntry_Stub (ITypeInfo* This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR* pBstrDllName, BSTR* pBstrName, WORD* pwOrdinal);
HRESULT ITypeInfo_AddressOfMember_Proxy (ITypeInfo* This, MEMBERID memid, INVOKEKIND invKind, PVOID* ppv);
HRESULT ITypeInfo_AddressOfMember_Stub (ITypeInfo* This);
HRESULT ITypeInfo_CreateInstance_Proxy (ITypeInfo* This, IUnknown* pUnkOuter, const IID* riid, PVOID* ppvObj);
HRESULT ITypeInfo_CreateInstance_Stub (ITypeInfo* This, const IID* riid, IUnknown** ppvObj);
HRESULT ITypeInfo_GetContainingTypeLib_Proxy (ITypeInfo* This, ITypeLib** ppTLib, UINT* pIndex);
HRESULT ITypeInfo_GetContainingTypeLib_Stub (ITypeInfo* This, ITypeLib** ppTLib, UINT* pIndex);
void ITypeInfo_ReleaseTypeAttr_Proxy (ITypeInfo* This, TYPEATTR* pTypeAttr);
HRESULT ITypeInfo_ReleaseTypeAttr_Stub (ITypeInfo* This);
void ITypeInfo_ReleaseFuncDesc_Proxy (ITypeInfo* This, FUNCDESC* pFuncDesc);
HRESULT ITypeInfo_ReleaseFuncDesc_Stub (ITypeInfo* This);
void ITypeInfo_ReleaseVarDesc_Proxy (ITypeInfo* This, VARDESC* pVarDesc);
HRESULT ITypeInfo_ReleaseVarDesc_Stub (ITypeInfo* This);

alias LPTYPEINFO2 = ITypeInfo2*;

extern __gshared const GUID IID_ITypeInfo2;

struct ITypeInfo2Vtbl
{
    HRESULT function (ITypeInfo2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeInfo2* This) AddRef;

    ULONG function (ITypeInfo2* This) Release;

    HRESULT function (ITypeInfo2* This, TYPEATTR** ppTypeAttr) GetTypeAttr;

    HRESULT function (ITypeInfo2* This, ITypeComp** ppTComp) GetTypeComp;

    HRESULT function (ITypeInfo2* This, UINT index, FUNCDESC** ppFuncDesc) GetFuncDesc;

    HRESULT function (ITypeInfo2* This, UINT index, VARDESC** ppVarDesc) GetVarDesc;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, BSTR* rgBstrNames, UINT cMaxNames, UINT* pcNames) GetNames;

    HRESULT function (ITypeInfo2* This, UINT index, HREFTYPE* pRefType) GetRefTypeOfImplType;

    HRESULT function (ITypeInfo2* This, UINT index, INT* pImplTypeFlags) GetImplTypeFlags;

    HRESULT function (ITypeInfo2* This, LPOLESTR* rgszNames, UINT cNames, MEMBERID* pMemId) GetIDsOfNames;

    HRESULT function (ITypeInfo2* This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile) GetDocumentation;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, WORD* pwOrdinal) GetDllEntry;

    HRESULT function (ITypeInfo2* This, HREFTYPE hRefType, ITypeInfo** ppTInfo) GetRefTypeInfo;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, INVOKEKIND invKind, PVOID* ppv) AddressOfMember;

    HRESULT function (ITypeInfo2* This, IUnknown* pUnkOuter, const IID* riid, PVOID* ppvObj) CreateInstance;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, BSTR* pBstrMops) GetMops;

    HRESULT function (ITypeInfo2* This, ITypeLib** ppTLib, UINT* pIndex) GetContainingTypeLib;

    void function (ITypeInfo2* This, TYPEATTR* pTypeAttr) ReleaseTypeAttr;

    void function (ITypeInfo2* This, FUNCDESC* pFuncDesc) ReleaseFuncDesc;

    void function (ITypeInfo2* This, VARDESC* pVarDesc) ReleaseVarDesc;

    HRESULT function (ITypeInfo2* This, TYPEKIND* pTypeKind) GetTypeKind;

    HRESULT function (ITypeInfo2* This, ULONG* pTypeFlags) GetTypeFlags;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, INVOKEKIND invKind, UINT* pFuncIndex) GetFuncIndexOfMemId;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, UINT* pVarIndex) GetVarIndexOfMemId;

    HRESULT function (ITypeInfo2* This, const GUID* guid, VARIANT* pVarVal) GetCustData;

    HRESULT function (ITypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal) GetFuncCustData;

    HRESULT function (ITypeInfo2* This, UINT indexFunc, UINT indexParam, const GUID* guid, VARIANT* pVarVal) GetParamCustData;

    HRESULT function (ITypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal) GetVarCustData;

    HRESULT function (ITypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal) GetImplTypeCustData;

    HRESULT function (ITypeInfo2* This, MEMBERID memid, LCID lcid, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll) GetDocumentation2;

    HRESULT function (ITypeInfo2* This, CUSTDATA* pCustData) GetAllCustData;

    HRESULT function (ITypeInfo2* This, UINT index, CUSTDATA* pCustData) GetAllFuncCustData;

    HRESULT function (ITypeInfo2* This, UINT indexFunc, UINT indexParam, CUSTDATA* pCustData) GetAllParamCustData;

    HRESULT function (ITypeInfo2* This, UINT index, CUSTDATA* pCustData) GetAllVarCustData;

    HRESULT function (ITypeInfo2* This, UINT index, CUSTDATA* pCustData) GetAllImplTypeCustData;
}

struct ITypeInfo2
{
    ITypeInfo2Vtbl* lpVtbl;
}

HRESULT ITypeInfo2_GetTypeKind_Proxy (ITypeInfo2* This, TYPEKIND* pTypeKind);
void ITypeInfo2_GetTypeKind_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetTypeFlags_Proxy (ITypeInfo2* This, ULONG* pTypeFlags);
void ITypeInfo2_GetTypeFlags_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetFuncIndexOfMemId_Proxy (ITypeInfo2* This, MEMBERID memid, INVOKEKIND invKind, UINT* pFuncIndex);
void ITypeInfo2_GetFuncIndexOfMemId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetVarIndexOfMemId_Proxy (ITypeInfo2* This, MEMBERID memid, UINT* pVarIndex);
void ITypeInfo2_GetVarIndexOfMemId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetCustData_Proxy (ITypeInfo2* This, const GUID* guid, VARIANT* pVarVal);
void ITypeInfo2_GetCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetFuncCustData_Proxy (ITypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal);
void ITypeInfo2_GetFuncCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetParamCustData_Proxy (ITypeInfo2* This, UINT indexFunc, UINT indexParam, const GUID* guid, VARIANT* pVarVal);
void ITypeInfo2_GetParamCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetVarCustData_Proxy (ITypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal);
void ITypeInfo2_GetVarCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetImplTypeCustData_Proxy (ITypeInfo2* This, UINT index, const GUID* guid, VARIANT* pVarVal);
void ITypeInfo2_GetImplTypeCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy (ITypeInfo2* This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll);
void ITypeInfo2_RemoteGetDocumentation2_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllCustData_Proxy (ITypeInfo2* This, CUSTDATA* pCustData);
void ITypeInfo2_GetAllCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllFuncCustData_Proxy (ITypeInfo2* This, UINT index, CUSTDATA* pCustData);
void ITypeInfo2_GetAllFuncCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllParamCustData_Proxy (ITypeInfo2* This, UINT indexFunc, UINT indexParam, CUSTDATA* pCustData);
void ITypeInfo2_GetAllParamCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllVarCustData_Proxy (ITypeInfo2* This, UINT index, CUSTDATA* pCustData);
void ITypeInfo2_GetAllVarCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetAllImplTypeCustData_Proxy (ITypeInfo2* This, UINT index, CUSTDATA* pCustData);
void ITypeInfo2_GetAllImplTypeCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeInfo2_GetDocumentation2_Proxy (ITypeInfo2* This, MEMBERID memid, LCID lcid, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll);
HRESULT ITypeInfo2_GetDocumentation2_Stub (ITypeInfo2* This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll);

enum tagSYSKIND
{
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3
}

alias SYSKIND = tagSYSKIND;

enum tagLIBFLAGS
{
    LIBFLAG_FRESTRICTED = 0x1,
    LIBFLAG_FCONTROL = 0x2,
    LIBFLAG_FHIDDEN = 0x4,
    LIBFLAG_FHASDISKIMAGE = 0x8
}

alias LIBFLAGS = tagLIBFLAGS;

alias LPTYPELIB = ITypeLib*;

struct tagTLIBATTR
{
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
}

alias TLIBATTR = tagTLIBATTR;
alias LPTLIBATTR = tagTLIBATTR*;

extern __gshared const GUID IID_ITypeLib;

struct ITypeLibVtbl
{
    HRESULT function (ITypeLib* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeLib* This) AddRef;

    ULONG function (ITypeLib* This) Release;

    UINT function (ITypeLib* This) GetTypeInfoCount;

    HRESULT function (ITypeLib* This, UINT index, ITypeInfo** ppTInfo) GetTypeInfo;

    HRESULT function (ITypeLib* This, UINT index, TYPEKIND* pTKind) GetTypeInfoType;

    HRESULT function (ITypeLib* This, const GUID* guid, ITypeInfo** ppTinfo) GetTypeInfoOfGuid;

    HRESULT function (ITypeLib* This, TLIBATTR** ppTLibAttr) GetLibAttr;

    HRESULT function (ITypeLib* This, ITypeComp** ppTComp) GetTypeComp;

    HRESULT function (ITypeLib* This, INT index, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile) GetDocumentation;

    HRESULT function (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL* pfName) IsName;

    HRESULT function (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo** ppTInfo, MEMBERID* rgMemId, USHORT* pcFound) FindName;

    void function (ITypeLib* This, TLIBATTR* pTLibAttr) ReleaseTLibAttr;
}

struct ITypeLib
{
    ITypeLibVtbl* lpVtbl;
}

HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy (ITypeLib* This, UINT* pcTInfo);
void ITypeLib_RemoteGetTypeInfoCount_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeInfo_Proxy (ITypeLib* This, UINT index, ITypeInfo** ppTInfo);
void ITypeLib_GetTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeInfoType_Proxy (ITypeLib* This, UINT index, TYPEKIND* pTKind);
void ITypeLib_GetTypeInfoType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeInfoOfGuid_Proxy (ITypeLib* This, const GUID* guid, ITypeInfo** ppTinfo);
void ITypeLib_GetTypeInfoOfGuid_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteGetLibAttr_Proxy (ITypeLib* This, LPTLIBATTR* ppTLibAttr, CLEANLOCALSTORAGE* pDummy);
void ITypeLib_RemoteGetLibAttr_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_GetTypeComp_Proxy (ITypeLib* This, ITypeComp** ppTComp);
void ITypeLib_GetTypeComp_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteGetDocumentation_Proxy (ITypeLib* This, INT index, DWORD refPtrFlags, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
void ITypeLib_RemoteGetDocumentation_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteIsName_Proxy (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL* pfName, BSTR* pBstrLibName);
void ITypeLib_RemoteIsName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_RemoteFindName_Proxy (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo** ppTInfo, MEMBERID* rgMemId, USHORT* pcFound, BSTR* pBstrLibName);
void ITypeLib_RemoteFindName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy (ITypeLib* This);
void ITypeLib_LocalReleaseTLibAttr_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
UINT ITypeLib_GetTypeInfoCount_Proxy (ITypeLib* This);
HRESULT ITypeLib_GetTypeInfoCount_Stub (ITypeLib* This, UINT* pcTInfo);
HRESULT ITypeLib_GetLibAttr_Proxy (ITypeLib* This, TLIBATTR** ppTLibAttr);
HRESULT ITypeLib_GetLibAttr_Stub (ITypeLib* This, LPTLIBATTR* ppTLibAttr, CLEANLOCALSTORAGE* pDummy);
HRESULT ITypeLib_GetDocumentation_Proxy (ITypeLib* This, INT index, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
HRESULT ITypeLib_GetDocumentation_Stub (ITypeLib* This, INT index, DWORD refPtrFlags, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile);
HRESULT ITypeLib_IsName_Proxy (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL* pfName);
HRESULT ITypeLib_IsName_Stub (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL* pfName, BSTR* pBstrLibName);
HRESULT ITypeLib_FindName_Proxy (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo** ppTInfo, MEMBERID* rgMemId, USHORT* pcFound);
HRESULT ITypeLib_FindName_Stub (ITypeLib* This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo** ppTInfo, MEMBERID* rgMemId, USHORT* pcFound, BSTR* pBstrLibName);
void ITypeLib_ReleaseTLibAttr_Proxy (ITypeLib* This, TLIBATTR* pTLibAttr);
HRESULT ITypeLib_ReleaseTLibAttr_Stub (ITypeLib* This);

alias LPTYPELIB2 = ITypeLib2*;

extern __gshared const GUID IID_ITypeLib2;

struct ITypeLib2Vtbl
{
    HRESULT function (ITypeLib2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeLib2* This) AddRef;

    ULONG function (ITypeLib2* This) Release;

    UINT function (ITypeLib2* This) GetTypeInfoCount;

    HRESULT function (ITypeLib2* This, UINT index, ITypeInfo** ppTInfo) GetTypeInfo;

    HRESULT function (ITypeLib2* This, UINT index, TYPEKIND* pTKind) GetTypeInfoType;

    HRESULT function (ITypeLib2* This, const GUID* guid, ITypeInfo** ppTinfo) GetTypeInfoOfGuid;

    HRESULT function (ITypeLib2* This, TLIBATTR** ppTLibAttr) GetLibAttr;

    HRESULT function (ITypeLib2* This, ITypeComp** ppTComp) GetTypeComp;

    HRESULT function (ITypeLib2* This, INT index, BSTR* pBstrName, BSTR* pBstrDocString, DWORD* pdwHelpContext, BSTR* pBstrHelpFile) GetDocumentation;

    HRESULT function (ITypeLib2* This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL* pfName) IsName;

    HRESULT function (ITypeLib2* This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo** ppTInfo, MEMBERID* rgMemId, USHORT* pcFound) FindName;

    void function (ITypeLib2* This, TLIBATTR* pTLibAttr) ReleaseTLibAttr;

    HRESULT function (ITypeLib2* This, const GUID* guid, VARIANT* pVarVal) GetCustData;

    HRESULT function (ITypeLib2* This, ULONG* pcUniqueNames, ULONG* pcchUniqueNames) GetLibStatistics;

    HRESULT function (ITypeLib2* This, INT index, LCID lcid, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll) GetDocumentation2;

    HRESULT function (ITypeLib2* This, CUSTDATA* pCustData) GetAllCustData;
}

struct ITypeLib2
{
    ITypeLib2Vtbl* lpVtbl;
}

HRESULT ITypeLib2_GetCustData_Proxy (ITypeLib2* This, const GUID* guid, VARIANT* pVarVal);
void ITypeLib2_GetCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy (ITypeLib2* This, ULONG* pcUniqueNames, ULONG* pcchUniqueNames);
void ITypeLib2_RemoteGetLibStatistics_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy (ITypeLib2* This, INT index, LCID lcid, DWORD refPtrFlags, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll);
void ITypeLib2_RemoteGetDocumentation2_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib2_GetAllCustData_Proxy (ITypeLib2* This, CUSTDATA* pCustData);
void ITypeLib2_GetAllCustData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeLib2_GetLibStatistics_Proxy (ITypeLib2* This, ULONG* pcUniqueNames, ULONG* pcchUniqueNames);
HRESULT ITypeLib2_GetLibStatistics_Stub (ITypeLib2* This, ULONG* pcUniqueNames, ULONG* pcchUniqueNames);
HRESULT ITypeLib2_GetDocumentation2_Proxy (ITypeLib2* This, INT index, LCID lcid, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll);
HRESULT ITypeLib2_GetDocumentation2_Stub (ITypeLib2* This, INT index, LCID lcid, DWORD refPtrFlags, BSTR* pbstrHelpString, DWORD* pdwHelpStringContext, BSTR* pbstrHelpStringDll);

alias LPTYPECHANGEEVENTS = ITypeChangeEvents*;

enum tagCHANGEKIND
{
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7
}

alias CHANGEKIND = tagCHANGEKIND;

extern __gshared const GUID IID_ITypeChangeEvents;

struct ITypeChangeEventsVtbl
{
    HRESULT function (ITypeChangeEvents* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeChangeEvents* This) AddRef;

    ULONG function (ITypeChangeEvents* This) Release;

    HRESULT function (ITypeChangeEvents* This, CHANGEKIND changeKind, ITypeInfo* pTInfoBefore, LPOLESTR pStrName, INT* pfCancel) RequestTypeChange;

    HRESULT function (ITypeChangeEvents* This, CHANGEKIND changeKind, ITypeInfo* pTInfoAfter, LPOLESTR pStrName) AfterTypeChange;
}

struct ITypeChangeEvents
{
    ITypeChangeEventsVtbl* lpVtbl;
}

HRESULT ITypeChangeEvents_RequestTypeChange_Proxy (ITypeChangeEvents* This, CHANGEKIND changeKind, ITypeInfo* pTInfoBefore, LPOLESTR pStrName, INT* pfCancel);
void ITypeChangeEvents_RequestTypeChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeChangeEvents_AfterTypeChange_Proxy (ITypeChangeEvents* This, CHANGEKIND changeKind, ITypeInfo* pTInfoAfter, LPOLESTR pStrName);
void ITypeChangeEvents_AfterTypeChange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPERRORINFO = IErrorInfo*;

extern __gshared const GUID IID_IErrorInfo;

struct IErrorInfoVtbl
{
    HRESULT function (IErrorInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IErrorInfo* This) AddRef;

    ULONG function (IErrorInfo* This) Release;

    HRESULT function (IErrorInfo* This, GUID* pGUID) GetGUID;

    HRESULT function (IErrorInfo* This, BSTR* pBstrSource) GetSource;

    HRESULT function (IErrorInfo* This, BSTR* pBstrDescription) GetDescription;

    HRESULT function (IErrorInfo* This, BSTR* pBstrHelpFile) GetHelpFile;

    HRESULT function (IErrorInfo* This, DWORD* pdwHelpContext) GetHelpContext;
}

struct IErrorInfo
{
    IErrorInfoVtbl* lpVtbl;
}

HRESULT IErrorInfo_GetGUID_Proxy (IErrorInfo* This, GUID* pGUID);
void IErrorInfo_GetGUID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetSource_Proxy (IErrorInfo* This, BSTR* pBstrSource);
void IErrorInfo_GetSource_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetDescription_Proxy (IErrorInfo* This, BSTR* pBstrDescription);
void IErrorInfo_GetDescription_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetHelpFile_Proxy (IErrorInfo* This, BSTR* pBstrHelpFile);
void IErrorInfo_GetHelpFile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IErrorInfo_GetHelpContext_Proxy (IErrorInfo* This, DWORD* pdwHelpContext);
void IErrorInfo_GetHelpContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCREATEERRORINFO = ICreateErrorInfo*;

extern __gshared const GUID IID_ICreateErrorInfo;

struct ICreateErrorInfoVtbl
{
    HRESULT function (ICreateErrorInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICreateErrorInfo* This) AddRef;

    ULONG function (ICreateErrorInfo* This) Release;

    HRESULT function (ICreateErrorInfo* This, const GUID* rguid) SetGUID;

    HRESULT function (ICreateErrorInfo* This, LPOLESTR szSource) SetSource;

    HRESULT function (ICreateErrorInfo* This, LPOLESTR szDescription) SetDescription;

    HRESULT function (ICreateErrorInfo* This, LPOLESTR szHelpFile) SetHelpFile;

    HRESULT function (ICreateErrorInfo* This, DWORD dwHelpContext) SetHelpContext;
}

struct ICreateErrorInfo
{
    ICreateErrorInfoVtbl* lpVtbl;
}

HRESULT ICreateErrorInfo_SetGUID_Proxy (ICreateErrorInfo* This, const GUID* rguid);
void ICreateErrorInfo_SetGUID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetSource_Proxy (ICreateErrorInfo* This, LPOLESTR szSource);
void ICreateErrorInfo_SetSource_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetDescription_Proxy (ICreateErrorInfo* This, LPOLESTR szDescription);
void ICreateErrorInfo_SetDescription_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetHelpFile_Proxy (ICreateErrorInfo* This, LPOLESTR szHelpFile);
void ICreateErrorInfo_SetHelpFile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICreateErrorInfo_SetHelpContext_Proxy (ICreateErrorInfo* This, DWORD dwHelpContext);
void ICreateErrorInfo_SetHelpContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPSUPPORTERRORINFO = ISupportErrorInfo*;

extern __gshared const GUID IID_ISupportErrorInfo;

struct ISupportErrorInfoVtbl
{
    HRESULT function (ISupportErrorInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISupportErrorInfo* This) AddRef;

    ULONG function (ISupportErrorInfo* This) Release;

    HRESULT function (ISupportErrorInfo* This, const IID* riid) InterfaceSupportsErrorInfo;
}

struct ISupportErrorInfo
{
    ISupportErrorInfoVtbl* lpVtbl;
}

HRESULT ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy (ISupportErrorInfo* This, const IID* riid);
void ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ITypeFactory;

struct ITypeFactoryVtbl
{
    HRESULT function (ITypeFactory* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeFactory* This) AddRef;

    ULONG function (ITypeFactory* This) Release;

    HRESULT function (ITypeFactory* This, ITypeInfo* pTypeInfo, const IID* riid, IUnknown** ppv) CreateFromTypeInfo;
}

struct ITypeFactory
{
    ITypeFactoryVtbl* lpVtbl;
}

HRESULT ITypeFactory_CreateFromTypeInfo_Proxy (ITypeFactory* This, ITypeInfo* pTypeInfo, const IID* riid, IUnknown** ppv);
void ITypeFactory_CreateFromTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_ITypeMarshal;

struct ITypeMarshalVtbl
{
    HRESULT function (ITypeMarshal* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ITypeMarshal* This) AddRef;

    ULONG function (ITypeMarshal* This) Release;

    HRESULT function (ITypeMarshal* This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG* pSize) Size;

    HRESULT function (ITypeMarshal* This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE* pBuffer, ULONG* pcbWritten) Marshal;

    HRESULT function (ITypeMarshal* This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE* pBuffer, ULONG* pcbRead) Unmarshal;

    HRESULT function (ITypeMarshal* This, PVOID pvType) Free;
}

struct ITypeMarshal
{
    ITypeMarshalVtbl* lpVtbl;
}

HRESULT ITypeMarshal_Size_Proxy (ITypeMarshal* This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG* pSize);
void ITypeMarshal_Size_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeMarshal_Marshal_Proxy (ITypeMarshal* This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE* pBuffer, ULONG* pcbWritten);
void ITypeMarshal_Marshal_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeMarshal_Unmarshal_Proxy (ITypeMarshal* This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE* pBuffer, ULONG* pcbRead);
void ITypeMarshal_Unmarshal_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ITypeMarshal_Free_Proxy (ITypeMarshal* This, PVOID pvType);
void ITypeMarshal_Free_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPRECORDINFO = IRecordInfo*;

extern __gshared const GUID IID_IRecordInfo;

struct IRecordInfoVtbl
{
    HRESULT function (IRecordInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IRecordInfo* This) AddRef;

    ULONG function (IRecordInfo* This) Release;

    HRESULT function (IRecordInfo* This, PVOID pvNew) RecordInit;

    HRESULT function (IRecordInfo* This, PVOID pvExisting) RecordClear;

    HRESULT function (IRecordInfo* This, PVOID pvExisting, PVOID pvNew) RecordCopy;

    HRESULT function (IRecordInfo* This, GUID* pguid) GetGuid;

    HRESULT function (IRecordInfo* This, BSTR* pbstrName) GetName;

    HRESULT function (IRecordInfo* This, ULONG* pcbSize) GetSize;

    HRESULT function (IRecordInfo* This, ITypeInfo** ppTypeInfo) GetTypeInfo;

    HRESULT function (IRecordInfo* This, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField) GetField;

    HRESULT function (IRecordInfo* This, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField, PVOID* ppvDataCArray) GetFieldNoCopy;

    HRESULT function (IRecordInfo* This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField) PutField;

    HRESULT function (IRecordInfo* This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField) PutFieldNoCopy;

    HRESULT function (IRecordInfo* This, ULONG* pcNames, BSTR* rgBstrNames) GetFieldNames;

    WINBOOL function (IRecordInfo* This, IRecordInfo* pRecordInfo) IsMatchingType;

    PVOID function (IRecordInfo* This) RecordCreate;

    HRESULT function (IRecordInfo* This, PVOID pvSource, PVOID* ppvDest) RecordCreateCopy;

    HRESULT function (IRecordInfo* This, PVOID pvRecord) RecordDestroy;
}

struct IRecordInfo
{
    IRecordInfoVtbl* lpVtbl;
}

HRESULT IRecordInfo_RecordInit_Proxy (IRecordInfo* This, PVOID pvNew);
void IRecordInfo_RecordInit_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordClear_Proxy (IRecordInfo* This, PVOID pvExisting);
void IRecordInfo_RecordClear_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordCopy_Proxy (IRecordInfo* This, PVOID pvExisting, PVOID pvNew);
void IRecordInfo_RecordCopy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetGuid_Proxy (IRecordInfo* This, GUID* pguid);
void IRecordInfo_GetGuid_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetName_Proxy (IRecordInfo* This, BSTR* pbstrName);
void IRecordInfo_GetName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetSize_Proxy (IRecordInfo* This, ULONG* pcbSize);
void IRecordInfo_GetSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetTypeInfo_Proxy (IRecordInfo* This, ITypeInfo** ppTypeInfo);
void IRecordInfo_GetTypeInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetField_Proxy (IRecordInfo* This, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField);
void IRecordInfo_GetField_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetFieldNoCopy_Proxy (IRecordInfo* This, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField, PVOID* ppvDataCArray);
void IRecordInfo_GetFieldNoCopy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_PutField_Proxy (IRecordInfo* This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField);
void IRecordInfo_PutField_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_PutFieldNoCopy_Proxy (IRecordInfo* This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT* pvarField);
void IRecordInfo_PutFieldNoCopy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_GetFieldNames_Proxy (IRecordInfo* This, ULONG* pcNames, BSTR* rgBstrNames);
void IRecordInfo_GetFieldNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
WINBOOL IRecordInfo_IsMatchingType_Proxy (IRecordInfo* This, IRecordInfo* pRecordInfo);
void IRecordInfo_IsMatchingType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
PVOID IRecordInfo_RecordCreate_Proxy (IRecordInfo* This);
void IRecordInfo_RecordCreate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordCreateCopy_Proxy (IRecordInfo* This, PVOID pvSource, PVOID* ppvDest);
void IRecordInfo_RecordCreateCopy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IRecordInfo_RecordDestroy_Proxy (IRecordInfo* This, PVOID pvRecord);
void IRecordInfo_RecordDestroy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPERRORLOG = IErrorLog*;

extern __gshared const GUID IID_IErrorLog;

struct IErrorLogVtbl
{
    HRESULT function (IErrorLog* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IErrorLog* This) AddRef;

    ULONG function (IErrorLog* This) Release;

    HRESULT function (IErrorLog* This, LPCOLESTR pszPropName, EXCEPINFO* pExcepInfo) AddError;
}

struct IErrorLog
{
    IErrorLogVtbl* lpVtbl;
}

HRESULT IErrorLog_AddError_Proxy (IErrorLog* This, LPCOLESTR pszPropName, EXCEPINFO* pExcepInfo);
void IErrorLog_AddError_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPPROPERTYBAG = IPropertyBag*;

extern __gshared const GUID IID_IPropertyBag;

struct IPropertyBagVtbl
{
    HRESULT function (IPropertyBag* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPropertyBag* This) AddRef;

    ULONG function (IPropertyBag* This) Release;

    HRESULT function (IPropertyBag* This, LPCOLESTR pszPropName, VARIANT* pVar, IErrorLog* pErrorLog) Read;

    HRESULT function (IPropertyBag* This, LPCOLESTR pszPropName, VARIANT* pVar) Write;
}

struct IPropertyBag
{
    IPropertyBagVtbl* lpVtbl;
}

HRESULT IPropertyBag_RemoteRead_Proxy (IPropertyBag* This, LPCOLESTR pszPropName, VARIANT* pVar, IErrorLog* pErrorLog, DWORD varType, IUnknown* pUnkObj);
void IPropertyBag_RemoteRead_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyBag_Write_Proxy (IPropertyBag* This, LPCOLESTR pszPropName, VARIANT* pVar);
void IPropertyBag_Write_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyBag_Read_Proxy (IPropertyBag* This, LPCOLESTR pszPropName, VARIANT* pVar, IErrorLog* pErrorLog);
HRESULT IPropertyBag_Read_Stub (IPropertyBag* This, LPCOLESTR pszPropName, VARIANT* pVar, IErrorLog* pErrorLog, DWORD varType, IUnknown* pUnkObj);

ULONG VARIANT_UserSize (ULONG*, ULONG, VARIANT*);
ubyte* VARIANT_UserMarshal (ULONG*, ubyte*, VARIANT*);
ubyte* VARIANT_UserUnmarshal (ULONG*, ubyte*, VARIANT*);
void VARIANT_UserFree (ULONG*, VARIANT*);
ULONG BSTR_UserSize (ULONG*, ULONG, BSTR*);
ubyte* BSTR_UserMarshal (ULONG*, ubyte*, BSTR*);
ubyte* BSTR_UserUnmarshal (ULONG*, ubyte*, BSTR*);
void BSTR_UserFree (ULONG*, BSTR*);
ULONG CLEANLOCALSTORAGE_UserSize (ULONG*, ULONG, CLEANLOCALSTORAGE*);
ubyte* CLEANLOCALSTORAGE_UserMarshal (ULONG*, ubyte*, CLEANLOCALSTORAGE*);
ubyte* CLEANLOCALSTORAGE_UserUnmarshal (ULONG*, ubyte*, CLEANLOCALSTORAGE*);
void CLEANLOCALSTORAGE_UserFree (ULONG*, CLEANLOCALSTORAGE*);

struct DOMDocument;

struct DOMFreeThreadedDocument;

struct XMLHTTPRequest;

struct XMLDSOControl;

struct XMLDocument;

struct _xml_error
{
    uint _nLine;
    BSTR _pchBuf;
    uint _cchBuf;
    uint _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
}

alias XML_ERROR = _xml_error;

extern __gshared RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
extern __gshared RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;

enum tagDOMNodeType
{
    NODE_INVALID = 0,
    NODE_ELEMENT = 1,
    NODE_ATTRIBUTE = 2,
    NODE_TEXT = 3,
    NODE_CDATA_SECTION = 4,
    NODE_ENTITY_REFERENCE = 5,
    NODE_ENTITY = 6,
    NODE_PROCESSING_INSTRUCTION = 7,
    NODE_COMMENT = 8,
    NODE_DOCUMENT = 9,
    NODE_DOCUMENT_TYPE = 10,
    NODE_DOCUMENT_FRAGMENT = 11,
    NODE_NOTATION = 12
}

alias DOMNodeType = tagDOMNodeType;

enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = 1,
    XMLELEMTYPE_COMMENT = 2,
    XMLELEMTYPE_DOCUMENT = 3,
    XMLELEMTYPE_DTD = 4,
    XMLELEMTYPE_PI = 5,
    XMLELEMTYPE_OTHER = 6
}

alias XMLELEM_TYPE = tagXMLEMEM_TYPE;

extern __gshared const IID LIBID_MSXML;

extern __gshared const IID IID_IXMLDOMImplementation;

struct IXMLDOMImplementationVtbl
{
    HRESULT function (IXMLDOMImplementation* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMImplementation* This) AddRef;
    ULONG function (IXMLDOMImplementation* This) Release;
    HRESULT function (IXMLDOMImplementation* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMImplementation* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMImplementation* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMImplementation* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMImplementation* This, BSTR feature, BSTR version_, VARIANT_BOOL* hasFeature) hasFeature;
}

struct IXMLDOMImplementation
{
    IXMLDOMImplementationVtbl* lpVtbl;
}

HRESULT IXMLDOMImplementation_hasFeature_Proxy (IXMLDOMImplementation* This, BSTR feature, BSTR version_, VARIANT_BOOL* hasFeature);
void IXMLDOMImplementation_hasFeature_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMNode;

struct IXMLDOMNodeVtbl
{
    HRESULT function (IXMLDOMNode* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMNode* This) AddRef;
    ULONG function (IXMLDOMNode* This) Release;
    HRESULT function (IXMLDOMNode* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMNode* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMNode* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMNode* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMNode* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMNode* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMNode* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMNode* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMNode* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMNode* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMNode* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMNode* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMNode* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMNode* This, BSTR text) put_text;
    HRESULT function (IXMLDOMNode* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMNode* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMNode* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMNode* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMNode* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMNode* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMNode* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMNode* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMNode* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMNode* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMNode* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMNode* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMNode* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
}

struct IXMLDOMNode
{
    IXMLDOMNodeVtbl* lpVtbl;
}

HRESULT IXMLDOMNode_get_nodeName_Proxy (IXMLDOMNode* This, BSTR* name);
void IXMLDOMNode_get_nodeName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_nodeValue_Proxy (IXMLDOMNode* This, VARIANT* value);
void IXMLDOMNode_get_nodeValue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_put_nodeValue_Proxy (IXMLDOMNode* This, VARIANT value);
void IXMLDOMNode_put_nodeValue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_nodeType_Proxy (IXMLDOMNode* This, DOMNodeType* type);
void IXMLDOMNode_get_nodeType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_parentNode_Proxy (IXMLDOMNode* This, IXMLDOMNode** parent);
void IXMLDOMNode_get_parentNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_childNodes_Proxy (IXMLDOMNode* This, IXMLDOMNodeList** childList);
void IXMLDOMNode_get_childNodes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_firstChild_Proxy (IXMLDOMNode* This, IXMLDOMNode** firstChild);
void IXMLDOMNode_get_firstChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_lastChild_Proxy (IXMLDOMNode* This, IXMLDOMNode** lastChild);
void IXMLDOMNode_get_lastChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_previousSibling_Proxy (IXMLDOMNode* This, IXMLDOMNode** previousSibling);
void IXMLDOMNode_get_previousSibling_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_nextSibling_Proxy (IXMLDOMNode* This, IXMLDOMNode** nextSibling);
void IXMLDOMNode_get_nextSibling_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_attributes_Proxy (IXMLDOMNode* This, IXMLDOMNamedNodeMap** attributeMap);
void IXMLDOMNode_get_attributes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_insertBefore_Proxy (IXMLDOMNode* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild);
void IXMLDOMNode_insertBefore_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_replaceChild_Proxy (IXMLDOMNode* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild);
void IXMLDOMNode_replaceChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_removeChild_Proxy (IXMLDOMNode* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild);
void IXMLDOMNode_removeChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_appendChild_Proxy (IXMLDOMNode* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild);
void IXMLDOMNode_appendChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_hasChildNodes_Proxy (IXMLDOMNode* This, VARIANT_BOOL* hasChild);
void IXMLDOMNode_hasChildNodes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_ownerDocument_Proxy (IXMLDOMNode* This, IXMLDOMDocument** DOMDocument);
void IXMLDOMNode_get_ownerDocument_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_cloneNode_Proxy (IXMLDOMNode* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot);
void IXMLDOMNode_cloneNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_nodeTypeString_Proxy (IXMLDOMNode* This, BSTR* nodeType);
void IXMLDOMNode_get_nodeTypeString_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_text_Proxy (IXMLDOMNode* This, BSTR* text);
void IXMLDOMNode_get_text_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_put_text_Proxy (IXMLDOMNode* This, BSTR text);
void IXMLDOMNode_put_text_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_specified_Proxy (IXMLDOMNode* This, VARIANT_BOOL* isSpecified);
void IXMLDOMNode_get_specified_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_definition_Proxy (IXMLDOMNode* This, IXMLDOMNode** definitionNode);
void IXMLDOMNode_get_definition_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_nodeTypedValue_Proxy (IXMLDOMNode* This, VARIANT* typedValue);
void IXMLDOMNode_get_nodeTypedValue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_put_nodeTypedValue_Proxy (IXMLDOMNode* This, VARIANT typedValue);
void IXMLDOMNode_put_nodeTypedValue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_dataType_Proxy (IXMLDOMNode* This, VARIANT* dataTypeName);
void IXMLDOMNode_get_dataType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_put_dataType_Proxy (IXMLDOMNode* This, BSTR dataTypeName);
void IXMLDOMNode_put_dataType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_xml_Proxy (IXMLDOMNode* This, BSTR* xmlString);
void IXMLDOMNode_get_xml_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_transformNode_Proxy (IXMLDOMNode* This, IXMLDOMNode* stylesheet, BSTR* xmlString);
void IXMLDOMNode_transformNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_selectNodes_Proxy (IXMLDOMNode* This, BSTR queryString, IXMLDOMNodeList** resultList);
void IXMLDOMNode_selectNodes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_selectSingleNode_Proxy (IXMLDOMNode* This, BSTR queryString, IXMLDOMNode** resultNode);
void IXMLDOMNode_selectSingleNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_parsed_Proxy (IXMLDOMNode* This, VARIANT_BOOL* isParsed);
void IXMLDOMNode_get_parsed_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_namespaceURI_Proxy (IXMLDOMNode* This, BSTR* namespaceURI);
void IXMLDOMNode_get_namespaceURI_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_prefix_Proxy (IXMLDOMNode* This, BSTR* prefixString);
void IXMLDOMNode_get_prefix_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_get_baseName_Proxy (IXMLDOMNode* This, BSTR* nameString);
void IXMLDOMNode_get_baseName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNode_transformNodeToObject_Proxy (IXMLDOMNode* This, IXMLDOMNode* stylesheet, VARIANT outputObject);
void IXMLDOMNode_transformNodeToObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMDocumentFragment;

struct IXMLDOMDocumentFragmentVtbl
{
    HRESULT function (IXMLDOMDocumentFragment* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMDocumentFragment* This) AddRef;
    ULONG function (IXMLDOMDocumentFragment* This) Release;
    HRESULT function (IXMLDOMDocumentFragment* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMDocumentFragment* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMDocumentFragment* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMDocumentFragment* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMDocumentFragment* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR text) put_text;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMDocumentFragment* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMDocumentFragment* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMDocumentFragment* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
}

struct IXMLDOMDocumentFragment
{
    IXMLDOMDocumentFragmentVtbl* lpVtbl;
}

extern __gshared const IID IID_IXMLDOMDocument;

struct IXMLDOMDocumentVtbl
{
    HRESULT function (IXMLDOMDocument* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMDocument* This) AddRef;
    ULONG function (IXMLDOMDocument* This) Release;
    HRESULT function (IXMLDOMDocument* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMDocument* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMDocument* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMDocument* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMDocument* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMDocument* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMDocument* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMDocument* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMDocument* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMDocument* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMDocument* This, BSTR text) put_text;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMDocument* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMDocument* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMDocument* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMDocument* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMDocument* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMDocument* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMDocument* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMDocument* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMDocument* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMDocument* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMDocumentType** documentType) get_doctype;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMImplementation** impl) get_implementation;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMElement** DOMElement) get_documentElement;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMElement* DOMElement) putref_documentElement;
    HRESULT function (IXMLDOMDocument* This, BSTR tagName, IXMLDOMElement** element) createElement;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMDocumentFragment** docFrag) createDocumentFragment;
    HRESULT function (IXMLDOMDocument* This, BSTR data, IXMLDOMText** text) createTextNode;
    HRESULT function (IXMLDOMDocument* This, BSTR data, IXMLDOMComment** comment) createComment;
    HRESULT function (IXMLDOMDocument* This, BSTR data, IXMLDOMCDATASection** cdata) createCDATASection;
    HRESULT function (IXMLDOMDocument* This, BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi) createProcessingInstruction;
    HRESULT function (IXMLDOMDocument* This, BSTR name, IXMLDOMAttribute** attribute) createAttribute;
    HRESULT function (IXMLDOMDocument* This, BSTR name, IXMLDOMEntityReference** entityRef) createEntityReference;
    HRESULT function (IXMLDOMDocument* This, BSTR tagName, IXMLDOMNodeList** resultList) getElementsByTagName;
    HRESULT function (IXMLDOMDocument* This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node) createNode;
    HRESULT function (IXMLDOMDocument* This, BSTR idString, IXMLDOMNode** node) nodeFromID;
    HRESULT function (IXMLDOMDocument* This, VARIANT xmlSource, VARIANT_BOOL* isSuccessful) load;
    HRESULT function (IXMLDOMDocument* This, LONG* value) get_readyState;
    HRESULT function (IXMLDOMDocument* This, IXMLDOMParseError** errorObj) get_parseError;
    HRESULT function (IXMLDOMDocument* This, BSTR* urlString) get_url;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* isAsync) get_async;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL isAsync) put_async;
    HRESULT function (IXMLDOMDocument* This) abort;
    HRESULT function (IXMLDOMDocument* This, BSTR bstrXML, VARIANT_BOOL* isSuccessful) loadXML;
    HRESULT function (IXMLDOMDocument* This, VARIANT destination) save;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* isValidating) get_validateOnParse;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL isValidating) put_validateOnParse;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* isResolving) get_resolveExternals;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL isResolving) put_resolveExternals;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL* isPreserving) get_preserveWhiteSpace;
    HRESULT function (IXMLDOMDocument* This, VARIANT_BOOL isPreserving) put_preserveWhiteSpace;
    HRESULT function (IXMLDOMDocument* This, VARIANT readystatechangeSink) put_onreadystatechange;
    HRESULT function (IXMLDOMDocument* This, VARIANT ondataavailableSink) put_ondataavailable;
    HRESULT function (IXMLDOMDocument* This, VARIANT ontransformnodeSink) put_ontransformnode;
}

struct IXMLDOMDocument
{
    IXMLDOMDocumentVtbl* lpVtbl;
}

HRESULT IXMLDOMDocument_get_doctype_Proxy (IXMLDOMDocument* This, IXMLDOMDocumentType** documentType);
void IXMLDOMDocument_get_doctype_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_implementation_Proxy (IXMLDOMDocument* This, IXMLDOMImplementation** impl);
void IXMLDOMDocument_get_implementation_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_documentElement_Proxy (IXMLDOMDocument* This, IXMLDOMElement** DOMElement);
void IXMLDOMDocument_get_documentElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_putref_documentElement_Proxy (IXMLDOMDocument* This, IXMLDOMElement* DOMElement);
void IXMLDOMDocument_putref_documentElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createElement_Proxy (IXMLDOMDocument* This, BSTR tagName, IXMLDOMElement** element);
void IXMLDOMDocument_createElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createDocumentFragment_Proxy (IXMLDOMDocument* This, IXMLDOMDocumentFragment** docFrag);
void IXMLDOMDocument_createDocumentFragment_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createTextNode_Proxy (IXMLDOMDocument* This, BSTR data, IXMLDOMText** text);
void IXMLDOMDocument_createTextNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createComment_Proxy (IXMLDOMDocument* This, BSTR data, IXMLDOMComment** comment);
void IXMLDOMDocument_createComment_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createCDATASection_Proxy (IXMLDOMDocument* This, BSTR data, IXMLDOMCDATASection** cdata);
void IXMLDOMDocument_createCDATASection_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createProcessingInstruction_Proxy (IXMLDOMDocument* This, BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi);
void IXMLDOMDocument_createProcessingInstruction_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createAttribute_Proxy (IXMLDOMDocument* This, BSTR name, IXMLDOMAttribute** attribute);
void IXMLDOMDocument_createAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createEntityReference_Proxy (IXMLDOMDocument* This, BSTR name, IXMLDOMEntityReference** entityRef);
void IXMLDOMDocument_createEntityReference_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_getElementsByTagName_Proxy (IXMLDOMDocument* This, BSTR tagName, IXMLDOMNodeList** resultList);
void IXMLDOMDocument_getElementsByTagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_createNode_Proxy (IXMLDOMDocument* This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node);
void IXMLDOMDocument_createNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_nodeFromID_Proxy (IXMLDOMDocument* This, BSTR idString, IXMLDOMNode** node);
void IXMLDOMDocument_nodeFromID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_load_Proxy (IXMLDOMDocument* This, VARIANT xmlSource, VARIANT_BOOL* isSuccessful);
void IXMLDOMDocument_load_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_readyState_Proxy (IXMLDOMDocument* This, LONG* value);
void IXMLDOMDocument_get_readyState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_parseError_Proxy (IXMLDOMDocument* This, IXMLDOMParseError** errorObj);
void IXMLDOMDocument_get_parseError_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_url_Proxy (IXMLDOMDocument* This, BSTR* urlString);
void IXMLDOMDocument_get_url_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_async_Proxy (IXMLDOMDocument* This, VARIANT_BOOL* isAsync);
void IXMLDOMDocument_get_async_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_async_Proxy (IXMLDOMDocument* This, VARIANT_BOOL isAsync);
void IXMLDOMDocument_put_async_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_abort_Proxy (IXMLDOMDocument* This);
void IXMLDOMDocument_abort_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_loadXML_Proxy (IXMLDOMDocument* This, BSTR bstrXML, VARIANT_BOOL* isSuccessful);
void IXMLDOMDocument_loadXML_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_save_Proxy (IXMLDOMDocument* This, VARIANT destination);
void IXMLDOMDocument_save_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_validateOnParse_Proxy (IXMLDOMDocument* This, VARIANT_BOOL* isValidating);
void IXMLDOMDocument_get_validateOnParse_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_validateOnParse_Proxy (IXMLDOMDocument* This, VARIANT_BOOL isValidating);
void IXMLDOMDocument_put_validateOnParse_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_resolveExternals_Proxy (IXMLDOMDocument* This, VARIANT_BOOL* isResolving);
void IXMLDOMDocument_get_resolveExternals_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_resolveExternals_Proxy (IXMLDOMDocument* This, VARIANT_BOOL isResolving);
void IXMLDOMDocument_put_resolveExternals_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_get_preserveWhiteSpace_Proxy (IXMLDOMDocument* This, VARIANT_BOOL* isPreserving);
void IXMLDOMDocument_get_preserveWhiteSpace_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_preserveWhiteSpace_Proxy (IXMLDOMDocument* This, VARIANT_BOOL isPreserving);
void IXMLDOMDocument_put_preserveWhiteSpace_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_onreadystatechange_Proxy (IXMLDOMDocument* This, VARIANT readystatechangeSink);
void IXMLDOMDocument_put_onreadystatechange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_ondataavailable_Proxy (IXMLDOMDocument* This, VARIANT ondataavailableSink);
void IXMLDOMDocument_put_ondataavailable_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocument_put_ontransformnode_Proxy (IXMLDOMDocument* This, VARIANT ontransformnodeSink);
void IXMLDOMDocument_put_ontransformnode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMNodeList;

struct IXMLDOMNodeListVtbl
{
    HRESULT function (IXMLDOMNodeList* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMNodeList* This) AddRef;
    ULONG function (IXMLDOMNodeList* This) Release;
    HRESULT function (IXMLDOMNodeList* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMNodeList* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMNodeList* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMNodeList* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMNodeList* This, LONG index, IXMLDOMNode** listItem) get_item;
    HRESULT function (IXMLDOMNodeList* This, LONG* listLength) get_length;
    HRESULT function (IXMLDOMNodeList* This, IXMLDOMNode** nextItem) nextNode;
    HRESULT function (IXMLDOMNodeList* This) reset;
    HRESULT function (IXMLDOMNodeList* This, IUnknown** ppUnk) get__newEnum;
}

struct IXMLDOMNodeList
{
    IXMLDOMNodeListVtbl* lpVtbl;
}

HRESULT IXMLDOMNodeList_get_item_Proxy (IXMLDOMNodeList* This, LONG index, IXMLDOMNode** listItem);
void IXMLDOMNodeList_get_item_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNodeList_get_length_Proxy (IXMLDOMNodeList* This, LONG* listLength);
void IXMLDOMNodeList_get_length_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNodeList_nextNode_Proxy (IXMLDOMNodeList* This, IXMLDOMNode** nextItem);
void IXMLDOMNodeList_nextNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNodeList_reset_Proxy (IXMLDOMNodeList* This);
void IXMLDOMNodeList_reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNodeList_get__newEnum_Proxy (IXMLDOMNodeList* This, IUnknown** ppUnk);
void IXMLDOMNodeList_get__newEnum_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMNamedNodeMap;

struct IXMLDOMNamedNodeMapVtbl
{
    HRESULT function (IXMLDOMNamedNodeMap* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMNamedNodeMap* This) AddRef;
    ULONG function (IXMLDOMNamedNodeMap* This) Release;
    HRESULT function (IXMLDOMNamedNodeMap* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMNamedNodeMap* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMNamedNodeMap* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMNamedNodeMap* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMNamedNodeMap* This, BSTR name, IXMLDOMNode** namedItem) getNamedItem;
    HRESULT function (IXMLDOMNamedNodeMap* This, IXMLDOMNode* newItem, IXMLDOMNode** nameItem) setNamedItem;
    HRESULT function (IXMLDOMNamedNodeMap* This, BSTR name, IXMLDOMNode** namedItem) removeNamedItem;
    HRESULT function (IXMLDOMNamedNodeMap* This, LONG index, IXMLDOMNode** listItem) get_item;
    HRESULT function (IXMLDOMNamedNodeMap* This, LONG* listLength) get_length;
    HRESULT function (IXMLDOMNamedNodeMap* This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) getQualifiedItem;
    HRESULT function (IXMLDOMNamedNodeMap* This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) removeQualifiedItem;
    HRESULT function (IXMLDOMNamedNodeMap* This, IXMLDOMNode** nextItem) nextNode;
    HRESULT function (IXMLDOMNamedNodeMap* This) reset;
    HRESULT function (IXMLDOMNamedNodeMap* This, IUnknown** ppUnk) get__newEnum;
}

struct IXMLDOMNamedNodeMap
{
    IXMLDOMNamedNodeMapVtbl* lpVtbl;
}

HRESULT IXMLDOMNamedNodeMap_getNamedItem_Proxy (IXMLDOMNamedNodeMap* This, BSTR name, IXMLDOMNode** namedItem);
void IXMLDOMNamedNodeMap_getNamedItem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_setNamedItem_Proxy (IXMLDOMNamedNodeMap* This, IXMLDOMNode* newItem, IXMLDOMNode** nameItem);
void IXMLDOMNamedNodeMap_setNamedItem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_removeNamedItem_Proxy (IXMLDOMNamedNodeMap* This, BSTR name, IXMLDOMNode** namedItem);
void IXMLDOMNamedNodeMap_removeNamedItem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_get_item_Proxy (IXMLDOMNamedNodeMap* This, LONG index, IXMLDOMNode** listItem);
void IXMLDOMNamedNodeMap_get_item_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_get_length_Proxy (IXMLDOMNamedNodeMap* This, LONG* listLength);
void IXMLDOMNamedNodeMap_get_length_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_getQualifiedItem_Proxy (IXMLDOMNamedNodeMap* This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem);
void IXMLDOMNamedNodeMap_getQualifiedItem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy (IXMLDOMNamedNodeMap* This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem);
void IXMLDOMNamedNodeMap_removeQualifiedItem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_nextNode_Proxy (IXMLDOMNamedNodeMap* This, IXMLDOMNode** nextItem);
void IXMLDOMNamedNodeMap_nextNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_reset_Proxy (IXMLDOMNamedNodeMap* This);
void IXMLDOMNamedNodeMap_reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNamedNodeMap_get__newEnum_Proxy (IXMLDOMNamedNodeMap* This, IUnknown** ppUnk);
void IXMLDOMNamedNodeMap_get__newEnum_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMCharacterData;

struct IXMLDOMCharacterDataVtbl
{
    HRESULT function (IXMLDOMCharacterData* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMCharacterData* This) AddRef;
    ULONG function (IXMLDOMCharacterData* This) Release;
    HRESULT function (IXMLDOMCharacterData* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMCharacterData* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMCharacterData* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMCharacterData* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMCharacterData* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMCharacterData* This, BSTR text) put_text;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMCharacterData* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMCharacterData* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMCharacterData* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMCharacterData* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMCharacterData* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMCharacterData* This, BSTR* data) get_data;
    HRESULT function (IXMLDOMCharacterData* This, BSTR data) put_data;
    HRESULT function (IXMLDOMCharacterData* This, LONG* dataLength) get_length;
    HRESULT function (IXMLDOMCharacterData* This, LONG offset, LONG count, BSTR* data) substringData;
    HRESULT function (IXMLDOMCharacterData* This, BSTR data) appendData;
    HRESULT function (IXMLDOMCharacterData* This, LONG offset, BSTR data) insertData;
    HRESULT function (IXMLDOMCharacterData* This, LONG offset, LONG count) deleteData;
    HRESULT function (IXMLDOMCharacterData* This, LONG offset, LONG count, BSTR data) replaceData;
}

struct IXMLDOMCharacterData
{
    IXMLDOMCharacterDataVtbl* lpVtbl;
}

HRESULT IXMLDOMCharacterData_get_data_Proxy (IXMLDOMCharacterData* This, BSTR* data);
void IXMLDOMCharacterData_get_data_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_put_data_Proxy (IXMLDOMCharacterData* This, BSTR data);
void IXMLDOMCharacterData_put_data_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_get_length_Proxy (IXMLDOMCharacterData* This, LONG* dataLength);
void IXMLDOMCharacterData_get_length_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_substringData_Proxy (IXMLDOMCharacterData* This, LONG offset, LONG count, BSTR* data);
void IXMLDOMCharacterData_substringData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_appendData_Proxy (IXMLDOMCharacterData* This, BSTR data);
void IXMLDOMCharacterData_appendData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_insertData_Proxy (IXMLDOMCharacterData* This, LONG offset, BSTR data);
void IXMLDOMCharacterData_insertData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_deleteData_Proxy (IXMLDOMCharacterData* This, LONG offset, LONG count);
void IXMLDOMCharacterData_deleteData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMCharacterData_replaceData_Proxy (IXMLDOMCharacterData* This, LONG offset, LONG count, BSTR data);
void IXMLDOMCharacterData_replaceData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMAttribute;

struct IXMLDOMAttributeVtbl
{
    HRESULT function (IXMLDOMAttribute* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMAttribute* This) AddRef;
    ULONG function (IXMLDOMAttribute* This) Release;
    HRESULT function (IXMLDOMAttribute* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMAttribute* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMAttribute* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMAttribute* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMAttribute* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMAttribute* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMAttribute* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMAttribute* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMAttribute* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMAttribute* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMAttribute* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMAttribute* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMAttribute* This, BSTR text) put_text;
    HRESULT function (IXMLDOMAttribute* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMAttribute* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMAttribute* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMAttribute* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMAttribute* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMAttribute* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMAttribute* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMAttribute* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMAttribute* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMAttribute* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMAttribute* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMAttribute* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMAttribute* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMAttribute* This, BSTR* attributeName) get_name;
    HRESULT function (IXMLDOMAttribute* This, VARIANT* attributeValue) get_value;
    HRESULT function (IXMLDOMAttribute* This, VARIANT attributeValue) put_value;
}

struct IXMLDOMAttribute
{
    IXMLDOMAttributeVtbl* lpVtbl;
}

HRESULT IXMLDOMAttribute_get_name_Proxy (IXMLDOMAttribute* This, BSTR* attributeName);
void IXMLDOMAttribute_get_name_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMAttribute_get_value_Proxy (IXMLDOMAttribute* This, VARIANT* attributeValue);
void IXMLDOMAttribute_get_value_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMAttribute_put_value_Proxy (IXMLDOMAttribute* This, VARIANT attributeValue);
void IXMLDOMAttribute_put_value_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMElement;

struct IXMLDOMElementVtbl
{
    HRESULT function (IXMLDOMElement* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMElement* This) AddRef;
    ULONG function (IXMLDOMElement* This) Release;
    HRESULT function (IXMLDOMElement* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMElement* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMElement* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMElement* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMElement* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMElement* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMElement* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMElement* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMElement* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMElement* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMElement* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMElement* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMElement* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMElement* This, BSTR text) put_text;
    HRESULT function (IXMLDOMElement* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMElement* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMElement* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMElement* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMElement* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMElement* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMElement* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMElement* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMElement* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMElement* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMElement* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMElement* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMElement* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMElement* This, BSTR* tagName) get_tagName;
    HRESULT function (IXMLDOMElement* This, BSTR name, VARIANT* value) getAttribute;
    HRESULT function (IXMLDOMElement* This, BSTR name, VARIANT value) setAttribute;
    HRESULT function (IXMLDOMElement* This, BSTR name) removeAttribute;
    HRESULT function (IXMLDOMElement* This, BSTR name, IXMLDOMAttribute** attributeNode) getAttributeNode;
    HRESULT function (IXMLDOMElement* This, IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) setAttributeNode;
    HRESULT function (IXMLDOMElement* This, IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) removeAttributeNode;
    HRESULT function (IXMLDOMElement* This, BSTR tagName, IXMLDOMNodeList** resultList) getElementsByTagName;
    HRESULT function (IXMLDOMElement* This) normalize;
}

struct IXMLDOMElement
{
    IXMLDOMElementVtbl* lpVtbl;
}

HRESULT IXMLDOMElement_get_tagName_Proxy (IXMLDOMElement* This, BSTR* tagName);
void IXMLDOMElement_get_tagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_getAttribute_Proxy (IXMLDOMElement* This, BSTR name, VARIANT* value);
void IXMLDOMElement_getAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_setAttribute_Proxy (IXMLDOMElement* This, BSTR name, VARIANT value);
void IXMLDOMElement_setAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_removeAttribute_Proxy (IXMLDOMElement* This, BSTR name);
void IXMLDOMElement_removeAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_getAttributeNode_Proxy (IXMLDOMElement* This, BSTR name, IXMLDOMAttribute** attributeNode);
void IXMLDOMElement_getAttributeNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_setAttributeNode_Proxy (IXMLDOMElement* This, IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode);
void IXMLDOMElement_setAttributeNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_removeAttributeNode_Proxy (IXMLDOMElement* This, IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode);
void IXMLDOMElement_removeAttributeNode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_getElementsByTagName_Proxy (IXMLDOMElement* This, BSTR tagName, IXMLDOMNodeList** resultList);
void IXMLDOMElement_getElementsByTagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMElement_normalize_Proxy (IXMLDOMElement* This);
void IXMLDOMElement_normalize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMText;

struct IXMLDOMTextVtbl
{
    HRESULT function (IXMLDOMText* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMText* This) AddRef;
    ULONG function (IXMLDOMText* This) Release;
    HRESULT function (IXMLDOMText* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMText* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMText* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMText* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMText* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMText* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMText* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMText* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMText* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMText* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMText* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMText* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMText* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMText* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMText* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMText* This, BSTR text) put_text;
    HRESULT function (IXMLDOMText* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMText* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMText* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMText* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMText* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMText* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMText* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMText* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMText* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMText* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMText* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMText* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMText* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMText* This, BSTR* data) get_data;
    HRESULT function (IXMLDOMText* This, BSTR data) put_data;
    HRESULT function (IXMLDOMText* This, LONG* dataLength) get_length;
    HRESULT function (IXMLDOMText* This, LONG offset, LONG count, BSTR* data) substringData;
    HRESULT function (IXMLDOMText* This, BSTR data) appendData;
    HRESULT function (IXMLDOMText* This, LONG offset, BSTR data) insertData;
    HRESULT function (IXMLDOMText* This, LONG offset, LONG count) deleteData;
    HRESULT function (IXMLDOMText* This, LONG offset, LONG count, BSTR data) replaceData;
    HRESULT function (IXMLDOMText* This, LONG offset, IXMLDOMText** rightHandTextNode) splitText;
}

struct IXMLDOMText
{
    IXMLDOMTextVtbl* lpVtbl;
}

HRESULT IXMLDOMText_splitText_Proxy (IXMLDOMText* This, LONG offset, IXMLDOMText** rightHandTextNode);
void IXMLDOMText_splitText_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMComment;

struct IXMLDOMCommentVtbl
{
    HRESULT function (IXMLDOMComment* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMComment* This) AddRef;
    ULONG function (IXMLDOMComment* This) Release;
    HRESULT function (IXMLDOMComment* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMComment* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMComment* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMComment* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMComment* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMComment* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMComment* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMComment* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMComment* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMComment* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMComment* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMComment* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMComment* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMComment* This, BSTR text) put_text;
    HRESULT function (IXMLDOMComment* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMComment* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMComment* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMComment* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMComment* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMComment* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMComment* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMComment* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMComment* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMComment* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMComment* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMComment* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMComment* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMComment* This, BSTR* data) get_data;
    HRESULT function (IXMLDOMComment* This, BSTR data) put_data;
    HRESULT function (IXMLDOMComment* This, LONG* dataLength) get_length;
    HRESULT function (IXMLDOMComment* This, LONG offset, LONG count, BSTR* data) substringData;
    HRESULT function (IXMLDOMComment* This, BSTR data) appendData;
    HRESULT function (IXMLDOMComment* This, LONG offset, BSTR data) insertData;
    HRESULT function (IXMLDOMComment* This, LONG offset, LONG count) deleteData;
    HRESULT function (IXMLDOMComment* This, LONG offset, LONG count, BSTR data) replaceData;
}

struct IXMLDOMComment
{
    IXMLDOMCommentVtbl* lpVtbl;
}

extern __gshared const IID IID_IXMLDOMProcessingInstruction;

struct IXMLDOMProcessingInstructionVtbl
{
    HRESULT function (IXMLDOMProcessingInstruction* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMProcessingInstruction* This) AddRef;
    ULONG function (IXMLDOMProcessingInstruction* This) Release;
    HRESULT function (IXMLDOMProcessingInstruction* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMProcessingInstruction* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMProcessingInstruction* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMProcessingInstruction* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMProcessingInstruction* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR text) put_text;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMProcessingInstruction* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMProcessingInstruction* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* name) get_target;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR* value) get_data;
    HRESULT function (IXMLDOMProcessingInstruction* This, BSTR value) put_data;
}

struct IXMLDOMProcessingInstruction
{
    IXMLDOMProcessingInstructionVtbl* lpVtbl;
}

HRESULT IXMLDOMProcessingInstruction_get_target_Proxy (IXMLDOMProcessingInstruction* This, BSTR* name);
void IXMLDOMProcessingInstruction_get_target_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMProcessingInstruction_get_data_Proxy (IXMLDOMProcessingInstruction* This, BSTR* value);
void IXMLDOMProcessingInstruction_get_data_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMProcessingInstruction_put_data_Proxy (IXMLDOMProcessingInstruction* This, BSTR value);
void IXMLDOMProcessingInstruction_put_data_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMCDATASection;

struct IXMLDOMCDATASectionVtbl
{
    HRESULT function (IXMLDOMCDATASection* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMCDATASection* This) AddRef;
    ULONG function (IXMLDOMCDATASection* This) Release;
    HRESULT function (IXMLDOMCDATASection* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMCDATASection* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMCDATASection* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMCDATASection* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMCDATASection* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMCDATASection* This, BSTR text) put_text;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMCDATASection* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMCDATASection* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMCDATASection* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMCDATASection* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMCDATASection* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMCDATASection* This, BSTR* data) get_data;
    HRESULT function (IXMLDOMCDATASection* This, BSTR data) put_data;
    HRESULT function (IXMLDOMCDATASection* This, LONG* dataLength) get_length;
    HRESULT function (IXMLDOMCDATASection* This, LONG offset, LONG count, BSTR* data) substringData;
    HRESULT function (IXMLDOMCDATASection* This, BSTR data) appendData;
    HRESULT function (IXMLDOMCDATASection* This, LONG offset, BSTR data) insertData;
    HRESULT function (IXMLDOMCDATASection* This, LONG offset, LONG count) deleteData;
    HRESULT function (IXMLDOMCDATASection* This, LONG offset, LONG count, BSTR data) replaceData;
    HRESULT function (IXMLDOMCDATASection* This, LONG offset, IXMLDOMText** rightHandTextNode) splitText;
}

struct IXMLDOMCDATASection
{
    IXMLDOMCDATASectionVtbl* lpVtbl;
}

extern __gshared const IID IID_IXMLDOMDocumentType;

struct IXMLDOMDocumentTypeVtbl
{
    HRESULT function (IXMLDOMDocumentType* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMDocumentType* This) AddRef;
    ULONG function (IXMLDOMDocumentType* This) Release;
    HRESULT function (IXMLDOMDocumentType* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMDocumentType* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMDocumentType* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMDocumentType* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMDocumentType* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMDocumentType* This, BSTR text) put_text;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMDocumentType* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMDocumentType* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMDocumentType* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMDocumentType* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMDocumentType* This, BSTR* rootName) get_name;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNamedNodeMap** entityMap) get_entities;
    HRESULT function (IXMLDOMDocumentType* This, IXMLDOMNamedNodeMap** notationMap) get_notations;
}

struct IXMLDOMDocumentType
{
    IXMLDOMDocumentTypeVtbl* lpVtbl;
}

HRESULT IXMLDOMDocumentType_get_name_Proxy (IXMLDOMDocumentType* This, BSTR* rootName);
void IXMLDOMDocumentType_get_name_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocumentType_get_entities_Proxy (IXMLDOMDocumentType* This, IXMLDOMNamedNodeMap** entityMap);
void IXMLDOMDocumentType_get_entities_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMDocumentType_get_notations_Proxy (IXMLDOMDocumentType* This, IXMLDOMNamedNodeMap** notationMap);
void IXMLDOMDocumentType_get_notations_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMNotation;

struct IXMLDOMNotationVtbl
{
    HRESULT function (IXMLDOMNotation* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMNotation* This) AddRef;
    ULONG function (IXMLDOMNotation* This) Release;
    HRESULT function (IXMLDOMNotation* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMNotation* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMNotation* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMNotation* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMNotation* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMNotation* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMNotation* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMNotation* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMNotation* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMNotation* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMNotation* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMNotation* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMNotation* This, BSTR text) put_text;
    HRESULT function (IXMLDOMNotation* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMNotation* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMNotation* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMNotation* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMNotation* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMNotation* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMNotation* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMNotation* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMNotation* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMNotation* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMNotation* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMNotation* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMNotation* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMNotation* This, VARIANT* publicID) get_publicId;
    HRESULT function (IXMLDOMNotation* This, VARIANT* systemID) get_systemId;
}

struct IXMLDOMNotation
{
    IXMLDOMNotationVtbl* lpVtbl;
}

HRESULT IXMLDOMNotation_get_publicId_Proxy (IXMLDOMNotation* This, VARIANT* publicID);
void IXMLDOMNotation_get_publicId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMNotation_get_systemId_Proxy (IXMLDOMNotation* This, VARIANT* systemID);
void IXMLDOMNotation_get_systemId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMEntity;

struct IXMLDOMEntityVtbl
{
    HRESULT function (IXMLDOMEntity* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMEntity* This) AddRef;
    ULONG function (IXMLDOMEntity* This) Release;
    HRESULT function (IXMLDOMEntity* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMEntity* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMEntity* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMEntity* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMEntity* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMEntity* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMEntity* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMEntity* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMEntity* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMEntity* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMEntity* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMEntity* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMEntity* This, BSTR text) put_text;
    HRESULT function (IXMLDOMEntity* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMEntity* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMEntity* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMEntity* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMEntity* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMEntity* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMEntity* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMEntity* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMEntity* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMEntity* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMEntity* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMEntity* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMEntity* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXMLDOMEntity* This, VARIANT* publicID) get_publicId;
    HRESULT function (IXMLDOMEntity* This, VARIANT* systemID) get_systemId;
    HRESULT function (IXMLDOMEntity* This, BSTR* name) get_notationName;
}

struct IXMLDOMEntity
{
    IXMLDOMEntityVtbl* lpVtbl;
}

HRESULT IXMLDOMEntity_get_publicId_Proxy (IXMLDOMEntity* This, VARIANT* publicID);
void IXMLDOMEntity_get_publicId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMEntity_get_systemId_Proxy (IXMLDOMEntity* This, VARIANT* systemID);
void IXMLDOMEntity_get_systemId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMEntity_get_notationName_Proxy (IXMLDOMEntity* This, BSTR* name);
void IXMLDOMEntity_get_notationName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDOMEntityReference;

struct IXMLDOMEntityReferenceVtbl
{
    HRESULT function (IXMLDOMEntityReference* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMEntityReference* This) AddRef;
    ULONG function (IXMLDOMEntityReference* This) Release;
    HRESULT function (IXMLDOMEntityReference* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMEntityReference* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMEntityReference* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMEntityReference* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* name) get_nodeName;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT value) put_nodeValue;
    HRESULT function (IXMLDOMEntityReference* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* text) get_text;
    HRESULT function (IXMLDOMEntityReference* This, BSTR text) put_text;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXMLDOMEntityReference* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* xmlString) get_xml;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXMLDOMEntityReference* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXMLDOMEntityReference* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXMLDOMEntityReference* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXMLDOMEntityReference* This, BSTR* nameString) get_baseName;
    HRESULT function (IXMLDOMEntityReference* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
}

struct IXMLDOMEntityReference
{
    IXMLDOMEntityReferenceVtbl* lpVtbl;
}

extern __gshared const IID IID_IXMLDOMParseError;

struct IXMLDOMParseErrorVtbl
{
    HRESULT function (IXMLDOMParseError* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDOMParseError* This) AddRef;
    ULONG function (IXMLDOMParseError* This) Release;
    HRESULT function (IXMLDOMParseError* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDOMParseError* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDOMParseError* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDOMParseError* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDOMParseError* This, LONG* errorCode) get_errorCode;
    HRESULT function (IXMLDOMParseError* This, BSTR* urlString) get_url;
    HRESULT function (IXMLDOMParseError* This, BSTR* reasonString) get_reason;
    HRESULT function (IXMLDOMParseError* This, BSTR* sourceString) get_srcText;
    HRESULT function (IXMLDOMParseError* This, LONG* lineNumber) get_line;
    HRESULT function (IXMLDOMParseError* This, LONG* linePosition) get_linepos;
    HRESULT function (IXMLDOMParseError* This, LONG* filePosition) get_filepos;
}

struct IXMLDOMParseError
{
    IXMLDOMParseErrorVtbl* lpVtbl;
}

HRESULT IXMLDOMParseError_get_errorCode_Proxy (IXMLDOMParseError* This, LONG* errorCode);
void IXMLDOMParseError_get_errorCode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMParseError_get_url_Proxy (IXMLDOMParseError* This, BSTR* urlString);
void IXMLDOMParseError_get_url_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMParseError_get_reason_Proxy (IXMLDOMParseError* This, BSTR* reasonString);
void IXMLDOMParseError_get_reason_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMParseError_get_srcText_Proxy (IXMLDOMParseError* This, BSTR* sourceString);
void IXMLDOMParseError_get_srcText_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMParseError_get_line_Proxy (IXMLDOMParseError* This, LONG* lineNumber);
void IXMLDOMParseError_get_line_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMParseError_get_linepos_Proxy (IXMLDOMParseError* This, LONG* linePosition);
void IXMLDOMParseError_get_linepos_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDOMParseError_get_filepos_Proxy (IXMLDOMParseError* This, LONG* filePosition);
void IXMLDOMParseError_get_filepos_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXTLRuntime;

struct IXTLRuntimeVtbl
{
    HRESULT function (IXTLRuntime* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXTLRuntime* This) AddRef;
    ULONG function (IXTLRuntime* This) Release;
    HRESULT function (IXTLRuntime* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXTLRuntime* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXTLRuntime* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXTLRuntime* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXTLRuntime* This, BSTR* name) get_nodeName;
    HRESULT function (IXTLRuntime* This, VARIANT* value) get_nodeValue;
    HRESULT function (IXTLRuntime* This, VARIANT value) put_nodeValue;
    HRESULT function (IXTLRuntime* This, DOMNodeType* type) get_nodeType;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode** parent) get_parentNode;
    HRESULT function (IXTLRuntime* This, IXMLDOMNodeList** childList) get_childNodes;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode** firstChild) get_firstChild;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode** lastChild) get_lastChild;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode** previousSibling) get_previousSibling;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode** nextSibling) get_nextSibling;
    HRESULT function (IXTLRuntime* This, IXMLDOMNamedNodeMap** attributeMap) get_attributes;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) insertBefore;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) replaceChild;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* childNode, IXMLDOMNode** oldChild) removeChild;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) appendChild;
    HRESULT function (IXTLRuntime* This, VARIANT_BOOL* hasChild) hasChildNodes;
    HRESULT function (IXTLRuntime* This, IXMLDOMDocument** DOMDocument) get_ownerDocument;
    HRESULT function (IXTLRuntime* This, VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) cloneNode;
    HRESULT function (IXTLRuntime* This, BSTR* nodeType) get_nodeTypeString;
    HRESULT function (IXTLRuntime* This, BSTR* text) get_text;
    HRESULT function (IXTLRuntime* This, BSTR text) put_text;
    HRESULT function (IXTLRuntime* This, VARIANT_BOOL* isSpecified) get_specified;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode** definitionNode) get_definition;
    HRESULT function (IXTLRuntime* This, VARIANT* typedValue) get_nodeTypedValue;
    HRESULT function (IXTLRuntime* This, VARIANT typedValue) put_nodeTypedValue;
    HRESULT function (IXTLRuntime* This, VARIANT* dataTypeName) get_dataType;
    HRESULT function (IXTLRuntime* This, BSTR dataTypeName) put_dataType;
    HRESULT function (IXTLRuntime* This, BSTR* xmlString) get_xml;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* stylesheet, BSTR* xmlString) transformNode;
    HRESULT function (IXTLRuntime* This, BSTR queryString, IXMLDOMNodeList** resultList) selectNodes;
    HRESULT function (IXTLRuntime* This, BSTR queryString, IXMLDOMNode** resultNode) selectSingleNode;
    HRESULT function (IXTLRuntime* This, VARIANT_BOOL* isParsed) get_parsed;
    HRESULT function (IXTLRuntime* This, BSTR* namespaceURI) get_namespaceURI;
    HRESULT function (IXTLRuntime* This, BSTR* prefixString) get_prefix;
    HRESULT function (IXTLRuntime* This, BSTR* nameString) get_baseName;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* stylesheet, VARIANT outputObject) transformNodeToObject;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pID) uniqueID;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pDepth) depth;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pNumber) childNumber;
    HRESULT function (IXTLRuntime* This, BSTR bstrNodeName, IXMLDOMNode* pNode, LONG* pNumber) ancestorChildNumber;
    HRESULT function (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pNumber) absoluteChildNumber;
    HRESULT function (IXTLRuntime* This, LONG lIndex, BSTR bstrFormat, BSTR* pbstrFormattedString) formatIndex;
    HRESULT function (IXTLRuntime* This, double dblNumber, BSTR bstrFormat, BSTR* pbstrFormattedString) formatNumber;
    HRESULT function (IXTLRuntime* This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) formatDate;
    HRESULT function (IXTLRuntime* This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) formatTime;
}

struct IXTLRuntime
{
    IXTLRuntimeVtbl* lpVtbl;
}

HRESULT IXTLRuntime_uniqueID_Proxy (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pID);
void IXTLRuntime_uniqueID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_depth_Proxy (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pDepth);
void IXTLRuntime_depth_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_childNumber_Proxy (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pNumber);
void IXTLRuntime_childNumber_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_ancestorChildNumber_Proxy (IXTLRuntime* This, BSTR bstrNodeName, IXMLDOMNode* pNode, LONG* pNumber);
void IXTLRuntime_ancestorChildNumber_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_absoluteChildNumber_Proxy (IXTLRuntime* This, IXMLDOMNode* pNode, LONG* pNumber);
void IXTLRuntime_absoluteChildNumber_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_formatIndex_Proxy (IXTLRuntime* This, LONG lIndex, BSTR bstrFormat, BSTR* pbstrFormattedString);
void IXTLRuntime_formatIndex_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_formatNumber_Proxy (IXTLRuntime* This, double dblNumber, BSTR bstrFormat, BSTR* pbstrFormattedString);
void IXTLRuntime_formatNumber_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_formatDate_Proxy (IXTLRuntime* This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString);
void IXTLRuntime_formatDate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXTLRuntime_formatTime_Proxy (IXTLRuntime* This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString);
void IXTLRuntime_formatTime_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID DIID_XMLDOMDocumentEvents;

struct XMLDOMDocumentEventsVtbl
{
    HRESULT function (XMLDOMDocumentEvents* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (XMLDOMDocumentEvents* This) AddRef;
    ULONG function (XMLDOMDocumentEvents* This) Release;
    HRESULT function (XMLDOMDocumentEvents* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (XMLDOMDocumentEvents* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (XMLDOMDocumentEvents* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (XMLDOMDocumentEvents* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
}

struct XMLDOMDocumentEvents
{
    XMLDOMDocumentEventsVtbl* lpVtbl;
}

extern __gshared const CLSID CLSID_DOMDocument;

extern __gshared const CLSID CLSID_DOMFreeThreadedDocument;

extern __gshared const IID IID_IXMLHttpRequest;

struct IXMLHttpRequestVtbl
{
    HRESULT function (IXMLHttpRequest* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLHttpRequest* This) AddRef;
    ULONG function (IXMLHttpRequest* This) Release;
    HRESULT function (IXMLHttpRequest* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLHttpRequest* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLHttpRequest* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLHttpRequest* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLHttpRequest* This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) open;
    HRESULT function (IXMLHttpRequest* This, BSTR bstrHeader, BSTR bstrValue) setRequestHeader;
    HRESULT function (IXMLHttpRequest* This, BSTR bstrHeader, BSTR* pbstrValue) getResponseHeader;
    HRESULT function (IXMLHttpRequest* This, BSTR* pbstrHeaders) getAllResponseHeaders;
    HRESULT function (IXMLHttpRequest* This, VARIANT varBody) send;
    HRESULT function (IXMLHttpRequest* This) abort;
    HRESULT function (IXMLHttpRequest* This, LONG* plStatus) get_status;
    HRESULT function (IXMLHttpRequest* This, BSTR* pbstrStatus) get_statusText;
    HRESULT function (IXMLHttpRequest* This, IDispatch** ppBody) get_responseXML;
    HRESULT function (IXMLHttpRequest* This, BSTR* pbstrBody) get_responseText;
    HRESULT function (IXMLHttpRequest* This, VARIANT* pvarBody) get_responseBody;
    HRESULT function (IXMLHttpRequest* This, VARIANT* pvarBody) get_responseStream;
    HRESULT function (IXMLHttpRequest* This, LONG* plState) get_readyState;
    HRESULT function (IXMLHttpRequest* This, IDispatch* pReadyStateSink) put_onreadystatechange;
}

struct IXMLHttpRequest
{
    IXMLHttpRequestVtbl* lpVtbl;
}

HRESULT IXMLHttpRequest_open_Proxy (IXMLHttpRequest* This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);
void IXMLHttpRequest_open_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_setRequestHeader_Proxy (IXMLHttpRequest* This, BSTR bstrHeader, BSTR bstrValue);
void IXMLHttpRequest_setRequestHeader_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_getResponseHeader_Proxy (IXMLHttpRequest* This, BSTR bstrHeader, BSTR* pbstrValue);
void IXMLHttpRequest_getResponseHeader_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_getAllResponseHeaders_Proxy (IXMLHttpRequest* This, BSTR* pbstrHeaders);
void IXMLHttpRequest_getAllResponseHeaders_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_send_Proxy (IXMLHttpRequest* This, VARIANT varBody);
void IXMLHttpRequest_send_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_abort_Proxy (IXMLHttpRequest* This);
void IXMLHttpRequest_abort_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_status_Proxy (IXMLHttpRequest* This, LONG* plStatus);
void IXMLHttpRequest_get_status_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_statusText_Proxy (IXMLHttpRequest* This, BSTR* pbstrStatus);
void IXMLHttpRequest_get_statusText_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_responseXML_Proxy (IXMLHttpRequest* This, IDispatch** ppBody);
void IXMLHttpRequest_get_responseXML_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_responseText_Proxy (IXMLHttpRequest* This, BSTR* pbstrBody);
void IXMLHttpRequest_get_responseText_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_responseBody_Proxy (IXMLHttpRequest* This, VARIANT* pvarBody);
void IXMLHttpRequest_get_responseBody_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_responseStream_Proxy (IXMLHttpRequest* This, VARIANT* pvarBody);
void IXMLHttpRequest_get_responseStream_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_get_readyState_Proxy (IXMLHttpRequest* This, LONG* plState);
void IXMLHttpRequest_get_readyState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLHttpRequest_put_onreadystatechange_Proxy (IXMLHttpRequest* This, IDispatch* pReadyStateSink);
void IXMLHttpRequest_put_onreadystatechange_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const CLSID CLSID_XMLHTTPRequest;

extern __gshared const IID IID_IXMLDSOControl;

struct IXMLDSOControlVtbl
{
    HRESULT function (IXMLDSOControl* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDSOControl* This) AddRef;
    ULONG function (IXMLDSOControl* This) Release;
    HRESULT function (IXMLDSOControl* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDSOControl* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDSOControl* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDSOControl* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDSOControl* This, IXMLDOMDocument** ppDoc) get_XMLDocument;
    HRESULT function (IXMLDSOControl* This, IXMLDOMDocument* ppDoc) put_XMLDocument;
    HRESULT function (IXMLDSOControl* This, WINBOOL* fJavaDSOCompatible) get_JavaDSOCompatible;
    HRESULT function (IXMLDSOControl* This, WINBOOL fJavaDSOCompatible) put_JavaDSOCompatible;
    HRESULT function (IXMLDSOControl* This, LONG* state) get_readyState;
}

struct IXMLDSOControl
{
    IXMLDSOControlVtbl* lpVtbl;
}

HRESULT IXMLDSOControl_get_XMLDocument_Proxy (IXMLDSOControl* This, IXMLDOMDocument** ppDoc);
void IXMLDSOControl_get_XMLDocument_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDSOControl_put_XMLDocument_Proxy (IXMLDSOControl* This, IXMLDOMDocument* ppDoc);
void IXMLDSOControl_put_XMLDocument_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDSOControl_get_JavaDSOCompatible_Proxy (IXMLDSOControl* This, WINBOOL* fJavaDSOCompatible);
void IXMLDSOControl_get_JavaDSOCompatible_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDSOControl_put_JavaDSOCompatible_Proxy (IXMLDSOControl* This, WINBOOL fJavaDSOCompatible);
void IXMLDSOControl_put_JavaDSOCompatible_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDSOControl_get_readyState_Proxy (IXMLDSOControl* This, LONG* state);
void IXMLDSOControl_get_readyState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const CLSID CLSID_XMLDSOControl;

extern __gshared const IID IID_IXMLElementCollection;

struct IXMLElementCollectionVtbl
{
    HRESULT function (IXMLElementCollection* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLElementCollection* This) AddRef;
    ULONG function (IXMLElementCollection* This) Release;
    HRESULT function (IXMLElementCollection* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLElementCollection* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLElementCollection* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLElementCollection* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLElementCollection* This, LONG v) put_length;
    HRESULT function (IXMLElementCollection* This, LONG* p) get_length;
    HRESULT function (IXMLElementCollection* This, IUnknown** ppUnk) get__newEnum;
    HRESULT function (IXMLElementCollection* This, VARIANT var1, VARIANT var2, IDispatch** ppDisp) item;
}

struct IXMLElementCollection
{
    IXMLElementCollectionVtbl* lpVtbl;
}

HRESULT IXMLElementCollection_put_length_Proxy (IXMLElementCollection* This, LONG v);
void IXMLElementCollection_put_length_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElementCollection_get_length_Proxy (IXMLElementCollection* This, LONG* p);
void IXMLElementCollection_get_length_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElementCollection_get__newEnum_Proxy (IXMLElementCollection* This, IUnknown** ppUnk);
void IXMLElementCollection_get__newEnum_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElementCollection_item_Proxy (IXMLElementCollection* This, VARIANT var1, VARIANT var2, IDispatch** ppDisp);
void IXMLElementCollection_item_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDocument;

struct IXMLDocumentVtbl
{
    HRESULT function (IXMLDocument* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDocument* This) AddRef;
    ULONG function (IXMLDocument* This) Release;
    HRESULT function (IXMLDocument* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDocument* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDocument* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDocument* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDocument* This, IXMLElement** p) get_root;
    HRESULT function (IXMLDocument* This, BSTR* p) get_fileSize;
    HRESULT function (IXMLDocument* This, BSTR* p) get_fileModifiedDate;
    HRESULT function (IXMLDocument* This, BSTR* p) get_fileUpdatedDate;
    HRESULT function (IXMLDocument* This, BSTR* p) get_URL;
    HRESULT function (IXMLDocument* This, BSTR p) put_URL;
    HRESULT function (IXMLDocument* This, BSTR* p) get_mimeType;
    HRESULT function (IXMLDocument* This, LONG* pl) get_readyState;
    HRESULT function (IXMLDocument* This, BSTR* p) get_charset;
    HRESULT function (IXMLDocument* This, BSTR p) put_charset;
    HRESULT function (IXMLDocument* This, BSTR* p) get_version;
    HRESULT function (IXMLDocument* This, BSTR* p) get_doctype;
    HRESULT function (IXMLDocument* This, BSTR* p) get_dtdURL;
    HRESULT function (IXMLDocument* This, VARIANT vType, VARIANT var1, IXMLElement** ppElem) createElement;
}

struct IXMLDocument
{
    IXMLDocumentVtbl* lpVtbl;
}

HRESULT IXMLDocument_get_root_Proxy (IXMLDocument* This, IXMLElement** p);
void IXMLDocument_get_root_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_fileSize_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_fileSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_fileModifiedDate_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_fileModifiedDate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_fileUpdatedDate_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_fileUpdatedDate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_URL_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_URL_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_put_URL_Proxy (IXMLDocument* This, BSTR p);
void IXMLDocument_put_URL_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_mimeType_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_mimeType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_readyState_Proxy (IXMLDocument* This, LONG* pl);
void IXMLDocument_get_readyState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_charset_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_charset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_put_charset_Proxy (IXMLDocument* This, BSTR p);
void IXMLDocument_put_charset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_version_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_version_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_doctype_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_doctype_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_get_dtdURL_Proxy (IXMLDocument* This, BSTR* p);
void IXMLDocument_get_dtdURL_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument_createElement_Proxy (IXMLDocument* This, VARIANT vType, VARIANT var1, IXMLElement** ppElem);
void IXMLDocument_createElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLDocument2;

struct IXMLDocument2Vtbl
{
    HRESULT function (IXMLDocument2* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLDocument2* This) AddRef;
    ULONG function (IXMLDocument2* This) Release;
    HRESULT function (IXMLDocument2* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLDocument2* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLDocument2* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLDocument2* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLDocument2* This, IXMLElement2** p) get_root;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_fileSize;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_fileModifiedDate;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_fileUpdatedDate;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_URL;
    HRESULT function (IXMLDocument2* This, BSTR p) put_URL;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_mimeType;
    HRESULT function (IXMLDocument2* This, LONG* pl) get_readyState;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_charset;
    HRESULT function (IXMLDocument2* This, BSTR p) put_charset;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_version;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_doctype;
    HRESULT function (IXMLDocument2* This, BSTR* p) get_dtdURL;
    HRESULT function (IXMLDocument2* This, VARIANT vType, VARIANT var1, IXMLElement2** ppElem) createElement;
    HRESULT function (IXMLDocument2* This, VARIANT_BOOL* pf) get_async;
    HRESULT function (IXMLDocument2* This, VARIANT_BOOL f) put_async;
}

struct IXMLDocument2
{
    IXMLDocument2Vtbl* lpVtbl;
}

HRESULT IXMLDocument2_get_root_Proxy (IXMLDocument2* This, IXMLElement2** p);
void IXMLDocument2_get_root_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_fileSize_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_fileSize_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_fileModifiedDate_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_fileModifiedDate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_fileUpdatedDate_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_fileUpdatedDate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_URL_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_URL_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_put_URL_Proxy (IXMLDocument2* This, BSTR p);
void IXMLDocument2_put_URL_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_mimeType_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_mimeType_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_readyState_Proxy (IXMLDocument2* This, LONG* pl);
void IXMLDocument2_get_readyState_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_charset_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_charset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_put_charset_Proxy (IXMLDocument2* This, BSTR p);
void IXMLDocument2_put_charset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_version_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_version_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_doctype_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_doctype_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_dtdURL_Proxy (IXMLDocument2* This, BSTR* p);
void IXMLDocument2_get_dtdURL_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_createElement_Proxy (IXMLDocument2* This, VARIANT vType, VARIANT var1, IXMLElement2** ppElem);
void IXMLDocument2_createElement_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_get_async_Proxy (IXMLDocument2* This, VARIANT_BOOL* pf);
void IXMLDocument2_get_async_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLDocument2_put_async_Proxy (IXMLDocument2* This, VARIANT_BOOL f);
void IXMLDocument2_put_async_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLElement;

struct IXMLElementVtbl
{
    HRESULT function (IXMLElement* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLElement* This) AddRef;
    ULONG function (IXMLElement* This) Release;
    HRESULT function (IXMLElement* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLElement* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLElement* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLElement* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLElement* This, BSTR* p) get_tagName;
    HRESULT function (IXMLElement* This, BSTR p) put_tagName;
    HRESULT function (IXMLElement* This, IXMLElement** ppParent) get_parent;
    HRESULT function (IXMLElement* This, BSTR strPropertyName, VARIANT PropertyValue) setAttribute;
    HRESULT function (IXMLElement* This, BSTR strPropertyName, VARIANT* PropertyValue) getAttribute;
    HRESULT function (IXMLElement* This, BSTR strPropertyName) removeAttribute;
    HRESULT function (IXMLElement* This, IXMLElementCollection** pp) get_children;
    HRESULT function (IXMLElement* This, LONG* plType) get_type;
    HRESULT function (IXMLElement* This, BSTR* p) get_text;
    HRESULT function (IXMLElement* This, BSTR p) put_text;
    HRESULT function (IXMLElement* This, IXMLElement* pChildElem, LONG lIndex, LONG lReserved) addChild;
    HRESULT function (IXMLElement* This, IXMLElement* pChildElem) removeChild;
}

struct IXMLElement
{
    IXMLElementVtbl* lpVtbl;
}

HRESULT IXMLElement_get_tagName_Proxy (IXMLElement* This, BSTR* p);
void IXMLElement_get_tagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_put_tagName_Proxy (IXMLElement* This, BSTR p);
void IXMLElement_put_tagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_get_parent_Proxy (IXMLElement* This, IXMLElement** ppParent);
void IXMLElement_get_parent_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_setAttribute_Proxy (IXMLElement* This, BSTR strPropertyName, VARIANT PropertyValue);
void IXMLElement_setAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_getAttribute_Proxy (IXMLElement* This, BSTR strPropertyName, VARIANT* PropertyValue);
void IXMLElement_getAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_removeAttribute_Proxy (IXMLElement* This, BSTR strPropertyName);
void IXMLElement_removeAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_get_children_Proxy (IXMLElement* This, IXMLElementCollection** pp);
void IXMLElement_get_children_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_get_type_Proxy (IXMLElement* This, LONG* plType);
void IXMLElement_get_type_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_get_text_Proxy (IXMLElement* This, BSTR* p);
void IXMLElement_get_text_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_put_text_Proxy (IXMLElement* This, BSTR p);
void IXMLElement_put_text_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_addChild_Proxy (IXMLElement* This, IXMLElement* pChildElem, LONG lIndex, LONG lReserved);
void IXMLElement_addChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement_removeChild_Proxy (IXMLElement* This, IXMLElement* pChildElem);
void IXMLElement_removeChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLElement2;

struct IXMLElement2Vtbl
{
    HRESULT function (IXMLElement2* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLElement2* This) AddRef;
    ULONG function (IXMLElement2* This) Release;
    HRESULT function (IXMLElement2* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLElement2* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLElement2* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLElement2* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLElement2* This, BSTR* p) get_tagName;
    HRESULT function (IXMLElement2* This, BSTR p) put_tagName;
    HRESULT function (IXMLElement2* This, IXMLElement2** ppParent) get_parent;
    HRESULT function (IXMLElement2* This, BSTR strPropertyName, VARIANT PropertyValue) setAttribute;
    HRESULT function (IXMLElement2* This, BSTR strPropertyName, VARIANT* PropertyValue) getAttribute;
    HRESULT function (IXMLElement2* This, BSTR strPropertyName) removeAttribute;
    HRESULT function (IXMLElement2* This, IXMLElementCollection** pp) get_children;
    HRESULT function (IXMLElement2* This, LONG* plType) get_type;
    HRESULT function (IXMLElement2* This, BSTR* p) get_text;
    HRESULT function (IXMLElement2* This, BSTR p) put_text;
    HRESULT function (IXMLElement2* This, IXMLElement2* pChildElem, LONG lIndex, LONG lReserved) addChild;
    HRESULT function (IXMLElement2* This, IXMLElement2* pChildElem) removeChild;
    HRESULT function (IXMLElement2* This, IXMLElementCollection** pp) get_attributes;
}

struct IXMLElement2
{
    IXMLElement2Vtbl* lpVtbl;
}

HRESULT IXMLElement2_get_tagName_Proxy (IXMLElement2* This, BSTR* p);
void IXMLElement2_get_tagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_put_tagName_Proxy (IXMLElement2* This, BSTR p);
void IXMLElement2_put_tagName_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_get_parent_Proxy (IXMLElement2* This, IXMLElement2** ppParent);
void IXMLElement2_get_parent_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_setAttribute_Proxy (IXMLElement2* This, BSTR strPropertyName, VARIANT PropertyValue);
void IXMLElement2_setAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_getAttribute_Proxy (IXMLElement2* This, BSTR strPropertyName, VARIANT* PropertyValue);
void IXMLElement2_getAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_removeAttribute_Proxy (IXMLElement2* This, BSTR strPropertyName);
void IXMLElement2_removeAttribute_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_get_children_Proxy (IXMLElement2* This, IXMLElementCollection** pp);
void IXMLElement2_get_children_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_get_type_Proxy (IXMLElement2* This, LONG* plType);
void IXMLElement2_get_type_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_get_text_Proxy (IXMLElement2* This, BSTR* p);
void IXMLElement2_get_text_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_put_text_Proxy (IXMLElement2* This, BSTR p);
void IXMLElement2_put_text_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_addChild_Proxy (IXMLElement2* This, IXMLElement2* pChildElem, LONG lIndex, LONG lReserved);
void IXMLElement2_addChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_removeChild_Proxy (IXMLElement2* This, IXMLElement2* pChildElem);
void IXMLElement2_removeChild_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLElement2_get_attributes_Proxy (IXMLElement2* This, IXMLElementCollection** pp);
void IXMLElement2_get_attributes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLAttribute;

struct IXMLAttributeVtbl
{
    HRESULT function (IXMLAttribute* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLAttribute* This) AddRef;
    ULONG function (IXMLAttribute* This) Release;
    HRESULT function (IXMLAttribute* This, UINT* pctinfo) GetTypeInfoCount;
    HRESULT function (IXMLAttribute* This, UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) GetTypeInfo;
    HRESULT function (IXMLAttribute* This, const IID* riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) GetIDsOfNames;
    HRESULT function (IXMLAttribute* This, DISPID dispIdMember, const IID* riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) Invoke;
    HRESULT function (IXMLAttribute* This, BSTR* n) get_name;
    HRESULT function (IXMLAttribute* This, BSTR* v) get_value;
}

struct IXMLAttribute
{
    IXMLAttributeVtbl* lpVtbl;
}

HRESULT IXMLAttribute_get_name_Proxy (IXMLAttribute* This, BSTR* n);
void IXMLAttribute_get_name_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);
HRESULT IXMLAttribute_get_value_Proxy (IXMLAttribute* This, BSTR* v);
void IXMLAttribute_get_value_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const IID IID_IXMLError;

struct IXMLErrorVtbl
{
    HRESULT function (IXMLError* This, const IID* riid, void** ppvObject) QueryInterface;
    ULONG function (IXMLError* This) AddRef;
    ULONG function (IXMLError* This) Release;
    HRESULT function (IXMLError* This, XML_ERROR* pErrorReturn) GetErrorInfo;
}

struct IXMLError
{
    IXMLErrorVtbl* lpVtbl;
}

HRESULT IXMLError_GetErrorInfo_Proxy (IXMLError* This, XML_ERROR* pErrorReturn);
void IXMLError_GetErrorInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD* _pdwStubPhase);

extern __gshared const CLSID CLSID_XMLDocument;

struct IBindStatusCallbackMsg;

extern __gshared const IID CLSID_SBS_StdURLMoniker;
extern __gshared const IID CLSID_SBS_HttpProtocol;
extern __gshared const IID CLSID_SBS_FtpProtocol;
extern __gshared const IID CLSID_SBS_GopherProtocol;
extern __gshared const IID CLSID_SBS_HttpSProtocol;
extern __gshared const IID CLSID_SBS_FileProtocol;
extern __gshared const IID CLSID_SBS_MkProtocol;
extern __gshared const IID CLSID_SBS_UrlMkBindCtx;
extern __gshared const IID CLSID_SBS_SoftDistExt;
extern __gshared const IID CLSID_SBS_CdlProtocol;
extern __gshared const IID CLSID_SBS_ClassInstallFilter;
extern __gshared const IID CLSID_SBS_InternetSecurityManager;
extern __gshared const IID CLSID_SBS_InternetZoneManager;

extern __gshared const IID IID_IAsyncMoniker;
extern __gshared const IID CLSID_StdURLMoniker;
extern __gshared const IID CLSID_HttpProtocol;
extern __gshared const IID CLSID_FtpProtocol;
extern __gshared const IID CLSID_GopherProtocol;
extern __gshared const IID CLSID_HttpSProtocol;
extern __gshared const IID CLSID_FileProtocol;
extern __gshared const IID CLSID_MkProtocol;
extern __gshared const IID CLSID_StdURLProtocol;
extern __gshared const IID CLSID_UrlMkBindCtx;
extern __gshared const IID CLSID_CdlProtocol;
extern __gshared const IID CLSID_ClassInstallFilter;
extern __gshared const IID IID_IAsyncBindCtx;

HRESULT CreateURLMoniker (LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER* ppmk);
HRESULT CreateURLMonikerEx (LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER* ppmk, DWORD dwFlags);
HRESULT GetClassURL (LPCWSTR szURL, CLSID* pClsID);
HRESULT CreateAsyncBindCtx (DWORD reserved, IBindStatusCallback* pBSCb, IEnumFORMATETC* pEFetc, IBindCtx** ppBC);

HRESULT CreateAsyncBindCtxEx (IBindCtx* pbc, DWORD dwOptions, IBindStatusCallback* pBSCb, IEnumFORMATETC* pEnum, IBindCtx** ppBC, DWORD reserved);
HRESULT MkParseDisplayNameEx (IBindCtx* pbc, LPCWSTR szDisplayName, ULONG* pchEaten, LPMONIKER* ppmk);
HRESULT RegisterBindStatusCallback (LPBC pBC, IBindStatusCallback* pBSCb, IBindStatusCallback** ppBSCBPrev, DWORD dwReserved);
HRESULT RevokeBindStatusCallback (LPBC pBC, IBindStatusCallback* pBSCb);
HRESULT GetClassFileOrMime (LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID* pclsid);
HRESULT IsValidURL (LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
HRESULT CoGetClassObjectFromURL (const IID* rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID* riid, LPVOID* ppv);
HRESULT IEInstallScope (LPDWORD pdwScope);
HRESULT FaultInIEFeature (HWND hWnd, uCLSSPEC* pClassSpec, QUERYCONTEXT* pQuery, DWORD dwFlags);
HRESULT GetComponentIDFromCLSSPEC (uCLSSPEC* pClassspec, LPSTR* ppszComponentID);

HRESULT IsAsyncMoniker (IMoniker* pmk);
HRESULT CreateURLBinding (LPCWSTR lpszUrl, IBindCtx* pbc, IBinding** ppBdg);
HRESULT RegisterMediaTypes (UINT ctypes, const(LPCSTR)* rgszTypes, CLIPFORMAT* rgcfTypes);
HRESULT FindMediaType (LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);
HRESULT CreateFormatEnumerator (UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);
HRESULT RegisterFormatEnumerator (LPBC pBC, IEnumFORMATETC* pEFetc, DWORD reserved);
HRESULT RevokeFormatEnumerator (LPBC pBC, IEnumFORMATETC* pEFetc);
HRESULT RegisterMediaTypeClass (LPBC pBC, UINT ctypes, const(LPCSTR)* rgszTypes, CLSID* rgclsID, DWORD reserved);
HRESULT FindMediaTypeClass (LPBC pBC, LPCSTR szType, CLSID* pclsID, DWORD reserved);
HRESULT UrlMkSetSessionOption (DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
HRESULT UrlMkGetSessionOption (DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD* pdwBufferLengthOut, DWORD dwReserved);
HRESULT FindMimeFromData (LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR* ppwzMimeOut, DWORD dwReserved);

HRESULT ObtainUserAgentString (DWORD dwOption, LPSTR pszUAOut, DWORD* cbSize);
HRESULT CompareSecurityIds (BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
HRESULT CompatFlagsFromClsid (CLSID* pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);

alias LPPERSISTMONIKER = IPersistMoniker*;

extern __gshared const GUID IID_IPersistMoniker;

struct IPersistMonikerVtbl
{
    HRESULT function (IPersistMoniker* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPersistMoniker* This) AddRef;

    ULONG function (IPersistMoniker* This) Release;

    HRESULT function (IPersistMoniker* This, CLSID* pClassID) GetClassID;

    HRESULT function (IPersistMoniker* This) IsDirty;

    HRESULT function (IPersistMoniker* This, WINBOOL fFullyAvailable, IMoniker* pimkName, LPBC pibc, DWORD grfMode) Load;

    HRESULT function (IPersistMoniker* This, IMoniker* pimkName, LPBC pbc, WINBOOL fRemember) Save;

    HRESULT function (IPersistMoniker* This, IMoniker* pimkName, LPBC pibc) SaveCompleted;

    HRESULT function (IPersistMoniker* This, IMoniker** ppimkName) GetCurMoniker;
}

struct IPersistMoniker
{
    IPersistMonikerVtbl* lpVtbl;
}

HRESULT IPersistMoniker_GetClassID_Proxy (IPersistMoniker* This, CLSID* pClassID);
void IPersistMoniker_GetClassID_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistMoniker_IsDirty_Proxy (IPersistMoniker* This);
void IPersistMoniker_IsDirty_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistMoniker_Load_Proxy (IPersistMoniker* This, WINBOOL fFullyAvailable, IMoniker* pimkName, LPBC pibc, DWORD grfMode);
void IPersistMoniker_Load_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistMoniker_Save_Proxy (IPersistMoniker* This, IMoniker* pimkName, LPBC pbc, WINBOOL fRemember);
void IPersistMoniker_Save_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistMoniker_SaveCompleted_Proxy (IPersistMoniker* This, IMoniker* pimkName, LPBC pibc);
void IPersistMoniker_SaveCompleted_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPersistMoniker_GetCurMoniker_Proxy (IPersistMoniker* This, IMoniker** ppimkName);
void IPersistMoniker_GetCurMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPMONIKERPROP = IMonikerProp*;

enum __WIDL_urlmon_generated_name_00000002
{
    MIMETYPEPROP = 0x0,
    USE_SRC_URL = 0x1,
    CLASSIDPROP = 0x2,
    TRUSTEDDOWNLOADPROP = 0x3,
    POPUPLEVELPROP = 0x4
}

alias MONIKERPROPERTY = __WIDL_urlmon_generated_name_00000002;

extern __gshared const GUID IID_IMonikerProp;

struct IMonikerPropVtbl
{
    HRESULT function (IMonikerProp* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IMonikerProp* This) AddRef;

    ULONG function (IMonikerProp* This) Release;

    HRESULT function (IMonikerProp* This, MONIKERPROPERTY mkp, LPCWSTR val) PutProperty;
}

struct IMonikerProp
{
    IMonikerPropVtbl* lpVtbl;
}

HRESULT IMonikerProp_PutProperty_Proxy (IMonikerProp* This, MONIKERPROPERTY mkp, LPCWSTR val);
void IMonikerProp_PutProperty_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPBINDPROTOCOL = IBindProtocol*;

extern __gshared const GUID IID_IBindProtocol;

struct IBindProtocolVtbl
{
    HRESULT function (IBindProtocol* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBindProtocol* This) AddRef;

    ULONG function (IBindProtocol* This) Release;

    HRESULT function (IBindProtocol* This, LPCWSTR szUrl, IBindCtx* pbc, IBinding** ppb) CreateBinding;
}

struct IBindProtocol
{
    IBindProtocolVtbl* lpVtbl;
}

HRESULT IBindProtocol_CreateBinding_Proxy (IBindProtocol* This, LPCWSTR szUrl, IBindCtx* pbc, IBinding** ppb);
void IBindProtocol_CreateBinding_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPBINDING = IBinding*;

extern __gshared const GUID IID_IBinding;

struct IBindingVtbl
{
    HRESULT function (IBinding* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBinding* This) AddRef;

    ULONG function (IBinding* This) Release;

    HRESULT function (IBinding* This) Abort;

    HRESULT function (IBinding* This) Suspend;

    HRESULT function (IBinding* This) Resume;

    HRESULT function (IBinding* This, LONG nPriority) SetPriority;

    HRESULT function (IBinding* This, LONG* pnPriority) GetPriority;

    HRESULT function (IBinding* This, CLSID* pclsidProtocol, DWORD* pdwResult, LPOLESTR* pszResult, DWORD* pdwReserved) GetBindResult;
}

struct IBinding
{
    IBindingVtbl* lpVtbl;
}

HRESULT IBinding_Abort_Proxy (IBinding* This);
void IBinding_Abort_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBinding_Suspend_Proxy (IBinding* This);
void IBinding_Suspend_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBinding_Resume_Proxy (IBinding* This);
void IBinding_Resume_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBinding_SetPriority_Proxy (IBinding* This, LONG nPriority);
void IBinding_SetPriority_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBinding_GetPriority_Proxy (IBinding* This, LONG* pnPriority);
void IBinding_GetPriority_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBinding_RemoteGetBindResult_Proxy (IBinding* This, CLSID* pclsidProtocol, DWORD* pdwResult, LPOLESTR* pszResult, DWORD dwReserved);
void IBinding_RemoteGetBindResult_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBinding_GetBindResult_Proxy (IBinding* This, CLSID* pclsidProtocol, DWORD* pdwResult, LPOLESTR* pszResult, DWORD* pdwReserved);
HRESULT IBinding_GetBindResult_Stub (IBinding* This, CLSID* pclsidProtocol, DWORD* pdwResult, LPOLESTR* pszResult, DWORD dwReserved);

alias LPBINDSTATUSCALLBACK = IBindStatusCallback*;

enum __WIDL_urlmon_generated_name_00000003
{
    BINDVERB_GET = 0x0,
    BINDVERB_POST = 0x1,
    BINDVERB_PUT = 0x2,
    BINDVERB_CUSTOM = 0x3,
    BINDVERB_RESERVED1 = 0x4
}

alias BINDVERB = __WIDL_urlmon_generated_name_00000003;

enum __WIDL_urlmon_generated_name_00000004
{
    BINDINFOF_URLENCODESTGMEDDATA = 0x1,
    BINDINFOF_URLENCODEDEXTRAINFO = 0x2
}

alias BINDINFOF = __WIDL_urlmon_generated_name_00000004;

enum __WIDL_urlmon_generated_name_00000005
{
    BINDF_ASYNCHRONOUS = 0x1,
    BINDF_ASYNCSTORAGE = 0x2,
    BINDF_NOPROGRESSIVERENDERING = 0x4,
    BINDF_OFFLINEOPERATION = 0x8,
    BINDF_GETNEWESTVERSION = 0x10,
    BINDF_NOWRITECACHE = 0x20,
    BINDF_NEEDFILE = 0x40,
    BINDF_PULLDATA = 0x80,
    BINDF_IGNORESECURITYPROBLEM = 0x100,
    BINDF_RESYNCHRONIZE = 0x200,
    BINDF_HYPERLINK = 0x400,
    BINDF_NO_UI = 0x800,
    BINDF_SILENTOPERATION = 0x1000,
    BINDF_PRAGMA_NO_CACHE = 0x2000,
    BINDF_GETCLASSOBJECT = 0x4000,
    BINDF_RESERVED_1 = 0x8000,
    BINDF_FREE_THREADED = 0x10000,
    BINDF_DIRECT_READ = 0x20000,
    BINDF_FORMS_SUBMIT = 0x40000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
    BINDF_FROMURLMON = 0x100000,
    BINDF_FWD_BACK = 0x200000,
    BINDF_PREFERDEFAULTHANDLER = 0x400000,
    BINDF_ENFORCERESTRICTED = 0x800000,
    BINDF_RESERVED_2 = 0x80000000,
    BINDF_RESERVED_3 = 0x1000000,
    BINDF_RESERVED_4 = 0x2000000,
    BINDF_RESERVED_5 = 0x4000000,
    BINDF_RESERVED_6 = 0x8000000,
    BINDF_RESERVED_7 = 0x40000000,
    BINDF_RESERVED_8 = 0x20000000
}

alias BINDF = __WIDL_urlmon_generated_name_00000005;

enum __WIDL_urlmon_generated_name_00000006
{
    URL_ENCODING_NONE = 0x0,
    URL_ENCODING_ENABLE_UTF8 = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000
}

alias URL_ENCODING = __WIDL_urlmon_generated_name_00000006;

struct _tagBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown* pUnk;
    DWORD dwReserved;
}

alias BINDINFO = _tagBINDINFO;

struct _REMSECURITY_ATTRIBUTES
{
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    WINBOOL bInheritHandle;
}

alias REMSECURITY_ATTRIBUTES = _REMSECURITY_ATTRIBUTES;
alias PREMSECURITY_ATTRIBUTES = _REMSECURITY_ATTRIBUTES*;
alias LPREMSECURITY_ATTRIBUTES = _REMSECURITY_ATTRIBUTES*;

struct _tagRemBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown* pUnk;
    DWORD dwReserved;
}

alias RemBINDINFO = _tagRemBINDINFO;

struct tagRemFORMATETC
{
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
}

alias RemFORMATETC = tagRemFORMATETC;
alias LPREMFORMATETC = tagRemFORMATETC*;

enum __WIDL_urlmon_generated_name_00000007
{
    BINDINFO_OPTIONS_WININETFLAG = 0x10000,
    BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
    BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
    BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
    BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
    BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
    BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
    BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = cast(int) 0x80000000
}

alias BINDINFO_OPTIONS = __WIDL_urlmon_generated_name_00000007;

enum __WIDL_urlmon_generated_name_00000008
{
    BSCF_FIRSTDATANOTIFICATION = 0x1,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
    BSCF_LASTDATANOTIFICATION = 0x4,
    BSCF_DATAFULLYAVAILABLE = 0x8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
    BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
    BSCF_64BITLENGTHDOWNLOAD = 0x40
}

alias BSCF = __WIDL_urlmon_generated_name_00000008;

enum tagBINDSTATUS
{
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = 2,
    BINDSTATUS_REDIRECTING = 3,
    BINDSTATUS_BEGINDOWNLOADDATA = 4,
    BINDSTATUS_DOWNLOADINGDATA = 5,
    BINDSTATUS_ENDDOWNLOADDATA = 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
    BINDSTATUS_INSTALLINGCOMPONENTS = 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
    BINDSTATUS_USINGCACHEDCOPY = 10,
    BINDSTATUS_SENDINGREQUEST = 11,
    BINDSTATUS_CLASSIDAVAILABLE = 12,
    BINDSTATUS_MIMETYPEAVAILABLE = 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
    BINDSTATUS_BEGINSYNCOPERATION = 15,
    BINDSTATUS_ENDSYNCOPERATION = 16,
    BINDSTATUS_BEGINUPLOADDATA = 17,
    BINDSTATUS_UPLOADINGDATA = 18,
    BINDSTATUS_ENDUPLOADDATA = 19,
    BINDSTATUS_PROTOCOLCLASSID = 20,
    BINDSTATUS_ENCODING = 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
    BINDSTATUS_CLASSINSTALLLOCATION = 23,
    BINDSTATUS_DECODING = 24,
    BINDSTATUS_LOADINGMIMEHANDLER = 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
    BINDSTATUS_FILTERREPORTMIMETYPE = 27,
    BINDSTATUS_CLSIDCANINSTANTIATE = 28,
    BINDSTATUS_IUNKNOWNAVAILABLE = 29,
    BINDSTATUS_DIRECTBIND = 30,
    BINDSTATUS_RAWMIMETYPE = 31,
    BINDSTATUS_PROXYDETECTING = 32,
    BINDSTATUS_ACCEPTRANGES = 33,
    BINDSTATUS_COOKIE_SENT = 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
    BINDSTATUS_COOKIE_SUPPRESSED = 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
    BINDSTATUS_COOKIE_STATE_REJECT = 39,
    BINDSTATUS_COOKIE_STATE_PROMPT = 40,
    BINDSTATUS_COOKIE_STATE_LEASH = 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
    BINDSTATUS_POLICY_HREF = 43,
    BINDSTATUS_P3P_HEADER = 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
    BINDSTATUS_CACHECONTROL = 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
    BINDSTATUS_PUBLISHERAVAILABLE = 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
    BINDSTATUS_SSLUX_NAVBLOCKED = 53,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
    BINDSTATUS_64BIT_PROGRESS = 56,
    BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
    BINDSTATUS_RESERVED_0 = 57,
    BINDSTATUS_RESERVED_1 = 58,
    BINDSTATUS_RESERVED_2 = 59,
    BINDSTATUS_RESERVED_3 = 60,
    BINDSTATUS_RESERVED_4 = 61,
    BINDSTATUS_RESERVED_5 = 62,
    BINDSTATUS_RESERVED_6 = 63,
    BINDSTATUS_RESERVED_7 = 64,
    BINDSTATUS_RESERVED_8 = 65,
    BINDSTATUS_RESERVED_9 = 66,
    BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_9
}

alias BINDSTATUS = tagBINDSTATUS;

extern __gshared const GUID IID_IBindStatusCallback;

struct IBindStatusCallbackVtbl
{
    HRESULT function (IBindStatusCallback* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBindStatusCallback* This) AddRef;

    ULONG function (IBindStatusCallback* This) Release;

    HRESULT function (IBindStatusCallback* This, DWORD dwReserved, IBinding* pib) OnStartBinding;

    HRESULT function (IBindStatusCallback* This, LONG* pnPriority) GetPriority;

    HRESULT function (IBindStatusCallback* This, DWORD reserved) OnLowResource;

    HRESULT function (IBindStatusCallback* This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText) OnProgress;

    HRESULT function (IBindStatusCallback* This, HRESULT hresult, LPCWSTR szError) OnStopBinding;

    HRESULT function (IBindStatusCallback* This, DWORD* grfBINDF, BINDINFO* pbindinfo) GetBindInfo;

    HRESULT function (IBindStatusCallback* This, DWORD grfBSCF, DWORD dwSize, FORMATETC* pformatetc, STGMEDIUM* pstgmed) OnDataAvailable;

    HRESULT function (IBindStatusCallback* This, const IID* riid, IUnknown* punk) OnObjectAvailable;
}

struct IBindStatusCallback
{
    IBindStatusCallbackVtbl* lpVtbl;
}

HRESULT IBindStatusCallback_OnStartBinding_Proxy (IBindStatusCallback* This, DWORD dwReserved, IBinding* pib);
void IBindStatusCallback_OnStartBinding_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_GetPriority_Proxy (IBindStatusCallback* This, LONG* pnPriority);
void IBindStatusCallback_GetPriority_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnLowResource_Proxy (IBindStatusCallback* This, DWORD reserved);
void IBindStatusCallback_OnLowResource_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnProgress_Proxy (IBindStatusCallback* This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);
void IBindStatusCallback_OnProgress_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnStopBinding_Proxy (IBindStatusCallback* This, HRESULT hresult, LPCWSTR szError);
void IBindStatusCallback_OnStopBinding_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy (IBindStatusCallback* This, DWORD* grfBINDF, RemBINDINFO* pbindinfo, RemSTGMEDIUM* pstgmed);
void IBindStatusCallback_RemoteGetBindInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy (IBindStatusCallback* This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC* pformatetc, RemSTGMEDIUM* pstgmed);
void IBindStatusCallback_RemoteOnDataAvailable_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_OnObjectAvailable_Proxy (IBindStatusCallback* This, const IID* riid, IUnknown* punk);
void IBindStatusCallback_OnObjectAvailable_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallback_GetBindInfo_Proxy (IBindStatusCallback* This, DWORD* grfBINDF, BINDINFO* pbindinfo);
HRESULT IBindStatusCallback_GetBindInfo_Stub (IBindStatusCallback* This, DWORD* grfBINDF, RemBINDINFO* pbindinfo, RemSTGMEDIUM* pstgmed);
HRESULT IBindStatusCallback_OnDataAvailable_Proxy (IBindStatusCallback* This, DWORD grfBSCF, DWORD dwSize, FORMATETC* pformatetc, STGMEDIUM* pstgmed);
HRESULT IBindStatusCallback_OnDataAvailable_Stub (IBindStatusCallback* This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC* pformatetc, RemSTGMEDIUM* pstgmed);

alias LPBINDSTATUSCALLBACKEX = IBindStatusCallbackEx*;

enum __WIDL_urlmon_generated_name_00000009
{
    BINDF2_DISABLEBASICOVERHTTP = 0x1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
    BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
    BINDF2_SETDOWNLOADMODE = 0x20,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
    BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
    BINDF2_RESERVED_F = 0x20000,
    BINDF2_RESERVED_E = 0x40000,
    BINDF2_RESERVED_D = 0x80000,
    BINDF2_RESERVED_C = 0x100000,
    BINDF2_RESERVED_B = 0x200000,
    BINDF2_RESERVED_A = 0x400000,
    BINDF2_RESERVED_9 = 0x800000,
    BINDF2_RESERVED_8 = 0x1000000,
    BINDF2_RESERVED_7 = 0x2000000,
    BINDF2_RESERVED_6 = 0x4000000,
    BINDF2_RESERVED_5 = 0x8000000,
    BINDF2_RESERVED_4 = 0x10000000,
    BINDF2_RESERVED_3 = 0x20000000,
    BINDF2_RESERVED_2 = 0x40000000,
    BINDF2_RESERVED_1 = 0x80000000
}

alias BINDF2 = __WIDL_urlmon_generated_name_00000009;

extern __gshared const GUID IID_IBindStatusCallbackEx;

struct IBindStatusCallbackExVtbl
{
    HRESULT function (IBindStatusCallbackEx* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBindStatusCallbackEx* This) AddRef;

    ULONG function (IBindStatusCallbackEx* This) Release;

    HRESULT function (IBindStatusCallbackEx* This, DWORD dwReserved, IBinding* pib) OnStartBinding;

    HRESULT function (IBindStatusCallbackEx* This, LONG* pnPriority) GetPriority;

    HRESULT function (IBindStatusCallbackEx* This, DWORD reserved) OnLowResource;

    HRESULT function (IBindStatusCallbackEx* This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText) OnProgress;

    HRESULT function (IBindStatusCallbackEx* This, HRESULT hresult, LPCWSTR szError) OnStopBinding;

    HRESULT function (IBindStatusCallbackEx* This, DWORD* grfBINDF, BINDINFO* pbindinfo) GetBindInfo;

    HRESULT function (IBindStatusCallbackEx* This, DWORD grfBSCF, DWORD dwSize, FORMATETC* pformatetc, STGMEDIUM* pstgmed) OnDataAvailable;

    HRESULT function (IBindStatusCallbackEx* This, const IID* riid, IUnknown* punk) OnObjectAvailable;

    HRESULT function (IBindStatusCallbackEx* This, DWORD* grfBINDF, BINDINFO* pbindinfo, DWORD* grfBINDF2, DWORD* pdwReserved) GetBindInfoEx;
}

struct IBindStatusCallbackEx
{
    IBindStatusCallbackExVtbl* lpVtbl;
}

HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy (IBindStatusCallbackEx* This, DWORD* grfBINDF, RemBINDINFO* pbindinfo, RemSTGMEDIUM* pstgmed, DWORD* grfBINDF2, DWORD* pdwReserved);
void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy (IBindStatusCallbackEx* This, DWORD* grfBINDF, BINDINFO* pbindinfo, DWORD* grfBINDF2, DWORD* pdwReserved);
HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub (IBindStatusCallbackEx* This, DWORD* grfBINDF, RemBINDINFO* pbindinfo, RemSTGMEDIUM* pstgmed, DWORD* grfBINDF2, DWORD* pdwReserved);

alias LPAUTHENTICATION = IAuthenticate*;

extern __gshared const GUID IID_IAuthenticate;

struct IAuthenticateVtbl
{
    HRESULT function (IAuthenticate* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAuthenticate* This) AddRef;

    ULONG function (IAuthenticate* This) Release;

    HRESULT function (IAuthenticate* This, HWND* phwnd, LPWSTR* pszUsername, LPWSTR* pszPassword) Authenticate;
}

struct IAuthenticate
{
    IAuthenticateVtbl* lpVtbl;
}

HRESULT IAuthenticate_Authenticate_Proxy (IAuthenticate* This, HWND* phwnd, LPWSTR* pszUsername, LPWSTR* pszPassword);
void IAuthenticate_Authenticate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPAUTHENTICATIONEX = IAuthenticateEx*;

enum __WIDL_urlmon_generated_name_0000000A
{
    AUTHENTICATEF_PROXY = 0x1,
    AUTHENTICATEF_BASIC = 0x2,
    AUTHENTICATEF_HTTP = 0x4
}

alias AUTHENTICATEF = __WIDL_urlmon_generated_name_0000000A;

struct _tagAUTHENTICATEINFO
{
    DWORD dwFlags;
    DWORD dwReserved;
}

alias AUTHENTICATEINFO = _tagAUTHENTICATEINFO;

extern __gshared const GUID IID_IAuthenticateEx;

struct IAuthenticateExVtbl
{
    HRESULT function (IAuthenticateEx* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IAuthenticateEx* This) AddRef;

    ULONG function (IAuthenticateEx* This) Release;

    HRESULT function (IAuthenticateEx* This, HWND* phwnd, LPWSTR* pszUsername, LPWSTR* pszPassword) Authenticate;

    HRESULT function (IAuthenticateEx* This, HWND* phwnd, LPWSTR* pszUsername, LPWSTR* pszPassword, AUTHENTICATEINFO* pauthinfo) AuthenticateEx;
}

struct IAuthenticateEx
{
    IAuthenticateExVtbl* lpVtbl;
}

HRESULT IAuthenticateEx_AuthenticateEx_Proxy (IAuthenticateEx* This, HWND* phwnd, LPWSTR* pszUsername, LPWSTR* pszPassword, AUTHENTICATEINFO* pauthinfo);
void IAuthenticateEx_AuthenticateEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPHTTPNEGOTIATE = IHttpNegotiate*;

extern __gshared const GUID IID_IHttpNegotiate;

struct IHttpNegotiateVtbl
{
    HRESULT function (IHttpNegotiate* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IHttpNegotiate* This) AddRef;

    ULONG function (IHttpNegotiate* This) Release;

    HRESULT function (IHttpNegotiate* This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR* pszAdditionalHeaders) BeginningTransaction;

    HRESULT function (IHttpNegotiate* This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR* pszAdditionalRequestHeaders) OnResponse;
}

struct IHttpNegotiate
{
    IHttpNegotiateVtbl* lpVtbl;
}

HRESULT IHttpNegotiate_BeginningTransaction_Proxy (IHttpNegotiate* This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR* pszAdditionalHeaders);
void IHttpNegotiate_BeginningTransaction_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IHttpNegotiate_OnResponse_Proxy (IHttpNegotiate* This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR* pszAdditionalRequestHeaders);
void IHttpNegotiate_OnResponse_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPHTTPNEGOTIATE2 = IHttpNegotiate2*;

extern __gshared const GUID IID_IHttpNegotiate2;

struct IHttpNegotiate2Vtbl
{
    HRESULT function (IHttpNegotiate2* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IHttpNegotiate2* This) AddRef;

    ULONG function (IHttpNegotiate2* This) Release;

    HRESULT function (IHttpNegotiate2* This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR* pszAdditionalHeaders) BeginningTransaction;

    HRESULT function (IHttpNegotiate2* This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR* pszAdditionalRequestHeaders) OnResponse;

    HRESULT function (IHttpNegotiate2* This, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved) GetRootSecurityId;
}

struct IHttpNegotiate2
{
    IHttpNegotiate2Vtbl* lpVtbl;
}

HRESULT IHttpNegotiate2_GetRootSecurityId_Proxy (IHttpNegotiate2* This, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved);
void IHttpNegotiate2_GetRootSecurityId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPHTTPNEGOTIATE3 = IHttpNegotiate3*;

extern __gshared const GUID IID_IHttpNegotiate3;

struct IHttpNegotiate3Vtbl
{
    HRESULT function (IHttpNegotiate3* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IHttpNegotiate3* This) AddRef;

    ULONG function (IHttpNegotiate3* This) Release;

    HRESULT function (IHttpNegotiate3* This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR* pszAdditionalHeaders) BeginningTransaction;

    HRESULT function (IHttpNegotiate3* This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR* pszAdditionalRequestHeaders) OnResponse;

    HRESULT function (IHttpNegotiate3* This, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved) GetRootSecurityId;

    HRESULT function (IHttpNegotiate3* This, BYTE** ppbCert, DWORD* pcbCert) GetSerializedClientCertContext;
}

struct IHttpNegotiate3
{
    IHttpNegotiate3Vtbl* lpVtbl;
}

HRESULT IHttpNegotiate3_GetSerializedClientCertContext_Proxy (IHttpNegotiate3* This, BYTE** ppbCert, DWORD* pcbCert);
void IHttpNegotiate3_GetSerializedClientCertContext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPWININETFILESTREAM = IWinInetFileStream*;

extern __gshared const GUID IID_IWinInetFileStream;

struct IWinInetFileStreamVtbl
{
    HRESULT function (IWinInetFileStream* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWinInetFileStream* This) AddRef;

    ULONG function (IWinInetFileStream* This) Release;

    HRESULT function (IWinInetFileStream* This, DWORD_PTR hWinInetLockHandle, DWORD_PTR dwReserved) SetHandleForUnlock;

    HRESULT function (IWinInetFileStream* This, DWORD_PTR dwReserved) SetDeleteFile;
}

struct IWinInetFileStream
{
    IWinInetFileStreamVtbl* lpVtbl;
}

HRESULT IWinInetFileStream_SetHandleForUnlock_Proxy (IWinInetFileStream* This, DWORD_PTR hWinInetLockHandle, DWORD_PTR dwReserved);
void IWinInetFileStream_SetHandleForUnlock_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IWinInetFileStream_SetDeleteFile_Proxy (IWinInetFileStream* This, DWORD_PTR dwReserved);
void IWinInetFileStream_SetDeleteFile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPWINDOWFORBINDINGUI = IWindowForBindingUI*;

extern __gshared const GUID IID_IWindowForBindingUI;

struct IWindowForBindingUIVtbl
{
    HRESULT function (IWindowForBindingUI* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWindowForBindingUI* This) AddRef;

    ULONG function (IWindowForBindingUI* This) Release;

    HRESULT function (IWindowForBindingUI* This, const GUID* rguidReason, HWND* phwnd) GetWindow;
}

struct IWindowForBindingUI
{
    IWindowForBindingUIVtbl* lpVtbl;
}

HRESULT IWindowForBindingUI_GetWindow_Proxy (IWindowForBindingUI* This, const GUID* rguidReason, HWND* phwnd);
void IWindowForBindingUI_GetWindow_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPCODEINSTALL = ICodeInstall*;

enum __WIDL_urlmon_generated_name_0000000B
{
    CIP_DISK_FULL = 0,
    CIP_ACCESS_DENIED = 1,
    CIP_NEWER_VERSION_EXISTS = 2,
    CIP_OLDER_VERSION_EXISTS = 3,
    CIP_NAME_CONFLICT = 4,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
    CIP_UNSAFE_TO_ABORT = 7,
    CIP_NEED_REBOOT = 8,
    CIP_NEED_REBOOT_UI_PERMISSION = 9
}

alias CIP_STATUS = __WIDL_urlmon_generated_name_0000000B;

extern __gshared const GUID IID_ICodeInstall;

struct ICodeInstallVtbl
{
    HRESULT function (ICodeInstall* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICodeInstall* This) AddRef;

    ULONG function (ICodeInstall* This) Release;

    HRESULT function (ICodeInstall* This, const GUID* rguidReason, HWND* phwnd) GetWindow;

    HRESULT function (ICodeInstall* This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved) OnCodeInstallProblem;
}

struct ICodeInstall
{
    ICodeInstallVtbl* lpVtbl;
}

HRESULT ICodeInstall_OnCodeInstallProblem_Proxy (ICodeInstall* This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);
void ICodeInstall_OnCodeInstallProblem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPWININETINFO = IWinInetInfo*;
extern __gshared const GUID IID_IWinInetInfo;

struct IWinInetInfoVtbl
{
    HRESULT function (IWinInetInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWinInetInfo* This) AddRef;

    ULONG function (IWinInetInfo* This) Release;

    HRESULT function (IWinInetInfo* This, DWORD dwOption, LPVOID pBuffer, DWORD* pcbBuf) QueryOption;
}

struct IWinInetInfo
{
    IWinInetInfoVtbl* lpVtbl;
}

HRESULT IWinInetInfo_RemoteQueryOption_Proxy (IWinInetInfo* This, DWORD dwOption, BYTE* pBuffer, DWORD* pcbBuf);
void IWinInetInfo_RemoteQueryOption_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IWinInetInfo_QueryOption_Proxy (IWinInetInfo* This, DWORD dwOption, LPVOID pBuffer, DWORD* pcbBuf);
HRESULT IWinInetInfo_QueryOption_Stub (IWinInetInfo* This, DWORD dwOption, BYTE* pBuffer, DWORD* pcbBuf);

alias LPHTTPSECURITY = IHttpSecurity*;

extern __gshared const GUID IID_IHttpSecurity;

struct IHttpSecurityVtbl
{
    HRESULT function (IHttpSecurity* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IHttpSecurity* This) AddRef;

    ULONG function (IHttpSecurity* This) Release;

    HRESULT function (IHttpSecurity* This, const GUID* rguidReason, HWND* phwnd) GetWindow;

    HRESULT function (IHttpSecurity* This, DWORD dwProblem) OnSecurityProblem;
}

struct IHttpSecurity
{
    IHttpSecurityVtbl* lpVtbl;
}

HRESULT IHttpSecurity_OnSecurityProblem_Proxy (IHttpSecurity* This, DWORD dwProblem);
void IHttpSecurity_OnSecurityProblem_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPWININETHTTPINFO = IWinInetHttpInfo*;

extern __gshared const GUID IID_IWinInetHttpInfo;

struct IWinInetHttpInfoVtbl
{
    HRESULT function (IWinInetHttpInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWinInetHttpInfo* This) AddRef;

    ULONG function (IWinInetHttpInfo* This) Release;

    HRESULT function (IWinInetHttpInfo* This, DWORD dwOption, LPVOID pBuffer, DWORD* pcbBuf) QueryOption;

    HRESULT function (IWinInetHttpInfo* This, DWORD dwOption, LPVOID pBuffer, DWORD* pcbBuf, DWORD* pdwFlags, DWORD* pdwReserved) QueryInfo;
}

struct IWinInetHttpInfo
{
    IWinInetHttpInfoVtbl* lpVtbl;
}

HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy (IWinInetHttpInfo* This, DWORD dwOption, BYTE* pBuffer, DWORD* pcbBuf, DWORD* pdwFlags, DWORD* pdwReserved);
void IWinInetHttpInfo_RemoteQueryInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IWinInetHttpInfo_QueryInfo_Proxy (IWinInetHttpInfo* This, DWORD dwOption, LPVOID pBuffer, DWORD* pcbBuf, DWORD* pdwFlags, DWORD* pdwReserved);
HRESULT IWinInetHttpInfo_QueryInfo_Stub (IWinInetHttpInfo* This, DWORD dwOption, BYTE* pBuffer, DWORD* pcbBuf, DWORD* pdwFlags, DWORD* pdwReserved);

extern __gshared const GUID IID_IWinInetHttpTimeouts;

struct IWinInetHttpTimeoutsVtbl
{
    HRESULT function (IWinInetHttpTimeouts* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWinInetHttpTimeouts* This) AddRef;

    ULONG function (IWinInetHttpTimeouts* This) Release;

    HRESULT function (IWinInetHttpTimeouts* This, DWORD* pdwConnectTimeout, DWORD* pdwSendTimeout, DWORD* pdwReceiveTimeout) GetRequestTimeouts;
}

struct IWinInetHttpTimeouts
{
    IWinInetHttpTimeoutsVtbl* lpVtbl;
}

HRESULT IWinInetHttpTimeouts_GetRequestTimeouts_Proxy (IWinInetHttpTimeouts* This, DWORD* pdwConnectTimeout, DWORD* pdwSendTimeout, DWORD* pdwReceiveTimeout);
void IWinInetHttpTimeouts_GetRequestTimeouts_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID SID_BindHost;

alias LPBINDHOST = IBindHost*;

extern __gshared const GUID IID_IBindHost;

struct IBindHostVtbl
{
    HRESULT function (IBindHost* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBindHost* This) AddRef;

    ULONG function (IBindHost* This) Release;

    HRESULT function (IBindHost* This, LPOLESTR szName, IBindCtx* pBC, IMoniker** ppmk, DWORD dwReserved) CreateMoniker;

    HRESULT function (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, void** ppvObj) MonikerBindToStorage;

    HRESULT function (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, void** ppvObj) MonikerBindToObject;
}

struct IBindHost
{
    IBindHostVtbl* lpVtbl;
}

HRESULT IBindHost_CreateMoniker_Proxy (IBindHost* This, LPOLESTR szName, IBindCtx* pBC, IMoniker** ppmk, DWORD dwReserved);
void IBindHost_CreateMoniker_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, IUnknown** ppvObj);
void IBindHost_RemoteMonikerBindToStorage_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindHost_RemoteMonikerBindToObject_Proxy (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, IUnknown** ppvObj);
void IBindHost_RemoteMonikerBindToObject_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IBindHost_MonikerBindToStorage_Proxy (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, void** ppvObj);
HRESULT IBindHost_MonikerBindToStorage_Stub (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, IUnknown** ppvObj);
HRESULT IBindHost_MonikerBindToObject_Proxy (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, void** ppvObj);
HRESULT IBindHost_MonikerBindToObject_Stub (IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, const IID* riid, IUnknown** ppvObj);

HRESULT HlinkSimpleNavigateToString (LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown* pUnk, IBindCtx* pbc, IBindStatusCallback*, DWORD grfHLNF, DWORD dwReserved);
HRESULT HlinkSimpleNavigateToMoniker (IMoniker* pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown* pUnk, IBindCtx* pbc, IBindStatusCallback*, DWORD grfHLNF, DWORD dwReserved);
HRESULT URLOpenStreamA (LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLOpenStreamW (LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLOpenPullStreamA (LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLOpenPullStreamW (LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLDownloadToFileA (LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLDownloadToFileW (LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLDownloadToCacheFileA (LPUNKNOWN, LPCSTR, LPSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLDownloadToCacheFileW (LPUNKNOWN, LPCWSTR, LPWSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLOpenBlockingStreamA (LPUNKNOWN, LPCSTR, LPSTREAM*, DWORD, LPBINDSTATUSCALLBACK);
HRESULT URLOpenBlockingStreamW (LPUNKNOWN, LPCWSTR, LPSTREAM*, DWORD, LPBINDSTATUSCALLBACK);

HRESULT HlinkGoBack (IUnknown* pUnk);
HRESULT HlinkGoForward (IUnknown* pUnk);
HRESULT HlinkNavigateString (IUnknown* pUnk, LPCWSTR szTarget);
HRESULT HlinkNavigateMoniker (IUnknown* pUnk, IMoniker* pmkTarget);

alias LPIINTERNET = IInternet*;
extern __gshared const GUID IID_IInternet;

struct IInternetVtbl
{
    HRESULT function (IInternet* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternet* This) AddRef;

    ULONG function (IInternet* This) Release;
}

struct IInternet
{
    IInternetVtbl* lpVtbl;
}

alias LPIINTERNETBINDINFO = IInternetBindInfo*;

enum tagBINDSTRING
{
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = 2,
    BINDSTRING_EXTRA_URL = 3,
    BINDSTRING_LANGUAGE = 4,
    BINDSTRING_USERNAME = 5,
    BINDSTRING_PASSWORD = 6,
    BINDSTRING_UA_PIXELS = 7,
    BINDSTRING_UA_COLOR = 8,
    BINDSTRING_OS = 9,
    BINDSTRING_USER_AGENT = 10,
    BINDSTRING_ACCEPT_ENCODINGS = 11,
    BINDSTRING_POST_COOKIE = 12,
    BINDSTRING_POST_DATA_MIME = 13,
    BINDSTRING_URL = 14,
    BINDSTRING_IID = 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
    BINDSTRING_PTR_BIND_CONTEXT = 17,
    BINDSTRING_XDR_ORIGIN = 18,
    BINDSTRING_DOWNLOADPATH = 19,
    BINDSTRING_ROOTDOC_URL = 20,
    BINDSTRING_INITIAL_FILENAME = 21,
    BINDSTRING_PROXY_USERNAME = 22,
    BINDSTRING_PROXY_PASSWORD = 23
}

alias BINDSTRING = tagBINDSTRING;

extern __gshared const GUID IID_IInternetBindInfo;

struct IInternetBindInfoVtbl
{
    HRESULT function (IInternetBindInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetBindInfo* This) AddRef;

    ULONG function (IInternetBindInfo* This) Release;

    HRESULT function (IInternetBindInfo* This, DWORD* grfBINDF, BINDINFO* pbindinfo) GetBindInfo;

    HRESULT function (IInternetBindInfo* This, ULONG ulStringType, LPOLESTR* ppwzStr, ULONG cEl, ULONG* pcElFetched) GetBindString;
}

struct IInternetBindInfo
{
    IInternetBindInfoVtbl* lpVtbl;
}

HRESULT IInternetBindInfo_GetBindInfo_Proxy (IInternetBindInfo* This, DWORD* grfBINDF, BINDINFO* pbindinfo);
void IInternetBindInfo_GetBindInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetBindInfo_GetBindString_Proxy (IInternetBindInfo* This, ULONG ulStringType, LPOLESTR* ppwzStr, ULONG cEl, ULONG* pcElFetched);
void IInternetBindInfo_GetBindString_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETBINDINFOEX = IInternetBindInfoEx*;

extern __gshared const GUID IID_IInternetBindInfoEx;

struct IInternetBindInfoExVtbl
{
    HRESULT function (IInternetBindInfoEx* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetBindInfoEx* This) AddRef;

    ULONG function (IInternetBindInfoEx* This) Release;

    HRESULT function (IInternetBindInfoEx* This, DWORD* grfBINDF, BINDINFO* pbindinfo) GetBindInfo;

    HRESULT function (IInternetBindInfoEx* This, ULONG ulStringType, LPOLESTR* ppwzStr, ULONG cEl, ULONG* pcElFetched) GetBindString;

    HRESULT function (IInternetBindInfoEx* This, DWORD* grfBINDF, BINDINFO* pbindinfo, DWORD* grfBINDF2, DWORD* pdwReserved) GetBindInfoEx;
}

struct IInternetBindInfoEx
{
    IInternetBindInfoExVtbl* lpVtbl;
}

HRESULT IInternetBindInfoEx_GetBindInfoEx_Proxy (IInternetBindInfoEx* This, DWORD* grfBINDF, BINDINFO* pbindinfo, DWORD* grfBINDF2, DWORD* pdwReserved);
void IInternetBindInfoEx_GetBindInfoEx_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETPROTOCOLROOT = IInternetProtocolRoot*;

enum _tagPI_FLAGS
{
    PI_PARSE_URL = 0x1,
    PI_FILTER_MODE = 0x2,
    PI_FORCE_ASYNC = 0x4,
    PI_USE_WORKERTHREAD = 0x8,
    PI_MIMEVERIFICATION = 0x10,
    PI_CLSIDLOOKUP = 0x20,
    PI_DATAPROGRESS = 0x40,
    PI_SYNCHRONOUS = 0x80,
    PI_APARTMENTTHREADED = 0x100,
    PI_CLASSINSTALL = 0x200,
    PI_PASSONBINDCTX = 0x2000,
    PI_NOMIMEHANDLER = 0x8000,
    PI_LOADAPPDIRECT = 0x4000,
    PD_FORCE_SWITCH = 0x10000,
    PI_PREFERDEFAULTHANDLER = 0x20000
}

alias PI_FLAGS = _tagPI_FLAGS;

struct _tagPROTOCOLDATA
{
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
}

alias PROTOCOLDATA = _tagPROTOCOLDATA;

struct _tagStartParam
{
    IID iid;
    IBindCtx* pIBindCtx;
    IUnknown* pItf;
}

alias StartParam = _tagStartParam;

extern __gshared const GUID IID_IInternetProtocolRoot;

struct IInternetProtocolRootVtbl
{
    HRESULT function (IInternetProtocolRoot* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetProtocolRoot* This) AddRef;

    ULONG function (IInternetProtocolRoot* This) Release;

    HRESULT function (IInternetProtocolRoot* This, LPCWSTR szUrl, IInternetProtocolSink* pOIProtSink, IInternetBindInfo* pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved) Start;

    HRESULT function (IInternetProtocolRoot* This, PROTOCOLDATA* pProtocolData) Continue;

    HRESULT function (IInternetProtocolRoot* This, HRESULT hrReason, DWORD dwOptions) Abort;

    HRESULT function (IInternetProtocolRoot* This, DWORD dwOptions) Terminate;

    HRESULT function (IInternetProtocolRoot* This) Suspend;

    HRESULT function (IInternetProtocolRoot* This) Resume;
}

struct IInternetProtocolRoot
{
    IInternetProtocolRootVtbl* lpVtbl;
}

HRESULT IInternetProtocolRoot_Start_Proxy (IInternetProtocolRoot* This, LPCWSTR szUrl, IInternetProtocolSink* pOIProtSink, IInternetBindInfo* pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);
void IInternetProtocolRoot_Start_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Continue_Proxy (IInternetProtocolRoot* This, PROTOCOLDATA* pProtocolData);
void IInternetProtocolRoot_Continue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Abort_Proxy (IInternetProtocolRoot* This, HRESULT hrReason, DWORD dwOptions);
void IInternetProtocolRoot_Abort_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Terminate_Proxy (IInternetProtocolRoot* This, DWORD dwOptions);
void IInternetProtocolRoot_Terminate_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Suspend_Proxy (IInternetProtocolRoot* This);
void IInternetProtocolRoot_Suspend_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolRoot_Resume_Proxy (IInternetProtocolRoot* This);
void IInternetProtocolRoot_Resume_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETPROTOCOL = IInternetProtocol*;

extern __gshared const GUID IID_IInternetProtocol;

struct IInternetProtocolVtbl
{
    HRESULT function (IInternetProtocol* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetProtocol* This) AddRef;

    ULONG function (IInternetProtocol* This) Release;

    HRESULT function (IInternetProtocol* This, LPCWSTR szUrl, IInternetProtocolSink* pOIProtSink, IInternetBindInfo* pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved) Start;

    HRESULT function (IInternetProtocol* This, PROTOCOLDATA* pProtocolData) Continue;

    HRESULT function (IInternetProtocol* This, HRESULT hrReason, DWORD dwOptions) Abort;

    HRESULT function (IInternetProtocol* This, DWORD dwOptions) Terminate;

    HRESULT function (IInternetProtocol* This) Suspend;

    HRESULT function (IInternetProtocol* This) Resume;

    HRESULT function (IInternetProtocol* This, void* pv, ULONG cb, ULONG* pcbRead) Read;

    HRESULT function (IInternetProtocol* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition) Seek;

    HRESULT function (IInternetProtocol* This, DWORD dwOptions) LockRequest;

    HRESULT function (IInternetProtocol* This) UnlockRequest;
}

struct IInternetProtocol
{
    IInternetProtocolVtbl* lpVtbl;
}

HRESULT IInternetProtocol_Read_Proxy (IInternetProtocol* This, void* pv, ULONG cb, ULONG* pcbRead);
void IInternetProtocol_Read_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocol_Seek_Proxy (IInternetProtocol* This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER* plibNewPosition);
void IInternetProtocol_Seek_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocol_LockRequest_Proxy (IInternetProtocol* This, DWORD dwOptions);
void IInternetProtocol_LockRequest_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocol_UnlockRequest_Proxy (IInternetProtocol* This);
void IInternetProtocol_UnlockRequest_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETPROTOCOLSINK = IInternetProtocolSink*;

extern __gshared const GUID IID_IInternetProtocolSink;

struct IInternetProtocolSinkVtbl
{
    HRESULT function (IInternetProtocolSink* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetProtocolSink* This) AddRef;

    ULONG function (IInternetProtocolSink* This) Release;

    HRESULT function (IInternetProtocolSink* This, PROTOCOLDATA* pProtocolData) Switch;

    HRESULT function (IInternetProtocolSink* This, ULONG ulStatusCode, LPCWSTR szStatusText) ReportProgress;

    HRESULT function (IInternetProtocolSink* This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax) ReportData;

    HRESULT function (IInternetProtocolSink* This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult) ReportResult;
}

struct IInternetProtocolSink
{
    IInternetProtocolSinkVtbl* lpVtbl;
}

HRESULT IInternetProtocolSink_Switch_Proxy (IInternetProtocolSink* This, PROTOCOLDATA* pProtocolData);
void IInternetProtocolSink_Switch_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolSink_ReportProgress_Proxy (IInternetProtocolSink* This, ULONG ulStatusCode, LPCWSTR szStatusText);
void IInternetProtocolSink_ReportProgress_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolSink_ReportData_Proxy (IInternetProtocolSink* This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);
void IInternetProtocolSink_ReportData_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolSink_ReportResult_Proxy (IInternetProtocolSink* This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);
void IInternetProtocolSink_ReportResult_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETPROTOCOLSINKStackable = IInternetProtocolSinkStackable*;

extern __gshared const GUID IID_IInternetProtocolSinkStackable;

struct IInternetProtocolSinkStackableVtbl
{
    HRESULT function (IInternetProtocolSinkStackable* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetProtocolSinkStackable* This) AddRef;

    ULONG function (IInternetProtocolSinkStackable* This) Release;

    HRESULT function (IInternetProtocolSinkStackable* This, IInternetProtocolSink* pOIProtSink) SwitchSink;

    HRESULT function (IInternetProtocolSinkStackable* This) CommitSwitch;

    HRESULT function (IInternetProtocolSinkStackable* This) RollbackSwitch;
}

struct IInternetProtocolSinkStackable
{
    IInternetProtocolSinkStackableVtbl* lpVtbl;
}

HRESULT IInternetProtocolSinkStackable_SwitchSink_Proxy (IInternetProtocolSinkStackable* This, IInternetProtocolSink* pOIProtSink);
void IInternetProtocolSinkStackable_SwitchSink_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolSinkStackable_CommitSwitch_Proxy (IInternetProtocolSinkStackable* This);
void IInternetProtocolSinkStackable_CommitSwitch_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolSinkStackable_RollbackSwitch_Proxy (IInternetProtocolSinkStackable* This);
void IInternetProtocolSinkStackable_RollbackSwitch_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETSESSION = IInternetSession*;

enum _tagOIBDG_FLAGS
{
    OIBDG_APARTMENTTHREADED = 0x100,
    OIBDG_DATAONLY = 0x1000
}

alias OIBDG_FLAGS = _tagOIBDG_FLAGS;

extern __gshared const GUID IID_IInternetSession;

struct IInternetSessionVtbl
{
    HRESULT function (IInternetSession* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetSession* This) AddRef;

    ULONG function (IInternetSession* This) Release;

    HRESULT function (IInternetSession* This, IClassFactory* pCF, const IID* rclsid, LPCWSTR pwzProtocol, ULONG cPatterns, const(LPCWSTR)* ppwzPatterns, DWORD dwReserved) RegisterNameSpace;

    HRESULT function (IInternetSession* This, IClassFactory* pCF, LPCWSTR pszProtocol) UnregisterNameSpace;

    HRESULT function (IInternetSession* This, IClassFactory* pCF, const IID* rclsid, LPCWSTR pwzType) RegisterMimeFilter;

    HRESULT function (IInternetSession* This, IClassFactory* pCF, LPCWSTR pwzType) UnregisterMimeFilter;

    HRESULT function (IInternetSession* This, LPBC pBC, LPCWSTR szUrl, IUnknown* pUnkOuter, IUnknown** ppUnk, IInternetProtocol** ppOInetProt, DWORD dwOption) CreateBinding;

    HRESULT function (IInternetSession* This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved) SetSessionOption;

    HRESULT function (IInternetSession* This, DWORD dwOption, LPVOID pBuffer, DWORD* pdwBufferLength, DWORD dwReserved) GetSessionOption;
}

struct IInternetSession
{
    IInternetSessionVtbl* lpVtbl;
}

HRESULT IInternetSession_RegisterNameSpace_Proxy (IInternetSession* This, IClassFactory* pCF, const IID* rclsid, LPCWSTR pwzProtocol, ULONG cPatterns, const(LPCWSTR)* ppwzPatterns, DWORD dwReserved);
void IInternetSession_RegisterNameSpace_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSession_UnregisterNameSpace_Proxy (IInternetSession* This, IClassFactory* pCF, LPCWSTR pszProtocol);
void IInternetSession_UnregisterNameSpace_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSession_RegisterMimeFilter_Proxy (IInternetSession* This, IClassFactory* pCF, const IID* rclsid, LPCWSTR pwzType);
void IInternetSession_RegisterMimeFilter_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSession_UnregisterMimeFilter_Proxy (IInternetSession* This, IClassFactory* pCF, LPCWSTR pwzType);
void IInternetSession_UnregisterMimeFilter_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSession_CreateBinding_Proxy (IInternetSession* This, LPBC pBC, LPCWSTR szUrl, IUnknown* pUnkOuter, IUnknown** ppUnk, IInternetProtocol** ppOInetProt, DWORD dwOption);
void IInternetSession_CreateBinding_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSession_SetSessionOption_Proxy (IInternetSession* This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
void IInternetSession_SetSessionOption_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSession_GetSessionOption_Proxy (IInternetSession* This, DWORD dwOption, LPVOID pBuffer, DWORD* pdwBufferLength, DWORD dwReserved);
void IInternetSession_GetSessionOption_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETTHREADSWITCH = IInternetThreadSwitch*;

extern __gshared const GUID IID_IInternetThreadSwitch;

struct IInternetThreadSwitchVtbl
{
    HRESULT function (IInternetThreadSwitch* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetThreadSwitch* This) AddRef;

    ULONG function (IInternetThreadSwitch* This) Release;

    HRESULT function (IInternetThreadSwitch* This) Prepare;

    HRESULT function (IInternetThreadSwitch* This) Continue;
}

struct IInternetThreadSwitch
{
    IInternetThreadSwitchVtbl* lpVtbl;
}

HRESULT IInternetThreadSwitch_Prepare_Proxy (IInternetThreadSwitch* This);
void IInternetThreadSwitch_Prepare_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetThreadSwitch_Continue_Proxy (IInternetThreadSwitch* This);
void IInternetThreadSwitch_Continue_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETPRIORITY = IInternetPriority*;

extern __gshared const GUID IID_IInternetPriority;

struct IInternetPriorityVtbl
{
    HRESULT function (IInternetPriority* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetPriority* This) AddRef;

    ULONG function (IInternetPriority* This) Release;

    HRESULT function (IInternetPriority* This, LONG nPriority) SetPriority;

    HRESULT function (IInternetPriority* This, LONG* pnPriority) GetPriority;
}

struct IInternetPriority
{
    IInternetPriorityVtbl* lpVtbl;
}

HRESULT IInternetPriority_SetPriority_Proxy (IInternetPriority* This, LONG nPriority);
void IInternetPriority_SetPriority_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetPriority_GetPriority_Proxy (IInternetPriority* This, LONG* pnPriority);
void IInternetPriority_GetPriority_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPIINTERNETPROTOCOLINFO = IInternetProtocolInfo*;

enum _tagPARSEACTION
{
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = 2,
    PARSE_SECURITY_URL = 3,
    PARSE_ROOTDOCUMENT = 4,
    PARSE_DOCUMENT = 5,
    PARSE_ANCHOR = 6,
    PARSE_ENCODE_IS_UNESCAPE = 7,
    PARSE_DECODE_IS_ESCAPE = 8,
    PARSE_PATH_FROM_URL = 9,
    PARSE_URL_FROM_PATH = 10,
    PARSE_MIME = 11,
    PARSE_SERVER = 12,
    PARSE_SCHEMA = 13,
    PARSE_SITE = 14,
    PARSE_DOMAIN = 15,
    PARSE_LOCATION = 16,
    PARSE_SECURITY_DOMAIN = 17,
    PARSE_ESCAPE = 18,
    PARSE_UNESCAPE = 19
}

alias PARSEACTION = _tagPARSEACTION;

enum _tagPSUACTION
{
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = 2
}

alias PSUACTION = _tagPSUACTION;

enum _tagQUERYOPTION
{
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = 2,
    QUERY_CONTENT_ENCODING = 3,
    QUERY_CONTENT_TYPE = 4,
    QUERY_REFRESH = 5,
    QUERY_RECOMBINE = 6,
    QUERY_CAN_NAVIGATE = 7,
    QUERY_USES_NETWORK = 8,
    QUERY_IS_CACHED = 9,
    QUERY_IS_INSTALLEDENTRY = 10,
    QUERY_IS_CACHED_OR_MAPPED = 11,
    QUERY_USES_CACHE = 12,
    QUERY_IS_SECURE = 13,
    QUERY_IS_SAFE = 14,
    QUERY_USES_HISTORYFOLDER = 15,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
}

alias QUERYOPTION = _tagQUERYOPTION;

extern __gshared const GUID IID_IInternetProtocolInfo;

struct IInternetProtocolInfoVtbl
{
    HRESULT function (IInternetProtocolInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetProtocolInfo* This) AddRef;

    ULONG function (IInternetProtocolInfo* This) Release;

    HRESULT function (IInternetProtocolInfo* This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD* pcchResult, DWORD dwReserved) ParseUrl;

    HRESULT function (IInternetProtocolInfo* This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD* pcchResult, DWORD dwReserved) CombineUrl;

    HRESULT function (IInternetProtocolInfo* This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags) CompareUrl;

    HRESULT function (IInternetProtocolInfo* This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD* pcbBuf, DWORD dwReserved) QueryInfo;
}

struct IInternetProtocolInfo
{
    IInternetProtocolInfoVtbl* lpVtbl;
}

HRESULT IInternetProtocolInfo_ParseUrl_Proxy (IInternetProtocolInfo* This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD* pcchResult, DWORD dwReserved);
void IInternetProtocolInfo_ParseUrl_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolInfo_CombineUrl_Proxy (IInternetProtocolInfo* This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD* pcchResult, DWORD dwReserved);
void IInternetProtocolInfo_CombineUrl_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolInfo_CompareUrl_Proxy (IInternetProtocolInfo* This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);
void IInternetProtocolInfo_CompareUrl_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetProtocolInfo_QueryInfo_Proxy (IInternetProtocolInfo* This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD* pcbBuf, DWORD dwReserved);
void IInternetProtocolInfo_QueryInfo_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

HRESULT CoInternetParseUrl (LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD* pcchResult, DWORD dwReserved);

HRESULT CoInternetCombineUrl (LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD* pcchResult, DWORD dwReserved);

HRESULT CoInternetCompareUrl (LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags);
HRESULT CoInternetGetProtocolFlags (LPCWSTR pwzUrl, DWORD* pdwFlags, DWORD dwReserved);
HRESULT CoInternetQueryInfo (LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD* pcbBuffer, DWORD dwReserved);
HRESULT CoInternetGetSession (DWORD dwSessionMode, IInternetSession** ppIInternetSession, DWORD dwReserved);
HRESULT CoInternetGetSecurityUrl (LPCWSTR pwszUrl, LPWSTR* ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved);
HRESULT AsyncInstallDistributionUnit (LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx* pbc, LPVOID pvReserved, DWORD flags);

HRESULT CopyStgMedium (const(STGMEDIUM)* pcstgmedSrc, STGMEDIUM* pstgmedDest);
HRESULT CopyBindInfo (const(BINDINFO)* pcbiSrc, BINDINFO* pbiDest);
void ReleaseBindInfo (BINDINFO* pbindinfo);

HRESULT CoInternetCreateSecurityManager (IServiceProvider* pSP, IInternetSecurityManager** ppSM, DWORD dwReserved);
HRESULT CoInternetCreateZoneManager (IServiceProvider* pSP, IInternetZoneManager** ppZM, DWORD dwReserved);

extern __gshared const IID CLSID_InternetSecurityManager;
extern __gshared const IID CLSID_InternetZoneManager;

extern __gshared const GUID IID_IInternetSecurityMgrSite;

struct IInternetSecurityMgrSiteVtbl
{
    HRESULT function (IInternetSecurityMgrSite* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetSecurityMgrSite* This) AddRef;

    ULONG function (IInternetSecurityMgrSite* This) Release;

    HRESULT function (IInternetSecurityMgrSite* This, HWND* phwnd) GetWindow;

    HRESULT function (IInternetSecurityMgrSite* This, WINBOOL fEnable) EnableModeless;
}

struct IInternetSecurityMgrSite
{
    IInternetSecurityMgrSiteVtbl* lpVtbl;
}

HRESULT IInternetSecurityMgrSite_GetWindow_Proxy (IInternetSecurityMgrSite* This, HWND* phwnd);
void IInternetSecurityMgrSite_GetWindow_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityMgrSite_EnableModeless_Proxy (IInternetSecurityMgrSite* This, WINBOOL fEnable);
void IInternetSecurityMgrSite_EnableModeless_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

enum __WIDL_urlmon_generated_name_0000000E
{
    PUAF_DEFAULT = 0x0,
    PUAF_NOUI = 0x1,
    PUAF_ISFILE = 0x2,
    PUAF_WARN_IF_DENIED = 0x4,
    PUAF_FORCEUI_FOREGROUND = 0x8,
    PUAF_CHECK_TIFS = 0x10,
    PUAF_DONTCHECKBOXINDIALOG = 0x20,
    PUAF_TRUSTED = 0x40,
    PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
    PUAF_ENFORCERESTRICTED = 0x100,
    PUAF_NOSAVEDFILECHECK = 0x200,
    PUAF_REQUIRESAVEDFILECHECK = 0x400,
    PUAF_DONT_USE_CACHE = 0x1000,
    PUAF_RESERVED1 = 0x2000,
    PUAF_RESERVED2 = 0x4000,
    PUAF_LMZ_UNLOCKED = 0x10000,
    PUAF_LMZ_LOCKED = 0x20000,
    PUAF_DEFAULTZONEPOL = 0x40000,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
    PUAF_NOUIIFLOCKED = 0x100000,
    PUAF_DRAGPROTOCOLCHECK = 0x200000
}

alias PUAF = __WIDL_urlmon_generated_name_0000000E;

enum __WIDL_urlmon_generated_name_0000000F
{
    PUAFOUT_DEFAULT = 0x0,
    PUAFOUT_ISLOCKZONEPOLICY = 0x1
}

alias PUAFOUT = __WIDL_urlmon_generated_name_0000000F;

enum __WIDL_urlmon_generated_name_00000010
{
    SZM_CREATE = 0x0,
    SZM_DELETE = 0x1
}

alias SZM_FLAGS = __WIDL_urlmon_generated_name_00000010;

extern __gshared const GUID IID_IInternetSecurityManager;

struct IInternetSecurityManagerVtbl
{
    HRESULT function (IInternetSecurityManager* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetSecurityManager* This) AddRef;

    ULONG function (IInternetSecurityManager* This) Release;

    HRESULT function (IInternetSecurityManager* This, IInternetSecurityMgrSite* pSite) SetSecuritySite;

    HRESULT function (IInternetSecurityManager* This, IInternetSecurityMgrSite** ppSite) GetSecuritySite;

    HRESULT function (IInternetSecurityManager* This, LPCWSTR pwszUrl, DWORD* pdwZone, DWORD dwFlags) MapUrlToZone;

    HRESULT function (IInternetSecurityManager* This, LPCWSTR pwszUrl, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved) GetSecurityId;

    HRESULT function (IInternetSecurityManager* This, LPCWSTR pwszUrl, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved) ProcessUrlAction;

    HRESULT function (IInternetSecurityManager* This, LPCWSTR pwszUrl, const GUID* guidKey, BYTE** ppPolicy, DWORD* pcbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwReserved) QueryCustomPolicy;

    HRESULT function (IInternetSecurityManager* This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags) SetZoneMapping;

    HRESULT function (IInternetSecurityManager* This, DWORD dwZone, IEnumString** ppenumString, DWORD dwFlags) GetZoneMappings;
}

struct IInternetSecurityManager
{
    IInternetSecurityManagerVtbl* lpVtbl;
}

HRESULT IInternetSecurityManager_SetSecuritySite_Proxy (IInternetSecurityManager* This, IInternetSecurityMgrSite* pSite);
void IInternetSecurityManager_SetSecuritySite_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_GetSecuritySite_Proxy (IInternetSecurityManager* This, IInternetSecurityMgrSite** ppSite);
void IInternetSecurityManager_GetSecuritySite_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_MapUrlToZone_Proxy (IInternetSecurityManager* This, LPCWSTR pwszUrl, DWORD* pdwZone, DWORD dwFlags);
void IInternetSecurityManager_MapUrlToZone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_GetSecurityId_Proxy (IInternetSecurityManager* This, LPCWSTR pwszUrl, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved);
void IInternetSecurityManager_GetSecurityId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_ProcessUrlAction_Proxy (IInternetSecurityManager* This, LPCWSTR pwszUrl, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
void IInternetSecurityManager_ProcessUrlAction_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_QueryCustomPolicy_Proxy (IInternetSecurityManager* This, LPCWSTR pwszUrl, const GUID* guidKey, BYTE** ppPolicy, DWORD* pcbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwReserved);
void IInternetSecurityManager_QueryCustomPolicy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_SetZoneMapping_Proxy (IInternetSecurityManager* This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);
void IInternetSecurityManager_SetZoneMapping_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetSecurityManager_GetZoneMappings_Proxy (IInternetSecurityManager* This, DWORD dwZone, IEnumString** ppenumString, DWORD dwFlags);
void IInternetSecurityManager_GetZoneMappings_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const GUID IID_IInternetHostSecurityManager;

struct IInternetHostSecurityManagerVtbl
{
    HRESULT function (IInternetHostSecurityManager* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetHostSecurityManager* This) AddRef;

    ULONG function (IInternetHostSecurityManager* This) Release;

    HRESULT function (IInternetHostSecurityManager* This, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved) GetSecurityId;

    HRESULT function (IInternetHostSecurityManager* This, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved) ProcessUrlAction;

    HRESULT function (IInternetHostSecurityManager* This, const GUID* guidKey, BYTE** ppPolicy, DWORD* pcbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwReserved) QueryCustomPolicy;
}

struct IInternetHostSecurityManager
{
    IInternetHostSecurityManagerVtbl* lpVtbl;
}

HRESULT IInternetHostSecurityManager_GetSecurityId_Proxy (IInternetHostSecurityManager* This, BYTE* pbSecurityId, DWORD* pcbSecurityId, DWORD_PTR dwReserved);
void IInternetHostSecurityManager_GetSecurityId_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetHostSecurityManager_ProcessUrlAction_Proxy (IInternetHostSecurityManager* This, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
void IInternetHostSecurityManager_ProcessUrlAction_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetHostSecurityManager_QueryCustomPolicy_Proxy (IInternetHostSecurityManager* This, const GUID* guidKey, BYTE** ppPolicy, DWORD* pcbPolicy, BYTE* pContext, DWORD cbContext, DWORD dwReserved);
void IInternetHostSecurityManager_QueryCustomPolicy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPURLZONEMANAGER = IInternetZoneManager*;

enum tagURLZONE
{
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = 1,
    URLZONE_TRUSTED = 2,
    URLZONE_INTERNET = 3,
    URLZONE_UNTRUSTED = 4,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000
}

alias URLZONE = tagURLZONE;

enum tagURLTEMPLATE
{
    URLTEMPLATE_CUSTOM = 0x0,
    URLTEMPLATE_PREDEFINED_MIN = 0x10000,
    URLTEMPLATE_LOW = 0x10000,
    URLTEMPLATE_MEDLOW = 0x10500,
    URLTEMPLATE_MEDIUM = 0x11000,
    URLTEMPLATE_MEDHIGH = 0x11500,
    URLTEMPLATE_HIGH = 0x12000,
    URLTEMPLATE_PREDEFINED_MAX = 0x20000
}

alias URLTEMPLATE = tagURLTEMPLATE;

enum
{
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200
}

enum __WIDL_urlmon_generated_name_00000011
{
    ZAFLAGS_CUSTOM_EDIT = 0x1,
    ZAFLAGS_ADD_SITES = 0x2,
    ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
    ZAFLAGS_NO_UI = 0x20,
    ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
    ZAFLAGS_UNC_AS_INTRANET = 0x80,
    ZAFLAGS_DETECT_INTRANET = 0x100,
    ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
    ZAFLAGS_NO_CACHE = 0x40000
}

alias ZAFLAGS = __WIDL_urlmon_generated_name_00000011;

struct _ZONEATTRIBUTES
{
    ULONG cbSize;
    WCHAR[260] szDisplayName;
    WCHAR[200] szDescription;
    WCHAR[260] szIconPath;
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
}

alias ZONEATTRIBUTES = _ZONEATTRIBUTES;
alias LPZONEATTRIBUTES = _ZONEATTRIBUTES*;

enum _URLZONEREG
{
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = 1,
    URLZONEREG_HKCU = 2
}

alias URLZONEREG = _URLZONEREG;

extern __gshared const GUID IID_IInternetZoneManager;

struct IInternetZoneManagerVtbl
{
    HRESULT function (IInternetZoneManager* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IInternetZoneManager* This) AddRef;

    ULONG function (IInternetZoneManager* This) Release;

    HRESULT function (IInternetZoneManager* This, DWORD dwZone, ZONEATTRIBUTES* pZoneAttributes) GetZoneAttributes;

    HRESULT function (IInternetZoneManager* This, DWORD dwZone, ZONEATTRIBUTES* pZoneAttributes) SetZoneAttributes;

    HRESULT function (IInternetZoneManager* This, DWORD dwZone, const GUID* guidKey, BYTE** ppPolicy, DWORD* pcbPolicy, URLZONEREG urlZoneReg) GetZoneCustomPolicy;

    HRESULT function (IInternetZoneManager* This, DWORD dwZone, const GUID* guidKey, BYTE* pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg) SetZoneCustomPolicy;

    HRESULT function (IInternetZoneManager* This, DWORD dwZone, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg) GetZoneActionPolicy;

    HRESULT function (IInternetZoneManager* This, DWORD dwZone, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg) SetZoneActionPolicy;

    HRESULT function (IInternetZoneManager* This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags) PromptAction;

    HRESULT function (IInternetZoneManager* This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags) LogAction;

    HRESULT function (IInternetZoneManager* This, DWORD* pdwEnum, DWORD* pdwCount, DWORD dwFlags) CreateZoneEnumerator;

    HRESULT function (IInternetZoneManager* This, DWORD dwEnum, DWORD dwIndex, DWORD* pdwZone) GetZoneAt;

    HRESULT function (IInternetZoneManager* This, DWORD dwEnum) DestroyZoneEnumerator;

    HRESULT function (IInternetZoneManager* This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved) CopyTemplatePoliciesToZone;
}

struct IInternetZoneManager
{
    IInternetZoneManagerVtbl* lpVtbl;
}

HRESULT IInternetZoneManager_GetZoneAttributes_Proxy (IInternetZoneManager* This, DWORD dwZone, ZONEATTRIBUTES* pZoneAttributes);
void IInternetZoneManager_GetZoneAttributes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_SetZoneAttributes_Proxy (IInternetZoneManager* This, DWORD dwZone, ZONEATTRIBUTES* pZoneAttributes);
void IInternetZoneManager_SetZoneAttributes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_GetZoneCustomPolicy_Proxy (IInternetZoneManager* This, DWORD dwZone, const GUID* guidKey, BYTE** ppPolicy, DWORD* pcbPolicy, URLZONEREG urlZoneReg);
void IInternetZoneManager_GetZoneCustomPolicy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_SetZoneCustomPolicy_Proxy (IInternetZoneManager* This, DWORD dwZone, const GUID* guidKey, BYTE* pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
void IInternetZoneManager_SetZoneCustomPolicy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_GetZoneActionPolicy_Proxy (IInternetZoneManager* This, DWORD dwZone, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
void IInternetZoneManager_GetZoneActionPolicy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_SetZoneActionPolicy_Proxy (IInternetZoneManager* This, DWORD dwZone, DWORD dwAction, BYTE* pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
void IInternetZoneManager_SetZoneActionPolicy_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_PromptAction_Proxy (IInternetZoneManager* This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);
void IInternetZoneManager_PromptAction_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_LogAction_Proxy (IInternetZoneManager* This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);
void IInternetZoneManager_LogAction_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_CreateZoneEnumerator_Proxy (IInternetZoneManager* This, DWORD* pdwEnum, DWORD* pdwCount, DWORD dwFlags);
void IInternetZoneManager_CreateZoneEnumerator_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_GetZoneAt_Proxy (IInternetZoneManager* This, DWORD dwEnum, DWORD dwIndex, DWORD* pdwZone);
void IInternetZoneManager_GetZoneAt_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_DestroyZoneEnumerator_Proxy (IInternetZoneManager* This, DWORD dwEnum);
void IInternetZoneManager_DestroyZoneEnumerator_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy (IInternetZoneManager* This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);
void IInternetZoneManager_CopyTemplatePoliciesToZone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

extern __gshared const IID CLSID_SoftDistExt;

struct _tagCODEBASEHOLD
{
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
}

alias CODEBASEHOLD = _tagCODEBASEHOLD;
alias LPCODEBASEHOLD = _tagCODEBASEHOLD*;

struct _tagSOFTDISTINFO
{
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
}

alias SOFTDISTINFO = _tagSOFTDISTINFO;
alias LPSOFTDISTINFO = _tagSOFTDISTINFO*;

extern __gshared const GUID IID_ISoftDistExt;

struct ISoftDistExtVtbl
{
    HRESULT function (ISoftDistExt* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ISoftDistExt* This) AddRef;

    ULONG function (ISoftDistExt* This) Release;

    HRESULT function (ISoftDistExt* This, LPCWSTR szCDFURL, IXMLElement* pSoftDistElement, LPSOFTDISTINFO lpsdi) ProcessSoftDist;

    HRESULT function (ISoftDistExt* This, LPWSTR* szCodeBase, LPDWORD dwMaxSize) GetFirstCodeBase;

    HRESULT function (ISoftDistExt* This, LPWSTR* szCodeBase, LPDWORD dwMaxSize) GetNextCodeBase;

    HRESULT function (ISoftDistExt* This, IBindCtx* pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh) AsyncInstallDistributionUnit;
}

struct ISoftDistExt
{
    ISoftDistExtVtbl* lpVtbl;
}

HRESULT ISoftDistExt_ProcessSoftDist_Proxy (ISoftDistExt* This, LPCWSTR szCDFURL, IXMLElement* pSoftDistElement, LPSOFTDISTINFO lpsdi);
void ISoftDistExt_ProcessSoftDist_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISoftDistExt_GetFirstCodeBase_Proxy (ISoftDistExt* This, LPWSTR* szCodeBase, LPDWORD dwMaxSize);
void ISoftDistExt_GetFirstCodeBase_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISoftDistExt_GetNextCodeBase_Proxy (ISoftDistExt* This, LPWSTR* szCodeBase, LPDWORD dwMaxSize);
void ISoftDistExt_GetNextCodeBase_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ISoftDistExt_AsyncInstallDistributionUnit_Proxy (ISoftDistExt* This, IBindCtx* pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);
void ISoftDistExt_AsyncInstallDistributionUnit_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

HRESULT GetSoftwareUpdateInfo (LPCWSTR szDistUnit, LPSOFTDISTINFO psdi);
HRESULT SetSoftwareUpdateAdvertisementState (LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS);

alias LPCATALOGFILEINFO = ICatalogFileInfo*;

extern __gshared const GUID IID_ICatalogFileInfo;

struct ICatalogFileInfoVtbl
{
    HRESULT function (ICatalogFileInfo* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (ICatalogFileInfo* This) AddRef;

    ULONG function (ICatalogFileInfo* This) Release;

    HRESULT function (ICatalogFileInfo* This, LPSTR* ppszCatalogFile) GetCatalogFile;

    HRESULT function (ICatalogFileInfo* This, void** ppJavaTrust) GetJavaTrust;
}

struct ICatalogFileInfo
{
    ICatalogFileInfoVtbl* lpVtbl;
}

HRESULT ICatalogFileInfo_GetCatalogFile_Proxy (ICatalogFileInfo* This, LPSTR* ppszCatalogFile);
void ICatalogFileInfo_GetCatalogFile_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT ICatalogFileInfo_GetJavaTrust_Proxy (ICatalogFileInfo* This, void** ppJavaTrust);
void ICatalogFileInfo_GetJavaTrust_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPDATAFILTER = IDataFilter*;

extern __gshared const GUID IID_IDataFilter;

struct IDataFilterVtbl
{
    HRESULT function (IDataFilter* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IDataFilter* This) AddRef;

    ULONG function (IDataFilter* This) Release;

    HRESULT function (IDataFilter* This, DWORD dwFlags, LONG lInBufferSize, BYTE* pbInBuffer, LONG lOutBufferSize, BYTE* pbOutBuffer, LONG lInBytesAvailable, LONG* plInBytesRead, LONG* plOutBytesWritten, DWORD dwReserved) DoEncode;

    HRESULT function (IDataFilter* This, DWORD dwFlags, LONG lInBufferSize, BYTE* pbInBuffer, LONG lOutBufferSize, BYTE* pbOutBuffer, LONG lInBytesAvailable, LONG* plInBytesRead, LONG* plOutBytesWritten, DWORD dwReserved) DoDecode;

    HRESULT function (IDataFilter* This, DWORD dwEncLevel) SetEncodingLevel;
}

struct IDataFilter
{
    IDataFilterVtbl* lpVtbl;
}

HRESULT IDataFilter_DoEncode_Proxy (IDataFilter* This, DWORD dwFlags, LONG lInBufferSize, BYTE* pbInBuffer, LONG lOutBufferSize, BYTE* pbOutBuffer, LONG lInBytesAvailable, LONG* plInBytesRead, LONG* plOutBytesWritten, DWORD dwReserved);
void IDataFilter_DoEncode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataFilter_DoDecode_Proxy (IDataFilter* This, DWORD dwFlags, LONG lInBufferSize, BYTE* pbInBuffer, LONG lOutBufferSize, BYTE* pbOutBuffer, LONG lInBytesAvailable, LONG* plInBytesRead, LONG* plOutBytesWritten, DWORD dwReserved);
void IDataFilter_DoDecode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IDataFilter_SetEncodingLevel_Proxy (IDataFilter* This, DWORD dwEncLevel);
void IDataFilter_SetEncodingLevel_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

struct _tagPROTOCOLFILTERDATA
{
    DWORD cbSize;
    IInternetProtocolSink* pProtocolSink;
    IInternetProtocol* pProtocol;
    IUnknown* pUnk;
    DWORD dwFilterFlags;
}

alias PROTOCOLFILTERDATA = _tagPROTOCOLFILTERDATA;

alias LPENCODINGFILTERFACTORY = IEncodingFilterFactory*;

struct _tagDATAINFO
{
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
}

alias DATAINFO = _tagDATAINFO;

extern __gshared const GUID IID_IEncodingFilterFactory;

struct IEncodingFilterFactoryVtbl
{
    HRESULT function (IEncodingFilterFactory* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEncodingFilterFactory* This) AddRef;

    ULONG function (IEncodingFilterFactory* This) Release;

    HRESULT function (IEncodingFilterFactory* This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter** ppDF) FindBestFilter;

    HRESULT function (IEncodingFilterFactory* This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter** ppDF) GetDefaultFilter;
}

struct IEncodingFilterFactory
{
    IEncodingFilterFactoryVtbl* lpVtbl;
}

HRESULT IEncodingFilterFactory_FindBestFilter_Proxy (IEncodingFilterFactory* This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter** ppDF);
void IEncodingFilterFactory_FindBestFilter_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEncodingFilterFactory_GetDefaultFilter_Proxy (IEncodingFilterFactory* This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter** ppDF);
void IEncodingFilterFactory_GetDefaultFilter_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

WINBOOL IsLoggingEnabledA (LPCSTR pszUrl);
WINBOOL IsLoggingEnabledW (LPCWSTR pwszUrl);

struct _tagHIT_LOGGING_INFO
{
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
}

alias HIT_LOGGING_INFO = _tagHIT_LOGGING_INFO;
alias LPHIT_LOGGING_INFO = _tagHIT_LOGGING_INFO*;

WINBOOL WriteHitLogging (LPHIT_LOGGING_INFO lpLogginginfo);

struct CONFIRMSAFETY
{
    CLSID clsid;
    IUnknown* pUnk;
    DWORD dwFlags;
}

extern __gshared const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;

alias LPIWRAPPEDPROTOCOL = IWrappedProtocol*;

extern __gshared const GUID IID_IWrappedProtocol;

struct IWrappedProtocolVtbl
{
    HRESULT function (IWrappedProtocol* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IWrappedProtocol* This) AddRef;

    ULONG function (IWrappedProtocol* This) Release;

    HRESULT function (IWrappedProtocol* This, LONG* pnCode, DWORD_PTR dwReserved) GetWrapperCode;
}

struct IWrappedProtocol
{
    IWrappedProtocolVtbl* lpVtbl;
}

HRESULT IWrappedProtocol_GetWrapperCode_Proxy (IWrappedProtocol* This, LONG* pnCode, DWORD_PTR dwReserved);
void IWrappedProtocol_GetWrapperCode_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPGETBINDHANDLE = IGetBindHandle*;

enum __WIDL_urlmon_generated_name_00000012
{
    BINDHANDLETYPES_APPCACHE = 0x0,
    BINDHANDLETYPES_DEPENDENCY = 0x1,
    BINDHANDLETYPES_COUNT = 0x2
}

alias BINDHANDLETYPES = __WIDL_urlmon_generated_name_00000012;

extern __gshared const GUID IID_IGetBindHandle;

struct IGetBindHandleVtbl
{
    HRESULT function (IGetBindHandle* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IGetBindHandle* This) AddRef;

    ULONG function (IGetBindHandle* This) Release;

    HRESULT function (IGetBindHandle* This, BINDHANDLETYPES enumRequestedHandle, HANDLE* pRetHandle) GetBindHandle;
}

struct IGetBindHandle
{
    IGetBindHandleVtbl* lpVtbl;
}

HRESULT IGetBindHandle_GetBindHandle_Proxy (IGetBindHandle* This, BINDHANDLETYPES enumRequestedHandle, HANDLE* pRetHandle);
void IGetBindHandle_GetBindHandle_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

struct _tagPROTOCOL_ARGUMENT
{
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
}

alias PROTOCOL_ARGUMENT = _tagPROTOCOL_ARGUMENT;
alias LPPROTOCOL_ARGUMENT = _tagPROTOCOL_ARGUMENT*;

alias LPBINDCALLBACKREDIRECT = IBindCallbackRedirect*;

extern __gshared const GUID IID_IBindCallbackRedirect;

struct IBindCallbackRedirectVtbl
{
    HRESULT function (IBindCallbackRedirect* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IBindCallbackRedirect* This) AddRef;

    ULONG function (IBindCallbackRedirect* This) Release;

    HRESULT function (IBindCallbackRedirect* This, LPCWSTR lpcUrl, VARIANT_BOOL* vbCancel) Redirect;
}

struct IBindCallbackRedirect
{
    IBindCallbackRedirectVtbl* lpVtbl;
}

HRESULT IBindCallbackRedirect_Redirect_Proxy (IBindCallbackRedirect* This, LPCWSTR lpcUrl, VARIANT_BOOL* vbCancel);
void IBindCallbackRedirect_Redirect_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

ULONG STGMEDIUM_UserSize (ULONG*, ULONG, STGMEDIUM*);
ubyte* STGMEDIUM_UserMarshal (ULONG*, ubyte*, STGMEDIUM*);
ubyte* STGMEDIUM_UserUnmarshal (ULONG*, ubyte*, STGMEDIUM*);
void STGMEDIUM_UserFree (ULONG*, STGMEDIUM*);
ULONG CLIPFORMAT_UserSize (ULONG*, ULONG, CLIPFORMAT*);
ubyte* CLIPFORMAT_UserMarshal (ULONG*, ubyte*, CLIPFORMAT*);
ubyte* CLIPFORMAT_UserUnmarshal (ULONG*, ubyte*, CLIPFORMAT*);
void CLIPFORMAT_UserFree (ULONG*, CLIPFORMAT*);
ULONG HWND_UserSize (ULONG*, ULONG, HWND*);
ubyte* HWND_UserMarshal (ULONG*, ubyte*, HWND*);
ubyte* HWND_UserUnmarshal (ULONG*, ubyte*, HWND*);
void HWND_UserFree (ULONG*, HWND*);
ULONG BSTR_UserSize (ULONG*, ULONG, BSTR*);
ubyte* BSTR_UserMarshal (ULONG*, ubyte*, BSTR*);
ubyte* BSTR_UserUnmarshal (ULONG*, ubyte*, BSTR*);
void BSTR_UserFree (ULONG*, BSTR*);

struct tagVersionedStream
{
    GUID guidVersion;
    IStream* pStream;
}

alias VERSIONEDSTREAM = tagVersionedStream;
alias LPVERSIONEDSTREAM = tagVersionedStream*;
struct tagCAC
{
    ULONG cElems;
    CHAR* pElems;
}

alias CAC = tagCAC;

struct tagCAUB
{
    ULONG cElems;
    UCHAR* pElems;
}

alias CAUB = tagCAUB;

struct tagCAI
{
    ULONG cElems;
    SHORT* pElems;
}

alias CAI = tagCAI;

struct tagCAUI
{
    ULONG cElems;
    USHORT* pElems;
}

alias CAUI = tagCAUI;

struct tagCAL
{
    ULONG cElems;
    LONG* pElems;
}

alias CAL = tagCAL;

struct tagCAUL
{
    ULONG cElems;
    ULONG* pElems;
}

alias CAUL = tagCAUL;

struct tagCAFLT
{
    ULONG cElems;
    FLOAT* pElems;
}

alias CAFLT = tagCAFLT;

struct tagCADBL
{
    ULONG cElems;
    DOUBLE* pElems;
}

alias CADBL = tagCADBL;

struct tagCACY
{
    ULONG cElems;
    CY* pElems;
}

alias CACY = tagCACY;

struct tagCADATE
{
    ULONG cElems;
    DATE* pElems;
}

alias CADATE = tagCADATE;

struct tagCABSTR
{
    ULONG cElems;
    BSTR* pElems;
}

alias CABSTR = tagCABSTR;

struct tagCABSTRBLOB
{
    ULONG cElems;
    BSTRBLOB* pElems;
}

alias CABSTRBLOB = tagCABSTRBLOB;

struct tagCABOOL
{
    ULONG cElems;
    VARIANT_BOOL* pElems;
}

alias CABOOL = tagCABOOL;

struct tagCASCODE
{
    ULONG cElems;
    SCODE* pElems;
}

alias CASCODE = tagCASCODE;

struct tagCAPROPVARIANT
{
    ULONG cElems;
    PROPVARIANT* pElems;
}

alias CAPROPVARIANT = tagCAPROPVARIANT;

struct tagCAH
{
    ULONG cElems;
    LARGE_INTEGER* pElems;
}

alias CAH = tagCAH;

struct tagCAUH
{
    ULONG cElems;
    ULARGE_INTEGER* pElems;
}

alias CAUH = tagCAUH;

struct tagCALPSTR
{
    ULONG cElems;
    LPSTR* pElems;
}

alias CALPSTR = tagCALPSTR;

struct tagCALPWSTR
{
    ULONG cElems;
    LPWSTR* pElems;
}

alias CALPWSTR = tagCALPWSTR;

struct tagCAFILETIME
{
    ULONG cElems;
    FILETIME* pElems;
}

alias CAFILETIME = tagCAFILETIME;

struct tagCACLIPDATA
{
    ULONG cElems;
    CLIPDATA* pElems;
}

alias CACLIPDATA = tagCACLIPDATA;

struct tagCACLSID
{
    ULONG cElems;
    CLSID* pElems;
}

alias CACLSID = tagCACLSID;

alias PROPVAR_PAD1 = ushort;
alias PROPVAR_PAD2 = ushort;
alias PROPVAR_PAD3 = ushort;

struct tagPROPVARIANT
{
    union
    {
        struct
        {
            VARTYPE vt;
            PROPVAR_PAD1 wReserved1;
            PROPVAR_PAD2 wReserved2;
            PROPVAR_PAD3 wReserved3;

            union
            {
                CHAR cVal;
                UCHAR bVal;
                SHORT iVal;
                USHORT uiVal;
                LONG lVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                LARGE_INTEGER hVal;
                ULARGE_INTEGER uhVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                CY cyVal;
                DATE date;
                FILETIME filetime;
                CLSID* puuid;
                CLIPDATA* pclipdata;
                BSTR bstrVal;
                BSTRBLOB bstrblobVal;
                BLOB blob;
                LPSTR pszVal;
                LPWSTR pwszVal;
                IUnknown* punkVal;
                IDispatch* pdispVal;
                IStream* pStream;
                IStorage* pStorage;
                LPVERSIONEDSTREAM pVersionedStream;
                LPSAFEARRAY parray;
                CAC cac;
                CAUB caub;
                CAI cai;
                CAUI caui;
                CAL cal;
                CAUL caul;
                CAH cah;
                CAUH cauh;
                CAFLT caflt;
                CADBL cadbl;
                CABOOL cabool;
                CASCODE cascode;
                CACY cacy;
                CADATE cadate;
                CAFILETIME cafiletime;
                CACLSID cauuid;
                CACLIPDATA caclipdata;
                CABSTR cabstr;
                CABSTRBLOB cabstrblob;
                CALPSTR calpstr;
                CALPWSTR calpwstr;
                CAPROPVARIANT capropvar;
                CHAR* pcVal;
                UCHAR* pbVal;
                SHORT* piVal;
                USHORT* puiVal;
                LONG* plVal;
                ULONG* pulVal;
                INT* pintVal;
                UINT* puintVal;
                FLOAT* pfltVal;
                DOUBLE* pdblVal;
                VARIANT_BOOL* pboolVal;
                DECIMAL* pdecVal;
                SCODE* pscode;
                CY* pcyVal;
                DATE* pdate;
                BSTR* pbstrVal;
                IUnknown** ppunkVal;
                IDispatch** ppdispVal;
                LPSAFEARRAY* pparray;
                PROPVARIANT* pvarVal;
            }
        }

        DECIMAL decVal;
    }
}

alias LPPROPVARIANT = tagPROPVARIANT*;

enum PIDMSI_STATUS_VALUE
{
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = 1,
    PIDMSI_STATUS_PRELIM = 2,
    PIDMSI_STATUS_DRAFT = 3,
    PIDMSI_STATUS_INPROGRESS = 4,
    PIDMSI_STATUS_EDIT = 5,
    PIDMSI_STATUS_REVIEW = 6,
    PIDMSI_STATUS_PROOF = 7,
    PIDMSI_STATUS_FINAL = 8,
    PIDMSI_STATUS_OTHER = 0x7fff
}

struct tagPROPSPEC
{
    ULONG ulKind;

    union
    {
        PROPID propid;
        LPOLESTR lpwstr;
    }
}

alias PROPSPEC = tagPROPSPEC;

struct tagSTATPROPSTG
{
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
}

alias STATPROPSTG = tagSTATPROPSTG;

struct tagSTATPROPSETSTG
{
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
}

alias STATPROPSETSTG = tagSTATPROPSETSTG;

extern __gshared const GUID IID_IPropertyStorage;

struct IPropertyStorageVtbl
{
    HRESULT function (IPropertyStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPropertyStorage* This) AddRef;

    ULONG function (IPropertyStorage* This) Release;

    HRESULT function (IPropertyStorage* This, ULONG cpspec, const(PROPSPEC)[] rgpspec, PROPVARIANT[] rgpropvar) ReadMultiple;

    HRESULT function (IPropertyStorage* This, ULONG cpspec, const(PROPSPEC)[] rgpspec, const(PROPVARIANT)[] rgpropvar, PROPID propidNameFirst) WriteMultiple;

    HRESULT function (IPropertyStorage* This, ULONG cpspec, const(PROPSPEC)[] rgpspec) DeleteMultiple;

    HRESULT function (IPropertyStorage* This, ULONG cpropid, const(PROPID)[] rgpropid, LPOLESTR[] rglpwstrName) ReadPropertyNames;

    HRESULT function (IPropertyStorage* This, ULONG cpropid, const(PROPID)[] rgpropid, const(LPOLESTR)[] rglpwstrName) WritePropertyNames;

    HRESULT function (IPropertyStorage* This, ULONG cpropid, const(PROPID)[] rgpropid) DeletePropertyNames;

    HRESULT function (IPropertyStorage* This, DWORD grfCommitFlags) Commit;

    HRESULT function (IPropertyStorage* This) Revert;

    HRESULT function (IPropertyStorage* This, IEnumSTATPROPSTG** ppenum) Enum;

    HRESULT function (IPropertyStorage* This, const(FILETIME)* pctime, const(FILETIME)* patime, const(FILETIME)* pmtime) SetTimes;

    HRESULT function (IPropertyStorage* This, const IID* clsid) SetClass;

    HRESULT function (IPropertyStorage* This, STATPROPSETSTG* pstatpsstg) Stat;
}

struct IPropertyStorage
{
    IPropertyStorageVtbl* lpVtbl;
}

HRESULT IPropertyStorage_ReadMultiple_Proxy (IPropertyStorage* This, ULONG cpspec, const(PROPSPEC)* rgpspec, PROPVARIANT* rgpropvar);
void IPropertyStorage_ReadMultiple_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_WriteMultiple_Proxy (IPropertyStorage* This, ULONG cpspec, const(PROPSPEC)* rgpspec, const(PROPVARIANT)* rgpropvar, PROPID propidNameFirst);
void IPropertyStorage_WriteMultiple_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_DeleteMultiple_Proxy (IPropertyStorage* This, ULONG cpspec, const(PROPSPEC)* rgpspec);
void IPropertyStorage_DeleteMultiple_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_ReadPropertyNames_Proxy (IPropertyStorage* This, ULONG cpropid, const(PROPID)* rgpropid, LPOLESTR* rglpwstrName);
void IPropertyStorage_ReadPropertyNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_WritePropertyNames_Proxy (IPropertyStorage* This, ULONG cpropid, const(PROPID)* rgpropid, const(LPOLESTR)* rglpwstrName);
void IPropertyStorage_WritePropertyNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_DeletePropertyNames_Proxy (IPropertyStorage* This, ULONG cpropid, const(PROPID)* rgpropid);
void IPropertyStorage_DeletePropertyNames_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Commit_Proxy (IPropertyStorage* This, DWORD grfCommitFlags);
void IPropertyStorage_Commit_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Revert_Proxy (IPropertyStorage* This);
void IPropertyStorage_Revert_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Enum_Proxy (IPropertyStorage* This, IEnumSTATPROPSTG** ppenum);
void IPropertyStorage_Enum_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_SetTimes_Proxy (IPropertyStorage* This, const(FILETIME)* pctime, const(FILETIME)* patime, const(FILETIME)* pmtime);
void IPropertyStorage_SetTimes_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_SetClass_Proxy (IPropertyStorage* This, const IID* clsid);
void IPropertyStorage_SetClass_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertyStorage_Stat_Proxy (IPropertyStorage* This, STATPROPSETSTG* pstatpsstg);
void IPropertyStorage_Stat_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPPROPERTYSETSTORAGE = IPropertySetStorage*;

extern __gshared const GUID IID_IPropertySetStorage;

struct IPropertySetStorageVtbl
{
    HRESULT function (IPropertySetStorage* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IPropertySetStorage* This) AddRef;

    ULONG function (IPropertySetStorage* This) Release;

    HRESULT function (IPropertySetStorage* This, const IID* rfmtid, const(CLSID)* pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage** ppprstg) Create;

    HRESULT function (IPropertySetStorage* This, const IID* rfmtid, DWORD grfMode, IPropertyStorage** ppprstg) Open;

    HRESULT function (IPropertySetStorage* This, const IID* rfmtid) Delete;

    HRESULT function (IPropertySetStorage* This, IEnumSTATPROPSETSTG** ppenum) Enum;
}

struct IPropertySetStorage
{
    IPropertySetStorageVtbl* lpVtbl;
}

HRESULT IPropertySetStorage_Create_Proxy (IPropertySetStorage* This, const IID* rfmtid, const(CLSID)* pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage** ppprstg);
void IPropertySetStorage_Create_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertySetStorage_Open_Proxy (IPropertySetStorage* This, const IID* rfmtid, DWORD grfMode, IPropertyStorage** ppprstg);
void IPropertySetStorage_Open_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertySetStorage_Delete_Proxy (IPropertySetStorage* This, const IID* rfmtid);
void IPropertySetStorage_Delete_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IPropertySetStorage_Enum_Proxy (IPropertySetStorage* This, IEnumSTATPROPSETSTG** ppenum);
void IPropertySetStorage_Enum_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);

alias LPENUMSTATPROPSTG = IEnumSTATPROPSTG*;

extern __gshared const GUID IID_IEnumSTATPROPSTG;

struct IEnumSTATPROPSTGVtbl
{
    HRESULT function (IEnumSTATPROPSTG* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumSTATPROPSTG* This) AddRef;

    ULONG function (IEnumSTATPROPSTG* This) Release;

    HRESULT function (IEnumSTATPROPSTG* This, ULONG celt, STATPROPSTG* rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumSTATPROPSTG* This, ULONG celt) Skip;

    HRESULT function (IEnumSTATPROPSTG* This) Reset;

    HRESULT function (IEnumSTATPROPSTG* This, IEnumSTATPROPSTG** ppenum) Clone;
}

struct IEnumSTATPROPSTG
{
    IEnumSTATPROPSTGVtbl* lpVtbl;
}

HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy (IEnumSTATPROPSTG* This, ULONG celt, STATPROPSTG* rgelt, ULONG* pceltFetched);
void IEnumSTATPROPSTG_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Skip_Proxy (IEnumSTATPROPSTG* This, ULONG celt);
void IEnumSTATPROPSTG_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Reset_Proxy (IEnumSTATPROPSTG* This);
void IEnumSTATPROPSTG_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Clone_Proxy (IEnumSTATPROPSTG* This, IEnumSTATPROPSTG** ppenum);
void IEnumSTATPROPSTG_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSTG_Next_Proxy (IEnumSTATPROPSTG* This, ULONG celt, STATPROPSTG* rgelt, ULONG* pceltFetched);
HRESULT IEnumSTATPROPSTG_Next_Stub (IEnumSTATPROPSTG* This, ULONG celt, STATPROPSTG* rgelt, ULONG* pceltFetched);

alias LPENUMSTATPROPSETSTG = IEnumSTATPROPSETSTG*;

extern __gshared const GUID IID_IEnumSTATPROPSETSTG;

struct IEnumSTATPROPSETSTGVtbl
{
    HRESULT function (IEnumSTATPROPSETSTG* This, const IID* riid, void** ppvObject) QueryInterface;

    ULONG function (IEnumSTATPROPSETSTG* This) AddRef;

    ULONG function (IEnumSTATPROPSETSTG* This) Release;

    HRESULT function (IEnumSTATPROPSETSTG* This, ULONG celt, STATPROPSETSTG* rgelt, ULONG* pceltFetched) Next;

    HRESULT function (IEnumSTATPROPSETSTG* This, ULONG celt) Skip;

    HRESULT function (IEnumSTATPROPSETSTG* This) Reset;

    HRESULT function (IEnumSTATPROPSETSTG* This, IEnumSTATPROPSETSTG** ppenum) Clone;
}

struct IEnumSTATPROPSETSTG
{
    IEnumSTATPROPSETSTGVtbl* lpVtbl;
}

HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy (IEnumSTATPROPSETSTG* This, ULONG celt, STATPROPSETSTG* rgelt, ULONG* pceltFetched);
void IEnumSTATPROPSETSTG_RemoteNext_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Skip_Proxy (IEnumSTATPROPSETSTG* This, ULONG celt);
void IEnumSTATPROPSETSTG_Skip_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Reset_Proxy (IEnumSTATPROPSETSTG* This);
void IEnumSTATPROPSETSTG_Reset_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Clone_Proxy (IEnumSTATPROPSETSTG* This, IEnumSTATPROPSETSTG** ppenum);
void IEnumSTATPROPSETSTG_Clone_Stub (IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
HRESULT IEnumSTATPROPSETSTG_Next_Proxy (IEnumSTATPROPSETSTG* This, ULONG celt, STATPROPSETSTG* rgelt, ULONG* pceltFetched);
HRESULT IEnumSTATPROPSETSTG_Next_Stub (IEnumSTATPROPSETSTG* This, ULONG celt, STATPROPSETSTG* rgelt, ULONG* pceltFetched);

alias LPPROPERTYSTORAGE = IPropertyStorage*;

HRESULT PropVariantCopy (PROPVARIANT* pvarDest, const(PROPVARIANT)* pvarSrc);
HRESULT PropVariantClear (PROPVARIANT* pvar);
HRESULT FreePropVariantArray (ULONG cVariants, PROPVARIANT* rgvars);

HRESULT StgCreatePropStg (IUnknown* pUnk, const IID* fmtid, const(CLSID)* pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg);
HRESULT StgOpenPropStg (IUnknown* pUnk, const IID* fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage** ppPropStg);
HRESULT StgCreatePropSetStg (IStorage* pStorage, DWORD dwReserved, IPropertySetStorage** ppPropSetStg);

HRESULT FmtIdToPropStgName (const(FMTID)* pfmtid, LPOLESTR oszName);
HRESULT PropStgNameToFmtId (const LPOLESTR oszName, FMTID* pfmtid);

struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE[1] rgb;
}

alias SERIALIZEDPROPERTYVALUE = tagSERIALIZEDPROPERTYVALUE;

SERIALIZEDPROPERTYVALUE* StgConvertVariantToProperty (const(PROPVARIANT)* pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE* pprop, ULONG* pcb, PROPID pid, BOOLEAN fReserved, ULONG* pcIndirect);

ULONG BSTR_UserSize (ULONG*, ULONG, BSTR*);
ubyte* BSTR_UserMarshal (ULONG*, ubyte*, BSTR*);
ubyte* BSTR_UserUnmarshal (ULONG*, ubyte*, BSTR*);
void BSTR_UserFree (ULONG*, BSTR*);
ULONG LPSAFEARRAY_UserSize (ULONG*, ULONG, LPSAFEARRAY*);
ubyte* LPSAFEARRAY_UserMarshal (ULONG*, ubyte*, LPSAFEARRAY*);
ubyte* LPSAFEARRAY_UserUnmarshal (ULONG*, ubyte*, LPSAFEARRAY*);
void LPSAFEARRAY_UserFree (ULONG*, LPSAFEARRAY*);

HRESULT CreateStdProgressIndicator (HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback* pIbscCaller, IBindStatusCallback** ppIbsc);

extern __gshared const IID IID_StdOle;

BSTR SysAllocString (const(OLECHAR)*);
INT SysReAllocString (BSTR*, const(OLECHAR)*);
BSTR SysAllocStringLen (const(OLECHAR)*, UINT);
INT SysReAllocStringLen (BSTR*, const(OLECHAR)*, UINT);
void SysFreeString (BSTR);
UINT SysStringLen (BSTR);
UINT SysStringByteLen (BSTR bstr);
BSTR SysAllocStringByteLen (LPCSTR psz, UINT len);
INT DosDateTimeToVariantTime (USHORT wDosDate, USHORT wDosTime, DOUBLE* pvtime);
INT VariantTimeToDosDateTime (DOUBLE vtime, USHORT* pwDosDate, USHORT* pwDosTime);
INT SystemTimeToVariantTime (LPSYSTEMTIME lpSystemTime, DOUBLE* pvtime);
INT VariantTimeToSystemTime (DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
HRESULT SafeArrayAllocDescriptor (UINT cDims, SAFEARRAY** ppsaOut);
HRESULT SafeArrayAllocDescriptorEx (VARTYPE vt, UINT cDims, SAFEARRAY** ppsaOut);
HRESULT SafeArrayAllocData (SAFEARRAY* psa);
SAFEARRAY* SafeArrayCreate (VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound);
SAFEARRAY* SafeArrayCreateEx (VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound, PVOID pvExtra);
HRESULT SafeArrayCopyData (SAFEARRAY* psaSource, SAFEARRAY* psaTarget);
HRESULT SafeArrayDestroyDescriptor (SAFEARRAY* psa);
HRESULT SafeArrayDestroyData (SAFEARRAY* psa);
HRESULT SafeArrayDestroy (SAFEARRAY* psa);
HRESULT SafeArrayRedim (SAFEARRAY* psa, SAFEARRAYBOUND* psaboundNew);
UINT SafeArrayGetDim (SAFEARRAY* psa);
UINT SafeArrayGetElemsize (SAFEARRAY* psa);
HRESULT SafeArrayGetUBound (SAFEARRAY* psa, UINT nDim, LONG* plUbound);
HRESULT SafeArrayGetLBound (SAFEARRAY* psa, UINT nDim, LONG* plLbound);
HRESULT SafeArrayLock (SAFEARRAY* psa);
HRESULT SafeArrayUnlock (SAFEARRAY* psa);
HRESULT SafeArrayAccessData (SAFEARRAY* psa, void** ppvData);
HRESULT SafeArrayUnaccessData (SAFEARRAY* psa);
HRESULT SafeArrayGetElement (SAFEARRAY* psa, LONG* rgIndices, void* pv);
HRESULT SafeArrayPutElement (SAFEARRAY* psa, LONG* rgIndices, void* pv);
HRESULT SafeArrayCopy (SAFEARRAY* psa, SAFEARRAY** ppsaOut);
HRESULT SafeArrayPtrOfIndex (SAFEARRAY* psa, LONG* rgIndices, void** ppvData);
HRESULT SafeArraySetRecordInfo (SAFEARRAY* psa, IRecordInfo* prinfo);
HRESULT SafeArrayGetRecordInfo (SAFEARRAY* psa, IRecordInfo** prinfo);
HRESULT SafeArraySetIID (SAFEARRAY* psa, const GUID* guid);
HRESULT SafeArrayGetIID (SAFEARRAY* psa, GUID* pguid);
HRESULT SafeArrayGetVartype (SAFEARRAY* psa, VARTYPE* pvt);
SAFEARRAY* SafeArrayCreateVector (VARTYPE vt, LONG lLbound, ULONG cElements);
SAFEARRAY* SafeArrayCreateVectorEx (VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
void VariantInit (VARIANTARG* pvarg);
HRESULT VariantClear (VARIANTARG* pvarg);
HRESULT VariantCopy (VARIANTARG* pvargDest, VARIANTARG* pvargSrc);
HRESULT VariantCopyInd (VARIANT* pvarDest, VARIANTARG* pvargSrc);
HRESULT VariantChangeType (VARIANTARG* pvargDest, VARIANTARG* pvarSrc, USHORT wFlags, VARTYPE vt);
HRESULT VariantChangeTypeEx (VARIANTARG* pvargDest, VARIANTARG* pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);

HRESULT VectorFromBstr (BSTR bstr, SAFEARRAY** ppsa);
HRESULT BstrFromVector (SAFEARRAY* psa, BSTR* pbstr);

HRESULT VarUI1FromI2 (SHORT sIn, BYTE* pbOut);
HRESULT VarUI1FromI4 (LONG lIn, BYTE* pbOut);
HRESULT VarUI1FromI8 (LONG64 i64In, BYTE* pbOut);
HRESULT VarUI1FromR4 (FLOAT fltIn, BYTE* pbOut);
HRESULT VarUI1FromR8 (DOUBLE dblIn, BYTE* pbOut);
HRESULT VarUI1FromCy (CY cyIn, BYTE* pbOut);
HRESULT VarUI1FromDate (DATE dateIn, BYTE* pbOut);
HRESULT VarUI1FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, BYTE* pbOut);
HRESULT VarUI1FromDisp (IDispatch* pdispIn, LCID lcid, BYTE* pbOut);
HRESULT VarUI1FromBool (VARIANT_BOOL boolIn, BYTE* pbOut);
HRESULT VarUI1FromI1 (CHAR cIn, BYTE* pbOut);
HRESULT VarUI1FromUI2 (USHORT uiIn, BYTE* pbOut);
HRESULT VarUI1FromUI4 (ULONG ulIn, BYTE* pbOut);
HRESULT VarUI1FromUI8 (ULONG64 ui64In, BYTE* pbOut);
HRESULT VarUI1FromDec (DECIMAL* pdecIn, BYTE* pbOut);
HRESULT VarI2FromUI1 (BYTE bIn, SHORT* psOut);
HRESULT VarI2FromI4 (LONG lIn, SHORT* psOut);
HRESULT VarI2FromI8 (LONG64 i64In, SHORT* psOut);
HRESULT VarI2FromR4 (FLOAT fltIn, SHORT* psOut);
HRESULT VarI2FromR8 (DOUBLE dblIn, SHORT* psOut);
HRESULT VarI2FromCy (CY cyIn, SHORT* psOut);
HRESULT VarI2FromDate (DATE dateIn, SHORT* psOut);
HRESULT VarI2FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, SHORT* psOut);
HRESULT VarI2FromDisp (IDispatch* pdispIn, LCID lcid, SHORT* psOut);
HRESULT VarI2FromBool (VARIANT_BOOL boolIn, SHORT* psOut);
HRESULT VarI2FromI1 (CHAR cIn, SHORT* psOut);
HRESULT VarI2FromUI2 (USHORT uiIn, SHORT* psOut);
HRESULT VarI2FromUI4 (ULONG ulIn, SHORT* psOut);
HRESULT VarI2FromUI8 (ULONG64 ui64In, SHORT* psOut);
HRESULT VarI2FromDec (DECIMAL* pdecIn, SHORT* psOut);
HRESULT VarI4FromUI1 (BYTE bIn, LONG* plOut);
HRESULT VarI4FromI2 (SHORT sIn, LONG* plOut);
HRESULT VarI4FromI8 (LONG64 i64In, LONG* plOut);
HRESULT VarI4FromR4 (FLOAT fltIn, LONG* plOut);
HRESULT VarI4FromR8 (DOUBLE dblIn, LONG* plOut);
HRESULT VarI4FromCy (CY cyIn, LONG* plOut);
HRESULT VarI4FromDate (DATE dateIn, LONG* plOut);
HRESULT VarI4FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, LONG* plOut);
HRESULT VarI4FromDisp (IDispatch* pdispIn, LCID lcid, LONG* plOut);
HRESULT VarI4FromBool (VARIANT_BOOL boolIn, LONG* plOut);
HRESULT VarI4FromI1 (CHAR cIn, LONG* plOut);
HRESULT VarI4FromUI2 (USHORT uiIn, LONG* plOut);
HRESULT VarI4FromUI4 (ULONG ulIn, LONG* plOut);
HRESULT VarI4FromUI8 (ULONG64 ui64In, LONG* plOut);
HRESULT VarI4FromDec (DECIMAL* pdecIn, LONG* plOut);
HRESULT VarI4FromInt (INT intIn, LONG* plOut);
HRESULT VarI8FromUI1 (BYTE bIn, LONG64* pi64Out);
HRESULT VarI8FromI2 (SHORT sIn, LONG64* pi64Out);
HRESULT VarI8FromI4 (LONG lIn, LONG64* pi64Out);
HRESULT VarI8FromR4 (FLOAT fltIn, LONG64* pi64Out);
HRESULT VarI8FromR8 (DOUBLE dblIn, LONG64* pi64Out);
HRESULT VarI8FromCy (CY cyIn, LONG64* pi64Out);
HRESULT VarI8FromDate (DATE dateIn, LONG64* pi64Out);
HRESULT VarI8FromStr (OLECHAR* strIn, LCID lcid, c_ulong dwFlags, LONG64* pi64Out);
HRESULT VarI8FromDisp (IDispatch* pdispIn, LCID lcid, LONG64* pi64Out);
HRESULT VarI8FromBool (VARIANT_BOOL boolIn, LONG64* pi64Out);
HRESULT VarI8FromI1 (CHAR cIn, LONG64* pi64Out);
HRESULT VarI8FromUI2 (USHORT uiIn, LONG64* pi64Out);
HRESULT VarI8FromUI4 (ULONG ulIn, LONG64* pi64Out);
HRESULT VarI8FromUI8 (ULONG64 ui64In, LONG64* pi64Out);
HRESULT VarI8FromDec (DECIMAL* pdecIn, LONG64* pi64Out);
HRESULT VarI8FromInt (INT intIn, LONG64* pi64Out);
HRESULT VarR4FromUI1 (BYTE bIn, FLOAT* pfltOut);
HRESULT VarR4FromI2 (SHORT sIn, FLOAT* pfltOut);
HRESULT VarR4FromI4 (LONG lIn, FLOAT* pfltOut);
HRESULT VarR4FromI8 (LONG64 i64In, FLOAT* pfltOut);
HRESULT VarR4FromR8 (DOUBLE dblIn, FLOAT* pfltOut);
HRESULT VarR4FromCy (CY cyIn, FLOAT* pfltOut);
HRESULT VarR4FromDate (DATE dateIn, FLOAT* pfltOut);
HRESULT VarR4FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, FLOAT* pfltOut);
HRESULT VarR4FromDisp (IDispatch* pdispIn, LCID lcid, FLOAT* pfltOut);
HRESULT VarR4FromBool (VARIANT_BOOL boolIn, FLOAT* pfltOut);
HRESULT VarR4FromI1 (CHAR cIn, FLOAT* pfltOut);
HRESULT VarR4FromUI2 (USHORT uiIn, FLOAT* pfltOut);
HRESULT VarR4FromUI4 (ULONG ulIn, FLOAT* pfltOut);
HRESULT VarR4FromUI8 (ULONG64 ui64In, FLOAT* pfltOut);
HRESULT VarR4FromDec (DECIMAL* pdecIn, FLOAT* pfltOut);
HRESULT VarR8FromUI1 (BYTE bIn, DOUBLE* pdblOut);
HRESULT VarR8FromI2 (SHORT sIn, DOUBLE* pdblOut);
HRESULT VarR8FromI4 (LONG lIn, DOUBLE* pdblOut);
HRESULT VarR8FromI8 (LONG64 i64In, DOUBLE* pdblOut);
HRESULT VarR8FromR4 (FLOAT fltIn, DOUBLE* pdblOut);
HRESULT VarR8FromCy (CY cyIn, DOUBLE* pdblOut);
HRESULT VarR8FromDate (DATE dateIn, DOUBLE* pdblOut);
HRESULT VarR8FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, DOUBLE* pdblOut);
HRESULT VarR8FromDisp (IDispatch* pdispIn, LCID lcid, DOUBLE* pdblOut);
HRESULT VarR8FromBool (VARIANT_BOOL boolIn, DOUBLE* pdblOut);
HRESULT VarR8FromI1 (CHAR cIn, DOUBLE* pdblOut);
HRESULT VarR8FromUI2 (USHORT uiIn, DOUBLE* pdblOut);
HRESULT VarR8FromUI4 (ULONG ulIn, DOUBLE* pdblOut);
HRESULT VarR8FromUI8 (ULONG64 ui64In, DOUBLE* pdblOut);
HRESULT VarR8FromDec (DECIMAL* pdecIn, DOUBLE* pdblOut);
HRESULT VarDateFromUI1 (BYTE bIn, DATE* pdateOut);
HRESULT VarDateFromI2 (SHORT sIn, DATE* pdateOut);
HRESULT VarDateFromI4 (LONG lIn, DATE* pdateOut);
HRESULT VarDateFromI8 (LONG64 i64In, DATE* pdateOut);
HRESULT VarDateFromR4 (FLOAT fltIn, DATE* pdateOut);
HRESULT VarDateFromR8 (DOUBLE dblIn, DATE* pdateOut);
HRESULT VarDateFromCy (CY cyIn, DATE* pdateOut);
HRESULT VarDateFromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, DATE* pdateOut);
HRESULT VarDateFromDisp (IDispatch* pdispIn, LCID lcid, DATE* pdateOut);
HRESULT VarDateFromBool (VARIANT_BOOL boolIn, DATE* pdateOut);
HRESULT VarDateFromI1 (CHAR cIn, DATE* pdateOut);
HRESULT VarDateFromUI2 (USHORT uiIn, DATE* pdateOut);
HRESULT VarDateFromUI4 (ULONG ulIn, DATE* pdateOut);
HRESULT VarDateFromUI8 (ULONG64 ui64In, DATE* pdateOut);
HRESULT VarDateFromDec (DECIMAL* pdecIn, DATE* pdateOut);
HRESULT VarCyFromUI1 (BYTE bIn, CY* pcyOut);
HRESULT VarCyFromI2 (SHORT sIn, CY* pcyOut);
HRESULT VarCyFromI4 (LONG lIn, CY* pcyOut);
HRESULT VarCyFromI8 (LONG64 i64In, CY* pcyOut);
HRESULT VarCyFromR4 (FLOAT fltIn, CY* pcyOut);
HRESULT VarCyFromR8 (DOUBLE dblIn, CY* pcyOut);
HRESULT VarCyFromDate (DATE dateIn, CY* pcyOut);
HRESULT VarCyFromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, CY* pcyOut);
HRESULT VarCyFromDisp (IDispatch* pdispIn, LCID lcid, CY* pcyOut);
HRESULT VarCyFromBool (VARIANT_BOOL boolIn, CY* pcyOut);
HRESULT VarCyFromI1 (CHAR cIn, CY* pcyOut);
HRESULT VarCyFromUI2 (USHORT uiIn, CY* pcyOut);
HRESULT VarCyFromUI4 (ULONG ulIn, CY* pcyOut);
HRESULT VarCyFromUI8 (ULONG64 ui64In, CY* pcyOut);
HRESULT VarCyFromDec (DECIMAL* pdecIn, CY* pcyOut);
HRESULT VarBstrFromUI1 (BYTE bVal, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromI2 (SHORT iVal, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromI4 (LONG lIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromI8 (LONG64 i64In, LCID lcid, c_ulong dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromR4 (FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromR8 (DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromCy (CY cyIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromDate (DATE dateIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromDisp (IDispatch* pdispIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromBool (VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromI1 (CHAR cIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromUI2 (USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromUI4 (ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromUI8 (ULONG64 ui64In, LCID lcid, c_ulong dwFlags, BSTR* pbstrOut);
HRESULT VarBstrFromDec (DECIMAL* pdecIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarBoolFromUI1 (BYTE bIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI2 (SHORT sIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI4 (LONG lIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI8 (LONG64 i64In, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromR4 (FLOAT fltIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromR8 (DOUBLE dblIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromDate (DATE dateIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromCy (CY cyIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromDisp (IDispatch* pdispIn, LCID lcid, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromI1 (CHAR cIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromUI2 (USHORT uiIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromUI4 (ULONG ulIn, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromUI8 (ULONG64 i64In, VARIANT_BOOL* pboolOut);
HRESULT VarBoolFromDec (DECIMAL* pdecIn, VARIANT_BOOL* pboolOut);
HRESULT VarI1FromUI1 (BYTE bIn, CHAR* pcOut);
HRESULT VarI1FromI2 (SHORT uiIn, CHAR* pcOut);
HRESULT VarI1FromI4 (LONG lIn, CHAR* pcOut);
HRESULT VarI1FromI8 (LONG64 i64In, CHAR* pcOut);
HRESULT VarI1FromR4 (FLOAT fltIn, CHAR* pcOut);
HRESULT VarI1FromR8 (DOUBLE dblIn, CHAR* pcOut);
HRESULT VarI1FromDate (DATE dateIn, CHAR* pcOut);
HRESULT VarI1FromCy (CY cyIn, CHAR* pcOut);
HRESULT VarI1FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, CHAR* pcOut);
HRESULT VarI1FromDisp (IDispatch* pdispIn, LCID lcid, CHAR* pcOut);
HRESULT VarI1FromBool (VARIANT_BOOL boolIn, CHAR* pcOut);
HRESULT VarI1FromUI2 (USHORT uiIn, CHAR* pcOut);
HRESULT VarI1FromUI4 (ULONG ulIn, CHAR* pcOut);
HRESULT VarI1FromUI8 (ULONG64 i64In, CHAR* pcOut);
HRESULT VarI1FromDec (DECIMAL* pdecIn, CHAR* pcOut);
HRESULT VarUI2FromUI1 (BYTE bIn, USHORT* puiOut);
HRESULT VarUI2FromI2 (SHORT uiIn, USHORT* puiOut);
HRESULT VarUI2FromI4 (LONG lIn, USHORT* puiOut);
HRESULT VarUI2FromI8 (LONG64 i64In, USHORT* puiOut);
HRESULT VarUI2FromR4 (FLOAT fltIn, USHORT* puiOut);
HRESULT VarUI2FromR8 (DOUBLE dblIn, USHORT* puiOut);
HRESULT VarUI2FromDate (DATE dateIn, USHORT* puiOut);
HRESULT VarUI2FromCy (CY cyIn, USHORT* puiOut);
HRESULT VarUI2FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, USHORT* puiOut);
HRESULT VarUI2FromDisp (IDispatch* pdispIn, LCID lcid, USHORT* puiOut);
HRESULT VarUI2FromBool (VARIANT_BOOL boolIn, USHORT* puiOut);
HRESULT VarUI2FromI1 (CHAR cIn, USHORT* puiOut);
HRESULT VarUI2FromUI4 (ULONG ulIn, USHORT* puiOut);
HRESULT VarUI2FromUI8 (ULONG64 i64In, USHORT* puiOut);
HRESULT VarUI2FromDec (DECIMAL* pdecIn, USHORT* puiOut);
HRESULT VarUI4FromUI1 (BYTE bIn, ULONG* pulOut);
HRESULT VarUI4FromI2 (SHORT uiIn, ULONG* pulOut);
HRESULT VarUI4FromI4 (LONG lIn, ULONG* pulOut);
HRESULT VarUI4FromI8 (LONG64 i64In, ULONG* plOut);
HRESULT VarUI4FromR4 (FLOAT fltIn, ULONG* pulOut);
HRESULT VarUI4FromR8 (DOUBLE dblIn, ULONG* pulOut);
HRESULT VarUI4FromDate (DATE dateIn, ULONG* pulOut);
HRESULT VarUI4FromCy (CY cyIn, ULONG* pulOut);
HRESULT VarUI4FromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, ULONG* pulOut);
HRESULT VarUI4FromDisp (IDispatch* pdispIn, LCID lcid, ULONG* pulOut);
HRESULT VarUI4FromBool (VARIANT_BOOL boolIn, ULONG* pulOut);
HRESULT VarUI4FromI1 (CHAR cIn, ULONG* pulOut);
HRESULT VarUI4FromUI2 (USHORT uiIn, ULONG* pulOut);
HRESULT VarUI4FromUI8 (ULONG64 ui64In, ULONG* plOut);
HRESULT VarUI4FromDec (DECIMAL* pdecIn, ULONG* pulOut);
HRESULT VarUI8FromUI1 (BYTE bIn, ULONG64* pi64Out);
HRESULT VarUI8FromI2 (SHORT sIn, ULONG64* pi64Out);
HRESULT VarUI8FromI4 (LONG lIn, ULONG64* pi64Out);
HRESULT VarUI8FromI8 (LONG64 ui64In, ULONG64* pi64Out);
HRESULT VarUI8FromR4 (FLOAT fltIn, ULONG64* pi64Out);
HRESULT VarUI8FromR8 (DOUBLE dblIn, ULONG64* pi64Out);
HRESULT VarUI8FromCy (CY cyIn, ULONG64* pi64Out);
HRESULT VarUI8FromDate (DATE dateIn, ULONG64* pi64Out);
HRESULT VarUI8FromStr (OLECHAR* strIn, LCID lcid, c_ulong dwFlags, ULONG64* pi64Out);
HRESULT VarUI8FromDisp (IDispatch* pdispIn, LCID lcid, ULONG64* pi64Out);
HRESULT VarUI8FromBool (VARIANT_BOOL boolIn, ULONG64* pi64Out);
HRESULT VarUI8FromI1 (CHAR cIn, ULONG64* pi64Out);
HRESULT VarUI8FromUI2 (USHORT uiIn, ULONG64* pi64Out);
HRESULT VarUI8FromUI4 (ULONG ulIn, ULONG64* pi64Out);
HRESULT VarUI8FromDec (DECIMAL* pdecIn, ULONG64* pi64Out);
HRESULT VarUI8FromInt (INT intIn, ULONG64* pi64Out);
HRESULT VarDecFromUI1 (BYTE bIn, DECIMAL* pdecOut);
HRESULT VarDecFromI2 (SHORT uiIn, DECIMAL* pdecOut);
HRESULT VarDecFromI4 (LONG lIn, DECIMAL* pdecOut);
HRESULT VarDecFromI8 (LONG64 i64In, DECIMAL* pdecOut);
HRESULT VarDecFromR4 (FLOAT fltIn, DECIMAL* pdecOut);
HRESULT VarDecFromR8 (DOUBLE dblIn, DECIMAL* pdecOut);
HRESULT VarDecFromDate (DATE dateIn, DECIMAL* pdecOut);
HRESULT VarDecFromCy (CY cyIn, DECIMAL* pdecOut);
HRESULT VarDecFromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, DECIMAL* pdecOut);
HRESULT VarDecFromDisp (IDispatch* pdispIn, LCID lcid, DECIMAL* pdecOut);
HRESULT VarDecFromBool (VARIANT_BOOL boolIn, DECIMAL* pdecOut);
HRESULT VarDecFromI1 (CHAR cIn, DECIMAL* pdecOut);
HRESULT VarDecFromUI2 (USHORT uiIn, DECIMAL* pdecOut);
HRESULT VarDecFromUI4 (ULONG ulIn, DECIMAL* pdecOut);
HRESULT VarDecFromUI8 (ULONG64 ui64In, DECIMAL* pdecOut);

HRESULT VarI4FromI8 (LONG64 i64In, LONG* plOut);
HRESULT VarI4FromUI8 (ULONG64 ui64In, LONG* plOut);

struct NUMPARSE
{
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
}

HRESULT VarParseNumFromStr (OLECHAR* strIn, LCID lcid, ULONG dwFlags, NUMPARSE* pnumprs, BYTE* rgbDig);
HRESULT VarNumFromParseNum (NUMPARSE* pnumprs, BYTE* rgbDig, ULONG dwVtBits, VARIANT* pvar);
HRESULT VarAdd (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarAnd (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarCat (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarDiv (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarEqv (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarIdiv (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarImp (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarMod (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarMul (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarOr (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarPow (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarSub (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarXor (LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
HRESULT VarAbs (LPVARIANT pvarIn, LPVARIANT pvarResult);
HRESULT VarFix (LPVARIANT pvarIn, LPVARIANT pvarResult);
HRESULT VarInt (LPVARIANT pvarIn, LPVARIANT pvarResult);
HRESULT VarNeg (LPVARIANT pvarIn, LPVARIANT pvarResult);
HRESULT VarNot (LPVARIANT pvarIn, LPVARIANT pvarResult);
HRESULT VarRound (LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);
HRESULT VarCmp (LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);

HRESULT VarDecAdd (LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
HRESULT VarDecDiv (LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
HRESULT VarDecMul (LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
HRESULT VarDecSub (LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
HRESULT VarDecAbs (LPDECIMAL pdecIn, LPDECIMAL pdecResult);
HRESULT VarDecFix (LPDECIMAL pdecIn, LPDECIMAL pdecResult);
HRESULT VarDecInt (LPDECIMAL pdecIn, LPDECIMAL pdecResult);
HRESULT VarDecNeg (LPDECIMAL pdecIn, LPDECIMAL pdecResult);
HRESULT VarDecRound (LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);
HRESULT VarDecCmp (LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
HRESULT VarDecCmpR8 (LPDECIMAL pdecLeft, double dblRight);
HRESULT VarCyAdd (CY cyLeft, CY cyRight, LPCY pcyResult);
HRESULT VarCyMul (CY cyLeft, CY cyRight, LPCY pcyResult);
HRESULT VarCyMulI4 (CY cyLeft, c_long lRight, LPCY pcyResult);
HRESULT VarCyMulI8 (CY cyLeft, LONG64 lRight, LPCY pcyResult);
HRESULT VarCySub (CY cyLeft, CY cyRight, LPCY pcyResult);
HRESULT VarCyAbs (CY cyIn, LPCY pcyResult);
HRESULT VarCyFix (CY cyIn, LPCY pcyResult);
HRESULT VarCyInt (CY cyIn, LPCY pcyResult);
HRESULT VarCyNeg (CY cyIn, LPCY pcyResult);
HRESULT VarCyRound (CY cyIn, int cDecimals, LPCY pcyResult);
HRESULT VarCyCmp (CY cyLeft, CY cyRight);
HRESULT VarCyCmpR8 (CY cyLeft, double dblRight);
HRESULT VarBstrCat (BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
HRESULT VarBstrCmp (BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
HRESULT VarR8Pow (double dblLeft, double dblRight, double* pdblResult);
HRESULT VarR4CmpR8 (float fltLeft, double dblRight);
HRESULT VarR8Round (double dblIn, int cDecimals, double* pdblResult);

struct UDATE
{
    SYSTEMTIME st;
    USHORT wDayOfYear;
}

HRESULT VarDateFromUdate (UDATE* pudateIn, ULONG dwFlags, DATE* pdateOut);
HRESULT VarDateFromUdateEx (UDATE* pudateIn, LCID lcid, ULONG dwFlags, DATE* pdateOut);
HRESULT VarUdateFromDate (DATE dateIn, ULONG dwFlags, UDATE* pudateOut);
HRESULT GetAltMonthNames (LCID lcid, LPOLESTR** prgp);
HRESULT VarFormat (LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarFormatDateTime (LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarFormatNumber (LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarFormatPercent (LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarFormatCurrency (LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarWeekdayName (int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarMonthName (int iMonth, int fAbbrev, ULONG dwFlags, BSTR* pbstrOut);
HRESULT VarFormatFromTokens (LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR* pbstrOut, LCID lcid);
HRESULT VarTokenizeFormatString (LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int* pcbActual);


ULONG LHashValOfNameSysA (SYSKIND syskind, LCID lcid, LPCSTR szName);
ULONG LHashValOfNameSys (SYSKIND syskind, LCID lcid, const(OLECHAR)* szName);

HRESULT LoadTypeLib (const(OLECHAR)* szFile, ITypeLib** pptlib);

enum tagREGKIND
{
    REGKIND_DEFAULT = 0,
    REGKIND_REGISTER = 1,
    REGKIND_NONE = 2
}

alias REGKIND = tagREGKIND;

HRESULT LoadTypeLibEx (LPCOLESTR szFile, REGKIND regkind, ITypeLib** pptlib);
HRESULT LoadRegTypeLib (const GUID* rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib** pptlib);
HRESULT QueryPathOfRegTypeLib (const GUID* guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName);
HRESULT RegisterTypeLib (ITypeLib* ptlib, OLECHAR* szFullPath, OLECHAR* szHelpDir);
HRESULT UnRegisterTypeLib (const GUID* libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind);
HRESULT CreateTypeLib (SYSKIND syskind, const(OLECHAR)* szFile, ICreateTypeLib** ppctlib);
HRESULT CreateTypeLib2 (SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2** ppctlib);

struct tagPARAMDATA
{
    OLECHAR* szName;
    VARTYPE vt;
}

alias PARAMDATA = tagPARAMDATA;
alias LPPARAMDATA = tagPARAMDATA*;

struct tagMETHODDATA
{
    OLECHAR* szName;
    PARAMDATA* ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
}

alias METHODDATA = tagMETHODDATA;
alias LPMETHODDATA = tagMETHODDATA*;

struct tagINTERFACEDATA
{
    METHODDATA* pmethdata;
    UINT cMembers;
}

alias INTERFACEDATA = tagINTERFACEDATA;
alias LPINTERFACEDATA = tagINTERFACEDATA*;

HRESULT DispGetParam (DISPPARAMS* pdispparams, UINT position, VARTYPE vtTarg, VARIANT* pvarResult, UINT* puArgErr);
HRESULT DispGetIDsOfNames (ITypeInfo* ptinfo, OLECHAR** rgszNames, UINT cNames, DISPID* rgdispid);
HRESULT DispInvoke (void* _this, ITypeInfo* ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS* pparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, UINT* puArgErr);
HRESULT CreateDispTypeInfo (INTERFACEDATA* pidata, LCID lcid, ITypeInfo** pptinfo);
HRESULT CreateStdDispatch (IUnknown* punkOuter, void* pvThis, ITypeInfo* ptinfo, IUnknown** ppunkStdDisp);
HRESULT DispCallFunc (void* pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE* prgvt, VARIANTARG** prgpvarg, VARIANT* pvargResult);

HRESULT RegisterActiveObject (IUnknown* punk, const IID* rclsid, DWORD dwFlags, DWORD* pdwRegister);
HRESULT RevokeActiveObject (DWORD dwRegister, void* pvReserved);
HRESULT GetActiveObject (const IID* rclsid, void* pvReserved, IUnknown** ppunk);
HRESULT SetErrorInfo (ULONG dwReserved, IErrorInfo* perrinfo);
HRESULT GetErrorInfo (ULONG dwReserved, IErrorInfo** pperrinfo);
HRESULT CreateErrorInfo (ICreateErrorInfo** pperrinfo);
HRESULT GetRecordInfoFromTypeInfo (ITypeInfo* pTypeInfo, IRecordInfo** ppRecInfo);
HRESULT GetRecordInfoFromGuids (const GUID* rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID* rGuidTypeInfo, IRecordInfo** ppRecInfo);
ULONG OaBuildVersion ();
void ClearCustData (LPCUSTDATA pCustData);

DWORD OleBuildVersion ();

HRESULT CreateDataAdviseHolder (LPDATAADVISEHOLDER* ppDAHolder);

HRESULT ReadClassStg (LPSTORAGE pStg, CLSID* pclsid);
HRESULT WriteClassStg (LPSTORAGE pStg, const IID* rclsid);
HRESULT ReadClassStm (LPSTREAM pStm, CLSID* pclsid);
HRESULT WriteClassStm (LPSTREAM pStm, const IID* rclsid);

HRESULT WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
HRESULT ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT* pcf, LPOLESTR* lplpszUserType);
HRESULT OleInitialize (LPVOID pvReserved);
void OleUninitialize ();
HRESULT OleQueryLinkFromData (LPDATAOBJECT pSrcDataObject);
HRESULT OleQueryCreateFromData (LPDATAOBJECT pSrcDataObject);
HRESULT OleCreate (const IID* rclsid, const IID* riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateEx (const IID* rclsid, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateFromData (LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateFromDataEx (LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateLinkFromData (LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateLinkFromDataEx (LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateStaticFromData (LPDATAOBJECT pSrcDataObj, const IID* iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateLink (LPMONIKER pmkLinkSrc, const IID* riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateLinkEx (LPMONIKER pmkLinkSrc, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateLinkToFile (LPCOLESTR lpszFileName, const IID* riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateLinkToFileEx (LPCOLESTR lpszFileName, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateFromFile (const IID* rclsid, LPCOLESTR lpszFileName, const IID* riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleCreateFromFileEx (const IID* rclsid, LPCOLESTR lpszFileName, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
HRESULT OleLoad (LPSTORAGE pStg, const IID* riid, LPOLECLIENTSITE pClientSite, LPVOID* ppvObj);
HRESULT OleSave (LPPERSISTSTORAGE pPS, LPSTORAGE pStg, WINBOOL fSameAsLoad);
HRESULT OleLoadFromStream (LPSTREAM pStm, const IID* iidInterface, LPVOID* ppvObj);
HRESULT OleSaveToStream (LPPERSISTSTREAM pPStm, LPSTREAM pStm);
HRESULT OleSetContainedObject (LPUNKNOWN pUnknown, WINBOOL fContained);
HRESULT OleNoteObjectVisible (LPUNKNOWN pUnknown, WINBOOL fVisible);
HRESULT RegisterDragDrop (HWND hwnd, LPDROPTARGET pDropTarget);
HRESULT RevokeDragDrop (HWND hwnd);
HRESULT DoDragDrop (LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect);
HRESULT OleSetClipboard (LPDATAOBJECT pDataObj);
HRESULT OleGetClipboard (LPDATAOBJECT* ppDataObj);
HRESULT OleFlushClipboard ();
HRESULT OleIsCurrentClipboard (LPDATAOBJECT pDataObj);
HOLEMENU OleCreateMenuDescriptor (HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths);
HRESULT OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj);
HRESULT OleDestroyMenuDescriptor (HOLEMENU holemenu);
HRESULT OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);
HANDLE OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
HRESULT OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
HRESULT OleRun (LPUNKNOWN pUnknown);
WINBOOL OleIsRunning (LPOLEOBJECT pObject);
HRESULT OleLockRunning (LPUNKNOWN pUnknown, WINBOOL fLock, WINBOOL fLastUnlockCloses);
void ReleaseStgMedium (LPSTGMEDIUM);
HRESULT CreateOleAdviseHolder (LPOLEADVISEHOLDER* ppOAHolder);
HRESULT OleCreateDefaultHandler (const IID* clsid, LPUNKNOWN pUnkOuter, const IID* riid, LPVOID* lplpObj);
HRESULT OleCreateEmbeddingHelper (const IID* clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID* riid, LPVOID* lplpObj);
WINBOOL IsAccelerator (HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD* lpwCmd);
HGLOBAL OleGetIconOfFile (LPOLESTR lpszPath, WINBOOL fUseFileAsLabel);
HGLOBAL OleGetIconOfClass (const IID* rclsid, LPOLESTR lpszLabel, WINBOOL fUseTypeAsLabel);
HGLOBAL OleMetafilePictFromIconAndLabel (HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
HRESULT OleRegGetUserType (const IID* clsid, DWORD dwFormOfType, LPOLESTR* pszUserType);
HRESULT OleRegGetMiscStatus (const IID* clsid, DWORD dwAspect, DWORD* pdwStatus);
HRESULT OleRegEnumFormatEtc (const IID* clsid, DWORD dwDirection, LPENUMFORMATETC* ppenum);
HRESULT OleRegEnumVerbs (const IID* clsid, LPENUMOLEVERB* ppenum);

alias LPOLESTREAM = _OLESTREAM*;

struct _OLESTREAMVTBL
{
    DWORD function (LPOLESTREAM, void*, DWORD) Get;
    DWORD function (LPOLESTREAM, const(void)*, DWORD) Put;
}

alias OLESTREAMVTBL = _OLESTREAMVTBL;
alias LPOLESTREAMVTBL = _OLESTREAMVTBL*;

struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
}

alias OLESTREAM = _OLESTREAM;

HRESULT OleConvertOLESTREAMToIStorage (LPOLESTREAM lpolestream, LPSTORAGE pstg, const(DVTARGETDEVICE)* ptd);
HRESULT OleConvertIStorageToOLESTREAM (LPSTORAGE pstg, LPOLESTREAM lpolestream);

HRESULT GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL* phglobal);
HRESULT CreateILockBytesOnHGlobal (HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPLOCKBYTES* pplkbyt);

HRESULT OleDoAutoConvert (LPSTORAGE pStg, LPCLSID pClsidNew);
HRESULT OleGetAutoConvert (const IID* clsidOld, LPCLSID pClsidNew);
HRESULT OleSetAutoConvert (const IID* clsidOld, const IID* clsidNew);

HRESULT GetConvertStg (LPSTORAGE pStg);

HRESULT SetConvertStg (LPSTORAGE pStg, WINBOOL fConvert);
HRESULT OleConvertIStorageToOLESTREAMEx (LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm);
HRESULT OleConvertOLESTREAMToIStorageEx (LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT* pcfFormat, LONG* plwWidth, LONG* plHeight, DWORD* pdwSize, LPSTGMEDIUM pmedium);

extern __gshared const GUID GUID_DEVINTERFACE_DISK;
extern __gshared const GUID GUID_DEVINTERFACE_CDROM;
extern __gshared const GUID GUID_DEVINTERFACE_PARTITION;
extern __gshared const GUID GUID_DEVINTERFACE_TAPE;
extern __gshared const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern __gshared const GUID GUID_DEVINTERFACE_VOLUME;
extern __gshared const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern __gshared const GUID GUID_DEVINTERFACE_FLOPPY;
extern __gshared const GUID GUID_DEVINTERFACE_CDCHANGER;
extern __gshared const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern __gshared const GUID GUID_DEVINTERFACE_COMPORT;
extern __gshared const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;

struct _STORAGE_READ_CAPACITY
{
    ULONG Version;
    ULONG Size;
    ULONG BlockLength;
    LARGE_INTEGER NumberOfBlocks;
    LARGE_INTEGER DiskLength;
}

alias STORAGE_READ_CAPACITY = _STORAGE_READ_CAPACITY;
alias PSTORAGE_READ_CAPACITY = _STORAGE_READ_CAPACITY*;

struct _STORAGE_HOTPLUG_INFO
{
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
}

alias STORAGE_HOTPLUG_INFO = _STORAGE_HOTPLUG_INFO;
alias PSTORAGE_HOTPLUG_INFO = _STORAGE_HOTPLUG_INFO*;

struct _STORAGE_DEVICE_NUMBER
{
    DWORD DeviceType;
    DWORD DeviceNumber;
    DWORD PartitionNumber;
}

alias STORAGE_DEVICE_NUMBER = _STORAGE_DEVICE_NUMBER;
alias PSTORAGE_DEVICE_NUMBER = _STORAGE_DEVICE_NUMBER*;

struct _STORAGE_BUS_RESET_REQUEST
{
    BYTE PathId;
}

alias STORAGE_BUS_RESET_REQUEST = _STORAGE_BUS_RESET_REQUEST;
alias PSTORAGE_BUS_RESET_REQUEST = _STORAGE_BUS_RESET_REQUEST*;

struct STORAGE_BREAK_RESERVATION_REQUEST
{
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
}

alias PSTORAGE_BREAK_RESERVATION_REQUEST = STORAGE_BREAK_RESERVATION_REQUEST*;

struct _PREVENT_MEDIA_REMOVAL
{
    BOOLEAN PreventMediaRemoval;
}

alias PREVENT_MEDIA_REMOVAL = _PREVENT_MEDIA_REMOVAL;
alias PPREVENT_MEDIA_REMOVAL = _PREVENT_MEDIA_REMOVAL*;

struct _CLASS_MEDIA_CHANGE_CONTEXT
{
    DWORD MediaChangeCount;
    DWORD NewState;
}

alias CLASS_MEDIA_CHANGE_CONTEXT = _CLASS_MEDIA_CHANGE_CONTEXT;
alias PCLASS_MEDIA_CHANGE_CONTEXT = _CLASS_MEDIA_CHANGE_CONTEXT*;

struct _TAPE_STATISTICS
{
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
}

alias TAPE_STATISTICS = _TAPE_STATISTICS;
alias PTAPE_STATISTICS = _TAPE_STATISTICS*;

struct _TAPE_GET_STATISTICS
{
    DWORD Operation;
}

alias TAPE_GET_STATISTICS = _TAPE_GET_STATISTICS;
alias PTAPE_GET_STATISTICS = _TAPE_GET_STATISTICS*;

enum _STORAGE_MEDIA_TYPE
{
    DDS_4mm = 0x20,
    MiniQic = 33,
    Travan = 34,
    QIC = 35,
    MP_8mm = 36,
    AME_8mm = 37,
    AIT1_8mm = 38,
    DLT = 39,
    NCTP = 40,
    IBM_3480 = 41,
    IBM_3490E = 42,
    IBM_Magstar_3590 = 43,
    IBM_Magstar_MP = 44,
    STK_DATA_D3 = 45,
    SONY_DTF = 46,
    DV_6mm = 47,
    DMI = 48,
    SONY_D2 = 49,
    CLEANER_CARTRIDGE = 50,
    CD_ROM = 51,
    CD_R = 52,
    CD_RW = 53,
    DVD_ROM = 54,
    DVD_R = 55,
    DVD_RW = 56,
    MO_3_RW = 57,
    MO_5_WO = 58,
    MO_5_RW = 59,
    MO_5_LIMDOW = 60,
    PC_5_WO = 61,
    PC_5_RW = 62,
    PD_5_RW = 63,
    ABL_5_WO = 64,
    PINNACLE_APEX_5_RW = 65,
    SONY_12_WO = 66,
    PHILIPS_12_WO = 67,
    HITACHI_12_WO = 68,
    CYGNET_12_WO = 69,
    KODAK_14_WO = 70,
    MO_NFR_525 = 71,
    NIKON_12_RW = 72,
    IOMEGA_ZIP = 73,
    IOMEGA_JAZ = 74,
    SYQUEST_EZ135 = 75,
    SYQUEST_EZFLYER = 76,
    SYQUEST_SYJET = 77,
    AVATAR_F2 = 78,
    MP2_8mm = 79,
    DST_S = 80,
    DST_M = 81,
    DST_L = 82,
    VXATape_1 = 83,
    VXATape_2 = 84,
    STK_9840 = 85,
    LTO_Ultrium = 86,
    LTO_Accelis = 87,
    DVD_RAM = 88,
    AIT_8mm = 89,
    ADR_1 = 90,
    ADR_2 = 91,
    STK_9940 = 92,
    SAIT = 93,
    VXATape = 94
}

alias STORAGE_MEDIA_TYPE = _STORAGE_MEDIA_TYPE;
alias PSTORAGE_MEDIA_TYPE = _STORAGE_MEDIA_TYPE*;

enum _STORAGE_BUS_TYPE
{
    BusTypeUnknown = 0x00,
    BusTypeScsi = 0x1,
    BusTypeAtapi = 0x2,
    BusTypeAta = 0x3,
    BusType1394 = 0x4,
    BusTypeSsa = 0x5,
    BusTypeFibre = 0x6,
    BusTypeUsb = 0x7,
    BusTypeRAID = 0x8,

    BusTypeMax = 9,
    BusTypeMaxReserved = 0x7F
}

alias STORAGE_BUS_TYPE = _STORAGE_BUS_TYPE;
alias PSTORAGE_BUS_TYPE = _STORAGE_BUS_TYPE*;

struct _DEVICE_MEDIA_INFO
{
    union _Anonymous_95
    {
        struct _Anonymous_96
        {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        }

        _Anonymous_96 DiskInfo;

        struct _Anonymous_97
        {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        }

        _Anonymous_97 RemovableDiskInfo;

        struct _Anonymous_98
        {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD MediaCharacteristics;
            DWORD CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;

            union _Anonymous_99
            {
                struct _Anonymous_100
                {
                    BYTE MediumType;
                    BYTE DensityCode;
                }

                _Anonymous_100 ScsiInformation;
            }

            _Anonymous_99 BusSpecificData;
        }

        _Anonymous_98 TapeInfo;
    }

    _Anonymous_95 DeviceSpecific;
}

alias DEVICE_MEDIA_INFO = _DEVICE_MEDIA_INFO;
alias PDEVICE_MEDIA_INFO = _DEVICE_MEDIA_INFO*;

struct _GET_MEDIA_TYPES
{
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO[1] MediaInfo;
}

alias GET_MEDIA_TYPES = _GET_MEDIA_TYPES;
alias PGET_MEDIA_TYPES = _GET_MEDIA_TYPES*;

struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE[512] VendorSpecific;
}

alias STORAGE_PREDICT_FAILURE = _STORAGE_PREDICT_FAILURE;
alias PSTORAGE_PREDICT_FAILURE = _STORAGE_PREDICT_FAILURE*;

enum _MEDIA_TYPE
{
    Unknown = 0,
    F5_1Pt2_512 = 1,
    F3_1Pt44_512 = 2,
    F3_2Pt88_512 = 3,
    F3_20Pt8_512 = 4,
    F3_720_512 = 5,
    F5_360_512 = 6,
    F5_320_512 = 7,
    F5_320_1024 = 8,
    F5_180_512 = 9,
    F5_160_512 = 10,
    RemovableMedia = 11,
    FixedMedia = 12,
    F3_120M_512 = 13,
    F3_640_512 = 14,
    F5_640_512 = 15,
    F5_720_512 = 16,
    F3_1Pt2_512 = 17,
    F3_1Pt23_1024 = 18,
    F5_1Pt23_1024 = 19,
    F3_128Mb_512 = 20,
    F3_230Mb_512 = 21,
    F8_256_128 = 22,
    F3_200Mb_512 = 23,
    F3_240M_512 = 24,
    F3_32M_512 = 25
}

alias MEDIA_TYPE = _MEDIA_TYPE;
alias PMEDIA_TYPE = _MEDIA_TYPE*;

struct _FORMAT_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
}

alias FORMAT_PARAMETERS = _FORMAT_PARAMETERS;
alias PFORMAT_PARAMETERS = _FORMAT_PARAMETERS*;

alias BAD_TRACK_NUMBER = ushort;
alias PBAD_TRACK_NUMBER = ushort*;

struct _FORMAT_EX_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
    WORD FormatGapLength;
    WORD SectorsPerTrack;
    WORD[1] SectorNumber;
}

alias FORMAT_EX_PARAMETERS = _FORMAT_EX_PARAMETERS;
alias PFORMAT_EX_PARAMETERS = _FORMAT_EX_PARAMETERS*;

struct _DISK_GEOMETRY
{
    LARGE_INTEGER Cylinders;
    MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
}

alias DISK_GEOMETRY = _DISK_GEOMETRY;
alias PDISK_GEOMETRY = _DISK_GEOMETRY*;

struct _PARTITION_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
}

alias PARTITION_INFORMATION = _PARTITION_INFORMATION;
alias PPARTITION_INFORMATION = _PARTITION_INFORMATION*;

struct _SET_PARTITION_INFORMATION
{
    BYTE PartitionType;
}

alias SET_PARTITION_INFORMATION = _SET_PARTITION_INFORMATION;
alias PSET_PARTITION_INFORMATION = _SET_PARTITION_INFORMATION*;

struct _DRIVE_LAYOUT_INFORMATION
{
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION[1] PartitionEntry;
}

alias DRIVE_LAYOUT_INFORMATION = _DRIVE_LAYOUT_INFORMATION;
alias PDRIVE_LAYOUT_INFORMATION = _DRIVE_LAYOUT_INFORMATION*;

struct _VERIFY_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    DWORD Length;
}

alias VERIFY_INFORMATION = _VERIFY_INFORMATION;
alias PVERIFY_INFORMATION = _VERIFY_INFORMATION*;

struct _REASSIGN_BLOCKS
{
    WORD Reserved;
    WORD Count;
    DWORD[1] BlockNumber;
}

alias REASSIGN_BLOCKS = _REASSIGN_BLOCKS;
alias PREASSIGN_BLOCKS = _REASSIGN_BLOCKS*;

struct _REASSIGN_BLOCKS_EX
{
    WORD Reserved;
    WORD Count;
    LARGE_INTEGER[1] BlockNumber;
}

alias REASSIGN_BLOCKS_EX = _REASSIGN_BLOCKS_EX;
alias PREASSIGN_BLOCKS_EX = _REASSIGN_BLOCKS_EX*;

enum _PARTITION_STYLE
{
    PARTITION_STYLE_MBR = 0,
    PARTITION_STYLE_GPT = 1,
    PARTITION_STYLE_RAW = 2
}

alias PARTITION_STYLE = _PARTITION_STYLE;

struct _PARTITION_INFORMATION_GPT
{
    GUID PartitionType;
    GUID PartitionId;
    DWORD64 Attributes;
    WCHAR[36] Name;
}

alias PARTITION_INFORMATION_GPT = _PARTITION_INFORMATION_GPT;
alias PPARTITION_INFORMATION_GPT = _PARTITION_INFORMATION_GPT*;

struct _PARTITION_INFORMATION_MBR
{
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    DWORD HiddenSectors;
}

alias PARTITION_INFORMATION_MBR = _PARTITION_INFORMATION_MBR;
alias PPARTITION_INFORMATION_MBR = _PARTITION_INFORMATION_MBR*;

alias SET_PARTITION_INFORMATION_MBR = _SET_PARTITION_INFORMATION;
alias SET_PARTITION_INFORMATION_GPT = _PARTITION_INFORMATION_GPT;

struct _SET_PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;

    union
    {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    }
}

alias SET_PARTITION_INFORMATION_EX = _SET_PARTITION_INFORMATION_EX;
alias PSET_PARTITION_INFORMATION_EX = _SET_PARTITION_INFORMATION_EX*;

struct _CREATE_DISK_GPT
{
    GUID DiskId;
    DWORD MaxPartitionCount;
}

alias CREATE_DISK_GPT = _CREATE_DISK_GPT;
alias PCREATE_DISK_GPT = _CREATE_DISK_GPT*;

struct _CREATE_DISK_MBR
{
    DWORD Signature;
}

alias CREATE_DISK_MBR = _CREATE_DISK_MBR;
alias PCREATE_DISK_MBR = _CREATE_DISK_MBR*;

struct _CREATE_DISK
{
    PARTITION_STYLE PartitionStyle;

    union
    {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    }
}

alias CREATE_DISK = _CREATE_DISK;
alias PCREATE_DISK = _CREATE_DISK*;

struct _GET_LENGTH_INFORMATION
{
    LARGE_INTEGER Length;
}

alias GET_LENGTH_INFORMATION = _GET_LENGTH_INFORMATION;
alias PGET_LENGTH_INFORMATION = _GET_LENGTH_INFORMATION*;

struct _PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD PartitionNumber;
    BOOLEAN RewritePartition;

    union
    {
        PARTITION_INFORMATION_MBR Mbr;
        PARTITION_INFORMATION_GPT Gpt;
    }
}

alias PARTITION_INFORMATION_EX = _PARTITION_INFORMATION_EX;
alias PPARTITION_INFORMATION_EX = _PARTITION_INFORMATION_EX*;

struct _DRIVE_LAYOUT_INFORMATION_GPT
{
    GUID DiskId;
    LARGE_INTEGER StartingUsableOffset;
    LARGE_INTEGER UsableLength;
    DWORD MaxPartitionCount;
}

alias DRIVE_LAYOUT_INFORMATION_GPT = _DRIVE_LAYOUT_INFORMATION_GPT;
alias PDRIVE_LAYOUT_INFORMATION_GPT = _DRIVE_LAYOUT_INFORMATION_GPT*;

struct _DRIVE_LAYOUT_INFORMATION_MBR
{
    DWORD Signature;
}

alias DRIVE_LAYOUT_INFORMATION_MBR = _DRIVE_LAYOUT_INFORMATION_MBR;
alias PDRIVE_LAYOUT_INFORMATION_MBR = _DRIVE_LAYOUT_INFORMATION_MBR*;

struct _DRIVE_LAYOUT_INFORMATION_EX
{
    DWORD PartitionStyle;
    DWORD PartitionCount;

    union
    {
        DRIVE_LAYOUT_INFORMATION_MBR Mbr;
        DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    }

    PARTITION_INFORMATION_EX[1] PartitionEntry;
}

alias DRIVE_LAYOUT_INFORMATION_EX = _DRIVE_LAYOUT_INFORMATION_EX;
alias PDRIVE_LAYOUT_INFORMATION_EX = _DRIVE_LAYOUT_INFORMATION_EX*;

enum _DETECTION_TYPE
{
    DetectNone = 0,
    DetectInt13 = 1,
    DetectExInt13 = 2
}

alias DETECTION_TYPE = _DETECTION_TYPE;

struct _DISK_INT13_INFO
{
    WORD DriveSelect;
    DWORD MaxCylinders;
    WORD SectorsPerTrack;
    WORD MaxHeads;
    WORD NumberDrives;
}

alias DISK_INT13_INFO = _DISK_INT13_INFO;
alias PDISK_INT13_INFO = _DISK_INT13_INFO*;

struct _DISK_EX_INT13_INFO
{
    WORD ExBufferSize;
    WORD ExFlags;
    DWORD ExCylinders;
    DWORD ExHeads;
    DWORD ExSectorsPerTrack;
    DWORD64 ExSectorsPerDrive;
    WORD ExSectorSize;
    WORD ExReserved;
}

alias DISK_EX_INT13_INFO = _DISK_EX_INT13_INFO;
alias PDISK_EX_INT13_INFO = _DISK_EX_INT13_INFO*;

struct _DISK_DETECTION_INFO
{
    DWORD SizeOfDetectInfo;
    DETECTION_TYPE DetectionType;

    union
    {
        struct
        {
            DISK_INT13_INFO Int13;
            DISK_EX_INT13_INFO ExInt13;
        }
    }
}

alias DISK_DETECTION_INFO = _DISK_DETECTION_INFO;
alias PDISK_DETECTION_INFO = _DISK_DETECTION_INFO*;

struct _DISK_PARTITION_INFO
{
    DWORD SizeOfPartitionInfo;
    PARTITION_STYLE PartitionStyle;

    union
    {
        struct _Anonymous_101
        {
            DWORD Signature;
            DWORD CheckSum;
        }

        _Anonymous_101 Mbr;

        struct _Anonymous_102
        {
            GUID DiskId;
        }

        _Anonymous_102 Gpt;
    }
}

alias DISK_PARTITION_INFO = _DISK_PARTITION_INFO;
alias PDISK_PARTITION_INFO = _DISK_PARTITION_INFO*;

struct _DISK_GEOMETRY_EX
{
    DISK_GEOMETRY Geometry;
    LARGE_INTEGER DiskSize;
    BYTE[1] Data;
}

alias DISK_GEOMETRY_EX = _DISK_GEOMETRY_EX;
alias PDISK_GEOMETRY_EX = _DISK_GEOMETRY_EX*;

struct _DISK_CONTROLLER_NUMBER
{
    DWORD ControllerNumber;
    DWORD DiskNumber;
}

alias DISK_CONTROLLER_NUMBER = _DISK_CONTROLLER_NUMBER;
alias PDISK_CONTROLLER_NUMBER = _DISK_CONTROLLER_NUMBER*;

enum DISK_CACHE_RETENTION_PRIORITY
{
    EqualPriority = 0,
    KeepPrefetchedData = 1,
    KeepReadData = 2
}

struct _DISK_CACHE_INFORMATION
{
    BOOLEAN ParametersSavable;
    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;
    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
    WORD DisablePrefetchTransferLength;
    BOOLEAN PrefetchScalar;

    union
    {
        struct _Anonymous_103
        {
            WORD Minimum;
            WORD Maximum;
            WORD MaximumBlocks;
        }

        _Anonymous_103 ScalarPrefetch;

        struct _Anonymous_104
        {
            WORD Minimum;
            WORD Maximum;
        }

        _Anonymous_104 BlockPrefetch;
    }
}

alias DISK_CACHE_INFORMATION = _DISK_CACHE_INFORMATION;
alias PDISK_CACHE_INFORMATION = _DISK_CACHE_INFORMATION*;

struct _DISK_GROW_PARTITION
{
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
}

alias DISK_GROW_PARTITION = _DISK_GROW_PARTITION;
alias PDISK_GROW_PARTITION = _DISK_GROW_PARTITION*;

struct _HISTOGRAM_BUCKET
{
    DWORD Reads;
    DWORD Writes;
}

alias HISTOGRAM_BUCKET = _HISTOGRAM_BUCKET;
alias PHISTOGRAM_BUCKET = _HISTOGRAM_BUCKET*;

struct _DISK_HISTOGRAM
{
    LARGE_INTEGER DiskSize;
    LARGE_INTEGER Start;
    LARGE_INTEGER End;
    LARGE_INTEGER Average;
    LARGE_INTEGER AverageRead;
    LARGE_INTEGER AverageWrite;
    DWORD Granularity;
    DWORD Size;
    DWORD ReadCount;
    DWORD WriteCount;
    PHISTOGRAM_BUCKET Histogram;
}

alias DISK_HISTOGRAM = _DISK_HISTOGRAM;
alias PDISK_HISTOGRAM = _DISK_HISTOGRAM*;

struct _DISK_PERFORMANCE
{
    LARGE_INTEGER BytesRead;
    LARGE_INTEGER BytesWritten;
    LARGE_INTEGER ReadTime;
    LARGE_INTEGER WriteTime;
    LARGE_INTEGER IdleTime;
    DWORD ReadCount;
    DWORD WriteCount;
    DWORD QueueDepth;
    DWORD SplitCount;
    LARGE_INTEGER QueryTime;
    DWORD StorageDeviceNumber;
    WCHAR[8] StorageManagerName;
}

alias DISK_PERFORMANCE = _DISK_PERFORMANCE;
alias PDISK_PERFORMANCE = _DISK_PERFORMANCE*;

struct _DISK_RECORD
{
    LARGE_INTEGER ByteOffset;
    LARGE_INTEGER StartTime;
    LARGE_INTEGER EndTime;
    PVOID VirtualAddress;
    DWORD NumberOfBytes;
    BYTE DeviceNumber;
    BOOLEAN ReadRequest;
}

alias DISK_RECORD = _DISK_RECORD;
alias PDISK_RECORD = _DISK_RECORD*;

struct _DISK_LOGGING
{
    BYTE Function;
    PVOID BufferAddress;
    DWORD BufferSize;
}

alias DISK_LOGGING = _DISK_LOGGING;
alias PDISK_LOGGING = _DISK_LOGGING*;

enum _BIN_TYPES
{
    RequestSize = 0,
    RequestLocation = 1
}

alias BIN_TYPES = _BIN_TYPES;

struct _BIN_RANGE
{
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
}

alias BIN_RANGE = _BIN_RANGE;
alias PBIN_RANGE = _BIN_RANGE*;

struct _PERF_BIN
{
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE[1] BinsRanges;
}

alias PERF_BIN = _PERF_BIN;
alias PPERF_BIN = _PERF_BIN*;

struct _BIN_COUNT
{
    BIN_RANGE BinRange;
    DWORD BinCount;
}

alias BIN_COUNT = _BIN_COUNT;
alias PBIN_COUNT = _BIN_COUNT*;

struct _BIN_RESULTS
{
    DWORD NumberOfBins;
    BIN_COUNT[1] BinCounts;
}

alias BIN_RESULTS = _BIN_RESULTS;
alias PBIN_RESULTS = _BIN_RESULTS*;

struct _GETVERSIONINPARAMS
{
    BYTE bVersion;
    BYTE bRevision;
    BYTE bReserved;
    BYTE bIDEDeviceMap;
    DWORD fCapabilities;
    DWORD[4] dwReserved;
}

alias GETVERSIONINPARAMS = _GETVERSIONINPARAMS;
alias PGETVERSIONINPARAMS = _GETVERSIONINPARAMS*;
alias LPGETVERSIONINPARAMS = _GETVERSIONINPARAMS*;

struct _IDEREGS
{
    BYTE bFeaturesReg;
    BYTE bSectorCountReg;
    BYTE bSectorNumberReg;
    BYTE bCylLowReg;
    BYTE bCylHighReg;
    BYTE bDriveHeadReg;
    BYTE bCommandReg;
    BYTE bReserved;
}

alias IDEREGS = _IDEREGS;
alias PIDEREGS = _IDEREGS*;
alias LPIDEREGS = _IDEREGS*;

struct _SENDCMDINPARAMS
{
    DWORD cBufferSize;
    IDEREGS irDriveRegs;
    BYTE bDriveNumber;
    BYTE[3] bReserved;
    DWORD[4] dwReserved;
    BYTE[1] bBuffer;
}

alias SENDCMDINPARAMS = _SENDCMDINPARAMS;
alias PSENDCMDINPARAMS = _SENDCMDINPARAMS*;
alias LPSENDCMDINPARAMS = _SENDCMDINPARAMS*;

struct _DRIVERSTATUS
{
    BYTE bDriverError;
    BYTE bIDEError;
    BYTE[2] bReserved;
    DWORD[2] dwReserved;
}

alias DRIVERSTATUS = _DRIVERSTATUS;
alias PDRIVERSTATUS = _DRIVERSTATUS*;
alias LPDRIVERSTATUS = _DRIVERSTATUS*;

struct _SENDCMDOUTPARAMS
{
    DWORD cBufferSize;
    DRIVERSTATUS DriverStatus;
    BYTE[1] bBuffer;
}

alias SENDCMDOUTPARAMS = _SENDCMDOUTPARAMS;
alias PSENDCMDOUTPARAMS = _SENDCMDOUTPARAMS*;
alias LPSENDCMDOUTPARAMS = _SENDCMDOUTPARAMS*;

enum _ELEMENT_TYPE
{
    AllElements = 0,
    ChangerTransport = 1,
    ChangerSlot = 2,
    ChangerIEPort = 3,
    ChangerDrive = 4,
    ChangerDoor = 5,
    ChangerKeypad = 6,
    ChangerMaxElement = 7
}

alias ELEMENT_TYPE = _ELEMENT_TYPE;
alias PELEMENT_TYPE = _ELEMENT_TYPE*;

struct _CHANGER_ELEMENT
{
    ELEMENT_TYPE ElementType;
    DWORD ElementAddress;
}

alias CHANGER_ELEMENT = _CHANGER_ELEMENT;
alias PCHANGER_ELEMENT = _CHANGER_ELEMENT*;

struct _CHANGER_ELEMENT_LIST
{
    CHANGER_ELEMENT Element;
    DWORD NumberOfElements;
}

alias CHANGER_ELEMENT_LIST = _CHANGER_ELEMENT_LIST;
alias PCHANGER_ELEMENT_LIST = _CHANGER_ELEMENT_LIST*;

struct _GET_CHANGER_PARAMETERS
{
    DWORD Size;
    WORD NumberTransportElements;
    WORD NumberStorageElements;
    WORD NumberCleanerSlots;
    WORD NumberIEElements;
    WORD NumberDataTransferElements;
    WORD NumberOfDoors;
    WORD FirstSlotNumber;
    WORD FirstDriveNumber;
    WORD FirstTransportNumber;
    WORD FirstIEPortNumber;
    WORD FirstCleanerSlotAddress;
    WORD MagazineSize;
    DWORD DriveCleanTimeout;
    DWORD Features0;
    DWORD Features1;
    BYTE MoveFromTransport;
    BYTE MoveFromSlot;
    BYTE MoveFromIePort;
    BYTE MoveFromDrive;
    BYTE ExchangeFromTransport;
    BYTE ExchangeFromSlot;
    BYTE ExchangeFromIePort;
    BYTE ExchangeFromDrive;
    BYTE LockUnlockCapabilities;
    BYTE PositionCapabilities;
    BYTE[2] Reserved1;
    DWORD[2] Reserved2;
}

alias GET_CHANGER_PARAMETERS = _GET_CHANGER_PARAMETERS;
alias PGET_CHANGER_PARAMETERS = _GET_CHANGER_PARAMETERS*;

struct _CHANGER_PRODUCT_DATA
{
    BYTE[8] VendorId;
    BYTE[16] ProductId;
    BYTE[4] Revision;
    BYTE[32] SerialNumber;
    BYTE DeviceType;
}

alias CHANGER_PRODUCT_DATA = _CHANGER_PRODUCT_DATA;
alias PCHANGER_PRODUCT_DATA = _CHANGER_PRODUCT_DATA*;

struct _CHANGER_SET_ACCESS
{
    CHANGER_ELEMENT Element;
    DWORD Control;
}

alias CHANGER_SET_ACCESS = _CHANGER_SET_ACCESS;
alias PCHANGER_SET_ACCESS = _CHANGER_SET_ACCESS*;

struct _CHANGER_READ_ELEMENT_STATUS
{
    CHANGER_ELEMENT_LIST ElementList;
    BOOLEAN VolumeTagInfo;
}

alias CHANGER_READ_ELEMENT_STATUS = _CHANGER_READ_ELEMENT_STATUS;
alias PCHANGER_READ_ELEMENT_STATUS = _CHANGER_READ_ELEMENT_STATUS*;

struct _CHANGER_ELEMENT_STATUS
{
    CHANGER_ELEMENT Element;
    CHANGER_ELEMENT SrcElementAddress;
    DWORD Flags;
    DWORD ExceptionCode;
    BYTE TargetId;
    BYTE Lun;
    WORD Reserved;
    BYTE[36] PrimaryVolumeID;
    BYTE[36] AlternateVolumeID;
}

alias CHANGER_ELEMENT_STATUS = _CHANGER_ELEMENT_STATUS;
alias PCHANGER_ELEMENT_STATUS = _CHANGER_ELEMENT_STATUS*;

struct _CHANGER_ELEMENT_STATUS_EX
{
    CHANGER_ELEMENT Element;
    CHANGER_ELEMENT SrcElementAddress;
    DWORD Flags;
    DWORD ExceptionCode;
    BYTE TargetId;
    BYTE Lun;
    WORD Reserved;
    BYTE[36] PrimaryVolumeID;
    BYTE[36] AlternateVolumeID;
    BYTE[8] VendorIdentification;
    BYTE[16] ProductIdentification;
    BYTE[32] SerialNumber;
}

alias CHANGER_ELEMENT_STATUS_EX = _CHANGER_ELEMENT_STATUS_EX;
alias PCHANGER_ELEMENT_STATUS_EX = _CHANGER_ELEMENT_STATUS_EX*;

struct _CHANGER_INITIALIZE_ELEMENT_STATUS
{
    CHANGER_ELEMENT_LIST ElementList;
    BOOLEAN BarCodeScan;
}

alias CHANGER_INITIALIZE_ELEMENT_STATUS = _CHANGER_INITIALIZE_ELEMENT_STATUS;
alias PCHANGER_INITIALIZE_ELEMENT_STATUS = _CHANGER_INITIALIZE_ELEMENT_STATUS*;

struct _CHANGER_SET_POSITION
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Destination;
    BOOLEAN Flip;
}

alias CHANGER_SET_POSITION = _CHANGER_SET_POSITION;
alias PCHANGER_SET_POSITION = _CHANGER_SET_POSITION*;

struct _CHANGER_EXCHANGE_MEDIUM
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Source;
    CHANGER_ELEMENT Destination1;
    CHANGER_ELEMENT Destination2;
    BOOLEAN Flip1;
    BOOLEAN Flip2;
}

alias CHANGER_EXCHANGE_MEDIUM = _CHANGER_EXCHANGE_MEDIUM;
alias PCHANGER_EXCHANGE_MEDIUM = _CHANGER_EXCHANGE_MEDIUM*;

struct _CHANGER_MOVE_MEDIUM
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Source;
    CHANGER_ELEMENT Destination;
    BOOLEAN Flip;
}

alias CHANGER_MOVE_MEDIUM = _CHANGER_MOVE_MEDIUM;
alias PCHANGER_MOVE_MEDIUM = _CHANGER_MOVE_MEDIUM*;

struct _CHANGER_SEND_VOLUME_TAG_INFORMATION
{
    CHANGER_ELEMENT StartingElement;
    DWORD ActionCode;
    BYTE[40] VolumeIDTemplate;
}

alias CHANGER_SEND_VOLUME_TAG_INFORMATION = _CHANGER_SEND_VOLUME_TAG_INFORMATION;
alias PCHANGER_SEND_VOLUME_TAG_INFORMATION = _CHANGER_SEND_VOLUME_TAG_INFORMATION*;

struct _READ_ELEMENT_ADDRESS_INFO
{
    DWORD NumberOfElements;
    CHANGER_ELEMENT_STATUS[1] ElementStatus;
}

alias READ_ELEMENT_ADDRESS_INFO = _READ_ELEMENT_ADDRESS_INFO;
alias PREAD_ELEMENT_ADDRESS_INFO = _READ_ELEMENT_ADDRESS_INFO*;

enum _CHANGER_DEVICE_PROBLEM_TYPE
{
    DeviceProblemNone = 0,
    DeviceProblemHardware = 1,
    DeviceProblemCHMError = 2,
    DeviceProblemDoorOpen = 3,
    DeviceProblemCalibrationError = 4,
    DeviceProblemTargetFailure = 5,
    DeviceProblemCHMMoveError = 6,
    DeviceProblemCHMZeroError = 7,
    DeviceProblemCartridgeInsertError = 8,
    DeviceProblemPositionError = 9,
    DeviceProblemSensorError = 10,
    DeviceProblemCartridgeEjectError = 11,
    DeviceProblemGripperError = 12,
    DeviceProblemDriveError = 13
}

alias CHANGER_DEVICE_PROBLEM_TYPE = _CHANGER_DEVICE_PROBLEM_TYPE;
alias PCHANGER_DEVICE_PROBLEM_TYPE = _CHANGER_DEVICE_PROBLEM_TYPE*;

struct _PATHNAME_BUFFER
{
    DWORD PathNameLength;
    WCHAR[1] Name;
}

alias PATHNAME_BUFFER = _PATHNAME_BUFFER;
alias PPATHNAME_BUFFER = _PATHNAME_BUFFER*;

struct _FSCTL_QUERY_FAT_BPB_BUFFER
{
    BYTE[0x24] First0x24BytesOfBootSector;
}

alias FSCTL_QUERY_FAT_BPB_BUFFER = _FSCTL_QUERY_FAT_BPB_BUFFER;
alias PFSCTL_QUERY_FAT_BPB_BUFFER = _FSCTL_QUERY_FAT_BPB_BUFFER*;

struct NTFS_VOLUME_DATA_BUFFER
{
    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;
}

alias PNTFS_VOLUME_DATA_BUFFER = NTFS_VOLUME_DATA_BUFFER*;

struct NTFS_EXTENDED_VOLUME_DATA
{
    DWORD ByteCount;
    WORD MajorVersion;
    WORD MinorVersion;
}

alias PNTFS_EXTENDED_VOLUME_DATA = NTFS_EXTENDED_VOLUME_DATA*;

struct STARTING_LCN_INPUT_BUFFER
{
    LARGE_INTEGER StartingLcn;
}

alias PSTARTING_LCN_INPUT_BUFFER = STARTING_LCN_INPUT_BUFFER*;

struct VOLUME_BITMAP_BUFFER
{
    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE[1] Buffer;
}

alias PVOLUME_BITMAP_BUFFER = VOLUME_BITMAP_BUFFER*;

struct STARTING_VCN_INPUT_BUFFER
{
    LARGE_INTEGER StartingVcn;
}

alias PSTARTING_VCN_INPUT_BUFFER = STARTING_VCN_INPUT_BUFFER*;

struct RETRIEVAL_POINTERS_BUFFER
{
    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;

    struct _Anonymous_105
    {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    }

    _Anonymous_105[1] Extents;
}

alias PRETRIEVAL_POINTERS_BUFFER = RETRIEVAL_POINTERS_BUFFER*;

struct NTFS_FILE_RECORD_INPUT_BUFFER
{
    LARGE_INTEGER FileReferenceNumber;
}

alias PNTFS_FILE_RECORD_INPUT_BUFFER = NTFS_FILE_RECORD_INPUT_BUFFER*;

struct NTFS_FILE_RECORD_OUTPUT_BUFFER
{
    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE[1] FileRecordBuffer;
}

alias PNTFS_FILE_RECORD_OUTPUT_BUFFER = NTFS_FILE_RECORD_OUTPUT_BUFFER*;

struct MOVE_FILE_DATA
{
    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;
}

alias PMOVE_FILE_DATA = MOVE_FILE_DATA*;

struct _MOVE_FILE_DATA32
{
    UINT32 FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;
}

alias MOVE_FILE_DATA32 = _MOVE_FILE_DATA32;
alias PMOVE_FILE_DATA32 = _MOVE_FILE_DATA32*;

struct FIND_BY_SID_DATA
{
    DWORD Restart;
    SID Sid;
}

alias PFIND_BY_SID_DATA = FIND_BY_SID_DATA*;

struct FIND_BY_SID_OUTPUT
{
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR[1] FileName;
}

alias PFIND_BY_SID_OUTPUT = FIND_BY_SID_OUTPUT*;

struct MFT_ENUM_DATA
{
    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
}

alias PMFT_ENUM_DATA = MFT_ENUM_DATA*;

struct CREATE_USN_JOURNAL_DATA
{
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
}

alias PCREATE_USN_JOURNAL_DATA = CREATE_USN_JOURNAL_DATA*;

struct READ_USN_JOURNAL_DATA
{
    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
}

alias PREAD_USN_JOURNAL_DATA = READ_USN_JOURNAL_DATA*;

struct USN_RECORD
{
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR[1] FileName;
}

alias PUSN_RECORD = USN_RECORD*;

struct USN_JOURNAL_DATA
{
    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
}

alias PUSN_JOURNAL_DATA = USN_JOURNAL_DATA*;

struct DELETE_USN_JOURNAL_DATA
{
    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;
}

alias PDELETE_USN_JOURNAL_DATA = DELETE_USN_JOURNAL_DATA*;

struct MARK_HANDLE_INFO
{
    DWORD UsnSourceInfo;
    HANDLE VolumeHandle;
    DWORD HandleInfo;
}

alias PMARK_HANDLE_INFO = MARK_HANDLE_INFO*;

struct MARK_HANDLE_INFO32
{
    DWORD UsnSourceInfo;
    UINT32 VolumeHandle;
    DWORD HandleInfo;
}

alias PMARK_HANDLE_INFO32 = MARK_HANDLE_INFO32*;

struct BULK_SECURITY_TEST_DATA
{
    ACCESS_MASK DesiredAccess;
    DWORD[1] SecurityIds;
}

alias PBULK_SECURITY_TEST_DATA = BULK_SECURITY_TEST_DATA*;

struct _FILE_PREFETCH
{
    DWORD Type;
    DWORD Count;
    DWORDLONG[1] Prefetch;
}

alias FILE_PREFETCH = _FILE_PREFETCH;
alias PFILE_PREFETCH = _FILE_PREFETCH*;

struct _FILESYSTEM_STATISTICS
{
    WORD FileSystemType;
    WORD Version;
    DWORD SizeOfCompleteStructure;
    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;
    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;
}

alias FILESYSTEM_STATISTICS = _FILESYSTEM_STATISTICS;
alias PFILESYSTEM_STATISTICS = _FILESYSTEM_STATISTICS*;

struct _FAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;
    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;
    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
}

alias FAT_STATISTICS = _FAT_STATISTICS;
alias PFAT_STATISTICS = _FAT_STATISTICS*;

struct _EXFAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;
    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;
    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
}

alias EXFAT_STATISTICS = _EXFAT_STATISTICS;
alias PEXFAT_STATISTICS = _EXFAT_STATISTICS*;

struct _NTFS_STATISTICS
{
    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;
    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;

    struct _Anonymous_106
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    }

    _Anonymous_106 MftWritesUserLevel;
    WORD MftWritesFlushForLogFileFull;
    WORD MftWritesLazyWriter;
    WORD MftWritesUserRequest;
    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;

    struct _Anonymous_107
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    }

    _Anonymous_107 Mft2WritesUserLevel;
    WORD Mft2WritesFlushForLogFileFull;
    WORD Mft2WritesLazyWriter;
    WORD Mft2WritesUserRequest;
    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;
    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;
    WORD BitmapWritesFlushForLogFileFull;
    WORD BitmapWritesLazyWriter;
    WORD BitmapWritesUserRequest;

    struct _Anonymous_108
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
    }

    _Anonymous_108 BitmapWritesUserLevel;
    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;
    WORD MftBitmapWritesFlushForLogFileFull;
    WORD MftBitmapWritesLazyWriter;
    WORD MftBitmapWritesUserRequest;

    struct _Anonymous_109
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    }

    _Anonymous_109 MftBitmapWritesUserLevel;
    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;
    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

    struct _Anonymous_110
    {
        DWORD Calls;
        DWORD Clusters;
        DWORD Hints;
        DWORD RunsReturned;
        DWORD HintsHonored;
        DWORD HintsClusters;
        DWORD Cache;
        DWORD CacheClusters;
        DWORD CacheMiss;
        DWORD CacheMissClusters;
    }

    _Anonymous_110 Allocate;
}

alias NTFS_STATISTICS = _NTFS_STATISTICS;
alias PNTFS_STATISTICS = _NTFS_STATISTICS*;

struct _FILE_OBJECTID_BUFFER
{
    BYTE[16] ObjectId;

    union
    {
        struct
        {
            BYTE[16] BirthVolumeId;
            BYTE[16] BirthObjectId;
            BYTE[16] DomainId;
        }

        BYTE[48] ExtendedInfo;
    }
}

alias FILE_OBJECTID_BUFFER = _FILE_OBJECTID_BUFFER;
alias PFILE_OBJECTID_BUFFER = _FILE_OBJECTID_BUFFER*;

struct _FILE_SET_SPARSE_BUFFER
{
    BOOLEAN SetSparse;
}

alias FILE_SET_SPARSE_BUFFER = _FILE_SET_SPARSE_BUFFER;
alias PFILE_SET_SPARSE_BUFFER = _FILE_SET_SPARSE_BUFFER*;

struct _FILE_ZERO_DATA_INFORMATION
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;
}

alias FILE_ZERO_DATA_INFORMATION = _FILE_ZERO_DATA_INFORMATION;
alias PFILE_ZERO_DATA_INFORMATION = _FILE_ZERO_DATA_INFORMATION*;

struct _FILE_ALLOCATED_RANGE_BUFFER
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;
}

alias FILE_ALLOCATED_RANGE_BUFFER = _FILE_ALLOCATED_RANGE_BUFFER;
alias PFILE_ALLOCATED_RANGE_BUFFER = _FILE_ALLOCATED_RANGE_BUFFER*;

struct _ENCRYPTION_BUFFER
{
    DWORD EncryptionOperation;
    BYTE[1] Private;
}

alias ENCRYPTION_BUFFER = _ENCRYPTION_BUFFER;
alias PENCRYPTION_BUFFER = _ENCRYPTION_BUFFER*;

struct _DECRYPTION_STATUS_BUFFER
{
    BOOLEAN NoEncryptedStreams;
}

alias DECRYPTION_STATUS_BUFFER = _DECRYPTION_STATUS_BUFFER;
alias PDECRYPTION_STATUS_BUFFER = _DECRYPTION_STATUS_BUFFER*;

struct _REQUEST_RAW_ENCRYPTED_DATA
{
    LONGLONG FileOffset;
    DWORD Length;
}

alias REQUEST_RAW_ENCRYPTED_DATA = _REQUEST_RAW_ENCRYPTED_DATA;
alias PREQUEST_RAW_ENCRYPTED_DATA = _REQUEST_RAW_ENCRYPTED_DATA*;

struct _ENCRYPTED_DATA_INFO
{
    DWORDLONG StartingFileOffset;
    DWORD OutputBufferOffset;
    DWORD BytesWithinFileSize;
    DWORD BytesWithinValidDataLength;
    WORD CompressionFormat;
    BYTE DataUnitShift;
    BYTE ChunkShift;
    BYTE ClusterShift;
    BYTE EncryptionFormat;
    WORD NumberOfDataBlocks;
    DWORD[1] DataBlockSize;
}

alias ENCRYPTED_DATA_INFO = _ENCRYPTED_DATA_INFO;
alias PENCRYPTED_DATA_INFO = _ENCRYPTED_DATA_INFO*;

struct _PLEX_READ_DATA_REQUEST
{
    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;
}

alias PLEX_READ_DATA_REQUEST = _PLEX_READ_DATA_REQUEST;
alias PPLEX_READ_DATA_REQUEST = _PLEX_READ_DATA_REQUEST*;

struct _SI_COPYFILE
{
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR[1] FileNameBuffer;
}

alias SI_COPYFILE = _SI_COPYFILE;
alias PSI_COPYFILE = _SI_COPYFILE*;

struct _STORAGE_DESCRIPTOR_HEADER
{
    DWORD Version;
    DWORD Size;
}

alias STORAGE_DESCRIPTOR_HEADER = _STORAGE_DESCRIPTOR_HEADER;
alias PSTORAGE_DESCRIPTOR_HEADER = _STORAGE_DESCRIPTOR_HEADER*;

enum _STORAGE_PROPERTY_ID
{
    StorageDeviceProperty = 0,
    StorageAdapterProperty = 1,
    StorageDeviceIdProperty = 2,
    StorageDeviceUniqueIdProperty = 3,
    StorageDeviceWriteCacheProperty = 4,
    StorageMiniportProperty = 5,
    StorageAccessAlignmentProperty = 6,
    StorageDeviceSeekPenaltyProperty = 7,
    StorageDeviceTrimProperty = 8
}

alias STORAGE_PROPERTY_ID = _STORAGE_PROPERTY_ID;
alias PSTORAGE_PROPERTY_ID = _STORAGE_PROPERTY_ID*;

enum _STORAGE_QUERY_TYPE
{
    PropertyStandardQuery = 0,
    PropertyExistsQuery = 1,
    PropertyMaskQuery = 2,
    PropertyQueryMaxDefined = 3
}

alias STORAGE_QUERY_TYPE = _STORAGE_QUERY_TYPE;
alias PSTORAGE_QUERY_TYPE = _STORAGE_QUERY_TYPE*;

struct _STORAGE_PROPERTY_QUERY
{
    STORAGE_PROPERTY_ID PropertyId;
    STORAGE_QUERY_TYPE QueryType;
    BYTE[1] AdditionalParameters;
}

alias STORAGE_PROPERTY_QUERY = _STORAGE_PROPERTY_QUERY;
alias PSTORAGE_PROPERTY_QUERY = _STORAGE_PROPERTY_QUERY*;

struct _STORAGE_DEVICE_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BYTE DeviceType;
    BYTE DeviceTypeModifier;
    BOOLEAN RemovableMedia;
    BOOLEAN CommandQueueing;
    DWORD VendorIdOffset;
    DWORD ProductIdOffset;
    DWORD ProductRevisionOffset;
    DWORD SerialNumberOffset;
    STORAGE_BUS_TYPE BusType;
    DWORD RawPropertiesLength;
    BYTE[1] RawDeviceProperties;
}

alias STORAGE_DEVICE_DESCRIPTOR = _STORAGE_DEVICE_DESCRIPTOR;
alias PSTORAGE_DEVICE_DESCRIPTOR = _STORAGE_DEVICE_DESCRIPTOR*;

struct _STORAGE_ADAPTER_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD MaximumTransferLength;
    DWORD MaximumPhysicalPages;
    DWORD AlignmentMask;
    BOOLEAN AdapterUsesPio;
    BOOLEAN AdapterScansDown;
    BOOLEAN CommandQueueing;
    BOOLEAN AcceleratedTransfer;
    BYTE BusType;
    WORD BusMajorVersion;
    WORD BusMinorVersion;
}

alias STORAGE_ADAPTER_DESCRIPTOR = _STORAGE_ADAPTER_DESCRIPTOR;
alias PSTORAGE_ADAPTER_DESCRIPTOR = _STORAGE_ADAPTER_DESCRIPTOR*;

struct _STORAGE_DEVICE_ID_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfIdentifiers;
    BYTE[1] Identifiers;
}

alias STORAGE_DEVICE_ID_DESCRIPTOR = _STORAGE_DEVICE_ID_DESCRIPTOR;
alias PSTORAGE_DEVICE_ID_DESCRIPTOR = _STORAGE_DEVICE_ID_DESCRIPTOR*;

struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
{
    ULONGLONG GptAttributes;
}

alias VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
alias PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION*;

struct _DISK_EXTENT
{
    DWORD DiskNumber;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;
}

alias DISK_EXTENT = _DISK_EXTENT;
alias PDISK_EXTENT = _DISK_EXTENT*;

struct _VOLUME_DISK_EXTENTS
{
    DWORD NumberOfDiskExtents;
    DISK_EXTENT[1] Extents;
}

alias VOLUME_DISK_EXTENTS = _VOLUME_DISK_EXTENTS;
alias PVOLUME_DISK_EXTENTS = _VOLUME_DISK_EXTENTS*;

alias UWORD = ushort;

struct _SCARD_IO_REQUEST
{
    DWORD dwProtocol;
    DWORD cbPciLength;
}

alias SCARD_IO_REQUEST = _SCARD_IO_REQUEST;
alias PSCARD_IO_REQUEST = _SCARD_IO_REQUEST*;
alias LPSCARD_IO_REQUEST = _SCARD_IO_REQUEST*;
alias LPCSCARD_IO_REQUEST = const(_SCARD_IO_REQUEST)*;

struct SCARD_T0_COMMAND
{
    BYTE bCla;
    BYTE bIns;
    BYTE bP1;
    BYTE bP2;
    BYTE bP3;
}

alias LPSCARD_T0_COMMAND = SCARD_T0_COMMAND*;

struct SCARD_T0_REQUEST
{
    SCARD_IO_REQUEST ioRequest;
    BYTE bSw1;
    BYTE bSw2;

    union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE[5] rgbHeader;
    }
}

alias PSCARD_T0_REQUEST = SCARD_T0_REQUEST*;
alias LPSCARD_T0_REQUEST = SCARD_T0_REQUEST*;

struct SCARD_T1_REQUEST
{
    SCARD_IO_REQUEST ioRequest;
}

alias PSCARD_T1_REQUEST = SCARD_T1_REQUEST*;
alias LPSCARD_T1_REQUEST = SCARD_T1_REQUEST*;

alias LPCBYTE = const(ubyte)*;

extern __gshared const SCARD_IO_REQUEST g_rgSCardT0Pci;
extern __gshared const SCARD_IO_REQUEST g_rgSCardT1Pci;
extern __gshared const SCARD_IO_REQUEST g_rgSCardRawPci;

alias SCARDCONTEXT = ulong;
alias PSCARDCONTEXT = ulong*;
alias LPSCARDCONTEXT = ulong*;

alias SCARDHANDLE = ulong;
alias PSCARDHANDLE = ulong*;
alias LPSCARDHANDLE = ulong*;

LONG SCardEstablishContext (DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext);
LONG SCardReleaseContext (SCARDCONTEXT hContext);
LONG SCardIsValidContext (SCARDCONTEXT hContext);

LONG SCardListReaderGroupsA (SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups);
LONG SCardListReaderGroupsW (SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups);
LONG SCardListReadersA (SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders);
LONG SCardListReadersW (SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders);
LONG SCardListCardsA (SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, LPSTR mszCards, LPDWORD pcchCards);
LONG SCardListCardsW (SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, LPWSTR mszCards, LPDWORD pcchCards);

LONG SCardListInterfacesA (SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces);
LONG SCardListInterfacesW (SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces);
LONG SCardGetProviderIdA (SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId);
LONG SCardGetProviderIdW (SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId);
LONG SCardGetCardTypeProviderNameA (SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPSTR szProvider, LPDWORD pcchProvider);
LONG SCardGetCardTypeProviderNameW (SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPWSTR szProvider, LPDWORD pcchProvider);
LONG SCardIntroduceReaderGroupA (SCARDCONTEXT hContext, LPCSTR szGroupName);
LONG SCardIntroduceReaderGroupW (SCARDCONTEXT hContext, LPCWSTR szGroupName);
LONG SCardForgetReaderGroupA (SCARDCONTEXT hContext, LPCSTR szGroupName);
LONG SCardForgetReaderGroupW (SCARDCONTEXT hContext, LPCWSTR szGroupName);
LONG SCardIntroduceReaderA (SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName);
LONG SCardIntroduceReaderW (SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName);
LONG SCardForgetReaderA (SCARDCONTEXT hContext, LPCSTR szReaderName);
LONG SCardForgetReaderW (SCARDCONTEXT hContext, LPCWSTR szReaderName);
LONG SCardAddReaderToGroupA (SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName);
LONG SCardAddReaderToGroupW (SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName);
LONG SCardRemoveReaderFromGroupA (SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName);
LONG SCardRemoveReaderFromGroupW (SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName);
LONG SCardIntroduceCardTypeA (SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen);
LONG SCardIntroduceCardTypeW (SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen);

LONG SCardSetCardTypeProviderNameA (SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider);
LONG SCardSetCardTypeProviderNameW (SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider);
LONG SCardForgetCardTypeA (SCARDCONTEXT hContext, LPCSTR szCardName);
LONG SCardForgetCardTypeW (SCARDCONTEXT hContext, LPCWSTR szCardName);
LONG SCardFreeMemory (SCARDCONTEXT hContext, LPCVOID pvMem);
HANDLE SCardAccessStartedEvent ();
void SCardReleaseStartedEvent ();

struct SCARD_READERSTATEA
{
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE[36] rgbAtr;
}

alias PSCARD_READERSTATEA = SCARD_READERSTATEA*;
alias LPSCARD_READERSTATEA = SCARD_READERSTATEA*;

struct SCARD_READERSTATEW
{
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE[36] rgbAtr;
}

alias PSCARD_READERSTATEW = SCARD_READERSTATEW*;
alias LPSCARD_READERSTATEW = SCARD_READERSTATEW*;

alias SCARD_READERSTATE = SCARD_READERSTATEA;
alias PSCARD_READERSTATE = SCARD_READERSTATEA*;
alias LPSCARD_READERSTATE = SCARD_READERSTATEA*;

LONG SCardLocateCardsA (SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
LONG SCardLocateCardsW (SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);

struct _SCARD_ATRMASK
{
    DWORD cbAtr;
    BYTE[36] rgbAtr;
    BYTE[36] rgbMask;
}

alias SCARD_ATRMASK = _SCARD_ATRMASK;
alias PSCARD_ATRMASK = _SCARD_ATRMASK*;
alias LPSCARD_ATRMASK = _SCARD_ATRMASK*;

LONG SCardLocateCardsByATRA (SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
LONG SCardLocateCardsByATRW (SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
LONG SCardGetStatusChangeA (SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
LONG SCardGetStatusChangeW (SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
LONG SCardCancel (SCARDCONTEXT hContext);

LONG SCardConnectA (SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol);
LONG SCardConnectW (SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol);
LONG SCardReconnect (SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol);
LONG SCardDisconnect (SCARDHANDLE hCard, DWORD dwDisposition);
LONG SCardBeginTransaction (SCARDHANDLE hCard);
LONG SCardEndTransaction (SCARDHANDLE hCard, DWORD dwDisposition);
LONG SCardCancelTransaction (SCARDHANDLE hCard);
LONG SCardState (SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
LONG SCardStatusA (SCARDHANDLE hCard, LPSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
LONG SCardStatusW (SCARDHANDLE hCard, LPWSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
LONG SCardTransmit (SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength);
LONG SCardControl (SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned);
LONG SCardGetAttrib (SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen);

LONG SCardSetAttrib (SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen);

alias LPOCNCONNPROCA = ulong function (SCARDCONTEXT, LPSTR, LPSTR, PVOID);
alias LPOCNCONNPROCW = ulong function (SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);
alias LPOCNCHKPROC = int function (SCARDCONTEXT, SCARDHANDLE, PVOID);
alias LPOCNDSCPROC = void function (SCARDCONTEXT, SCARDHANDLE, PVOID);

struct OPENCARD_SEARCH_CRITERIAA
{
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
}

alias POPENCARD_SEARCH_CRITERIAA = OPENCARD_SEARCH_CRITERIAA*;
alias LPOPENCARD_SEARCH_CRITERIAA = OPENCARD_SEARCH_CRITERIAA*;

struct OPENCARD_SEARCH_CRITERIAW
{
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
}

alias POPENCARD_SEARCH_CRITERIAW = OPENCARD_SEARCH_CRITERIAW*;
alias LPOPENCARD_SEARCH_CRITERIAW = OPENCARD_SEARCH_CRITERIAW*;

alias OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAA;
alias POPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAA*;
alias LPOPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAA*;

struct OPENCARDNAME_EXA
{
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
}

alias POPENCARDNAME_EXA = OPENCARDNAME_EXA*;
alias LPOPENCARDNAME_EXA = OPENCARDNAME_EXA*;

struct OPENCARDNAME_EXW
{
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
}

alias POPENCARDNAME_EXW = OPENCARDNAME_EXW*;
alias LPOPENCARDNAME_EXW = OPENCARDNAME_EXW*;

alias OPENCARDNAME_EX = OPENCARDNAME_EXA;
alias POPENCARDNAME_EX = OPENCARDNAME_EXA*;
alias LPOPENCARDNAME_EX = OPENCARDNAME_EXA*;

LONG SCardUIDlgSelectCardA (LPOPENCARDNAME_EXA);
LONG SCardUIDlgSelectCardW (LPOPENCARDNAME_EXW);

struct OPENCARDNAMEA
{
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
}

alias POPENCARDNAMEA = OPENCARDNAMEA*;
alias LPOPENCARDNAMEA = OPENCARDNAMEA*;

struct OPENCARDNAMEW
{
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
}

alias POPENCARDNAMEW = OPENCARDNAMEW*;
alias LPOPENCARDNAMEW = OPENCARDNAMEW*;

alias OPENCARDNAME = OPENCARDNAMEA;
alias POPENCARDNAME = OPENCARDNAMEA*;
alias LPOPENCARDNAME = OPENCARDNAMEA*;

LONG GetOpenCardNameA (LPOPENCARDNAMEA);
LONG GetOpenCardNameW (LPOPENCARDNAMEW);
LONG SCardDlgExtendedError ();

struct _PSP;

alias HPROPSHEETPAGE = _PSP*;
alias LPFNPSPCALLBACKA = uint function (HWND hwnd, UINT uMsg, _PROPSHEETPAGEA* ppsp);
alias LPFNPSPCALLBACKW = uint function (HWND hwnd, UINT uMsg, _PROPSHEETPAGEW* ppsp);

alias PROPSHEETPAGE_RESOURCE = const(DLGTEMPLATE)*;

struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;

    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    }

    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    }

    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT* pcRefParent;
}

alias PROPSHEETPAGEA_V1 = _PROPSHEETPAGEA_V1;
alias LPPROPSHEETPAGEA_V1 = _PROPSHEETPAGEA_V1*;

alias LPCPROPSHEETPAGEA_V1 = const(_PROPSHEETPAGEA_V1)*;

struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;

    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    }

    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    }

    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT* pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
}

alias PROPSHEETPAGEA_V2 = _PROPSHEETPAGEA_V2;
alias LPPROPSHEETPAGEA_V2 = _PROPSHEETPAGEA_V2*;

alias LPCPROPSHEETPAGEA_V2 = const(_PROPSHEETPAGEA_V2)*;

struct _PROPSHEETPAGEA
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;

    union
    {
        LPCSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    }

    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    }

    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT* pcRefParent;
    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
    HANDLE hActCtx;
}

alias PROPSHEETPAGEA_V3 = _PROPSHEETPAGEA;
alias LPPROPSHEETPAGEA_V3 = _PROPSHEETPAGEA*;

alias LPCPROPSHEETPAGEA_V3 = const(_PROPSHEETPAGEA)*;

struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;

    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    }

    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    }

    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT* pcRefParent;
}

alias PROPSHEETPAGEW_V1 = _PROPSHEETPAGEW_V1;
alias LPPROPSHEETPAGEW_V1 = _PROPSHEETPAGEW_V1*;

alias LPCPROPSHEETPAGEW_V1 = const(_PROPSHEETPAGEW_V1)*;

struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;

    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    }

    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    }

    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT* pcRefParent;
    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
}

alias PROPSHEETPAGEW_V2 = _PROPSHEETPAGEW_V2;
alias LPPROPSHEETPAGEW_V2 = _PROPSHEETPAGEW_V2*;

alias LPCPROPSHEETPAGEW_V2 = const(_PROPSHEETPAGEW_V2)*;

struct _PROPSHEETPAGEW
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;

    union
    {
        LPCWSTR pszTemplate;
        PROPSHEETPAGE_RESOURCE pResource;
    }

    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    }

    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT* pcRefParent;
    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
    HANDLE hActCtx;
}

alias PROPSHEETPAGEW_V3 = _PROPSHEETPAGEW;
alias LPPROPSHEETPAGEW_V3 = _PROPSHEETPAGEW*;

alias LPCPROPSHEETPAGEW_V3 = const(_PROPSHEETPAGEW)*;
alias PROPSHEETPAGEA_LATEST = _PROPSHEETPAGEA;
alias PROPSHEETPAGEW_LATEST = _PROPSHEETPAGEW;
alias LPPROPSHEETPAGEA_LATEST = _PROPSHEETPAGEA*;
alias LPPROPSHEETPAGEW_LATEST = _PROPSHEETPAGEW*;
alias LPCPROPSHEETPAGEA_LATEST = const(_PROPSHEETPAGEA)*;
alias LPCPROPSHEETPAGEW_LATEST = const(_PROPSHEETPAGEW)*;

alias PROPSHEETPAGEA = _PROPSHEETPAGEA;
alias PROPSHEETPAGEW = _PROPSHEETPAGEW;
alias LPPROPSHEETPAGEA = _PROPSHEETPAGEA*;
alias LPPROPSHEETPAGEW = _PROPSHEETPAGEW*;
alias LPCPROPSHEETPAGEA = const(_PROPSHEETPAGEA)*;
alias LPCPROPSHEETPAGEW = const(_PROPSHEETPAGEW)*;

alias PFNPROPSHEETCALLBACK = int function (HWND, UINT, LPARAM);

struct _PROPSHEETHEADERA
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;

    union
    {
        HICON hIcon;
        LPCSTR pszIcon;
    }

    LPCSTR pszCaption;
    UINT nPages;

    union
    {
        UINT nStartPage;
        LPCSTR pStartPage;
    }

    union
    {
        LPCPROPSHEETPAGEA ppsp;
        HPROPSHEETPAGE* phpage;
    }

    PFNPROPSHEETCALLBACK pfnCallback;

    union
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    }

    HPALETTE hplWatermark;

    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    }
}

alias PROPSHEETHEADERA = _PROPSHEETHEADERA;
alias LPPROPSHEETHEADERA = _PROPSHEETHEADERA*;

alias LPCPROPSHEETHEADERA = const(_PROPSHEETHEADERA)*;

struct _PROPSHEETHEADERW
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;

    union
    {
        HICON hIcon;
        LPCWSTR pszIcon;
    }

    LPCWSTR pszCaption;
    UINT nPages;

    union
    {
        UINT nStartPage;
        LPCWSTR pStartPage;
    }

    union
    {
        LPCPROPSHEETPAGEW ppsp;
        HPROPSHEETPAGE* phpage;
    }

    PFNPROPSHEETCALLBACK pfnCallback;

    union
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    }

    HPALETTE hplWatermark;

    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    }
}

alias PROPSHEETHEADERW = _PROPSHEETHEADERW;
alias LPPROPSHEETHEADERW = _PROPSHEETHEADERW*;

alias LPCPROPSHEETHEADERW = const(_PROPSHEETHEADERW)*;

HPROPSHEETPAGE CreatePropertySheetPageA (LPCPROPSHEETPAGEA constPropSheetPagePointer);
HPROPSHEETPAGE CreatePropertySheetPageW (LPCPROPSHEETPAGEW constPropSheetPagePointer);
WINBOOL DestroyPropertySheetPage (HPROPSHEETPAGE);
INT_PTR PropertySheetA (LPCPROPSHEETHEADERA);
INT_PTR PropertySheetW (LPCPROPSHEETHEADERW);

alias LPFNADDPROPSHEETPAGE = int function (HPROPSHEETPAGE, LPARAM);
alias LPFNADDPROPSHEETPAGES = int function (LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);

struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
}

alias PSHNOTIFY = _PSHNOTIFY;
alias LPPSHNOTIFY = _PSHNOTIFY*;

struct _PRINTER_INFO_1A
{
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
}

alias PRINTER_INFO_1A = _PRINTER_INFO_1A;
alias PPRINTER_INFO_1A = _PRINTER_INFO_1A*;
alias LPPRINTER_INFO_1A = _PRINTER_INFO_1A*;

struct _PRINTER_INFO_1W
{
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
}

alias PRINTER_INFO_1W = _PRINTER_INFO_1W;
alias PPRINTER_INFO_1W = _PRINTER_INFO_1W*;
alias LPPRINTER_INFO_1W = _PRINTER_INFO_1W*;

alias PRINTER_INFO_1 = _PRINTER_INFO_1A;
alias PPRINTER_INFO_1 = _PRINTER_INFO_1A*;
alias LPPRINTER_INFO_1 = _PRINTER_INFO_1A*;

struct _PRINTER_INFO_2A
{
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
}

alias PRINTER_INFO_2A = _PRINTER_INFO_2A;
alias PPRINTER_INFO_2A = _PRINTER_INFO_2A*;
alias LPPRINTER_INFO_2A = _PRINTER_INFO_2A*;

struct _PRINTER_INFO_2W
{
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
}

alias PRINTER_INFO_2W = _PRINTER_INFO_2W;
alias PPRINTER_INFO_2W = _PRINTER_INFO_2W*;
alias LPPRINTER_INFO_2W = _PRINTER_INFO_2W*;

alias PRINTER_INFO_2 = _PRINTER_INFO_2A;
alias PPRINTER_INFO_2 = _PRINTER_INFO_2A*;
alias LPPRINTER_INFO_2 = _PRINTER_INFO_2A*;

struct _PRINTER_INFO_3
{
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
}

alias PRINTER_INFO_3 = _PRINTER_INFO_3;
alias PPRINTER_INFO_3 = _PRINTER_INFO_3*;
alias LPPRINTER_INFO_3 = _PRINTER_INFO_3*;

struct _PRINTER_INFO_4A
{
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
}

alias PRINTER_INFO_4A = _PRINTER_INFO_4A;
alias PPRINTER_INFO_4A = _PRINTER_INFO_4A*;
alias LPPRINTER_INFO_4A = _PRINTER_INFO_4A*;

struct _PRINTER_INFO_4W
{
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
}

alias PRINTER_INFO_4W = _PRINTER_INFO_4W;
alias PPRINTER_INFO_4W = _PRINTER_INFO_4W*;
alias LPPRINTER_INFO_4W = _PRINTER_INFO_4W*;

alias PRINTER_INFO_4 = _PRINTER_INFO_4A;
alias PPRINTER_INFO_4 = _PRINTER_INFO_4A*;
alias LPPRINTER_INFO_4 = _PRINTER_INFO_4A*;

struct _PRINTER_INFO_5A
{
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
}

alias PRINTER_INFO_5A = _PRINTER_INFO_5A;
alias PPRINTER_INFO_5A = _PRINTER_INFO_5A*;
alias LPPRINTER_INFO_5A = _PRINTER_INFO_5A*;

struct _PRINTER_INFO_5W
{
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
}

alias PRINTER_INFO_5W = _PRINTER_INFO_5W;
alias PPRINTER_INFO_5W = _PRINTER_INFO_5W*;
alias LPPRINTER_INFO_5W = _PRINTER_INFO_5W*;

alias PRINTER_INFO_5 = _PRINTER_INFO_5A;
alias PPRINTER_INFO_5 = _PRINTER_INFO_5A*;
alias LPPRINTER_INFO_5 = _PRINTER_INFO_5A*;

struct _PRINTER_INFO_6
{
    DWORD dwStatus;
}

alias PRINTER_INFO_6 = _PRINTER_INFO_6;
alias PPRINTER_INFO_6 = _PRINTER_INFO_6*;
alias LPPRINTER_INFO_6 = _PRINTER_INFO_6*;

struct _PRINTER_INFO_7A
{
    LPSTR pszObjectGUID;
    DWORD dwAction;
}

alias PRINTER_INFO_7A = _PRINTER_INFO_7A;
alias PPRINTER_INFO_7A = _PRINTER_INFO_7A*;
alias LPPRINTER_INFO_7A = _PRINTER_INFO_7A*;

struct _PRINTER_INFO_7W
{
    LPWSTR pszObjectGUID;
    DWORD dwAction;
}

alias PRINTER_INFO_7W = _PRINTER_INFO_7W;
alias PPRINTER_INFO_7W = _PRINTER_INFO_7W*;
alias LPPRINTER_INFO_7W = _PRINTER_INFO_7W*;

alias PRINTER_INFO_7 = _PRINTER_INFO_7A;
alias PPRINTER_INFO_7 = _PRINTER_INFO_7A*;
alias LPPRINTER_INFO_7 = _PRINTER_INFO_7A*;

struct _PRINTER_INFO_8A
{
    LPDEVMODEA pDevMode;
}

alias PRINTER_INFO_8A = _PRINTER_INFO_8A;
alias PPRINTER_INFO_8A = _PRINTER_INFO_8A*;
alias LPPRINTER_INFO_8A = _PRINTER_INFO_8A*;

struct _PRINTER_INFO_8W
{
    LPDEVMODEW pDevMode;
}

alias PRINTER_INFO_8W = _PRINTER_INFO_8W;
alias PPRINTER_INFO_8W = _PRINTER_INFO_8W*;
alias LPPRINTER_INFO_8W = _PRINTER_INFO_8W*;

alias PRINTER_INFO_8 = _PRINTER_INFO_8A;
alias PPRINTER_INFO_8 = _PRINTER_INFO_8A*;
alias LPPRINTER_INFO_8 = _PRINTER_INFO_8A*;

struct _PRINTER_INFO_9A
{
    LPDEVMODEA pDevMode;
}

alias PRINTER_INFO_9A = _PRINTER_INFO_9A;
alias PPRINTER_INFO_9A = _PRINTER_INFO_9A*;
alias LPPRINTER_INFO_9A = _PRINTER_INFO_9A*;

struct _PRINTER_INFO_9W
{
    LPDEVMODEW pDevMode;
}

alias PRINTER_INFO_9W = _PRINTER_INFO_9W;
alias PPRINTER_INFO_9W = _PRINTER_INFO_9W*;
alias LPPRINTER_INFO_9W = _PRINTER_INFO_9W*;

alias PRINTER_INFO_9 = _PRINTER_INFO_9A;
alias PPRINTER_INFO_9 = _PRINTER_INFO_9A*;
alias LPPRINTER_INFO_9 = _PRINTER_INFO_9A*;

struct _JOB_INFO_1A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pDatatype;
    LPSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
}

alias JOB_INFO_1A = _JOB_INFO_1A;
alias PJOB_INFO_1A = _JOB_INFO_1A*;
alias LPJOB_INFO_1A = _JOB_INFO_1A*;

struct _JOB_INFO_1W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pDatatype;
    LPWSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
}

alias JOB_INFO_1W = _JOB_INFO_1W;
alias PJOB_INFO_1W = _JOB_INFO_1W*;
alias LPJOB_INFO_1W = _JOB_INFO_1W*;

alias JOB_INFO_1 = _JOB_INFO_1A;
alias PJOB_INFO_1 = _JOB_INFO_1A*;
alias LPJOB_INFO_1 = _JOB_INFO_1A*;

struct _JOB_INFO_2A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pNotifyName;
    LPSTR pDatatype;
    LPSTR pPrintProcessor;
    LPSTR pParameters;
    LPSTR pDriverName;
    LPDEVMODEA pDevMode;
    LPSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
}

alias JOB_INFO_2A = _JOB_INFO_2A;
alias PJOB_INFO_2A = _JOB_INFO_2A*;
alias LPJOB_INFO_2A = _JOB_INFO_2A*;

struct _JOB_INFO_2W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pNotifyName;
    LPWSTR pDatatype;
    LPWSTR pPrintProcessor;
    LPWSTR pParameters;
    LPWSTR pDriverName;
    LPDEVMODEW pDevMode;
    LPWSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
}

alias JOB_INFO_2W = _JOB_INFO_2W;
alias PJOB_INFO_2W = _JOB_INFO_2W*;
alias LPJOB_INFO_2W = _JOB_INFO_2W*;

alias JOB_INFO_2 = _JOB_INFO_2A;
alias PJOB_INFO_2 = _JOB_INFO_2A*;
alias LPJOB_INFO_2 = _JOB_INFO_2A*;

struct _JOB_INFO_3
{
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
}

alias JOB_INFO_3 = _JOB_INFO_3;
alias PJOB_INFO_3 = _JOB_INFO_3*;
alias LPJOB_INFO_3 = _JOB_INFO_3*;

struct _ADDJOB_INFO_1A
{
    LPSTR Path;
    DWORD JobId;
}

alias ADDJOB_INFO_1A = _ADDJOB_INFO_1A;
alias PADDJOB_INFO_1A = _ADDJOB_INFO_1A*;
alias LPADDJOB_INFO_1A = _ADDJOB_INFO_1A*;

struct _ADDJOB_INFO_1W
{
    LPWSTR Path;
    DWORD JobId;
}

alias ADDJOB_INFO_1W = _ADDJOB_INFO_1W;
alias PADDJOB_INFO_1W = _ADDJOB_INFO_1W*;
alias LPADDJOB_INFO_1W = _ADDJOB_INFO_1W*;

alias ADDJOB_INFO_1 = _ADDJOB_INFO_1A;
alias PADDJOB_INFO_1 = _ADDJOB_INFO_1A*;
alias LPADDJOB_INFO_1 = _ADDJOB_INFO_1A*;

struct _DRIVER_INFO_1A
{
    LPSTR pName;
}

alias DRIVER_INFO_1A = _DRIVER_INFO_1A;
alias PDRIVER_INFO_1A = _DRIVER_INFO_1A*;
alias LPDRIVER_INFO_1A = _DRIVER_INFO_1A*;

struct _DRIVER_INFO_1W
{
    LPWSTR pName;
}

alias DRIVER_INFO_1W = _DRIVER_INFO_1W;
alias PDRIVER_INFO_1W = _DRIVER_INFO_1W*;
alias LPDRIVER_INFO_1W = _DRIVER_INFO_1W*;

alias DRIVER_INFO_1 = _DRIVER_INFO_1A;
alias PDRIVER_INFO_1 = _DRIVER_INFO_1A*;
alias LPDRIVER_INFO_1 = _DRIVER_INFO_1A*;

struct _DRIVER_INFO_2A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
}

alias DRIVER_INFO_2A = _DRIVER_INFO_2A;
alias PDRIVER_INFO_2A = _DRIVER_INFO_2A*;
alias LPDRIVER_INFO_2A = _DRIVER_INFO_2A*;

struct _DRIVER_INFO_2W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
}

alias DRIVER_INFO_2W = _DRIVER_INFO_2W;
alias PDRIVER_INFO_2W = _DRIVER_INFO_2W*;
alias LPDRIVER_INFO_2W = _DRIVER_INFO_2W*;

alias DRIVER_INFO_2 = _DRIVER_INFO_2A;
alias PDRIVER_INFO_2 = _DRIVER_INFO_2A*;
alias LPDRIVER_INFO_2 = _DRIVER_INFO_2A*;

struct _DRIVER_INFO_3A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
}

alias DRIVER_INFO_3A = _DRIVER_INFO_3A;
alias PDRIVER_INFO_3A = _DRIVER_INFO_3A*;
alias LPDRIVER_INFO_3A = _DRIVER_INFO_3A*;

struct _DRIVER_INFO_3W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
}

alias DRIVER_INFO_3W = _DRIVER_INFO_3W;
alias PDRIVER_INFO_3W = _DRIVER_INFO_3W*;
alias LPDRIVER_INFO_3W = _DRIVER_INFO_3W*;

alias DRIVER_INFO_3 = _DRIVER_INFO_3A;
alias PDRIVER_INFO_3 = _DRIVER_INFO_3A*;
alias LPDRIVER_INFO_3 = _DRIVER_INFO_3A*;

struct _DRIVER_INFO_4A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
}

alias DRIVER_INFO_4A = _DRIVER_INFO_4A;
alias PDRIVER_INFO_4A = _DRIVER_INFO_4A*;
alias LPDRIVER_INFO_4A = _DRIVER_INFO_4A*;

struct _DRIVER_INFO_4W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
}

alias DRIVER_INFO_4W = _DRIVER_INFO_4W;
alias PDRIVER_INFO_4W = _DRIVER_INFO_4W*;
alias LPDRIVER_INFO_4W = _DRIVER_INFO_4W*;

alias DRIVER_INFO_4 = _DRIVER_INFO_4A;
alias PDRIVER_INFO_4 = _DRIVER_INFO_4A*;
alias LPDRIVER_INFO_4 = _DRIVER_INFO_4A*;

struct _DRIVER_INFO_5A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
}

alias DRIVER_INFO_5A = _DRIVER_INFO_5A;
alias PDRIVER_INFO_5A = _DRIVER_INFO_5A*;
alias LPDRIVER_INFO_5A = _DRIVER_INFO_5A*;

struct _DRIVER_INFO_5W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
}

alias DRIVER_INFO_5W = _DRIVER_INFO_5W;
alias PDRIVER_INFO_5W = _DRIVER_INFO_5W*;
alias LPDRIVER_INFO_5W = _DRIVER_INFO_5W*;

alias DRIVER_INFO_5 = _DRIVER_INFO_5A;
alias PDRIVER_INFO_5 = _DRIVER_INFO_5A*;
alias LPDRIVER_INFO_5 = _DRIVER_INFO_5A*;

struct _DRIVER_INFO_6A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
}

alias DRIVER_INFO_6A = _DRIVER_INFO_6A;
alias PDRIVER_INFO_6A = _DRIVER_INFO_6A*;
alias LPDRIVER_INFO_6A = _DRIVER_INFO_6A*;

struct _DRIVER_INFO_6W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
}

alias DRIVER_INFO_6W = _DRIVER_INFO_6W;
alias PDRIVER_INFO_6W = _DRIVER_INFO_6W*;
alias LPDRIVER_INFO_6W = _DRIVER_INFO_6W*;

alias DRIVER_INFO_6 = _DRIVER_INFO_6A;
alias PDRIVER_INFO_6 = _DRIVER_INFO_6A*;
alias LPDRIVER_INFO_6 = _DRIVER_INFO_6A*;

struct _DOC_INFO_1A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
}

alias DOC_INFO_1A = _DOC_INFO_1A;
alias PDOC_INFO_1A = _DOC_INFO_1A*;
alias LPDOC_INFO_1A = _DOC_INFO_1A*;

struct _DOC_INFO_1W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
}

alias DOC_INFO_1W = _DOC_INFO_1W;
alias PDOC_INFO_1W = _DOC_INFO_1W*;
alias LPDOC_INFO_1W = _DOC_INFO_1W*;

alias DOC_INFO_1 = _DOC_INFO_1A;
alias PDOC_INFO_1 = _DOC_INFO_1A*;
alias LPDOC_INFO_1 = _DOC_INFO_1A*;

struct _FORM_INFO_1A
{
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
}

alias FORM_INFO_1A = _FORM_INFO_1A;
alias PFORM_INFO_1A = _FORM_INFO_1A*;
alias LPFORM_INFO_1A = _FORM_INFO_1A*;

struct _FORM_INFO_1W
{
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
}

alias FORM_INFO_1W = _FORM_INFO_1W;
alias PFORM_INFO_1W = _FORM_INFO_1W*;
alias LPFORM_INFO_1W = _FORM_INFO_1W*;

alias FORM_INFO_1 = _FORM_INFO_1A;
alias PFORM_INFO_1 = _FORM_INFO_1A*;
alias LPFORM_INFO_1 = _FORM_INFO_1A*;

struct _DOC_INFO_2A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
}

alias DOC_INFO_2A = _DOC_INFO_2A;
alias PDOC_INFO_2A = _DOC_INFO_2A*;
alias LPDOC_INFO_2A = _DOC_INFO_2A*;

struct _DOC_INFO_2W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
}

alias DOC_INFO_2W = _DOC_INFO_2W;
alias PDOC_INFO_2W = _DOC_INFO_2W*;
alias LPDOC_INFO_2W = _DOC_INFO_2W*;

alias DOC_INFO_2 = _DOC_INFO_2A;
alias PDOC_INFO_2 = _DOC_INFO_2A*;
alias LPDOC_INFO_2 = _DOC_INFO_2A*;

struct _DOC_INFO_3A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
}

alias DOC_INFO_3A = _DOC_INFO_3A;
alias PDOC_INFO_3A = _DOC_INFO_3A*;
alias LPDOC_INFO_3A = _DOC_INFO_3A*;

struct _DOC_INFO_3W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
}

alias DOC_INFO_3W = _DOC_INFO_3W;
alias PDOC_INFO_3W = _DOC_INFO_3W*;
alias LPDOC_INFO_3W = _DOC_INFO_3W*;

alias DOC_INFO_3 = _DOC_INFO_3A;
alias PDOC_INFO_3 = _DOC_INFO_3A*;
alias LPDOC_INFO_3 = _DOC_INFO_3A*;

struct _PRINTPROCESSOR_INFO_1A
{
    LPSTR pName;
}

alias PRINTPROCESSOR_INFO_1A = _PRINTPROCESSOR_INFO_1A;
alias PPRINTPROCESSOR_INFO_1A = _PRINTPROCESSOR_INFO_1A*;
alias LPPRINTPROCESSOR_INFO_1A = _PRINTPROCESSOR_INFO_1A*;

struct _PRINTPROCESSOR_INFO_1W
{
    LPWSTR pName;
}

alias PRINTPROCESSOR_INFO_1W = _PRINTPROCESSOR_INFO_1W;
alias PPRINTPROCESSOR_INFO_1W = _PRINTPROCESSOR_INFO_1W*;
alias LPPRINTPROCESSOR_INFO_1W = _PRINTPROCESSOR_INFO_1W*;

alias PRINTPROCESSOR_INFO_1 = _PRINTPROCESSOR_INFO_1A;
alias PPRINTPROCESSOR_INFO_1 = _PRINTPROCESSOR_INFO_1A*;
alias LPPRINTPROCESSOR_INFO_1 = _PRINTPROCESSOR_INFO_1A*;

struct _PRINTPROCESSOR_CAPS_1
{
    DWORD dwLevel;
    DWORD dwNupOptions;
    DWORD dwPageOrderFlags;
    DWORD dwNumberOfCopies;
}

alias PRINTPROCESSOR_CAPS_1 = _PRINTPROCESSOR_CAPS_1;
alias PPRINTPROCESSOR_CAPS_1 = _PRINTPROCESSOR_CAPS_1*;

struct _PORT_INFO_1A
{
    LPSTR pName;
}

alias PORT_INFO_1A = _PORT_INFO_1A;
alias PPORT_INFO_1A = _PORT_INFO_1A*;
alias LPPORT_INFO_1A = _PORT_INFO_1A*;

struct _PORT_INFO_1W
{
    LPWSTR pName;
}

alias PORT_INFO_1W = _PORT_INFO_1W;
alias PPORT_INFO_1W = _PORT_INFO_1W*;
alias LPPORT_INFO_1W = _PORT_INFO_1W*;

alias PORT_INFO_1 = _PORT_INFO_1A;
alias PPORT_INFO_1 = _PORT_INFO_1A*;
alias LPPORT_INFO_1 = _PORT_INFO_1A*;

struct _PORT_INFO_2A
{
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
}

alias PORT_INFO_2A = _PORT_INFO_2A;
alias PPORT_INFO_2A = _PORT_INFO_2A*;
alias LPPORT_INFO_2A = _PORT_INFO_2A*;

struct _PORT_INFO_2W
{
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
}

alias PORT_INFO_2W = _PORT_INFO_2W;
alias PPORT_INFO_2W = _PORT_INFO_2W*;
alias LPPORT_INFO_2W = _PORT_INFO_2W*;

alias PORT_INFO_2 = _PORT_INFO_2A;
alias PPORT_INFO_2 = _PORT_INFO_2A*;
alias LPPORT_INFO_2 = _PORT_INFO_2A*;

struct _PORT_INFO_3A
{
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
}

alias PORT_INFO_3A = _PORT_INFO_3A;
alias PPORT_INFO_3A = _PORT_INFO_3A*;
alias LPPORT_INFO_3A = _PORT_INFO_3A*;

struct _PORT_INFO_3W
{
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
}

alias PORT_INFO_3W = _PORT_INFO_3W;
alias PPORT_INFO_3W = _PORT_INFO_3W*;
alias LPPORT_INFO_3W = _PORT_INFO_3W*;

alias PORT_INFO_3 = _PORT_INFO_3A;
alias PPORT_INFO_3 = _PORT_INFO_3A*;
alias LPPORT_INFO_3 = _PORT_INFO_3A*;

struct _MONITOR_INFO_1A
{
    LPSTR pName;
}

alias MONITOR_INFO_1A = _MONITOR_INFO_1A;
alias PMONITOR_INFO_1A = _MONITOR_INFO_1A*;
alias LPMONITOR_INFO_1A = _MONITOR_INFO_1A*;

struct _MONITOR_INFO_1W
{
    LPWSTR pName;
}

alias MONITOR_INFO_1W = _MONITOR_INFO_1W;
alias PMONITOR_INFO_1W = _MONITOR_INFO_1W*;
alias LPMONITOR_INFO_1W = _MONITOR_INFO_1W*;

alias MONITOR_INFO_1 = _MONITOR_INFO_1A;
alias PMONITOR_INFO_1 = _MONITOR_INFO_1A*;
alias LPMONITOR_INFO_1 = _MONITOR_INFO_1A*;

struct _MONITOR_INFO_2A
{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
}

alias MONITOR_INFO_2A = _MONITOR_INFO_2A;
alias PMONITOR_INFO_2A = _MONITOR_INFO_2A*;
alias LPMONITOR_INFO_2A = _MONITOR_INFO_2A*;

struct _MONITOR_INFO_2W
{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
}

alias MONITOR_INFO_2W = _MONITOR_INFO_2W;
alias PMONITOR_INFO_2W = _MONITOR_INFO_2W*;
alias LPMONITOR_INFO_2W = _MONITOR_INFO_2W*;

alias MONITOR_INFO_2 = _MONITOR_INFO_2A;
alias PMONITOR_INFO_2 = _MONITOR_INFO_2A*;
alias LPMONITOR_INFO_2 = _MONITOR_INFO_2A*;

struct _DATATYPES_INFO_1A
{
    LPSTR pName;
}

alias DATATYPES_INFO_1A = _DATATYPES_INFO_1A;
alias PDATATYPES_INFO_1A = _DATATYPES_INFO_1A*;
alias LPDATATYPES_INFO_1A = _DATATYPES_INFO_1A*;

struct _DATATYPES_INFO_1W
{
    LPWSTR pName;
}

alias DATATYPES_INFO_1W = _DATATYPES_INFO_1W;
alias PDATATYPES_INFO_1W = _DATATYPES_INFO_1W*;
alias LPDATATYPES_INFO_1W = _DATATYPES_INFO_1W*;

alias DATATYPES_INFO_1 = _DATATYPES_INFO_1A;
alias PDATATYPES_INFO_1 = _DATATYPES_INFO_1A*;
alias LPDATATYPES_INFO_1 = _DATATYPES_INFO_1A*;

struct _PRINTER_DEFAULTSA
{
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
}

alias PRINTER_DEFAULTSA = _PRINTER_DEFAULTSA;
alias PPRINTER_DEFAULTSA = _PRINTER_DEFAULTSA*;
alias LPPRINTER_DEFAULTSA = _PRINTER_DEFAULTSA*;

struct _PRINTER_DEFAULTSW
{
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
}

alias PRINTER_DEFAULTSW = _PRINTER_DEFAULTSW;
alias PPRINTER_DEFAULTSW = _PRINTER_DEFAULTSW*;
alias LPPRINTER_DEFAULTSW = _PRINTER_DEFAULTSW*;

alias PRINTER_DEFAULTS = _PRINTER_DEFAULTSA;
alias PPRINTER_DEFAULTS = _PRINTER_DEFAULTSA*;
alias LPPRINTER_DEFAULTS = _PRINTER_DEFAULTSA*;

struct _PRINTER_ENUM_VALUESA
{
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
}

alias PRINTER_ENUM_VALUESA = _PRINTER_ENUM_VALUESA;
alias PPRINTER_ENUM_VALUESA = _PRINTER_ENUM_VALUESA*;
alias LPPRINTER_ENUM_VALUESA = _PRINTER_ENUM_VALUESA*;

struct _PRINTER_ENUM_VALUESW
{
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
}

alias PRINTER_ENUM_VALUESW = _PRINTER_ENUM_VALUESW;
alias PPRINTER_ENUM_VALUESW = _PRINTER_ENUM_VALUESW*;
alias LPPRINTER_ENUM_VALUESW = _PRINTER_ENUM_VALUESW*;

alias PRINTER_ENUM_VALUES = _PRINTER_ENUM_VALUESA;
alias PPRINTER_ENUM_VALUES = _PRINTER_ENUM_VALUESA*;
alias LPPRINTER_ENUM_VALUES = _PRINTER_ENUM_VALUESA*;

WINBOOL EnumPrintersA (DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumPrintersW (DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);

WINBOOL OpenPrinterA (LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault);
WINBOOL OpenPrinterW (LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault);
WINBOOL ResetPrinterA (HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault);
WINBOOL ResetPrinterW (HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault);
WINBOOL SetJobA (HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command);
WINBOOL SetJobW (HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command);
WINBOOL GetJobA (HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetJobW (HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL EnumJobsA (HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumJobsW (HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
HANDLE AddPrinterA (LPSTR pName, DWORD Level, LPBYTE pPrinter);
HANDLE AddPrinterW (LPWSTR pName, DWORD Level, LPBYTE pPrinter);
WINBOOL DeletePrinter (HANDLE hPrinter);
WINBOOL SetPrinterA (HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command);
WINBOOL SetPrinterW (HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command);
WINBOOL GetPrinterA (HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetPrinterW (HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL AddPrinterDriverA (LPSTR pName, DWORD Level, LPBYTE pDriverInfo);
WINBOOL AddPrinterDriverW (LPWSTR pName, DWORD Level, LPBYTE pDriverInfo);
WINBOOL AddPrinterDriverExA (LPSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags);
WINBOOL AddPrinterDriverExW (LPWSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags);
WINBOOL EnumPrinterDriversA (LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumPrinterDriversW (LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL GetPrinterDriverA (HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetPrinterDriverW (HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetPrinterDriverDirectoryA (LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetPrinterDriverDirectoryW (LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL DeletePrinterDriverA (LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName);
WINBOOL DeletePrinterDriverW (LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName);
WINBOOL DeletePrinterDriverExA (LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag);
WINBOOL DeletePrinterDriverExW (LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag);
WINBOOL AddPrintProcessorA (LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName);
WINBOOL AddPrintProcessorW (LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName);
WINBOOL EnumPrintProcessorsA (LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumPrintProcessorsW (LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL GetPrintProcessorDirectoryA (LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetPrintProcessorDirectoryW (LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL EnumPrintProcessorDatatypesA (LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumPrintProcessorDatatypesW (LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL DeletePrintProcessorA (LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName);
WINBOOL DeletePrintProcessorW (LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName);
DWORD StartDocPrinterA (HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);
DWORD StartDocPrinterW (HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);
WINBOOL StartPagePrinter (HANDLE hPrinter);
WINBOOL WritePrinter (HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten);
WINBOOL FlushPrinter (HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep);
WINBOOL EndPagePrinter (HANDLE hPrinter);
WINBOOL AbortPrinter (HANDLE hPrinter);
WINBOOL ReadPrinter (HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead);
WINBOOL EndDocPrinter (HANDLE hPrinter);
WINBOOL AddJobA (HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL AddJobW (HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL ScheduleJob (HANDLE hPrinter, DWORD JobId);
WINBOOL PrinterProperties (HWND hWnd, HANDLE hPrinter);
LONG DocumentPropertiesA (HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode);
LONG DocumentPropertiesW (HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode);
LONG AdvancedDocumentPropertiesA (HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput);
LONG AdvancedDocumentPropertiesW (HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput);
LONG ExtDeviceMode (HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode);
DWORD GetPrinterDataA (HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD GetPrinterDataW (HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD GetPrinterDataExA (HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD GetPrinterDataExW (HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
DWORD EnumPrinterDataA (HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData);
DWORD EnumPrinterDataW (HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData);
DWORD EnumPrinterDataExA (HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues);
DWORD EnumPrinterDataExW (HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues);
DWORD EnumPrinterKeyA (HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey);
DWORD EnumPrinterKeyW (HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey);
DWORD SetPrinterDataA (HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
DWORD SetPrinterDataW (HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
DWORD SetPrinterDataExA (HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
DWORD SetPrinterDataExW (HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
DWORD DeletePrinterDataA (HANDLE hPrinter, LPSTR pValueName);
DWORD DeletePrinterDataW (HANDLE hPrinter, LPWSTR pValueName);
DWORD DeletePrinterDataExA (HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName);
DWORD DeletePrinterDataExW (HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName);
DWORD DeletePrinterKeyA (HANDLE hPrinter, LPCSTR pKeyName);
DWORD DeletePrinterKeyW (HANDLE hPrinter, LPCWSTR pKeyName);

struct _PRINTER_NOTIFY_OPTIONS_TYPE
{
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
}

alias PRINTER_NOTIFY_OPTIONS_TYPE = _PRINTER_NOTIFY_OPTIONS_TYPE;
alias PPRINTER_NOTIFY_OPTIONS_TYPE = _PRINTER_NOTIFY_OPTIONS_TYPE*;
alias LPPRINTER_NOTIFY_OPTIONS_TYPE = _PRINTER_NOTIFY_OPTIONS_TYPE*;

struct _PRINTER_NOTIFY_OPTIONS
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
}

alias PRINTER_NOTIFY_OPTIONS = _PRINTER_NOTIFY_OPTIONS;
alias PPRINTER_NOTIFY_OPTIONS = _PRINTER_NOTIFY_OPTIONS*;
alias LPPRINTER_NOTIFY_OPTIONS = _PRINTER_NOTIFY_OPTIONS*;

struct _PRINTER_NOTIFY_INFO_DATA
{
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;

    union _Anonymous_111
    {
        DWORD[2] adwData;

        struct _Anonymous_112
        {
            DWORD cbBuf;
            LPVOID pBuf;
        }

        _Anonymous_112 Data;
    }

    _Anonymous_111 NotifyData;
}

alias PRINTER_NOTIFY_INFO_DATA = _PRINTER_NOTIFY_INFO_DATA;
alias PPRINTER_NOTIFY_INFO_DATA = _PRINTER_NOTIFY_INFO_DATA*;
alias LPPRINTER_NOTIFY_INFO_DATA = _PRINTER_NOTIFY_INFO_DATA*;

struct _PRINTER_NOTIFY_INFO
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA[1] aData;
}

alias PRINTER_NOTIFY_INFO = _PRINTER_NOTIFY_INFO;
alias PPRINTER_NOTIFY_INFO = _PRINTER_NOTIFY_INFO*;
alias LPPRINTER_NOTIFY_INFO = _PRINTER_NOTIFY_INFO*;

struct _BINARY_CONTAINER
{
    DWORD cbBuf;
    LPBYTE pData;
}

alias BINARY_CONTAINER = _BINARY_CONTAINER;
alias PBINARY_CONTAINER = _BINARY_CONTAINER*;

struct _BIDI_DATA
{
    DWORD dwBidiType;

    union _Anonymous_113
    {
        WINBOOL bData;
        LONG iData;
        LPWSTR sData;
        FLOAT fData;
        BINARY_CONTAINER biData;
    }

    _Anonymous_113 u;
}

alias BIDI_DATA = _BIDI_DATA;
alias PBIDI_DATA = _BIDI_DATA*;
alias LPBIDI_DATA = _BIDI_DATA*;

struct _BIDI_REQUEST_DATA
{
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
}

alias BIDI_REQUEST_DATA = _BIDI_REQUEST_DATA;
alias PBIDI_REQUEST_DATA = _BIDI_REQUEST_DATA*;
alias LPBIDI_REQUEST_DATA = _BIDI_REQUEST_DATA*;

struct _BIDI_REQUEST_CONTAINER
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_REQUEST_DATA[1] aData;
}

alias BIDI_REQUEST_CONTAINER = _BIDI_REQUEST_CONTAINER;
alias PBIDI_REQUEST_CONTAINER = _BIDI_REQUEST_CONTAINER*;
alias LPBIDI_REQUEST_CONTAINER = _BIDI_REQUEST_CONTAINER*;

struct _BIDI_RESPONSE_DATA
{
    DWORD dwResult;
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
}

alias BIDI_RESPONSE_DATA = _BIDI_RESPONSE_DATA;
alias PBIDI_RESPONSE_DATA = _BIDI_RESPONSE_DATA*;
alias LPBIDI_RESPONSE_DATA = _BIDI_RESPONSE_DATA*;

struct _BIDI_RESPONSE_CONTAINER
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_RESPONSE_DATA[1] aData;
}

alias BIDI_RESPONSE_CONTAINER = _BIDI_RESPONSE_CONTAINER;
alias PBIDI_RESPONSE_CONTAINER = _BIDI_RESPONSE_CONTAINER*;
alias LPBIDI_RESPONSE_CONTAINER = _BIDI_RESPONSE_CONTAINER*;

enum BIDI_TYPE
{
    BIDI_NULL = 0,
    BIDI_INT = 1,
    BIDI_FLOAT = 2,
    BIDI_BOOL = 3,
    BIDI_STRING = 4,
    BIDI_TEXT = 5,
    BIDI_ENUM = 6,
    BIDI_BLOB = 7
}

DWORD WaitForPrinterChange (HANDLE hPrinter, DWORD Flags);
HANDLE FindFirstPrinterChangeNotification (HANDLE hPrinter, DWORD fdwFlags, DWORD fdwOptions, LPVOID pPrinterNotifyOptions);
WINBOOL FindNextPrinterChangeNotification (HANDLE hChange, PDWORD pdwChange, LPVOID pPrinterNotifyOptions, LPVOID* ppPrinterNotifyInfo);
WINBOOL FreePrinterNotifyInfo (PPRINTER_NOTIFY_INFO pPrinterNotifyInfo);
WINBOOL FindClosePrinterChangeNotification (HANDLE hChange);

DWORD PrinterMessageBoxA (HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType);
DWORD PrinterMessageBoxW (HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType);

WINBOOL ClosePrinter (HANDLE hPrinter);
WINBOOL AddFormA (HANDLE hPrinter, DWORD Level, LPBYTE pForm);
WINBOOL AddFormW (HANDLE hPrinter, DWORD Level, LPBYTE pForm);
WINBOOL DeleteFormA (HANDLE hPrinter, LPSTR pFormName);
WINBOOL DeleteFormW (HANDLE hPrinter, LPWSTR pFormName);
WINBOOL GetFormA (HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL GetFormW (HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);
WINBOOL SetFormA (HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm);
WINBOOL SetFormW (HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm);
WINBOOL EnumFormsA (HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumFormsW (HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumMonitorsA (LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumMonitorsW (LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL AddMonitorA (LPSTR pName, DWORD Level, LPBYTE pMonitorInfo);
WINBOOL AddMonitorW (LPWSTR pName, DWORD Level, LPBYTE pMonitorInfo);
WINBOOL DeleteMonitorA (LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName);
WINBOOL DeleteMonitorW (LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName);
WINBOOL EnumPortsA (LPSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL EnumPortsW (LPWSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
WINBOOL AddPortA (LPSTR pName, HWND hWnd, LPSTR pMonitorName);
WINBOOL AddPortW (LPWSTR pName, HWND hWnd, LPWSTR pMonitorName);
WINBOOL ConfigurePortA (LPSTR pName, HWND hWnd, LPSTR pPortName);
WINBOOL ConfigurePortW (LPWSTR pName, HWND hWnd, LPWSTR pPortName);
WINBOOL DeletePortA (LPSTR pName, HWND hWnd, LPSTR pPortName);
WINBOOL DeletePortW (LPWSTR pName, HWND hWnd, LPWSTR pPortName);
WINBOOL XcvDataW (HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus);

WINBOOL GetDefaultPrinterA (LPSTR pszBuffer, LPDWORD pcchBuffer);
WINBOOL GetDefaultPrinterW (LPWSTR pszBuffer, LPDWORD pcchBuffer);
WINBOOL SetDefaultPrinterA (LPCSTR pszPrinter);
WINBOOL SetDefaultPrinterW (LPCWSTR pszPrinter);
WINBOOL SetPortA (LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo);
WINBOOL SetPortW (LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo);
WINBOOL AddPrinterConnectionA (LPSTR pName);
WINBOOL AddPrinterConnectionW (LPWSTR pName);
WINBOOL DeletePrinterConnectionA (LPSTR pName);
WINBOOL DeletePrinterConnectionW (LPWSTR pName);
HANDLE ConnectToPrinterDlg (HWND hwnd, DWORD Flags);

struct _PROVIDOR_INFO_1A
{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
}

alias PROVIDOR_INFO_1A = _PROVIDOR_INFO_1A;
alias PPROVIDOR_INFO_1A = _PROVIDOR_INFO_1A*;
alias LPPROVIDOR_INFO_1A = _PROVIDOR_INFO_1A*;

struct _PROVIDOR_INFO_1W
{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
}

alias PROVIDOR_INFO_1W = _PROVIDOR_INFO_1W;
alias PPROVIDOR_INFO_1W = _PROVIDOR_INFO_1W*;
alias LPPROVIDOR_INFO_1W = _PROVIDOR_INFO_1W*;

alias PROVIDOR_INFO_1 = _PROVIDOR_INFO_1A;
alias PPROVIDOR_INFO_1 = _PROVIDOR_INFO_1A*;
alias LPPROVIDOR_INFO_1 = _PROVIDOR_INFO_1A*;

struct _PROVIDOR_INFO_2A
{
    LPSTR pOrder;
}

alias PROVIDOR_INFO_2A = _PROVIDOR_INFO_2A;
alias PPROVIDOR_INFO_2A = _PROVIDOR_INFO_2A*;
alias LPPROVIDOR_INFO_2A = _PROVIDOR_INFO_2A*;

struct _PROVIDOR_INFO_2W
{
    LPWSTR pOrder;
}

alias PROVIDOR_INFO_2W = _PROVIDOR_INFO_2W;
alias PPROVIDOR_INFO_2W = _PROVIDOR_INFO_2W*;
alias LPPROVIDOR_INFO_2W = _PROVIDOR_INFO_2W*;

alias PROVIDOR_INFO_2 = _PROVIDOR_INFO_2A;
alias PPROVIDOR_INFO_2 = _PROVIDOR_INFO_2A*;
alias LPPROVIDOR_INFO_2 = _PROVIDOR_INFO_2A*;

WINBOOL AddPrintProvidorA (LPSTR pName, DWORD level, LPBYTE pProvidorInfo);
WINBOOL AddPrintProvidorW (LPWSTR pName, DWORD level, LPBYTE pProvidorInfo);
WINBOOL DeletePrintProvidorA (LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName);
WINBOOL DeletePrintProvidorW (LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName);
WINBOOL IsValidDevmodeA (PDEVMODEA pDevmode, size_t DevmodeSize);
WINBOOL IsValidDevmodeW (PDEVMODEW pDevmode, size_t DevmodeSize);

extern __gshared const GUID IID_IPrintDialogCallback;
extern __gshared const GUID IID_IPrintDialogServices;

alias LPOFNHOOKPROC = ulong function (HWND, UINT, WPARAM, LPARAM);

struct tagOFN_NT4A
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
}

alias OPENFILENAME_NT4A = tagOFN_NT4A;
alias LPOPENFILENAME_NT4A = tagOFN_NT4A*;

struct tagOFN_NT4W
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
}

alias OPENFILENAME_NT4W = tagOFN_NT4W;
alias LPOPENFILENAME_NT4W = tagOFN_NT4W*;

alias OPENFILENAME_NT4 = tagOFN_NT4A;
alias LPOPENFILENAME_NT4 = tagOFN_NT4A*;

struct tagOFNA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    void* pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
}

alias OPENFILENAMEA = tagOFNA;
alias LPOPENFILENAMEA = tagOFNA*;

struct tagOFNW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    void* pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
}

alias OPENFILENAMEW = tagOFNW;
alias LPOPENFILENAMEW = tagOFNW*;

alias OPENFILENAME = tagOFNA;
alias LPOPENFILENAME = tagOFNA*;

WINBOOL GetOpenFileNameA (LPOPENFILENAMEA);
WINBOOL GetOpenFileNameW (LPOPENFILENAMEW);

WINBOOL GetSaveFileNameA (LPOPENFILENAMEA);
WINBOOL GetSaveFileNameW (LPOPENFILENAMEW);

short GetFileTitleA (LPCSTR, LPSTR, WORD);
short GetFileTitleW (LPCWSTR, LPWSTR, WORD);

alias LPCCHOOKPROC = ulong function (HWND, UINT, WPARAM, LPARAM);

struct _OFNOTIFYA
{
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPSTR pszFile;
}

alias OFNOTIFYA = _OFNOTIFYA;
alias LPOFNOTIFYA = _OFNOTIFYA*;

struct _OFNOTIFYW
{
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPWSTR pszFile;
}

alias OFNOTIFYW = _OFNOTIFYW;
alias LPOFNOTIFYW = _OFNOTIFYW*;

alias OFNOTIFY = _OFNOTIFYA;
alias LPOFNOTIFY = _OFNOTIFYA*;

struct _OFNOTIFYEXA
{
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPVOID psf;
    LPVOID pidl;
}

alias OFNOTIFYEXA = _OFNOTIFYEXA;
alias LPOFNOTIFYEXA = _OFNOTIFYEXA*;

struct _OFNOTIFYEXW
{
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPVOID psf;
    LPVOID pidl;
}

alias OFNOTIFYEXW = _OFNOTIFYEXW;
alias LPOFNOTIFYEXW = _OFNOTIFYEXW*;

alias OFNOTIFYEX = _OFNOTIFYEXA;
alias LPOFNOTIFYEX = _OFNOTIFYEXA*;

struct tagCHOOSECOLORA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF* lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
}

alias CHOOSECOLORA = tagCHOOSECOLORA;
alias LPCHOOSECOLORA = tagCHOOSECOLORA*;

struct tagCHOOSECOLORW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF* lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
}

alias CHOOSECOLORW = tagCHOOSECOLORW;
alias LPCHOOSECOLORW = tagCHOOSECOLORW*;

alias CHOOSECOLOR = tagCHOOSECOLORA;
alias LPCHOOSECOLOR = tagCHOOSECOLORA*;

WINBOOL ChooseColorA (LPCHOOSECOLORA);
WINBOOL ChooseColorW (LPCHOOSECOLORW);

alias LPFRHOOKPROC = ulong function (HWND, UINT, WPARAM, LPARAM);

struct tagFINDREPLACEA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPSTR lpstrFindWhat;
    LPSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
}

alias FINDREPLACEA = tagFINDREPLACEA;
alias LPFINDREPLACEA = tagFINDREPLACEA*;

struct tagFINDREPLACEW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPWSTR lpstrFindWhat;
    LPWSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
}

alias FINDREPLACEW = tagFINDREPLACEW;
alias LPFINDREPLACEW = tagFINDREPLACEW*;

alias FINDREPLACE = tagFINDREPLACEA;
alias LPFINDREPLACE = tagFINDREPLACEA*;

HWND FindTextA (LPFINDREPLACEA);
HWND FindTextW (LPFINDREPLACEW);

HWND ReplaceTextA (LPFINDREPLACEA);
HWND ReplaceTextW (LPFINDREPLACEW);

alias LPCFHOOKPROC = ulong function (HWND, UINT, WPARAM, LPARAM);

struct tagCHOOSEFONTA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTA lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    HINSTANCE hInstance;
    LPSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
}

alias CHOOSEFONTA = tagCHOOSEFONTA;
alias LPCHOOSEFONTA = tagCHOOSEFONTA*;

struct tagCHOOSEFONTW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTW lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    HINSTANCE hInstance;
    LPWSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
}

alias CHOOSEFONTW = tagCHOOSEFONTW;
alias LPCHOOSEFONTW = tagCHOOSEFONTW*;

alias CHOOSEFONT = tagCHOOSEFONTA;
alias LPCHOOSEFONT = tagCHOOSEFONTA*;

WINBOOL ChooseFontA (LPCHOOSEFONTA);
WINBOOL ChooseFontW (LPCHOOSEFONTW);

alias LPPRINTHOOKPROC = ulong function (HWND, UINT, WPARAM, LPARAM);
alias LPSETUPHOOKPROC = ulong function (HWND, UINT, WPARAM, LPARAM);

struct tagPDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCSTR lpPrintTemplateName;
    LPCSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
}

alias PRINTDLGA = tagPDA;
alias LPPRINTDLGA = tagPDA*;

struct tagPDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCWSTR lpPrintTemplateName;
    LPCWSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
}

alias PRINTDLGW = tagPDW;
alias LPPRINTDLGW = tagPDW*;

alias PRINTDLG = tagPDA;
alias LPPRINTDLG = tagPDA*;

WINBOOL PrintDlgA (LPPRINTDLGA);
WINBOOL PrintDlgW (LPPRINTDLGW);

struct IPrintDialogCallback
{
    IPrintDialogCallbackVtbl* lpVtbl;
}

struct IPrintDialogCallbackVtbl
{
    HRESULT function (IPrintDialogCallback* This, const IID* riid, LPVOID* ppvObj) QueryInterface;
    ULONG function (IPrintDialogCallback* This) AddRef;
    ULONG function (IPrintDialogCallback* This) Release;

    HRESULT function (IPrintDialogCallback* This) InitDone;
    HRESULT function (IPrintDialogCallback* This) SelectionChange;
    HRESULT function (IPrintDialogCallback* This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT* pResult) HandleMessage;
}

struct IPrintDialogServices
{
    IPrintDialogServicesVtbl* lpVtbl;
}

struct IPrintDialogServicesVtbl
{
    HRESULT function (IPrintDialogServices* This, const IID* riid, LPVOID* ppvObj) QueryInterface;
    ULONG function (IPrintDialogServices* This) AddRef;
    ULONG function (IPrintDialogServices* This) Release;

    HRESULT function (IPrintDialogServices* This, LPDEVMODE pDevMode, UINT* pcbSize) GetCurrentDevMode;
    HRESULT function (IPrintDialogServices* This, LPTSTR pPrinterName, UINT* pcchSize) GetCurrentPrinterName;
    HRESULT function (IPrintDialogServices* This, LPTSTR pPortName, UINT* pcchSize) GetCurrentPortName;
}

struct tagPRINTPAGERANGE
{
    DWORD nFromPage;
    DWORD nToPage;
}

alias PRINTPAGERANGE = tagPRINTPAGERANGE;
alias LPPRINTPAGERANGE = tagPRINTPAGERANGE*;

struct tagPDEXA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE* lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
}

alias PRINTDLGEXA = tagPDEXA;
alias LPPRINTDLGEXA = tagPDEXA*;

struct tagPDEXW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCWSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE* lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
}

alias PRINTDLGEXW = tagPDEXW;
alias LPPRINTDLGEXW = tagPDEXW*;

alias PRINTDLGEX = tagPDEXA;
alias LPPRINTDLGEX = tagPDEXA*;

HRESULT PrintDlgExA (LPPRINTDLGEXA);
HRESULT PrintDlgExW (LPPRINTDLGEXW);

struct tagDEVNAMES
{
    WORD wDriverOffset;
    WORD wDeviceOffset;
    WORD wOutputOffset;
    WORD wDefault;
}

alias DEVNAMES = tagDEVNAMES;
alias LPDEVNAMES = tagDEVNAMES*;

DWORD CommDlgExtendedError ();

alias LPPAGEPAINTHOOK = ulong function (HWND, UINT, WPARAM, LPARAM);
alias LPPAGESETUPHOOK = ulong function (HWND, UINT, WPARAM, LPARAM);

struct tagPSDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
}

alias PAGESETUPDLGA = tagPSDA;
alias LPPAGESETUPDLGA = tagPSDA*;

struct tagPSDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
}

alias PAGESETUPDLGW = tagPSDW;
alias LPPAGESETUPDLGW = tagPSDW*;

alias PAGESETUPDLG = tagPSDA;
alias LPPAGESETUPDLG = tagPSDA*;

WINBOOL PageSetupDlgA (LPPAGESETUPDLGA);
WINBOOL PageSetupDlgW (LPPAGESETUPDLGW);

LPUWSTR uaw_CharUpperW (LPUWSTR String);
int uaw_lstrcmpW (PCUWSTR String1, PCUWSTR String2);
int uaw_lstrcmpiW (PCUWSTR String1, PCUWSTR String2);
int uaw_lstrlenW (LPCUWSTR String);
PUWSTR uaw_wcschr (PCUWSTR String, WCHAR Character);
PUWSTR uaw_wcscpy (PUWSTR Destination, PCUWSTR Source);
int uaw_wcsicmp (PCUWSTR String1, PCUWSTR String2);
size_t uaw_wcslen (PCUWSTR String);
PUWSTR uaw_wcsrchr (PCUWSTR String, WCHAR Character);

LPUWSTR ua_CharUpperW (LPUWSTR String);

int ua_lstrcmpW (LPCUWSTR String1, LPCUWSTR String2);

int ua_lstrcmpiW (LPCUWSTR String1, LPCUWSTR String2);

int ua_lstrlenW (LPCUWSTR String);

alias PUWSTR_C = ushort*;

PUWSTR_C ua_wcschr (PCUWSTR String, WCHAR Character);
PUWSTR_C ua_wcsrchr (PCUWSTR String, WCHAR Character);

PUWSTR ua_wcscpy (PUWSTR Destination, PCUWSTR Source);
size_t ua_wcslen (PCUWSTR String);

int ua_wcsicmp (LPCUWSTR String1, LPCUWSTR String2);

struct _SERVICE_DESCRIPTIONA
{
    LPSTR lpDescription;
}

alias SERVICE_DESCRIPTIONA = _SERVICE_DESCRIPTIONA;
alias LPSERVICE_DESCRIPTIONA = _SERVICE_DESCRIPTIONA*;

struct _SERVICE_DESCRIPTIONW
{
    LPWSTR lpDescription;
}

alias SERVICE_DESCRIPTIONW = _SERVICE_DESCRIPTIONW;
alias LPSERVICE_DESCRIPTIONW = _SERVICE_DESCRIPTIONW*;

alias SERVICE_DESCRIPTION = _SERVICE_DESCRIPTIONA;
alias LPSERVICE_DESCRIPTION = _SERVICE_DESCRIPTIONA*;

enum _SC_ACTION_TYPE
{
    SC_ACTION_NONE = 0,
    SC_ACTION_RESTART = 1,
    SC_ACTION_REBOOT = 2,
    SC_ACTION_RUN_COMMAND = 3
}

alias SC_ACTION_TYPE = _SC_ACTION_TYPE;

struct _SC_ACTION
{
    SC_ACTION_TYPE Type;
    DWORD Delay;
}

alias SC_ACTION = _SC_ACTION;
alias LPSC_ACTION = _SC_ACTION*;

struct _SERVICE_FAILURE_ACTIONSA
{
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION* lpsaActions;
}

alias SERVICE_FAILURE_ACTIONSA = _SERVICE_FAILURE_ACTIONSA;
alias LPSERVICE_FAILURE_ACTIONSA = _SERVICE_FAILURE_ACTIONSA*;

struct _SERVICE_FAILURE_ACTIONSW
{
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION* lpsaActions;
}

alias SERVICE_FAILURE_ACTIONSW = _SERVICE_FAILURE_ACTIONSW;
alias LPSERVICE_FAILURE_ACTIONSW = _SERVICE_FAILURE_ACTIONSW*;

alias SERVICE_FAILURE_ACTIONS = _SERVICE_FAILURE_ACTIONSA;
alias LPSERVICE_FAILURE_ACTIONS = _SERVICE_FAILURE_ACTIONSA*;

struct SC_HANDLE__
{
    int unused;
}

alias SC_HANDLE = SC_HANDLE__*;
alias LPSC_HANDLE = SC_HANDLE__**;

struct SERVICE_STATUS_HANDLE__
{
    int unused;
}

alias SERVICE_STATUS_HANDLE = SERVICE_STATUS_HANDLE__*;

enum _SC_STATUS_TYPE
{
    SC_STATUS_PROCESS_INFO = 0
}

alias SC_STATUS_TYPE = _SC_STATUS_TYPE;

enum _SC_ENUM_TYPE
{
    SC_ENUM_PROCESS_INFO = 0
}

alias SC_ENUM_TYPE = _SC_ENUM_TYPE;

struct _SERVICE_STATUS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
}

alias SERVICE_STATUS = _SERVICE_STATUS;
alias LPSERVICE_STATUS = _SERVICE_STATUS*;

struct _SERVICE_STATUS_PROCESS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
}

alias SERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS;
alias LPSERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS*;

struct _ENUM_SERVICE_STATUSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
}

alias ENUM_SERVICE_STATUSA = _ENUM_SERVICE_STATUSA;
alias LPENUM_SERVICE_STATUSA = _ENUM_SERVICE_STATUSA*;

struct _ENUM_SERVICE_STATUSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
}

alias ENUM_SERVICE_STATUSW = _ENUM_SERVICE_STATUSW;
alias LPENUM_SERVICE_STATUSW = _ENUM_SERVICE_STATUSW*;

alias ENUM_SERVICE_STATUS = _ENUM_SERVICE_STATUSA;
alias LPENUM_SERVICE_STATUS = _ENUM_SERVICE_STATUSA*;

struct _ENUM_SERVICE_STATUS_PROCESSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
}

alias ENUM_SERVICE_STATUS_PROCESSA = _ENUM_SERVICE_STATUS_PROCESSA;
alias LPENUM_SERVICE_STATUS_PROCESSA = _ENUM_SERVICE_STATUS_PROCESSA*;

struct _ENUM_SERVICE_STATUS_PROCESSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
}

alias ENUM_SERVICE_STATUS_PROCESSW = _ENUM_SERVICE_STATUS_PROCESSW;
alias LPENUM_SERVICE_STATUS_PROCESSW = _ENUM_SERVICE_STATUS_PROCESSW*;

alias ENUM_SERVICE_STATUS_PROCESS = _ENUM_SERVICE_STATUS_PROCESSA;
alias LPENUM_SERVICE_STATUS_PROCESS = _ENUM_SERVICE_STATUS_PROCESSA*;

alias SC_LOCK = void*;

struct _QUERY_SERVICE_LOCK_STATUSA
{
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
}

alias QUERY_SERVICE_LOCK_STATUSA = _QUERY_SERVICE_LOCK_STATUSA;
alias LPQUERY_SERVICE_LOCK_STATUSA = _QUERY_SERVICE_LOCK_STATUSA*;

struct _QUERY_SERVICE_LOCK_STATUSW
{
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
}

alias QUERY_SERVICE_LOCK_STATUSW = _QUERY_SERVICE_LOCK_STATUSW;
alias LPQUERY_SERVICE_LOCK_STATUSW = _QUERY_SERVICE_LOCK_STATUSW*;

alias QUERY_SERVICE_LOCK_STATUS = _QUERY_SERVICE_LOCK_STATUSA;
alias LPQUERY_SERVICE_LOCK_STATUS = _QUERY_SERVICE_LOCK_STATUSA*;

struct _QUERY_SERVICE_CONFIGA
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
}

alias QUERY_SERVICE_CONFIGA = _QUERY_SERVICE_CONFIGA;
alias LPQUERY_SERVICE_CONFIGA = _QUERY_SERVICE_CONFIGA*;

struct _QUERY_SERVICE_CONFIGW
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
}

alias QUERY_SERVICE_CONFIGW = _QUERY_SERVICE_CONFIGW;
alias LPQUERY_SERVICE_CONFIGW = _QUERY_SERVICE_CONFIGW*;

alias QUERY_SERVICE_CONFIG = _QUERY_SERVICE_CONFIGA;
alias LPQUERY_SERVICE_CONFIG = _QUERY_SERVICE_CONFIGA*;

alias LPSERVICE_MAIN_FUNCTIONW = void function (DWORD dwNumServicesArgs, LPWSTR* lpServiceArgVectors);
alias LPSERVICE_MAIN_FUNCTIONA = void function (DWORD dwNumServicesArgs, LPSTR* lpServiceArgVectors);

struct _SERVICE_TABLE_ENTRYA
{
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}

alias SERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA;
alias LPSERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA*;

struct _SERVICE_TABLE_ENTRYW
{
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}

alias SERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW;
alias LPSERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW*;

alias SERVICE_TABLE_ENTRY = _SERVICE_TABLE_ENTRYA;
alias LPSERVICE_TABLE_ENTRY = _SERVICE_TABLE_ENTRYA*;

alias LPHANDLER_FUNCTION = void function (DWORD dwControl);
alias LPHANDLER_FUNCTION_EX = c_ulong function (DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext);

WINBOOL ChangeServiceConfigA (SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName);
WINBOOL ChangeServiceConfigW (SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName);
WINBOOL ChangeServiceConfig2A (SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo);
WINBOOL ChangeServiceConfig2W (SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo);
WINBOOL CloseServiceHandle (SC_HANDLE hSCObject);
WINBOOL ControlService (SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus);
SC_HANDLE CreateServiceA (SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword);
SC_HANDLE CreateServiceW (SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword);
WINBOOL DeleteService (SC_HANDLE hService);
WINBOOL EnumDependentServicesA (SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned);
WINBOOL EnumDependentServicesW (SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned);
WINBOOL EnumServicesStatusA (SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle);
WINBOOL EnumServicesStatusW (SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle);
WINBOOL EnumServicesStatusExA (SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName);
WINBOOL EnumServicesStatusExW (SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName);
WINBOOL GetServiceKeyNameA (SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer);
WINBOOL GetServiceKeyNameW (SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer);
WINBOOL GetServiceDisplayNameA (SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer);
WINBOOL GetServiceDisplayNameW (SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer);
SC_LOCK LockServiceDatabase (SC_HANDLE hSCManager);
WINBOOL NotifyBootConfigStatus (WINBOOL BootAcceptable);
SC_HANDLE OpenSCManagerA (LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess);
SC_HANDLE OpenSCManagerW (LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess);
SC_HANDLE OpenServiceA (SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess);
SC_HANDLE OpenServiceW (SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess);
WINBOOL QueryServiceConfigA (SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceConfigW (SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceConfig2A (SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceConfig2W (SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceLockStatusA (SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceLockStatusW (SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceObjectSecurity (SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
WINBOOL QueryServiceStatus (SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus);
WINBOOL QueryServiceStatusEx (SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA (LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc);
SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW (LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc);
SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA (LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext);
SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW (LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext);
WINBOOL SetServiceObjectSecurity (SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor);
WINBOOL SetServiceStatus (SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus);
WINBOOL StartServiceCtrlDispatcherA (const(SERVICE_TABLE_ENTRYA)* lpServiceStartTable);
WINBOOL StartServiceCtrlDispatcherW (const(SERVICE_TABLE_ENTRYW)* lpServiceStartTable);
WINBOOL StartServiceA (SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR* lpServiceArgVectors);
WINBOOL StartServiceW (SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR* lpServiceArgVectors);
WINBOOL UnlockServiceDatabase (SC_LOCK ScLock);

struct _MODEMDEVCAPS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;
    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;
    BYTE[1] abVariablePortion;
}

alias MODEMDEVCAPS = _MODEMDEVCAPS;
alias PMODEMDEVCAPS = _MODEMDEVCAPS*;
alias LPMODEMDEVCAPS = _MODEMDEVCAPS*;

struct _MODEMSETTINGS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;
    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;
    BYTE[1] abVariablePortion;
}

alias MODEMSETTINGS = _MODEMSETTINGS;
alias PMODEMSETTINGS = _MODEMSETTINGS*;
alias LPMODEMSETTINGS = _MODEMSETTINGS*;

struct HIMC__
{
    int unused;
}

alias HIMC = HIMC__*;

struct HIMCC__
{
    int unused;
}

alias HIMCC = HIMCC__*;

alias LPHKL = HKL__**;

struct tagCOMPOSITIONFORM
{
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
}

alias COMPOSITIONFORM = tagCOMPOSITIONFORM;
alias PCOMPOSITIONFORM = tagCOMPOSITIONFORM*;
alias NPCOMPOSITIONFORM = tagCOMPOSITIONFORM*;
alias LPCOMPOSITIONFORM = tagCOMPOSITIONFORM*;

struct tagCANDIDATEFORM
{
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
}

alias CANDIDATEFORM = tagCANDIDATEFORM;
alias PCANDIDATEFORM = tagCANDIDATEFORM*;
alias NPCANDIDATEFORM = tagCANDIDATEFORM*;
alias LPCANDIDATEFORM = tagCANDIDATEFORM*;

struct tagCANDIDATELIST
{
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD[1] dwOffset;
}

alias CANDIDATELIST = tagCANDIDATELIST;
alias PCANDIDATELIST = tagCANDIDATELIST*;
alias NPCANDIDATELIST = tagCANDIDATELIST*;
alias LPCANDIDATELIST = tagCANDIDATELIST*;

struct tagREGISTERWORDA
{
    LPSTR lpReading;
    LPSTR lpWord;
}

alias REGISTERWORDA = tagREGISTERWORDA;
alias PREGISTERWORDA = tagREGISTERWORDA*;
alias NPREGISTERWORDA = tagREGISTERWORDA*;
alias LPREGISTERWORDA = tagREGISTERWORDA*;

struct tagREGISTERWORDW
{
    LPWSTR lpReading;
    LPWSTR lpWord;
}

alias REGISTERWORDW = tagREGISTERWORDW;
alias PREGISTERWORDW = tagREGISTERWORDW*;
alias NPREGISTERWORDW = tagREGISTERWORDW*;
alias LPREGISTERWORDW = tagREGISTERWORDW*;

alias REGISTERWORD = tagREGISTERWORDA;
alias PREGISTERWORD = tagREGISTERWORDA*;
alias NPREGISTERWORD = tagREGISTERWORDA*;
alias LPREGISTERWORD = tagREGISTERWORDA*;

struct tagRECONVERTSTRING
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
}

alias RECONVERTSTRING = tagRECONVERTSTRING;
alias PRECONVERTSTRING = tagRECONVERTSTRING*;
alias NPRECONVERTSTRING = tagRECONVERTSTRING*;
alias LPRECONVERTSTRING = tagRECONVERTSTRING*;

struct tagSTYLEBUFA
{
    DWORD dwStyle;
    CHAR[32] szDescription;
}

alias STYLEBUFA = tagSTYLEBUFA;
alias PSTYLEBUFA = tagSTYLEBUFA*;
alias NPSTYLEBUFA = tagSTYLEBUFA*;
alias LPSTYLEBUFA = tagSTYLEBUFA*;

struct tagSTYLEBUFW
{
    DWORD dwStyle;
    WCHAR[32] szDescription;
}

alias STYLEBUFW = tagSTYLEBUFW;
alias PSTYLEBUFW = tagSTYLEBUFW*;
alias NPSTYLEBUFW = tagSTYLEBUFW*;
alias LPSTYLEBUFW = tagSTYLEBUFW*;

alias STYLEBUF = tagSTYLEBUFA;
alias PSTYLEBUF = tagSTYLEBUFA*;
alias NPSTYLEBUF = tagSTYLEBUFA*;
alias LPSTYLEBUF = tagSTYLEBUFA*;

struct tagIMEMENUITEMINFOA
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR[80] szString;
    HBITMAP hbmpItem;
}

alias IMEMENUITEMINFOA = tagIMEMENUITEMINFOA;
alias PIMEMENUITEMINFOA = tagIMEMENUITEMINFOA*;
alias NPIMEMENUITEMINFOA = tagIMEMENUITEMINFOA*;
alias LPIMEMENUITEMINFOA = tagIMEMENUITEMINFOA*;

struct tagIMEMENUITEMINFOW
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR[80] szString;
    HBITMAP hbmpItem;
}

alias IMEMENUITEMINFOW = tagIMEMENUITEMINFOW;
alias PIMEMENUITEMINFOW = tagIMEMENUITEMINFOW*;
alias NPIMEMENUITEMINFOW = tagIMEMENUITEMINFOW*;
alias LPIMEMENUITEMINFOW = tagIMEMENUITEMINFOW*;

alias IMEMENUITEMINFO = tagIMEMENUITEMINFOA;
alias PIMEMENUITEMINFO = tagIMEMENUITEMINFOA*;
alias NPIMEMENUITEMINFO = tagIMEMENUITEMINFOA*;
alias LPIMEMENUITEMINFO = tagIMEMENUITEMINFOA*;

struct tagIMECHARPOSITION
{
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
}

alias IMECHARPOSITION = tagIMECHARPOSITION;
alias PIMECHARPOSITION = tagIMECHARPOSITION*;
alias NPIMECHARPOSITION = tagIMECHARPOSITION*;
alias LPIMECHARPOSITION = tagIMECHARPOSITION*;

alias IMCENUMPROC = int function (HIMC, LPARAM);

HKL ImmInstallIMEA (LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL ImmInstallIMEW (LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);
HWND ImmGetDefaultIMEWnd (HWND);
UINT ImmGetDescriptionA (HKL, LPSTR, UINT uBufLen);
UINT ImmGetDescriptionW (HKL, LPWSTR, UINT uBufLen);
UINT ImmGetIMEFileNameA (HKL, LPSTR, UINT uBufLen);
UINT ImmGetIMEFileNameW (HKL, LPWSTR, UINT uBufLen);
DWORD ImmGetProperty (HKL, DWORD);
WINBOOL ImmIsIME (HKL);
WINBOOL ImmSimulateHotKey (HWND, DWORD);
HIMC ImmCreateContext ();
WINBOOL ImmDestroyContext (HIMC);
HIMC ImmGetContext (HWND);
WINBOOL ImmReleaseContext (HWND, HIMC);
HIMC ImmAssociateContext (HWND, HIMC);
WINBOOL ImmAssociateContextEx (HWND, HIMC, DWORD);
LONG ImmGetCompositionStringA (HIMC, DWORD, LPVOID, DWORD);
LONG ImmGetCompositionStringW (HIMC, DWORD, LPVOID, DWORD);
WINBOOL ImmSetCompositionStringA (HIMC, DWORD dwIndex, LPVOID lpComp, DWORD, LPVOID lpRead, DWORD);
WINBOOL ImmSetCompositionStringW (HIMC, DWORD dwIndex, LPVOID lpComp, DWORD, LPVOID lpRead, DWORD);
DWORD ImmGetCandidateListCountA (HIMC, LPDWORD lpdwListCount);
DWORD ImmGetCandidateListCountW (HIMC, LPDWORD lpdwListCount);
DWORD ImmGetCandidateListA (HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);
DWORD ImmGetCandidateListW (HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);
DWORD ImmGetGuideLineA (HIMC, DWORD dwIndex, LPSTR, DWORD dwBufLen);
DWORD ImmGetGuideLineW (HIMC, DWORD dwIndex, LPWSTR, DWORD dwBufLen);
WINBOOL ImmGetConversionStatus (HIMC, LPDWORD, LPDWORD);
WINBOOL ImmSetConversionStatus (HIMC, DWORD, DWORD);
WINBOOL ImmGetOpenStatus (HIMC);
WINBOOL ImmSetOpenStatus (HIMC, WINBOOL);

WINBOOL ImmGetCompositionFontA (HIMC, LPLOGFONTA);
WINBOOL ImmGetCompositionFontW (HIMC, LPLOGFONTW);
WINBOOL ImmSetCompositionFontA (HIMC, LPLOGFONTA);
WINBOOL ImmSetCompositionFontW (HIMC, LPLOGFONTW);

alias REGISTERWORDENUMPROCA = int function (LPCSTR, DWORD, LPCSTR, LPVOID);
alias REGISTERWORDENUMPROCW = int function (LPCWSTR, DWORD, LPCWSTR, LPVOID);

WINBOOL ImmConfigureIMEA (HKL, HWND, DWORD, LPVOID);
WINBOOL ImmConfigureIMEW (HKL, HWND, DWORD, LPVOID);
LRESULT ImmEscapeA (HKL, HIMC, UINT, LPVOID);
LRESULT ImmEscapeW (HKL, HIMC, UINT, LPVOID);
DWORD ImmGetConversionListA (HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);
DWORD ImmGetConversionListW (HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);
WINBOOL ImmNotifyIME (HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);
WINBOOL ImmGetStatusWindowPos (HIMC, LPPOINT);
WINBOOL ImmSetStatusWindowPos (HIMC, LPPOINT);
WINBOOL ImmGetCompositionWindow (HIMC, LPCOMPOSITIONFORM);
WINBOOL ImmSetCompositionWindow (HIMC, LPCOMPOSITIONFORM);
WINBOOL ImmGetCandidateWindow (HIMC, DWORD, LPCANDIDATEFORM);
WINBOOL ImmSetCandidateWindow (HIMC, LPCANDIDATEFORM);
WINBOOL ImmIsUIMessageA (HWND, UINT, WPARAM, LPARAM);
WINBOOL ImmIsUIMessageW (HWND, UINT, WPARAM, LPARAM);
UINT ImmGetVirtualKey (HWND);
WINBOOL ImmRegisterWordA (HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
WINBOOL ImmRegisterWordW (HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);
WINBOOL ImmUnregisterWordA (HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
WINBOOL ImmUnregisterWordW (HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);
UINT ImmGetRegisterWordStyleA (HKL, UINT nItem, LPSTYLEBUFA);
UINT ImmGetRegisterWordStyleW (HKL, UINT nItem, LPSTYLEBUFW);
UINT ImmEnumRegisterWordA (HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT ImmEnumRegisterWordW (HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);
WINBOOL ImmDisableIME (DWORD);
WINBOOL ImmEnumInputContext (DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD ImmGetImeMenuItemsA (HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA, LPIMEMENUITEMINFOA, DWORD);
DWORD ImmGetImeMenuItemsW (HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW, LPIMEMENUITEMINFOW, DWORD);
WINBOOL ImmDisableTextFrameService (DWORD idThread);

const(char)* __mingw_get_crt_info ();
 
alias c_long = int;
alias c_ulong = uint;

pthreadlocinfo __updatetlocinfo ();
pthreadmbcinfo __updatetmbcinfo ();

int _isctype (int _C, int _Type);
int _isctype_l (int _C, int _Type, _locale_t _Locale);
int isalpha (int _C);
int _isalpha_l (int _C, _locale_t _Locale);
int isupper (int _C);
int _isupper_l (int _C, _locale_t _Locale);
int islower (int _C);
int _islower_l (int _C, _locale_t _Locale);
int isdigit (int _C);
int _isdigit_l (int _C, _locale_t _Locale);
int isxdigit (int _C);
int _isxdigit_l (int _C, _locale_t _Locale);
int isspace (int _C);
int _isspace_l (int _C, _locale_t _Locale);
int ispunct (int _C);
int _ispunct_l (int _C, _locale_t _Locale);
int isalnum (int _C);
int _isalnum_l (int _C, _locale_t _Locale);
int isprint (int _C);
int _isprint_l (int _C, _locale_t _Locale);
int isgraph (int _C);
int _isgraph_l (int _C, _locale_t _Locale);
int iscntrl (int _C);
int _iscntrl_l (int _C, _locale_t _Locale);
int toupper (int _C);
int tolower (int _C);
int _tolower (int _C);
int _tolower_l (int _C, _locale_t _Locale);
int _toupper (int _C);
int _toupper_l (int _C, _locale_t _Locale);
int __isascii (int _C);
int __toascii (int _C);
int __iscsymf (int _C);
int __iscsym (int _C);

int isblank (int _C);

int iswalpha (wint_t _C);
int _iswalpha_l (wint_t _C, _locale_t _Locale);
int iswupper (wint_t _C);
int _iswupper_l (wint_t _C, _locale_t _Locale);
int iswlower (wint_t _C);
int _iswlower_l (wint_t _C, _locale_t _Locale);
int iswdigit (wint_t _C);
int _iswdigit_l (wint_t _C, _locale_t _Locale);
int iswxdigit (wint_t _C);
int _iswxdigit_l (wint_t _C, _locale_t _Locale);
int iswspace (wint_t _C);
int _iswspace_l (wint_t _C, _locale_t _Locale);
int iswpunct (wint_t _C);
int _iswpunct_l (wint_t _C, _locale_t _Locale);
int iswalnum (wint_t _C);
int _iswalnum_l (wint_t _C, _locale_t _Locale);
int iswprint (wint_t _C);
int _iswprint_l (wint_t _C, _locale_t _Locale);
int iswgraph (wint_t _C);
int _iswgraph_l (wint_t _C, _locale_t _Locale);
int iswcntrl (wint_t _C);
int _iswcntrl_l (wint_t _C, _locale_t _Locale);
int iswascii (wint_t _C);
int isleadbyte (int _C);
int _isleadbyte_l (int _C, _locale_t _Locale);
wint_t towupper (wint_t _C);
wint_t _towupper_l (wint_t _C, _locale_t _Locale);
wint_t towlower (wint_t _C);
wint_t _towlower_l (wint_t _C, _locale_t _Locale);
int iswctype (wint_t _C, wctype_t _Type);
int _iswctype_l (wint_t _C, wctype_t _Type, _locale_t _Locale);
int __iswcsymf (wint_t _C);
int _iswcsymf_l (wint_t _C, _locale_t _Locale);
int __iswcsym (wint_t _C);
int _iswcsym_l (wint_t _C, _locale_t _Locale);
int is_wctype (wint_t _C, wctype_t _Type);

int iswblank (wint_t _C);

int ___mb_cur_max_func ();

c_ulong _exception_code ();
void* _exception_info ();
int _abnormal_termination ();


int __CppXcptFilter (c_ulong _ExceptionNum, _EXCEPTION_POINTERS* _ExceptionPtr);
int _XcptFilter (c_ulong _ExceptionNum, _EXCEPTION_POINTERS* _ExceptionPtr);



ubyte _rotl8 (ubyte Value, ubyte Shift);
ushort _rotl16 (ushort Value, ubyte Shift);
ubyte _rotr8 (ubyte Value, ubyte Shift);
ushort _rotr16 (ushort Value, ubyte Shift);

uint _rotl (uint Value, int Shift);
uint _rotr (uint Value, int Shift);

ulong _rotl64 (ulong Value, int Shift);
ulong _rotr64 (ulong Value, int Shift);

void* _memccpy (void* _Dst, const(void)* _Src, int _Val, size_t _MaxCount);
void* memchr (const(void)* _Buf, int _Val, size_t _MaxCount);
int _memicmp (const(void)* _Buf1, const(void)* _Buf2, size_t _Size);
int _memicmp_l (const(void)* _Buf1, const(void)* _Buf2, size_t _Size, _locale_t _Locale);
int memcmp (const(void)* _Buf1, const(void)* _Buf2, size_t _Size);
void* memcpy (void* _Dst, const(void)* _Src, size_t _Size);
errno_t memcpy_s (void* _dest, size_t _numberOfElements, const(void)* _src, size_t _count);
void* mempcpy (void* _Dst, const(void)* _Src, size_t _Size);
void* memset (void* _Dst, int _Val, size_t _Size);

void* memccpy (void* _Dst, const(void)* _Src, int _Val, size_t _Size);
int memicmp (const(void)* _Buf1, const(void)* _Buf2, size_t _Size);

char* _strset (char* _Str, int _Val);
char* _strset_l (char* _Str, int _Val, _locale_t _Locale);
char* strcpy (char* _Dest, const(char)* _Source);
char* strcat (char* _Dest, const(char)* _Source);
int strcmp (const(char)* _Str1, const(char)* _Str2);
ulong strlen (const(char)* _Str);
size_t strnlen (const(char)* _Str, size_t _MaxCount);
void* memmove (void* _Dst, const(void)* _Src, size_t _Size);
char* _strdup (const(char)* _Src);
char* strchr (const(char)* _Str, int _Val);
int _stricmp (const(char)* _Str1, const(char)* _Str2);
int _strcmpi (const(char)* _Str1, const(char)* _Str2);
int _stricmp_l (const(char)* _Str1, const(char)* _Str2, _locale_t _Locale);
int strcoll (const(char)* _Str1, const(char)* _Str2);
int _strcoll_l (const(char)* _Str1, const(char)* _Str2, _locale_t _Locale);
int _stricoll (const(char)* _Str1, const(char)* _Str2);
int _stricoll_l (const(char)* _Str1, const(char)* _Str2, _locale_t _Locale);
int _strncoll (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strncoll_l (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount, _locale_t _Locale);
int _strnicoll (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strnicoll_l (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount, _locale_t _Locale);
ulong strcspn (const(char)* _Str, const(char)* _Control);
char* _strerror (const(char)* _ErrMsg);
char* strerror (int);
char* _strlwr (char* _String);
char* strlwr_l (char* _String, _locale_t _Locale);
char* strncat (char* _Dest, const(char)* _Source, size_t _Count);
int strncmp (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strnicmp (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount);
int _strnicmp_l (const(char)* _Str1, const(char)* _Str2, size_t _MaxCount, _locale_t _Locale);
char* strncpy (char* _Dest, const(char)* _Source, size_t _Count);
char* _strnset (char* _Str, int _Val, size_t _MaxCount);
char* _strnset_l (char* str, int c, size_t count, _locale_t _Locale);
char* strpbrk (const(char)* _Str, const(char)* _Control);
char* strrchr (const(char)* _Str, int _Ch);
char* _strrev (char* _Str);
ulong strspn (const(char)* _Str, const(char)* _Control);
char* strstr (const(char)* _Str, const(char)* _SubStr);
char* strtok (char* _Str, const(char)* _Delim);

char* strtok_r (char* _Str, const(char)* _Delim, char** __last);

char* _strupr (char* _String);
char* _strupr_l (char* _String, _locale_t _Locale);
ulong strxfrm (char* _Dst, const(char)* _Src, size_t _MaxCount);
size_t _strxfrm_l (char* _Dst, const(char)* _Src, size_t _MaxCount, _locale_t _Locale);

char* strdup (const(char)* _Src);
int strcmpi (const(char)* _Str1, const(char)* _Str2);
int stricmp (const(char)* _Str1, const(char)* _Str2);
char* strlwr (char* _Str);
int strnicmp (const(char)* _Str1, const(char)* _Str, size_t _MaxCount);
int strncasecmp (const(char)*, const(char)*, size_t);
int strcasecmp (const(char)*, const(char)*);

char* strnset (char* _Str, int _Val, size_t _MaxCount);
char* strrev (char* _Str);
char* strset (char* _Str, int _Val);
char* strupr (char* _Str);

wchar* _wcsdup (const(wchar)* _Str);
wchar* wcscat (wchar* _Dest, const(wchar)* _Source);
ushort* wcschr (const(wchar)* _Str, wchar _Ch);
int wcscmp (const(wchar)* _Str1, const(wchar)* _Str2);
wchar* wcscpy (wchar* _Dest, const(wchar)* _Source);
size_t wcscspn (const(wchar)* _Str, const(wchar)* _Control);
ulong wcslen (const(wchar)* _Str);
size_t wcsnlen (const(wchar)* _Src, size_t _MaxCount);
wchar* wcsncat (wchar* _Dest, const(wchar)* _Source, size_t _Count);
int wcsncmp (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
wchar* wcsncpy (wchar* _Dest, const(wchar)* _Source, size_t _Count);
wchar* _wcsncpy_l (wchar* _Dest, const(wchar)* _Source, size_t _Count, _locale_t _Locale);
wchar* wcspbrk (const(wchar)* _Str, const(wchar)* _Control);
wchar* wcsrchr (const(wchar)* _Str, wchar _Ch);
size_t wcsspn (const(wchar)* _Str, const(wchar)* _Control);
wchar* wcsstr (const(wchar)* _Str, const(wchar)* _SubStr);
wchar* wcstok (wchar* _Str, const(wchar)* _Delim);
wchar* _wcserror (int _ErrNum);
wchar* __wcserror (const(wchar)* _Str);
int _wcsicmp (const(wchar)* _Str1, const(wchar)* _Str2);
int _wcsicmp_l (const(wchar)* _Str1, const(wchar)* _Str2, _locale_t _Locale);
int _wcsnicmp (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
int _wcsnicmp_l (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount, _locale_t _Locale);
wchar* _wcsnset (wchar* _Str, wchar _Val, size_t _MaxCount);
wchar* _wcsrev (wchar* _Str);
wchar* _wcsset (wchar* _Str, wchar _Val);
wchar* _wcslwr (wchar* _String);
wchar* _wcslwr_l (wchar* _String, _locale_t _Locale);
wchar* _wcsupr (wchar* _String);
wchar* _wcsupr_l (wchar* _String, _locale_t _Locale);
size_t wcsxfrm (wchar* _Dst, const(wchar)* _Src, size_t _MaxCount);
size_t _wcsxfrm_l (wchar* _Dst, const(wchar)* _Src, size_t _MaxCount, _locale_t _Locale);
int wcscoll (const(wchar)* _Str1, const(wchar)* _Str2);
int _wcscoll_l (const(wchar)* _Str1, const(wchar)* _Str2, _locale_t _Locale);
int _wcsicoll (const(wchar)* _Str1, const(wchar)* _Str2);
int _wcsicoll_l (const(wchar)* _Str1, const(wchar)* _Str2, _locale_t _Locale);
int _wcsncoll (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
int _wcsncoll_l (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount, _locale_t _Locale);
int _wcsnicoll (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
int _wcsnicoll_l (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount, _locale_t _Locale);

wchar* wcsdup (const(wchar)* _Str);

int wcsicmp (const(wchar)* _Str1, const(wchar)* _Str2);
int wcsnicmp (const(wchar)* _Str1, const(wchar)* _Str2, size_t _MaxCount);
wchar* wcsnset (wchar* _Str, wchar _Val, size_t _MaxCount);
wchar* wcsrev (wchar* _Str);
wchar* wcsset (wchar* _Str, wchar _Val);
wchar* wcslwr (wchar* _Str);
wchar* wcsupr (wchar* _Str);
int wcsicoll (const(wchar)* _Str1, const(wchar)* _Str2);

errno_t _strset_s (char* _Dst, size_t _DstSize, int _Value);
errno_t _strerror_s (char* _Buf, size_t _SizeInBytes, const(char)* _ErrMsg);
errno_t strerror_s (char* _Buf, size_t _SizeInBytes, int _ErrNum);
errno_t _strlwr_s (char* _Str, size_t _Size);
errno_t _strlwr_s_l (char* _Str, size_t _Size, _locale_t _Locale);
errno_t _strnset_s (char* _Str, size_t _Size, int _Val, size_t _MaxCount);
errno_t _strupr_s (char* _Str, size_t _Size);
errno_t _strupr_s_l (char* _Str, size_t _Size, _locale_t _Locale);

errno_t strncat_s (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount);
errno_t _strncat_s_l (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount, _locale_t _Locale);
errno_t strcpy_s (char* _Dst, rsize_t _SizeInBytes, const(char)* _Src);

errno_t strncpy_s (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount);

errno_t _strncpy_s_l (char* _Dst, size_t _DstSizeInChars, const(char)* _Src, size_t _MaxCount, _locale_t _Locale);

char* strtok_s (char* _Str, const(char)* _Delim, char** _Context);
char* _strtok_s_l (char* _Str, const(char)* _Delim, char** _Context, _locale_t _Locale);
errno_t strcat_s (char* _Dst, rsize_t _SizeInBytes, const(char)* _Src);

errno_t memmove_s (void* _dest, size_t _numberOfElements, const(void)* _src, size_t _count);

wchar* wcstok_s (wchar* _Str, const(wchar)* _Delim, wchar** _Context);
errno_t _wcserror_s (wchar* _Buf, size_t _SizeInWords, int _ErrNum);
errno_t __wcserror_s (wchar* _Buffer, size_t _SizeInWords, const(wchar)* _ErrMsg);
errno_t _wcsnset_s (wchar* _Dst, size_t _DstSizeInWords, wchar _Val, size_t _MaxCount);
errno_t _wcsset_s (wchar* _Str, size_t _SizeInWords, wchar _Val);
errno_t _wcslwr_s (wchar* _Str, size_t _SizeInWords);
errno_t _wcslwr_s_l (wchar* _Str, size_t _SizeInWords, _locale_t _Locale);
errno_t _wcsupr_s (wchar* _Str, size_t _Size);
errno_t _wcsupr_s_l (wchar* _Str, size_t _Size, _locale_t _Locale);

errno_t wcscpy_s (wchar* _Dst, rsize_t _SizeInWords, const(wchar)* _Src);

errno_t wcscat_s (wchar* _Dst, rsize_t _SizeInWords, const(wchar)* _Src);

errno_t wcsncat_s (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount);
errno_t _wcsncat_s_l (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount, _locale_t _Locale);
errno_t wcsncpy_s (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount);

errno_t _wcsncpy_s_l (wchar* _Dst, size_t _DstSizeInChars, const(wchar)* _Src, size_t _MaxCount, _locale_t _Locale);

wchar* _wcstok_s_l (wchar* _Str, const(wchar)* _Delim, wchar** _Context, _locale_t _Locale);
errno_t _wcsset_s_l (wchar* _Str, size_t _SizeInChars, uint _Val, _locale_t _Locale);
errno_t _wcsnset_s_l (wchar* _Str, size_t _SizeInChars, uint _Val, size_t _Count, _locale_t _Locale);


_purecall_handler _set_purecall_handler (_purecall_handler _Handler);
_purecall_handler _get_purecall_handler ();

_invalid_parameter_handler _set_invalid_parameter_handler (_invalid_parameter_handler _Handler);
_invalid_parameter_handler _get_invalid_parameter_handler ();

int* _errno ();

errno_t _set_errno (int _Value);
errno_t _get_errno (int* _Value);

c_ulong* __doserrno ();

errno_t _set_doserrno (c_ulong _Value);
errno_t _get_doserrno (c_ulong* _Value);

char*** __p___argv ();
int* __p__fmode ();

errno_t _get_pgmptr (char** _Value);
errno_t _get_wpgmptr (wchar** _Value);
errno_t _set_fmode (int _Mode);
errno_t _get_fmode (int* _PMode);

errno_t _get_osplatform (uint* _Value);
errno_t _get_osver (uint* _Value);
errno_t _get_winver (uint* _Value);
errno_t _get_winmajor (uint* _Value);
errno_t _get_winminor (uint* _Value);

void exit (int _Code);
void _exit (int _Code);

void _Exit (int);

void abort ();

uint _set_abort_behavior (uint _Flags, uint _Mask);

int abs (int _X);
c_long labs (c_long _X);

long _abs64 (long);

int atexit (void function ());

double atof (const(char)* _String);
double _atof_l (const(char)* _String, _locale_t _Locale);

int atoi (const(char)* _Str);
int _atoi_l (const(char)* _Str, _locale_t _Locale);
c_long atol (const(char)* _Str);
c_long _atol_l (const(char)* _Str, _locale_t _Locale);

void* bsearch (const(void)* _Key, const(void)* _Base, size_t _NumOfElements, size_t _SizeOfElements, int function (const(void)*, const(void)*) _PtFuncCompare);
void qsort (void* _Base, size_t _NumOfElements, size_t _SizeOfElements, int function (const(void)*, const(void)*) _PtFuncCompare);

ushort _byteswap_ushort (ushort _Short);
c_ulong _byteswap_ulong (c_ulong _Long);
ulong _byteswap_uint64 (ulong _Int64);
div_t div (int _Numerator, int _Denominator);
char* getenv (const(char)* _VarName);
char* _itoa (int _Value, char* _Dest, int _Radix);
char* _i64toa (long _Val, char* _DstBuf, int _Radix);
char* _ui64toa (ulong _Val, char* _DstBuf, int _Radix);
long _atoi64 (const(char)* _String);
long _atoi64_l (const(char)* _String, _locale_t _Locale);
long _strtoi64 (const(char)* _String, char** _EndPtr, int _Radix);
long _strtoi64_l (const(char)* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
ulong _strtoui64 (const(char)* _String, char** _EndPtr, int _Radix);
ulong _strtoui64_l (const(char)* _String, char** _EndPtr, int _Radix, _locale_t _Locale);
ldiv_t ldiv (c_long _Numerator, c_long _Denominator);
char* _ltoa (c_long _Value, char* _Dest, int _Radix);
int mblen (const(char)* _Ch, size_t _MaxCount);
int _mblen_l (const(char)* _Ch, size_t _MaxCount, _locale_t _Locale);
size_t _mbstrlen (const(char)* _Str);
size_t _mbstrlen_l (const(char)* _Str, _locale_t _Locale);
size_t _mbstrnlen (const(char)* _Str, size_t _MaxCount);
size_t _mbstrnlen_l (const(char)* _Str, size_t _MaxCount, _locale_t _Locale);
int mbtowc (wchar* _DstCh, const(char)* _SrcCh, size_t _SrcSizeInBytes);
int _mbtowc_l (wchar* _DstCh, const(char)* _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
size_t mbstowcs (wchar* _Dest, const(char)* _Source, size_t _MaxCount);
size_t _mbstowcs_l (wchar* _Dest, const(char)* _Source, size_t _MaxCount, _locale_t _Locale);
int mkstemp (char* template_name);
int rand ();
int _set_error_mode (int _Mode);
void srand (uint _Seed);

double strtod (const(char)* _Str, char** _EndPtr);
float strtof (const(char)* nptr, char** endptr);

real strtold (const(char)*, char**);

double __strtod (const(char)*, char**);

float __mingw_strtof (const(char)*, char**);
double __mingw_strtod (const(char)*, char**);
real __mingw_strtold (const(char)*, char**);

double _strtod_l (const(char)* _Str, char** _EndPtr, _locale_t _Locale);
c_long strtol (const(char)* _Str, char** _EndPtr, int _Radix);
c_long _strtol_l (const(char)* _Str, char** _EndPtr, int _Radix, _locale_t _Locale);
c_ulong strtoul (const(char)* _Str, char** _EndPtr, int _Radix);
c_ulong _strtoul_l (const(char)* _Str, char** _EndPtr, int _Radix, _locale_t _Locale);

int system (const(char)* _Command);

char* _ultoa (c_ulong _Value, char* _Dest, int _Radix);
int wctomb (char* _MbCh, wchar _WCh);
int _wctomb_l (char* _MbCh, wchar _WCh, _locale_t _Locale);
size_t wcstombs (char* _Dest, const(wchar)* _Source, size_t _MaxCount);
size_t _wcstombs_l (char* _Dest, const(wchar)* _Source, size_t _MaxCount, _locale_t _Locale);

void* calloc (size_t _NumOfElements, size_t _SizeOfElements);
void free (void* _Memory);
void* malloc (size_t _Size);
void* realloc (void* _Memory, size_t _NewSize);
void* _recalloc (void* _Memory, size_t _Count, size_t _Size);

void _aligned_free (void* _Memory);
void* _aligned_malloc (size_t _Size, size_t _Alignment);

void* _aligned_offset_malloc (size_t _Size, size_t _Alignment, size_t _Offset);
void* _aligned_realloc (void* _Memory, size_t _Size, size_t _Alignment);
void* _aligned_recalloc (void* _Memory, size_t _Count, size_t _Size, size_t _Alignment);
void* _aligned_offset_realloc (void* _Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void* _aligned_offset_recalloc (void* _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);

wchar* _itow (int _Value, wchar* _Dest, int _Radix);
wchar* _ltow (c_long _Value, wchar* _Dest, int _Radix);
wchar* _ultow (c_ulong _Value, wchar* _Dest, int _Radix);

double __mingw_wcstod (const(wchar)* _Str, wchar** _EndPtr);
float __mingw_wcstof (const(wchar)* nptr, wchar** endptr);
real __mingw_wcstold (const(wchar)*, wchar**);

double wcstod (const(wchar)* _Str, wchar** _EndPtr);
float wcstof (const(wchar)* nptr, wchar** endptr);

real wcstold (const(wchar)*, wchar**);

double _wcstod_l (const(wchar)* _Str, wchar** _EndPtr, _locale_t _Locale);
c_long wcstol (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
c_long _wcstol_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);
c_ulong wcstoul (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
c_ulong _wcstoul_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);
wchar* _wgetenv (const(wchar)* _VarName);

int _wsystem (const(wchar)* _Command);

double _wtof (const(wchar)* _Str);
double _wtof_l (const(wchar)* _Str, _locale_t _Locale);
int _wtoi (const(wchar)* _Str);
int _wtoi_l (const(wchar)* _Str, _locale_t _Locale);
c_long _wtol (const(wchar)* _Str);
c_long _wtol_l (const(wchar)* _Str, _locale_t _Locale);

wchar* _i64tow (long _Val, wchar* _DstBuf, int _Radix);
wchar* _ui64tow (ulong _Val, wchar* _DstBuf, int _Radix);
long _wtoi64 (const(wchar)* _Str);
long _wtoi64_l (const(wchar)* _Str, _locale_t _Locale);
long _wcstoi64 (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
long _wcstoi64_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);
ulong _wcstoui64 (const(wchar)* _Str, wchar** _EndPtr, int _Radix);
ulong _wcstoui64_l (const(wchar)* _Str, wchar** _EndPtr, int _Radix, _locale_t _Locale);

int _putenv (const(char)* _EnvString);
int _wputenv (const(wchar)* _EnvString);

char* _fullpath (char* _FullPath, const(char)* _Path, size_t _SizeInBytes);
char* _ecvt (double _Val, int _NumOfDigits, int* _PtDec, int* _PtSign);
char* _fcvt (double _Val, int _NumOfDec, int* _PtDec, int* _PtSign);
char* _gcvt (double _Val, int _NumOfDigits, char* _DstBuf);
int _atodbl (_CRT_DOUBLE* _Result, char* _Str);
int _atoldbl (_LDOUBLE* _Result, char* _Str);
int _atoflt (_CRT_FLOAT* _Result, char* _Str);
int _atodbl_l (_CRT_DOUBLE* _Result, char* _Str, _locale_t _Locale);
int _atoldbl_l (_LDOUBLE* _Result, char* _Str, _locale_t _Locale);
int _atoflt_l (_CRT_FLOAT* _Result, char* _Str, _locale_t _Locale);

c_ulong _lrotl (c_ulong, int);
c_ulong _lrotr (c_ulong, int);

void _makepath (char* _Path, const(char)* _Drive, const(char)* _Dir, const(char)* _Filename, const(char)* _Ext);
_onexit_t _onexit (_onexit_t _Func);

void perror (const(char)* _ErrMsg);

ulong _rotl64 (ulong _Val, int _Shift);
ulong _rotr64 (ulong Value, int Shift);

uint _rotr (uint _Val, int _Shift);
uint _rotl (uint _Val, int _Shift);

ulong _rotr64 (ulong _Val, int _Shift);
void _searchenv (const(char)* _Filename, const(char)* _EnvVar, char* _ResultPath);
void _splitpath (const(char)* _FullPath, char* _Drive, char* _Dir, char* _Filename, char* _Ext);
void _swab (char* _Buf1, char* _Buf2, int _SizeInBytes);

wchar* _wfullpath (wchar* _FullPath, const(wchar)* _Path, size_t _SizeInWords);
void _wmakepath (wchar* _ResultPath, const(wchar)* _Drive, const(wchar)* _Dir, const(wchar)* _Filename, const(wchar)* _Ext);

void _wperror (const(wchar)* _ErrMsg);

void _wsearchenv (const(wchar)* _Filename, const(wchar)* _EnvVar, wchar* _ResultPath);
void _wsplitpath (const(wchar)* _FullPath, wchar* _Drive, wchar* _Dir, wchar* _Filename, wchar* _Ext);

void _beep (uint _Frequency, uint _Duration);

void _seterrormode (int _Mode);
void _sleep (c_ulong _Duration);

char* ecvt (double _Val, int _NumOfDigits, int* _PtDec, int* _PtSign);
char* fcvt (double _Val, int _NumOfDec, int* _PtDec, int* _PtSign);
char* gcvt (double _Val, int _NumOfDigits, char* _DstBuf);
char* itoa (int _Val, char* _DstBuf, int _Radix);
char* ltoa (c_long _Val, char* _DstBuf, int _Radix);
int putenv (const(char)* _EnvString);

void swab (char* _Buf1, char* _Buf2, int _SizeInBytes);

char* ultoa (c_ulong _Val, char* _Dstbuf, int _Radix);
_onexit_t onexit (_onexit_t _Func);

lldiv_t lldiv (long, long);

long llabs (long);

long strtoll (const(char)*, char**, int);
ulong strtoull (const(char)*, char**, int);

long atoll (const(char)*);

long wtoll (const(wchar)*);
char* lltoa (long, char*, int);
char* ulltoa (ulong, char*, int);
wchar* lltow (long, wchar*, int);
wchar* ulltow (ulong, wchar*, int);

errno_t _dupenv_s (char** _PBuffer, size_t* _PBufferSizeInBytes, const(char)* _VarName);
errno_t _itoa_s (int _Value, char* _DstBuf, size_t _Size, int _Radix);

errno_t _i64toa_s (long _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t _ui64toa_s (ulong _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t _ltoa_s (c_long _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t mbstowcs_s (size_t* _PtNumOfCharConverted, wchar* _DstBuf, size_t _SizeInWords, const(char)* _SrcBuf, size_t _MaxCount);
errno_t _mbstowcs_s_l (size_t* _PtNumOfCharConverted, wchar* _DstBuf, size_t _SizeInWords, const(char)* _SrcBuf, size_t _MaxCount, _locale_t _Locale);
errno_t _ultoa_s (c_ulong _Val, char* _DstBuf, size_t _Size, int _Radix);
errno_t _wctomb_s_l (int* _SizeConverted, char* _MbCh, size_t _SizeInBytes, wchar _WCh, _locale_t _Locale);
errno_t wcstombs_s (size_t* _PtNumOfCharConverted, char* _Dst, size_t _DstSizeInBytes, const(wchar)* _Src, size_t _MaxCountInBytes);
errno_t _wcstombs_s_l (size_t* _PtNumOfCharConverted, char* _Dst, size_t _DstSizeInBytes, const(wchar)* _Src, size_t _MaxCountInBytes, _locale_t _Locale);

errno_t _itow_s (int _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _ltow_s (c_long _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _ultow_s (c_ulong _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _wgetenv_s (size_t* _ReturnSize, wchar* _DstBuf, size_t _DstSizeInWords, const(wchar)* _VarName);
errno_t _wdupenv_s (wchar** _Buffer, size_t* _BufferSizeInWords, const(wchar)* _VarName);
errno_t _i64tow_s (long _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);
errno_t _ui64tow_s (ulong _Val, wchar* _DstBuf, size_t _SizeInWords, int _Radix);

errno_t _ecvt_s (char* _DstBuf, size_t _Size, double _Val, int _NumOfDights, int* _PtDec, int* _PtSign);
errno_t _fcvt_s (char* _DstBuf, size_t _Size, double _Val, int _NumOfDec, int* _PtDec, int* _PtSign);
errno_t _gcvt_s (char* _DstBuf, size_t _Size, double _Val, int _NumOfDigits);
errno_t _makepath_s (char* _PathResult, size_t _Size, const(char)* _Drive, const(char)* _Dir, const(char)* _Filename, const(char)* _Ext);
errno_t _putenv_s (const(char)* _Name, const(char)* _Value);
errno_t _searchenv_s (const(char)* _Filename, const(char)* _EnvVar, char* _ResultPath, size_t _SizeInBytes);

errno_t _splitpath_s (const(char)* _FullPath, char* _Drive, size_t _DriveSize, char* _Dir, size_t _DirSize, char* _Filename, size_t _FilenameSize, char* _Ext, size_t _ExtSize);

errno_t _wmakepath_s (wchar* _PathResult, size_t _SizeInWords, const(wchar)* _Drive, const(wchar)* _Dir, const(wchar)* _Filename, const(wchar)* _Ext);
errno_t _wputenv_s (const(wchar)* _Name, const(wchar)* _Value);
errno_t _wsearchenv_s (const(wchar)* _Filename, const(wchar)* _EnvVar, wchar* _ResultPath, size_t _SizeInWords);

errno_t _wsplitpath_s (const(wchar)* _FullPath, wchar* _Drive, size_t _DriveSizeInWords, wchar* _Dir, size_t _DirSizeInWords, wchar* _Filename, size_t _FilenameSizeInWords, wchar* _Ext, size_t _ExtSizeInWords);

void qsort_s (void* _Base, size_t _NumOfElements, size_t _SizeOfElements, int function (void*, const(void)*, const(void)*) _PtFuncCompare, void* _Context);

void* __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void* _Memory);
void* __mingw_aligned_offset_realloc (void* _Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void* __mingw_aligned_realloc (void* _Memory, size_t _Size, size_t _Offset);

int _resetstkoflw ();
c_ulong _set_malloc_crt_max_wait (c_ulong _NewValue);

void* _expand (void* _Memory, size_t _NewSize);
size_t _msize (void* _Memory);

void* _alloca (size_t _Size);

size_t _get_sbh_threshold ();
int _set_sbh_threshold (size_t _NewValue);
errno_t _set_amblksiz (size_t _Value);
errno_t _get_amblksiz (size_t* _Value);
int _heapadd (void* _Memory, size_t _Size);
int _heapchk ();
int _heapmin ();
int _heapset (uint _Fill);
int _heapwalk (_HEAPINFO* _EntryInfo);
size_t _heapused (size_t* _Used, size_t* _Commit);
intptr_t _get_heap_handle ();

uint __getcallerseflags ();

DWORD __segmentlimit (DWORD Selector);

long __mulh (LONGLONG Multiplier, LONGLONG Multiplicand);
ulong __umulh (ULONGLONG Multiplier, ULONGLONG Multiplicand);

ulong __shiftleft128 (DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);
ulong __shiftright128 (DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);

long _mul128 (LONG64 Multiplier, LONG64 Multiplicand, LONG64* HighProduct);

ulong _umul128 (DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64* HighProduct);

LONG64 MultiplyExtract128 (LONG64 Multiplier, LONG64 Multiplicand, BYTE Shift);
DWORD64 UnsignedMultiplyExtract128 (DWORD64 Multiplier, DWORD64 Multiplicand, BYTE Shift);


WORD RtlCaptureStackBackTrace (DWORD FramesToSkip, DWORD FramesToCapture, PVOID* BackTrace, PDWORD BackTraceHash);
void RtlCaptureContext (PCONTEXT ContextRecord);
SIZE_T RtlCompareMemory (const(void)* Source1, const(void)* Source2, SIZE_T Length);

BOOLEAN RtlAddFunctionTable (PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress);
BOOLEAN RtlDeleteFunctionTable (PRUNTIME_FUNCTION FunctionTable);
BOOLEAN RtlInstallFunctionTableCallback (DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll);
void RtlRestoreContext (PCONTEXT ContextRecord, _EXCEPTION_RECORD* ExceptionRecord);
PEXCEPTION_ROUTINE RtlVirtualUnwind (DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID* HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers);

void RtlUnwind (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
PVOID RtlPcToFileHeader (PVOID PcValue, PVOID* BaseOfImage);

PRUNTIME_FUNCTION RtlLookupFunctionEntry (DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable);
void RtlUnwindEx (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable);

void RtlInitializeSListHead (PSLIST_HEADER ListHead);
PSLIST_ENTRY RtlFirstEntrySList (const(SLIST_HEADER)* ListHead);
PSLIST_ENTRY RtlInterlockedPopEntrySList (PSLIST_HEADER ListHead);
PSLIST_ENTRY RtlInterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
PSLIST_ENTRY RtlInterlockedPushListSListEx (PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count);
PSLIST_ENTRY RtlInterlockedFlushSList (PSLIST_HEADER ListHead);
WORD RtlQueryDepthSList (PSLIST_HEADER ListHead);


ULONGLONG VerSetConditionMask (ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);

void RtlApplicationVerifierStop (ULONG_PTR Code, PSTR Message, ULONG_PTR Param1, PSTR Description1, ULONG_PTR Param2, PSTR Description2, ULONG_PTR Param3, PSTR Description3, ULONG_PTR Param4, PSTR Description4);
DWORD RtlSetHeapInformation (PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
DWORD RtlQueryHeapInformation (PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
DWORD RtlMultipleAllocateHeap (PVOID HeapHandle, DWORD Flags, SIZE_T Size, DWORD Count, PVOID* Array);
DWORD RtlMultipleFreeHeap (PVOID HeapHandle, DWORD Flags, DWORD Count, PVOID* Array);

WINBOOL VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);

SIZE_T VirtualQuery (LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
WINBOOL FlushViewOfFile (LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
WINBOOL UnmapViewOfFile (LPCVOID lpBaseAddress);
HANDLE CreateFileMappingFromApp (HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name);
PVOID MapViewOfFileFromApp (HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap);

WINBOOL VirtualProtect (LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);

LPVOID VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
LPVOID VirtualAllocEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
WINBOOL VirtualFreeEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
WINBOOL VirtualProtectEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
SIZE_T VirtualQueryEx (HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
WINBOOL ReadProcessMemory (HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesRead);
WINBOOL WriteProcessMemory (HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesWritten);
HANDLE CreateFileMappingW (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
HANDLE OpenFileMappingW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
LPVOID MapViewOfFile (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
LPVOID MapViewOfFileEx (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
SIZE_T GetLargePageMinimum ();
WINBOOL GetProcessWorkingSetSizeEx (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
WINBOOL SetProcessWorkingSetSizeEx (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
WINBOOL VirtualLock (LPVOID lpAddress, SIZE_T dwSize);
WINBOOL VirtualUnlock (LPVOID lpAddress, SIZE_T dwSize);
UINT GetWriteWatch (DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID* lpAddresses, ULONG_PTR* lpdwCount, LPDWORD lpdwGranularity);
UINT ResetWriteWatch (LPVOID lpBaseAddress, SIZE_T dwRegionSize);
HANDLE CreateMemoryResourceNotification (MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
WINBOOL QueryMemoryResourceNotification (HANDLE ResourceNotificationHandle, PBOOL ResourceState);
WINBOOL GetSystemFileCacheSize (PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
WINBOOL SetSystemFileCacheSize (SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);

alias DOUBLE = double;